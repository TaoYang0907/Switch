###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               29/Jul/2020  20:16:03
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_tlCommissioning.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWB9E3.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\bdb\bdb_tlCommissioning.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List\bdb_tlCommissioning.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj\bdb_tlCommissioning.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_tlCommissioning.c
      1          /**************************************************************************************************
      2            Filename:       bdb_tlCommissioning.c
      3            Revised:        $Date: 2013-09-10 17:57:03 -0700 (Tue, 10 Sep 2013) $
      4            Revision:       $Revision: 35271 $
      5          
      6            Description:    Zigbee Cluster Library - Light Link commissioning cluster.
      7          
      8          
      9            Copyright 2011-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "zcl.h"
     45          #include "zcl_general.h"
     46          #include "bdb_tlCommissioning.h"
     47          #include "bdb.h"
     48          #include "bdb_interface.h"
     49          #include "bdb_touchlink.h"
     50          
     51          #include "stub_aps.h"
     52          
     53          #if defined ( BDB_TL_TARGET ) || defined ( BDB_TL_INITIATOR )
     54             
     55          /*********************************************************************
     56           * MACROS
     57           */
     58          
     59          /*********************************************************************
     60           * CONSTANTS
     61           */
     62          
     63          /*********************************************************************
     64           * TYPEDEFS
     65           */
     66          
     67          typedef struct bdbTLCBRec
     68          {
     69            struct bdbTLCBRec     *next;
     70            uint8 endpoint;               // Used to link it into the endpoint descriptor
     71            bdbTL_AppCallbacks_t  *CBs;   // Pointer to Callback function
     72          } bdbTLCBRec_t;
     73          
     74          /*********************************************************************
     75           * GLOBAL VARIABLES
     76           */
     77          
     78          /*********************************************************************
     79           * GLOBAL FUNCTIONS
     80           */
     81          
     82          /*********************************************************************
     83           * LOCAL VARIABLES
     84           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          static bdbTLCBRec_t *bdbTLCBs = (bdbTLCBRec_t *)NULL;
   \                     bdbTLCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          static uint8 bdbTLPluginRegisted = FALSE;
   \                     bdbTLPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     87          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          static bdbTL_InterPANCallbacks_t *pInterPANCBs = (bdbTL_InterPANCallbacks_t *)NULL;
   \                     pInterPANCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     89          
     90          /*********************************************************************
     91           * LOCAL FUNCTIONS
     92           */
     93          
     94          static ZStatus_t bdbTL_SendInterPANCommand( uint8 srcEP, afAddrType_t *destAddr, uint8 cmd,
     95                                                      uint8 direction, uint8 seqNum, uint16 cmdFormatLen, 
     96                                                      uint8 *cmdFormat );
     97          static bdbTL_AppCallbacks_t *bdbTL_FindCallbacks( uint8 endpoint );
     98          static ZStatus_t bdbTL_HdlIncoming( zclIncoming_t *pInMsg );
     99          static ZStatus_t bdbTL_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    100          static ZStatus_t bdbTL_ProcessInLLCmds( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    101          
    102          static ZStatus_t bdbTL_ProcessInCmd_GetGrpIDsReq( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    103          static ZStatus_t bdbTL_ProcessInCmd_GetEPListReq( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    104          
    105          static ZStatus_t bdbTL_ProcessInCmd_EndpointInfo( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    106          static ZStatus_t bdbTL_ProcessInCmd_GetGrpIDsRsp( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    107          static ZStatus_t bdbTL_ProcessInCmd_GetEPListRsp( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    108          
    109          static ZStatus_t bdbTL_HdlInInterPANCommands( zclIncoming_t *pInMsg );
    110          static ZStatus_t bdbTL_ProcessInLLInterPANCmds( zclIncoming_t *pInMsg );
    111          
    112          static void bdbTL_ParseInCmd_NwkJoinReq( uint8 *pBuf, bdbTLNwkJoinReq_t *pReq );
    113          
    114          static ZStatus_t bdbTL_ProcessInCmd_ScanReq( zclIncoming_t *pInMsg );
    115          static ZStatus_t bdbTL_ProcessInCmd_DeviceInfoReq( zclIncoming_t *pInMsg );
    116          static ZStatus_t bdbTL_ProcessInCmd_IdentifyReq( zclIncoming_t *pInMsg );
    117          static ZStatus_t bdbTL_ProcessInCmd_ResetToFNReq( zclIncoming_t *pInMsg );
    118          static ZStatus_t bdbTL_ProcessInCmd_NwkStartReq( zclIncoming_t *pInMsg );
    119          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinRtrReq( zclIncoming_t *pInMsg );
    120          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinEDReq( zclIncoming_t *pInMsg );
    121          static ZStatus_t bdbTL_ProcessInCmd_NwkUpdateReq( zclIncoming_t *pInMsg );
    122          
    123          static ZStatus_t bdbTL_ProcessInCmd_ScanRsp( zclIncoming_t *pInMsg );
    124          static ZStatus_t bdbTL_ProcessInCmd_DeviceInfoRsp( zclIncoming_t *pInMsg );
    125          static ZStatus_t bdbTL_ProcessInCmd_NwkStartRsp( zclIncoming_t *pInMsg );
    126          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinRtrRsp( zclIncoming_t *pInMsg );
    127          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinEDRsp( zclIncoming_t *pInMsg );
    128          
    129          
    130          /*********************************************************************
    131           * @fn      bdbTL_RegisterCmdCallbacks
    132           *
    133           * @brief   Register an applications command callbacks
    134           *
    135           * @param   endpoint - application's endpoint
    136           * @param   callbacks - pointer to the callback record.
    137           *
    138           * @return  ZMemError if not able to allocate
    139           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    140          ZStatus_t bdbTL_RegisterCmdCallbacks( uint8 endpoint, bdbTL_AppCallbacks_t *callbacks )
   \                     bdbTL_RegisterCmdCallbacks:
    141          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    142            bdbTLCBRec_t *pNewItem;
    143            bdbTLCBRec_t *pLoop;
    144          
    145            // Register as a ZCL Plugin
    146            if ( !bdbTLPluginRegisted )
   \   00000B   90....       MOV       DPTR,#bdbTLPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7021         JNZ       ??bdbTL_RegisterCmdCallbacks_0
    147            {
    148              zcl_registerPlugin( ZCL_CLUSTER_ID_TOUCHLINK,
    149                                  ZCL_CLUSTER_ID_TOUCHLINK,
    150                                  bdbTL_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V2,#`??bdbTL_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V3,#(`??bdbTL_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C00         MOV       R4,#0x0
   \   00001E   7D10         MOV       R5,#0x10
   \   000020   7A00         MOV       R2,#0x0
   \   000022   7B10         MOV       R3,#0x10
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    151              bdbTLPluginRegisted = TRUE;
   \   00002C   90....       MOV       DPTR,#bdbTLPluginRegisted
   \   00002F   7401         MOV       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
    152            }
    153          
    154            // Fill in the new profile list
    155            pNewItem = zcl_mem_alloc( sizeof( bdbTLCBRec_t ) );
   \                     ??bdbTL_RegisterCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV       R2,#0x5
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   A8..         MOV       R0,?V2
   \   00003F   A9..         MOV       R1,?V3
    156            if ( pNewItem == NULL )
   \   000041   EA           MOV       A,R2
   \   000042   49           ORL       A,R1
   \   000043   7004         JNZ       ??bdbTL_RegisterCmdCallbacks_1
    157              return (ZMemError);
   \   000045   7910         MOV       R1,#0x10
   \   000047   803E         SJMP      ??bdbTL_RegisterCmdCallbacks_2
    158          
    159            pNewItem->next = (bdbTLCBRec_t *)NULL;
   \                     ??bdbTL_RegisterCmdCallbacks_1:
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   12....       LCALL     ??Subroutine168_0 & 0xFFFF
    160            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_296:
   \   000052   A3           INC       DPTR
   \   000053   E5..         MOV       A,?V0
   \   000055   12....       LCALL     ?Subroutine86 & 0xFFFF
    161            pNewItem->CBs = callbacks;
   \                     ??CrossCallReturnLabel_152:
   \   000058   EE           MOV       A,R6
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   A3           INC       DPTR
   \   00005B   EF           MOV       A,R7
   \   00005C   F0           MOVX      @DPTR,A
    162          
    163            // Find spot in list
    164            if ( bdbTLCBs == NULL )
   \   00005D   90....       MOV       DPTR,#bdbTLCBs
   \   000060   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000063   4B           ORL       A,R3
   \   000064   90....       MOV       DPTR,#bdbTLCBs
   \   000067   6018         JZ        ??bdbTL_RegisterCmdCallbacks_3
    165            {
    166              bdbTLCBs = pNewItem;
    167            }
    168            else
    169            {
    170              // Look for end of list
    171              pLoop = bdbTLCBs;
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FC           MOV       R4,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   8003         SJMP      ??bdbTL_RegisterCmdCallbacks_4
    172              while ( pLoop->next != NULL )
    173                pLoop = pLoop->next;
   \                     ??bdbTL_RegisterCmdCallbacks_5:
   \   00006F   EA           MOV       A,R2
   \   000070   FC           MOV       R4,A
   \   000071   EB           MOV       A,R3
   \                     ??bdbTL_RegisterCmdCallbacks_4:
   \   000072   FD           MOV       R5,A
   \   000073   8C82         MOV       DPL,R4
   \   000075   8D83         MOV       DPH,R5
   \   000077   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00007A   4B           ORL       A,R3
   \   00007B   70F2         JNZ       ??bdbTL_RegisterCmdCallbacks_5
    174          
    175              // Put new item at end of list
    176              pLoop->next = pNewItem;
   \   00007D   8C82         MOV       DPL,R4
   \   00007F   8D83         MOV       DPH,R5
   \                     ??bdbTL_RegisterCmdCallbacks_3:
   \   000081   E8           MOV       A,R0
    177            }
   \   000082   12....       LCALL     ??Subroutine190_0 & 0xFFFF
    178          
    179            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_380:
   \   000085   7900         MOV       R1,#0x0
   \                     ??bdbTL_RegisterCmdCallbacks_2:
   \   000087   02....       LJMP      ??Subroutine171_0 & 0xFFFF
    180          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine169_0
   \   000001                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003                ; Setup parameters for call to function StubAPS_InterPan
   \   000003   EA           MOV       A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    181          
    182          /*********************************************************************
    183           * @fn      bdbTL_RegisterInterPANCmdCallbacks
    184           *
    185           * @brief   Register an applications Inter-PAN command callbacks
    186           *
    187           * @param   callbacks - pointer to the callback record.
    188           *
    189           * @return  ZSuccess
    190           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          ZStatus_t bdbTL_RegisterInterPANCmdCallbacks( bdbTL_InterPANCallbacks_t *callbacks )
   \                     bdbTL_RegisterInterPANCmdCallbacks:
    192          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    193            // Register as a ZCL Plugin
    194            if ( !bdbTLPluginRegisted )
   \   000009   90....       MOV       DPTR,#bdbTLPluginRegisted
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   7021         JNZ       ??bdbTL_RegisterInterPANCmdCallbacks_0
    195            {
    196              zcl_registerPlugin( ZCL_CLUSTER_ID_TOUCHLINK,
    197                                  ZCL_CLUSTER_ID_TOUCHLINK,
    198                                  bdbTL_HdlIncoming );
   \   00000F                ; Setup parameters for call to function zcl_registerPlugin
   \   00000F   75....       MOV       ?V0,#`??bdbTL_HdlIncoming::?relay` & 0xff
   \   000012   75....       MOV       ?V1,#(`??bdbTL_HdlIncoming::?relay` >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   7C00         MOV       R4,#0x0
   \   00001C   7D10         MOV       R5,#0x10
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B10         MOV       R3,#0x10
   \   000022   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?DEALLOC_XSTACK8
    199              bdbTLPluginRegisted = TRUE;
   \   00002A   90....       MOV       DPTR,#bdbTLPluginRegisted
   \   00002D   7401         MOV       A,#0x1
   \   00002F   F0           MOVX      @DPTR,A
    200            }
    201            pInterPANCBs = callbacks;
   \                     ??bdbTL_RegisterInterPANCmdCallbacks_0:
   \   000030   90....       MOV       DPTR,#pInterPANCBs
   \   000033   EE           MOV       A,R6
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   EF           MOV       A,R7
   \   000037   F0           MOVX      @DPTR,A
    202          
    203            return ( ZSuccess );
   \   000038   7900         MOV       R1,#0x0
   \   00003A   7F02         MOV       R7,#0x2
   \   00003C   02....       LJMP      ?BANKED_LEAVE_XDATA
    204          }
    205          
    206          /*********************************************************************
    207           * @fn      bdbTL_Send_ScanReq
    208           *
    209           * @brief   Call to send out an Scan Request command
    210           *
    211           * @param   srcEP - sending application's endpoint
    212           * @param   dstAddr - where you want the message to go
    213           * @param   pReq - request parameters
    214           * @param   seqNum - sequence number
    215           *
    216           * @return  ZStatus_t
    217           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          ZStatus_t bdbTL_Send_ScanReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_ScanReq:
    219                                        bdbTLScanReq_t *pReq, uint8 seqNum )
    220          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    221            uint8 buf[TOUCHLINK_CMDLEN_SCAN_REQ];
    222          
    223            VOID zcl_buffer_uint32( buf, pReq->transID );
   \   000014                ; Setup parameters for call to function osal_buffer_uint32
   \   000014   8C82         MOV       DPL,R4
   \   000016   8D83         MOV       DPH,R5
   \   000018   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001B   7404         MOV       A,#0x4
   \   00001D   12....       LCALL     ?XSTACK_DISP101_8
   \   000020   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000023   12....       LCALL     ?DEALLOC_XSTACK8
    224          
    225            buf[4] = pReq->zInfo.zInfoByte;
   \   000026   85..82       MOV       DPL,?V0
   \   000029   85..83       MOV       DPH,?V1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C0E0         PUSH      A
   \   000033   7404         MOV       A,#0x4
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   D0E0         POP       A
   \   00003A   F0           MOVX      @DPTR,A
    226            buf[5] = pReq->touchLinkInfo.touchLinkInfoByte;
   \   00003B   85..82       MOV       DPL,?V0
   \   00003E   85..83       MOV       DPH,?V1
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   C0E0         PUSH      A
   \   00004A   7405         MOV       A,#0x5
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   D0E0         POP       A
   \   000051   12....       LCALL     ?Subroutine73 & 0xFFFF
    227          
    228            return bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_SCAN_REQ,
    229                                              ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_SCAN_REQ, buf );
   \                     ??CrossCallReturnLabel_124:
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   75..06       MOV       ?V0,#0x6
   \   00005A   75..00       MOV       ?V1,#0x0
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7415         MOV       A,#0x15
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006D   7D00         MOV       R5,#0x0
   \   00006F   7C00         MOV       R4,#0x0
   \   000071   80..         SJMP      ?Subroutine1
    230          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000003   12....       LCALL     ?DEALLOC_XSTACK8
   \   000006   7406         MOV       A,#0x6
   \   000008                REQUIRE ??Subroutine170_0
   \   000008                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F03         MOV       R7,#0x3
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000001                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000001                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000001                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004                REQUIRE ??Subroutine173_0
   \   000004                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   A9..         MOV       R1,?V2
   \   000002                REQUIRE ??Subroutine174_0
   \   000002                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET
    231          
    232          /*********************************************************************
    233           * @fn      bdbTL_Send_DeviceInfoReq
    234           *
    235           * @brief   Call to send out a Device Information Request command
    236           *
    237           * @param   srcEP - sending application's endpoint
    238           * @param   dstAddr - where you want the message to go
    239           * @param   pReq - request parameters
    240           * @param   seqNum - sequence number
    241           *
    242           * @return  ZStatus_t
    243           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          ZStatus_t bdbTL_Send_DeviceInfoReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_DeviceInfoReq:
    245                                              bdbTLDeviceInfoReq_t *pReq, uint8 seqNum )
    246          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    247            uint8 buf[TOUCHLINK_CMDLEN_DEVICE_INFO_REQ];
    248          
    249            VOID zcl_buffer_uint32( buf, pReq->transID );
   \   000014                ; Setup parameters for call to function osal_buffer_uint32
   \   000014   8C82         MOV       DPL,R4
   \   000016   8D83         MOV       DPH,R5
   \   000018   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001B   7404         MOV       A,#0x4
   \   00001D   12....       LCALL     ?XSTACK_DISP101_8
   \   000020   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000023   12....       LCALL     ?DEALLOC_XSTACK8
    250          
    251            buf[4] = pReq->startIndex;
   \   000026   85..82       MOV       DPL,?V0
   \   000029   85..83       MOV       DPH,?V1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C0E0         PUSH      A
   \   000033   7404         MOV       A,#0x4
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   D0E0         POP       A
   \   00003A   12....       LCALL     ?Subroutine73 & 0xFFFF
    252          
    253            return bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_DEVICE_INFO_REQ,
    254                                              ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_DEVICE_INFO_REQ, buf );
   \                     ??CrossCallReturnLabel_125:
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000040   75..05       MOV       ?V0,#0x5
   \   000043   75..00       MOV       ?V1,#0x0
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   7414         MOV       A,#0x14
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   7D00         MOV       R5,#0x0
   \   000058   7C02         MOV       R4,#0x2
   \   00005A                REQUIRE ?Subroutine9
   \   00005A                ; // Fall through to label ?Subroutine9
    255          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000003   12....       LCALL     ?DEALLOC_XSTACK8
   \   000006   7405         MOV       A,#0x5
   \   000008   80..         SJMP      ??Subroutine170_0
    256          
    257          /*********************************************************************
    258           * @fn      bdbTL_Send_IndentifyReq
    259           *
    260           * @brief   Call to send out a Identify Request command
    261           *
    262           * @param   srcEP - sending application's endpoint
    263           * @param   dstAddr - where you want the message to go
    264           * @param   pReq - request parameters
    265           * @param   seqNum - sequence number
    266           *
    267           * @return  ZStatus_t
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          ZStatus_t bdbTL_Send_IndentifyReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_IndentifyReq:
    270                                             bdbTLIdentifyReq_t *pReq, uint8 seqNum )
    271          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    272            uint8 buf[TOUCHLINK_CMDLEN_IDENTIFY_REQ];
    273          
    274            VOID zcl_buffer_uint32( buf, pReq->transID );
   \   000014                ; Setup parameters for call to function osal_buffer_uint32
   \   000014   8C82         MOV       DPL,R4
   \   000016   8D83         MOV       DPH,R5
   \   000018   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001B   7404         MOV       A,#0x4
   \   00001D   12....       LCALL     ?XSTACK_DISP101_8
   \   000020   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000023   12....       LCALL     ?DEALLOC_XSTACK8
    275          
    276            buf[4] = LO_UINT16( pReq->IdDuration );
   \   000026   E5..         MOV       A,?V0
   \   000028   2404         ADD       A,#0x4
   \   00002A   F8           MOV       R0,A
   \   00002B   E4           CLR       A
   \   00002C   35..         ADDC      A,?V1
   \   00002E   F9           MOV       R1,A
   \   00002F   8882         MOV       DPL,R0
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   C0E0         PUSH      A
   \   000036   7404         MOV       A,#0x4
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   D0E0         POP       A
   \   00003D   12....       LCALL     ?Subroutine84 & 0xFFFF
    277            buf[5] = HI_UINT16( pReq->IdDuration );
   \                     ??CrossCallReturnLabel_146:
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   C0E0         PUSH      A
   \   000044   7405         MOV       A,#0x5
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   D0E0         POP       A
   \   00004B   12....       LCALL     ?Subroutine73 & 0xFFFF
    278          
    279            return bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_IDENTIFY_REQ,
    280                                              ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_IDENTIFY_REQ, buf );
   \                     ??CrossCallReturnLabel_126:
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   75..06       MOV       ?V0,#0x6
   \   000054   75..00       MOV       ?V1,#0x0
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   7415         MOV       A,#0x15
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   7D00         MOV       R5,#0x0
   \   000069   7C06         MOV       R4,#0x6
   \   00006B   80..         SJMP      ?Subroutine1
    281          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET
    282          
    283          /*********************************************************************
    284           * @fn      bdbTL_Send_ResetToFNReq
    285           *
    286           * @brief   Call to send out a Reset to Factory New Request command
    287           *
    288           * @param   srcEP - sending application's endpoint
    289           * @param   dstAddr - where you want the message to go
    290           * @param   pReq - request parameters
    291           * @param   seqNum - sequence number
    292           *
    293           * @return  ZStatus_t
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          ZStatus_t bdbTL_Send_ResetToFNReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_ResetToFNReq:
    296                                             bdbTLResetToFNReq_t *pReq, uint8 seqNum )
    297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
    298            uint8 buf[TOUCHLINK_CMDLEN_RESET_TO_FN_REQ];
    299          
    300            VOID zcl_buffer_uint32( buf, pReq->transID );
   \   000010                ; Setup parameters for call to function osal_buffer_uint32
   \   000010   8C82         MOV       DPL,R4
   \   000012   8D83         MOV       DPH,R5
   \   000014   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?XSTACK_DISP101_8
   \   00001C   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
    301          
    302            return bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_RESET_TO_FN_REQ,
    303                                              ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_RESET_TO_FN_REQ, buf );
   \   000022                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000022   A8..         MOV       R0,?XSP + 0
   \   000024   A9..         MOV       R1,?XSP + 1
   \   000026   88..         MOV       ?V2,R0
   \   000028   89..         MOV       ?V3,R1
   \   00002A   78..         MOV       R0,#?V2
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   75..04       MOV       ?V2,#0x4
   \   000032   75..00       MOV       ?V3,#0x0
   \   000035   78..         MOV       R0,#?V2
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   7414         MOV       A,#0x14
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000045   7D00         MOV       R5,#0x0
   \   000047   7C07         MOV       R4,#0x7
   \   000049   EE           MOV       A,R6
   \   00004A   FA           MOV       R2,A
   \   00004B   EF           MOV       A,R7
   \   00004C   FB           MOV       R3,A
   \   00004D   A9..         MOV       R1,?V0
   \   00004F   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   7404         MOV       A,#0x4
   \   000057                REQUIRE ?Subroutine0
   \   000057                ; // Fall through to label ?Subroutine0
    304          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine171_0
   \   000003                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V1,A
   \   000003   78..         MOV       R0,#?V1
   \   000005   22           RET
    305          
    306          /*********************************************************************
    307           * @fn      bdbTL_Send_NwkStartReq
    308           *
    309           * @brief   Call to send out a Network Start Request command
    310           *
    311           * @param   srcEP - sending application's endpoint
    312           * @param   dstAddr - where you want the message to go
    313           * @param   pRsp - response parameters
    314           * @param   seqNum - sequence number
    315           *
    316           * @return  ZStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine168_0
   \   000001                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          ZStatus_t bdbTL_Send_NwkStartReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_NwkStartReq:
    319                                            bdbTLNwkStartReq_t *pRsp, uint8 seqNum )
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V7,R1
   \   000007   8A..         MOV       ?V2,R2
   \   000009   8B..         MOV       ?V3,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    321            uint8 *buf;
    322            uint8 *pBuf;
    323            ZStatus_t status;
    324          
    325            buf = zcl_mem_alloc( TOUCHLINK_CMDLEN_NWK_START_REQ );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   12....       LCALL     ?Subroutine89 & 0xFFFF
    326            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_520:
   \   000012   7003         JNZ       $+5
   \   000014   02....       LJMP      ??bdbTL_Send_NwkStartReq_0 & 0xFFFF
    327            {
    328              pBuf = buf;
    329          
    330              pBuf = zcl_buffer_uint32( pBuf, pRsp->transID );
   \   000017                ; Setup parameters for call to function osal_buffer_uint32
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001E   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
    331              pBuf = zcl_cpyExtAddr( pBuf, pRsp->nwkParams.extendedPANID );
   \   000024                ; Setup parameters for call to function sAddrExtCpy
   \   000024   12....       LCALL     ?Subroutine28 & 0xFFFF
    332          
    333              *pBuf++ = pRsp->nwkParams.keyIndex;
    334          
    335              pBuf = zcl_memcpy( pBuf, pRsp->nwkParams.nwkKey, SEC_KEY_LEN );
   \                     ??CrossCallReturnLabel_29:
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00002A   7C10         MOV       R4,#0x10
   \   00002C   7D00         MOV       R5,#0x0
   \   00002E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000031   7403         MOV       A,#0x3
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
   \   000036   8A..         MOV       ?V4,R2
   \   000038   8B..         MOV       ?V5,R3
   \   00003A   A8..         MOV       R0,?V4
   \   00003C   A9..         MOV       R1,?V5
    336          
    337              *pBuf++ = pRsp->nwkParams.logicalChannel;
   \   00003E   EE           MOV       A,R6
   \   00003F   241D         ADD       A,#0x1d
   \   000041   12....       LCALL     ?Subroutine37 & 0xFFFF
    338          
    339              *pBuf++ = LO_UINT16( pRsp->nwkParams.panId );
   \                     ??CrossCallReturnLabel_324:
   \   000044   241E         ADD       A,#0x1e
   \   000046   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000049   12....       LCALL     ?Subroutine52 & 0xFFFF
    340              *pBuf++ = HI_UINT16( pRsp->nwkParams.panId );
   \                     ??CrossCallReturnLabel_80:
   \   00004C   12....       LCALL     ?Subroutine70 & 0xFFFF
    341          
    342              *pBuf++ = LO_UINT16( pRsp->nwkParams.nwkAddr );
   \                     ??CrossCallReturnLabel_111:
   \   00004F   EE           MOV       A,R6
   \   000050   2420         ADD       A,#0x20
   \   000052   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000055   8882         MOV       DPL,R0
   \   000057   8983         MOV       DPH,R1
   \   000059   A3           INC       DPTR
   \   00005A   12....       LCALL     ?Subroutine87 & 0xFFFF
    343              *pBuf++ = HI_UINT16( pRsp->nwkParams.nwkAddr );
   \                     ??CrossCallReturnLabel_294:
   \   00005D   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000060   F0           MOVX      @DPTR,A
    344          
    345              *pBuf++ = LO_UINT16( pRsp->nwkParams.grpIDsBegin );
   \   000061   EE           MOV       A,R6
   \   000062   2422         ADD       A,#0x22
   \   000064   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000067   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00006A   12....       LCALL     ??Subroutine168_0 & 0xFFFF
    346              *pBuf++ = HI_UINT16( pRsp->nwkParams.grpIDsBegin );
   \                     ??CrossCallReturnLabel_297:
   \   00006D   12....       LCALL     ?Subroutine47 & 0xFFFF
    347          
    348              *pBuf++ = LO_UINT16( pRsp->nwkParams.grpIDsEnd );
   \                     ??CrossCallReturnLabel_71:
   \   000070   2424         ADD       A,#0x24
   \   000072   FA           MOV       R2,A
   \   000073   E4           CLR       A
   \   000074   3F           ADDC      A,R7
   \   000075   FB           MOV       R3,A
   \   000076   8A82         MOV       DPL,R2
   \   000078   12....       LCALL     ?Subroutine32 & 0xFFFF
    349              *pBuf++ = HI_UINT16( pRsp->nwkParams.grpIDsEnd );
   \                     ??CrossCallReturnLabel_307:
   \   00007B   8A82         MOV       DPL,R2
   \   00007D   8B83         MOV       DPH,R3
   \   00007F   A3           INC       DPTR
   \   000080   12....       LCALL     ?Subroutine42 & 0xFFFF
    350          
    351              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeNwkAddrBegin );
   \                     ??CrossCallReturnLabel_59:
   \   000083   2426         ADD       A,#0x26
   \   000085   12....       LCALL     ?Subroutine19 & 0xFFFF
    352              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeNwkAddrBegin );
    353          
    354              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeNwkAddrEnd );
   \                     ??CrossCallReturnLabel_9:
   \   000088   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   00008B   C0E0         PUSH      A
   \   00008D   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000090   D0E0         POP       A
   \   000092   12....       LCALL     ?Subroutine72 & 0xFFFF
    355              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeNwkAddrEnd );
   \                     ??CrossCallReturnLabel_115:
   \   000095   C0E0         PUSH      A
   \   000097   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00009A   D0E0         POP       A
   \   00009C   12....       LCALL     ?Subroutine78 & 0xFFFF
    356          
    357              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeGrpIDBegin );
   \                     ??CrossCallReturnLabel_136:
   \   00009F   C0E0         PUSH      A
   \   0000A1   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000A4   D0E0         POP       A
   \   0000A6   12....       LCALL     ?Subroutine72 & 0xFFFF
    358              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeGrpIDBegin );
   \                     ??CrossCallReturnLabel_116:
   \   0000A9   C0E0         PUSH      A
   \   0000AB   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0000AE   D0E0         POP       A
   \   0000B0   12....       LCALL     ?Subroutine79 & 0xFFFF
    359          
    360              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeGrpIDEnd );
   \                     ??CrossCallReturnLabel_138:
   \   0000B3   C0E0         PUSH      A
   \   0000B5   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0000B8   D0E0         POP       A
   \   0000BA   12....       LCALL     ?Subroutine72 & 0xFFFF
    361              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeGrpIDEnd );
   \                     ??CrossCallReturnLabel_117:
   \   0000BD   C0E0         PUSH      A
   \   0000BF   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   0000C2   D0E0         POP       A
   \   0000C4   F0           MOVX      @DPTR,A
    362          
    363              pBuf = zcl_cpyExtAddr( pBuf, pRsp->initiatorIeeeAddr );
   \   0000C5                ; Setup parameters for call to function sAddrExtCpy
   \   0000C5   EE           MOV       A,R6
   \   0000C6   242E         ADD       A,#0x2e
   \   0000C8   FC           MOV       R4,A
   \   0000C9   E4           CLR       A
   \   0000CA   3F           ADDC      A,R7
   \   0000CB   FD           MOV       R5,A
   \   0000CC   E8           MOV       A,R0
   \   0000CD   2411         ADD       A,#0x11
   \   0000CF   FA           MOV       R2,A
   \   0000D0   E4           CLR       A
   \   0000D1   39           ADDC      A,R1
   \   0000D2   FB           MOV       R3,A
   \   0000D3   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    364          
    365              *pBuf++ = LO_UINT16( pRsp->initiatorNwkAddr );
   \   0000D6   EE           MOV       A,R6
   \   0000D7   2436         ADD       A,#0x36
   \   0000D9   F8           MOV       R0,A
   \   0000DA   E4           CLR       A
   \   0000DB   3F           ADDC      A,R7
   \   0000DC   12....       LCALL     ?Subroutine21 & 0xFFFF
    366              *pBuf++ = HI_UINT16( pRsp->initiatorNwkAddr );
    367          
    368              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_NWK_START_REQ,
    369                                                  ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_NWK_START_REQ, buf );
   \                     ??CrossCallReturnLabel_14:
   \   0000DF                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   0000DF   78..         MOV       R0,#?V0
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E4   75..38       MOV       ?V4,#0x38
   \   0000E7   75..00       MOV       ?V5,#0x0
   \   0000EA   78..         MOV       R0,#?V4
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EF   7414         MOV       A,#0x14
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   F5..         MOV       ?V4,A
   \   0000F7   78..         MOV       R0,#?V4
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FC   7D00         MOV       R5,#0x0
   \   0000FE   7C10         MOV       R4,#0x10
   \   000100   AA..         MOV       R2,?V2
   \   000102   AB..         MOV       R3,?V3
   \   000104   A9..         MOV       R1,?V7
   \   000106   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000109   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010C   E9           MOV       A,R1
   \   00010D   FE           MOV       R6,A
    370              zcl_mem_free( buf );
   \   00010E                ; Setup parameters for call to function osal_mem_free
   \   00010E   AA..         MOV       R2,?V0
   \   000110   AB..         MOV       R3,?V1
   \   000112   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000115   8002         SJMP      ??bdbTL_Send_NwkStartReq_1
    371            }
    372            else
    373            {
    374              status = ZMemError;
   \                     ??bdbTL_Send_NwkStartReq_0:
   \   000117   7E10         MOV       R6,#0x10
    375            }
    376          
    377            return ( status );
   \                     ??bdbTL_Send_NwkStartReq_1:
   \   000119   02....       LJMP      ?Subroutine2 & 0xFFFF
    378          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine172_0
   \   000002                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   E8           MOV       A,R0
   \   000001   2410         ADD       A,#0x10
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   E8           MOV       A,R0
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   E8           MOV       A,R0
   \   000001   240E         ADD       A,#0xe
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000004   39           ADDC      A,R1
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000004   39           ADDC      A,R1
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   FB           MOV       R3,A
   \   000004   8A82         MOV       DPL,R2
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   E8           MOV       A,R0
   \   000001   240C         ADD       A,#0xc
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   242C         ADD       A,#0x2c
   \   000004   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   242A         ADD       A,#0x2a
   \   000004   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   FB           MOV       R3,A
   \   000004   8A82         MOV       DPL,R2
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine175_0
   \   000006                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   12....       LCALL     ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000003   EE           MOV       A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   00000A   A3           INC       DPTR
   \   00000B   AA82         MOV       R2,DPL
   \   00000D   AB83         MOV       R3,DPH
   \   00000F                ; Setup parameters for call to function osal_memcpy
   \   00000F                ; Setup parameters for call to function osal_memcpy
   \   00000F   EE           MOV       A,R6
   \   000010   240D         ADD       A,#0xd
   \   000012   F5..         MOV       ?V4,A
   \   000014   E4           CLR       A
   \   000015   3F           ADDC      A,R7
   \   000016   F5..         MOV       ?V5,A
   \   000018   75..00       MOV       ?V6,#0x0
   \   00001B   78..         MOV       R0,#?V4
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   EE           MOV       A,R6
   \   000001   2404         ADD       A,#0x4
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FD           MOV       R5,A
   \   000007   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00000A   EE           MOV       A,R6
   \   00000B   240C         ADD       A,#0xc
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   2428         ADD       A,#0x28
   \   000002                REQUIRE ??Subroutine176_0
   \   000002                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   EE           MOV       A,R6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EE           MOV       A,R6
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000006   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000009   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   EE           MOV       A,R6
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002                REQUIRE ??Subroutine183_0
   \   000002                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F9           MOV       R1,A
   \   000001   8882         MOV       DPL,R0
   \   000003   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000006   8882         MOV       DPL,R0
   \   000008   8983         MOV       DPH,R1
   \   00000A   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine185_0
   \   000001                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine187_0
   \   000002                ; // Fall through to label ??Subroutine187_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   240D         ADD       A,#0xd
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   240B         ADD       A,#0xb
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   7A38         MOV       R2,#0x38
   \   000002                REQUIRE ??Subroutine210_0
   \   000002                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET
    379          
    380          /*********************************************************************
    381           * @fn      bdbTL_Send_NwkJoinReq
    382           *
    383           * @brief   Call to send out a Network Join Router/End Device Request command
    384           *
    385           * @param   srcEP - sending application's endpoint
    386           * @param   dstAddr - where you want the message to go
    387           * @param   pRsp - response parameters
    388           * @param   cmd - COMMAND_TOUCHLINK_NWK_JOIN_RTR_REQ or COMMAND_TOUCHLINK_NWK_JOIN_ED_REQ
    389           * @param   seqNum - sequence number
    390           *
    391           * @return  ZStatus_t
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          ZStatus_t bdbTL_Send_NwkJoinReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_NwkJoinReq:
    394                                           bdbTLNwkJoinReq_t *pRsp, uint8 cmd, uint8 seqNum )
    395          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    396            uint8 *buf;
    397            uint8 *pBuf;
    398            ZStatus_t status;
    399          
    400            buf = zcl_mem_alloc( TOUCHLINK_CMDLEN_NWK_JOIN_REQ );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A2F         MOV       R2,#0x2f
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     ?Subroutine94 & 0xFFFF
    401            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_173:
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??bdbTL_Send_NwkJoinReq_0 & 0xFFFF
    402            {
    403              pBuf = buf;
    404          
    405              pBuf = zcl_buffer_uint32( pBuf, pRsp->transID );
   \   00001B                ; Setup parameters for call to function osal_buffer_uint32
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000022   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000025   12....       LCALL     ?DEALLOC_XSTACK8
    406              pBuf = zcl_cpyExtAddr( pBuf, pRsp->nwkParams.extendedPANID );
   \   000028                ; Setup parameters for call to function sAddrExtCpy
   \   000028   12....       LCALL     ?Subroutine28 & 0xFFFF
    407          
    408              *pBuf++ = pRsp->nwkParams.keyIndex;
    409          
    410              pBuf = zcl_memcpy( pBuf, pRsp->nwkParams.nwkKey, SEC_KEY_LEN );
   \                     ??CrossCallReturnLabel_30:
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00002E   7C10         MOV       R4,#0x10
   \   000030   7D00         MOV       R5,#0x0
   \   000032   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000035   7403         MOV       A,#0x3
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003A   8A..         MOV       ?V4,R2
   \   00003C   8B..         MOV       ?V5,R3
   \   00003E   A8..         MOV       R0,?V4
   \   000040   A9..         MOV       R1,?V5
    411          
    412              *pBuf++ = pRsp->nwkUpdateId;
   \   000042   EE           MOV       A,R6
   \   000043   242E         ADD       A,#0x2e
   \   000045   12....       LCALL     ?Subroutine37 & 0xFFFF
    413              *pBuf++ = pRsp->nwkParams.logicalChannel;
   \                     ??CrossCallReturnLabel_325:
   \   000048   241D         ADD       A,#0x1d
   \   00004A   12....       LCALL     ?Subroutine48 & 0xFFFF
    414          
    415              *pBuf++ = LO_UINT16( pRsp->nwkParams.panId );
   \                     ??CrossCallReturnLabel_73:
   \   00004D   241E         ADD       A,#0x1e
   \   00004F   12....       LCALL     ?Subroutine31 & 0xFFFF
    416              *pBuf++ = HI_UINT16( pRsp->nwkParams.panId );
    417          
    418              *pBuf++ = LO_UINT16( pRsp->nwkParams.nwkAddr );
   \                     ??CrossCallReturnLabel_35:
   \   000052   2420         ADD       A,#0x20
   \   000054   12....       LCALL     ?Subroutine22 & 0xFFFF
    419              *pBuf++ = HI_UINT16( pRsp->nwkParams.nwkAddr );
    420          
    421              *pBuf++ = LO_UINT16( pRsp->nwkParams.grpIDsBegin );
   \                     ??CrossCallReturnLabel_17:
   \   000057   EE           MOV       A,R6
   \   000058   2422         ADD       A,#0x22
   \   00005A   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00005D   12....       LCALL     ??Subroutine169_0 & 0xFFFF
    422              *pBuf++ = HI_UINT16( pRsp->nwkParams.grpIDsBegin );
   \                     ??CrossCallReturnLabel_298:
   \   000060   12....       LCALL     ??Subroutine172_0 & 0xFFFF
    423          
    424              *pBuf++ = LO_UINT16( pRsp->nwkParams.grpIDsEnd );
   \                     ??CrossCallReturnLabel_306:
   \   000063   EE           MOV       A,R6
   \   000064   2424         ADD       A,#0x24
   \   000066   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000069   12....       LCALL     ?Subroutine87 & 0xFFFF
    425              *pBuf++ = HI_UINT16( pRsp->nwkParams.grpIDsEnd );
   \                     ??CrossCallReturnLabel_295:
   \   00006C   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00006F   F0           MOVX      @DPTR,A
    426          
    427              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeNwkAddrBegin );
   \   000070   EE           MOV       A,R6
   \   000071   2426         ADD       A,#0x26
   \   000073   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000076   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000079   A3           INC       DPTR
   \   00007A   12....       LCALL     ?Subroutine72 & 0xFFFF
    428              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeNwkAddrBegin );
   \                     ??CrossCallReturnLabel_118:
   \   00007D   C0E0         PUSH      A
   \   00007F   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000082   D0E0         POP       A
   \   000084   F0           MOVX      @DPTR,A
    429          
    430              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeNwkAddrEnd );
   \   000085   EE           MOV       A,R6
   \   000086   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000089   C0E0         PUSH      A
   \   00008B   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00008E   D0E0         POP       A
   \   000090   12....       LCALL     ?Subroutine72 & 0xFFFF
    431              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeNwkAddrEnd );
   \                     ??CrossCallReturnLabel_119:
   \   000093   C0E0         PUSH      A
   \   000095   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000098   D0E0         POP       A
   \   00009A   12....       LCALL     ?Subroutine78 & 0xFFFF
    432          
    433              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeGrpIDBegin );
   \                     ??CrossCallReturnLabel_137:
   \   00009D   C0E0         PUSH      A
   \   00009F   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000A2   D0E0         POP       A
   \   0000A4   12....       LCALL     ?Subroutine72 & 0xFFFF
    434              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeGrpIDBegin );
   \                     ??CrossCallReturnLabel_120:
   \   0000A7   C0E0         PUSH      A
   \   0000A9   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   0000AC   D0E0         POP       A
   \   0000AE   12....       LCALL     ?Subroutine79 & 0xFFFF
    435          
    436              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeGrpIDEnd );
   \                     ??CrossCallReturnLabel_139:
   \   0000B1   C0E0         PUSH      A
   \   0000B3   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   0000B6   D0E0         POP       A
   \   0000B8   12....       LCALL     ?Subroutine72 & 0xFFFF
    437              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeGrpIDEnd );
   \                     ??CrossCallReturnLabel_121:
   \   0000BB   C0E0         PUSH      A
   \   0000BD   E8           MOV       A,R0
   \   0000BE   2411         ADD       A,#0x11
   \   0000C0   F582         MOV       DPL,A
   \   0000C2   E4           CLR       A
   \   0000C3   39           ADDC      A,R1
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   D0E0         POP       A
   \   0000C8   F0           MOVX      @DPTR,A
    438          
    439              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, cmd, ZCL_FRAME_CLIENT_SERVER_DIR, seqNum,
    440                                                  TOUCHLINK_CMDLEN_NWK_JOIN_REQ, buf );
   \   0000C9                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   0000C9   78..         MOV       R0,#?V8
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CE   75..2F       MOV       ?V4,#0x2f
   \   0000D1   75..00       MOV       ?V5,#0x0
   \   0000D4   78..         MOV       R0,#?V4
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D9   7417         MOV       A,#0x17
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   F5..         MOV       ?V3,A
   \   0000E1   78..         MOV       R0,#?V3
   \   0000E3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E6   7D00         MOV       R5,#0x0
   \   0000E8   7417         MOV       A,#0x17
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   FC           MOV       R4,A
   \   0000EF   AA..         MOV       R2,?V0
   \   0000F1   AB..         MOV       R3,?V1
   \   0000F3   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   0000F6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F9   E9           MOV       A,R1
   \   0000FA   FE           MOV       R6,A
    441              zcl_mem_free( buf );
   \   0000FB                ; Setup parameters for call to function osal_mem_free
   \   0000FB   AA..         MOV       R2,?V8
   \   0000FD   AB..         MOV       R3,?V9
   \   0000FF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000102   8002         SJMP      ??bdbTL_Send_NwkJoinReq_1
    442            }
    443            else
    444            {
    445              status = ZMemError;
   \                     ??bdbTL_Send_NwkJoinReq_0:
   \   000104   7E10         MOV       R6,#0x10
    446            }
    447          
    448            return ( status );
   \                     ??bdbTL_Send_NwkJoinReq_1:
   \   000106   EE           MOV       A,R6
   \   000107   F9           MOV       R1,A
   \   000108                REQUIRE ?Subroutine3
   \   000108                ; // Fall through to label ?Subroutine3
    449          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   12....       LCALL     ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000009   EE           MOV       A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
   \   000011   EE           MOV       A,R6
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine179_0
   \   000001                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000006   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000009   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V8,R2
   \   000005   8B..         MOV       ?V9,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET
    450          
    451          /*********************************************************************
    452           * @fn      bdbTL_Send_NwkUpdateReq
    453           *
    454           * @brief   Call to send out a Network Update Request command
    455           *
    456           * @param   srcEP - sending application's endpoint
    457           * @param   dstAddr - where you want the message to go
    458           * @param   pReq - response parameters
    459           * @param   seqNum - sequence number
    460           *
    461           * @return  ZStatus_t
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          ZStatus_t bdbTL_Send_NwkUpdateReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_NwkUpdateReq:
    464                                             bdbTLNwkUpdateReq_t *pReq, uint8 seqNum )
    465          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    466            uint8 *buf;
    467            uint8 *pBuf;
    468            ZStatus_t status;
    469          
    470            buf = zcl_mem_alloc( TOUCHLINK_CMDLEN_NWK_UPDATE_REQ );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A12         MOV       R2,#0x12
   \   000011   12....       LCALL     ?Subroutine92 & 0xFFFF
    471            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_169:
   \   000014   6067         JZ        ??bdbTL_Send_NwkUpdateReq_0
    472            {
    473              pBuf = buf;
    474          
    475              pBuf = zcl_buffer_uint32( pBuf, pReq->transID );
   \   000016                ; Setup parameters for call to function osal_buffer_uint32
   \   000016   8E82         MOV       DPL,R6
   \   000018   8F83         MOV       DPH,R7
   \   00001A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001D   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
    476              pBuf = zcl_cpyExtAddr( pBuf, pReq->extendedPANID );
   \   000023                ; Setup parameters for call to function sAddrExtCpy
   \   000023   12....       LCALL     ?Subroutine147 & 0xFFFF
    477          
    478              *pBuf++ = pReq->nwkUpdateId;
   \                     ??CrossCallReturnLabel_267:
   \   000026   12....       LCALL     ?Subroutine37 & 0xFFFF
    479              *pBuf++ = pReq->logicalChannel;
   \                     ??CrossCallReturnLabel_326:
   \   000029   240D         ADD       A,#0xd
   \   00002B   12....       LCALL     ?Subroutine48 & 0xFFFF
    480          
    481              *pBuf++ = LO_UINT16( pReq->PANID );
   \                     ??CrossCallReturnLabel_74:
   \   00002E   240E         ADD       A,#0xe
   \   000030   F8           MOV       R0,A
   \   000031   E4           CLR       A
   \   000032   3F           ADDC      A,R7
   \   000033   12....       LCALL     ?Subroutine34 & 0xFFFF
    482              *pBuf++ = HI_UINT16( pReq->PANID );
    483          
    484              *pBuf++ = LO_UINT16( pReq->nwkAddr );
   \                     ??CrossCallReturnLabel_37:
   \   000036   EE           MOV       A,R6
   \   000037   2410         ADD       A,#0x10
   \   000039   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   00003C   12....       LCALL     ?Subroutine59 & 0xFFFF
    485              *pBuf++ = HI_UINT16( pReq->nwkAddr );
   \                     ??CrossCallReturnLabel_90:
   \   00003F   8882         MOV       DPL,R0
   \   000041   8983         MOV       DPH,R1
   \   000043   A3           INC       DPTR
   \   000044   12....       LCALL     ??Subroutine181_0 & 0xFFFF
    486          
    487              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_NWK_UPDATE_REQ,
    488                                                  ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_NWK_UPDATE_REQ, buf );
   \                     ??CrossCallReturnLabel_344:
   \   000047                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000047   78..         MOV       R0,#?V4
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   75..12       MOV       ?V6,#0x12
   \   00004F   75..00       MOV       ?V7,#0x0
   \   000052   78..         MOV       R0,#?V6
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   7414         MOV       A,#0x14
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F5..         MOV       ?V3,A
   \   00005F   78..         MOV       R0,#?V3
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   7D00         MOV       R5,#0x0
   \   000066   7C16         MOV       R4,#0x16
   \   000068   AA..         MOV       R2,?V0
   \   00006A   AB..         MOV       R3,?V1
   \   00006C   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072   E9           MOV       A,R1
   \   000073   FE           MOV       R6,A
    489              zcl_mem_free( buf );
   \   000074                ; Setup parameters for call to function osal_mem_free
   \   000074   AA..         MOV       R2,?V4
   \   000076   AB..         MOV       R3,?V5
   \   000078   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00007B   8002         SJMP      ??bdbTL_Send_NwkUpdateReq_1
    490            }
    491            else
    492            {
    493              status = ZMemError;
   \                     ??bdbTL_Send_NwkUpdateReq_0:
   \   00007D   7E10         MOV       R6,#0x10
    494            }
    495          
    496            return ( status );
   \                     ??bdbTL_Send_NwkUpdateReq_1:
   \   00007F   02....       LJMP      ?Subroutine2 & 0xFFFF
    497          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F9           MOV       R1,A
   \   000001   8882         MOV       DPL,R0
   \   000003   F583         MOV       DPH,A
   \   000005   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000008   8882         MOV       DPL,R0
   \   00000A   8983         MOV       DPH,R1
   \   00000C   A3           INC       DPTR
   \   00000D   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   EA           MOV       A,R2
   \   00000A   4B           ORL       A,R3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
    498          
    499          /*********************************************************************
    500           * @fn      bdbTL_Send_ScanRsp
    501           *
    502           * @brief   Call to send out an Scan Response command
    503           *
    504           * @param   srcEP - sending application's endpoint
    505           * @param   dstAddr - where you want the message to go
    506           * @param   pRsp - response parameters
    507           * @param   seqNum - sequence number
    508           *
    509           * @return  ZStatus_t
    510           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    511          ZStatus_t bdbTL_Send_ScanRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_ScanRsp:
    512                                        bdbTLScanRsp_t *pRsp, uint8 seqNum )
    513          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V2,R2
   \   000009   8B..         MOV       ?V3,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    514            uint8 *buf;
    515            uint8 bufLen = TOUCHLINK_CMDLEN_SCAN_RSP;
   \   00000F   781D         MOV       R0,#0x1d
    516            ZStatus_t status;
    517          
    518            // Calculate the total length needed
    519            if ( pRsp->numSubDevices == 1 )
   \   000011   EC           MOV       A,R4
   \   000012   28           ADD       A,R0
   \   000013   F5..         MOV       ?V0,A
   \   000015   E4           CLR       A
   \   000016   3F           ADDC      A,R7
   \   000017   F5..         MOV       ?V1,A
   \   000019   85..82       MOV       DPL,?V0
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6401         XRL       A,#0x1
   \   000021   7002         JNZ       ??bdbTL_Send_ScanRsp_0
    520            {
    521              bufLen += TOUCHLINK_CMDLENOPTIONAL_SCAN_RSP;
   \   000023   7824         MOV       R0,#0x24
    522            }
    523          
    524            buf = zcl_mem_alloc( bufLen );
   \                     ??bdbTL_Send_ScanRsp_0:
   \   000025   E8           MOV       A,R0
   \   000026   F5..         MOV       ?V8,A
   \   000028   75..00       MOV       ?V9,#0x0
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   FA           MOV       R2,A
   \   00002C   AB..         MOV       R3,?V9
   \   00002E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000031   8A..         MOV       ?V6,R2
   \   000033   8B..         MOV       ?V7,R3
    525            if ( buf != NULL )
   \   000035   EA           MOV       A,R2
   \   000036   4B           ORL       A,R3
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??bdbTL_Send_ScanRsp_1 & 0xFFFF
    526            {
    527              uint8 *pBuf = buf;
    528          
    529              pBuf = zcl_buffer_uint32( pBuf, pRsp->transID );
   \   00003C                ; Setup parameters for call to function osal_buffer_uint32
   \   00003C   8E82         MOV       DPL,R6
   \   00003E   8F83         MOV       DPH,R7
   \   000040   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000043   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
    530          
    531              *pBuf++ = pRsp->rssiCorrection;
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ??Subroutine177_0 & 0xFFFF
    532              *pBuf++ = pRsp->zInfo.zInfoByte;
   \                     ??CrossCallReturnLabel_337:
   \   000050   8E82         MOV       DPL,R6
   \   000052   8F83         MOV       DPH,R7
   \   000054   12....       LCALL     ?Subroutine49 & 0xFFFF
    533              *pBuf++ = pRsp->touchLinkInfo.touchLinkInfoByte;
   \                     ??CrossCallReturnLabel_355:
   \   000057   8E82         MOV       DPL,R6
   \   000059   8F83         MOV       DPH,R7
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   12....       LCALL     ?Subroutine63 & 0xFFFF
    534          
    535              *pBuf++ = LO_UINT16( pRsp->keyBitmask );
   \                     ??CrossCallReturnLabel_101:
   \   000064   2409         ADD       A,#0x9
   \   000066   12....       LCALL     ?Subroutine29 & 0xFFFF
    536              *pBuf++ = HI_UINT16( pRsp->keyBitmask );
    537          
    538              pBuf = zcl_buffer_uint32( pBuf, pRsp->responseID );
   \                     ??CrossCallReturnLabel_31:
   \   000069   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00006C   3F           ADDC      A,R7
   \   00006D   F583         MOV       DPH,A
   \   00006F   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000072   EA           MOV       A,R2
   \   000073   2405         ADD       A,#0x5
   \   000075   FA           MOV       R2,A
   \   000076   5001         JNC       ??bdbTL_Send_ScanRsp_2
   \   000078   0B           INC       R3
   \                     ??bdbTL_Send_ScanRsp_2:
   \   000079   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
    539              pBuf = zcl_cpyExtAddr( pBuf, pRsp->extendedPANID );
   \   00007F                ; Setup parameters for call to function sAddrExtCpy
   \   00007F   EE           MOV       A,R6
   \   000080   240F         ADD       A,#0xf
   \   000082   FC           MOV       R4,A
   \   000083   E4           CLR       A
   \   000084   3F           ADDC      A,R7
   \   000085   FD           MOV       R5,A
   \   000086   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000089   8A..         MOV       ?V10,R2
   \   00008B   8B..         MOV       ?V11,R3
   \   00008D   A8..         MOV       R0,?V10
   \   00008F   A9..         MOV       R1,?V11
    540          
    541              *pBuf++ = pRsp->nwkUpdateId;
   \   000091   EE           MOV       A,R6
   \   000092   2417         ADD       A,#0x17
   \   000094   12....       LCALL     ?Subroutine37 & 0xFFFF
    542              *pBuf++ = pRsp->logicalChannel;
   \                     ??CrossCallReturnLabel_327:
   \   000097   2418         ADD       A,#0x18
   \   000099   12....       LCALL     ?Subroutine48 & 0xFFFF
    543          
    544              *pBuf++ = LO_UINT16( pRsp->PANID );
   \                     ??CrossCallReturnLabel_75:
   \   00009C   2419         ADD       A,#0x19
   \   00009E   12....       LCALL     ?Subroutine31 & 0xFFFF
    545              *pBuf++ = HI_UINT16( pRsp->PANID );
    546          
    547              *pBuf++ = LO_UINT16( pRsp->nwkAddr );
   \                     ??CrossCallReturnLabel_36:
   \   0000A1   241B         ADD       A,#0x1b
   \   0000A3   12....       LCALL     ?Subroutine22 & 0xFFFF
    548              *pBuf++ = HI_UINT16( pRsp->nwkAddr );
    549          
    550              *pBuf++ = pRsp->numSubDevices;
   \                     ??CrossCallReturnLabel_18:
   \   0000A6   85..82       MOV       DPL,?V0
   \   0000A9   85..83       MOV       DPH,?V1
   \   0000AC   12....       LCALL     ?Subroutine47 & 0xFFFF
    551              *pBuf++ = pRsp->totalGrpIDs;
   \                     ??CrossCallReturnLabel_72:
   \   0000AF   241E         ADD       A,#0x1e
   \   0000B1   F582         MOV       DPL,A
   \   0000B3   E4           CLR       A
   \   0000B4   3F           ADDC      A,R7
   \   0000B5   12....       LCALL     ?Subroutine32 & 0xFFFF
    552          
    553              if ( pRsp->numSubDevices == 1 )
   \                     ??CrossCallReturnLabel_308:
   \   0000B8   85..82       MOV       DPL,?V0
   \   0000BB   85..83       MOV       DPH,?V1
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   6401         XRL       A,#0x1
   \   0000C1   704C         JNZ       ??bdbTL_Send_ScanRsp_3
    554              {
    555                *pBuf++ = pRsp->deviceInfo.endpoint;
   \   0000C3   EE           MOV       A,R6
   \   0000C4   241F         ADD       A,#0x1f
   \   0000C6   F582         MOV       DPL,A
   \   0000C8   E4           CLR       A
   \   0000C9   3F           ADDC      A,R7
   \   0000CA   F583         MOV       DPH,A
   \   0000CC   12....       LCALL     ?Subroutine42 & 0xFFFF
    556          
    557                *pBuf++ = LO_UINT16( pRsp->deviceInfo.profileID );
   \                     ??CrossCallReturnLabel_60:
   \   0000CF   2420         ADD       A,#0x20
   \   0000D1   12....       LCALL     ?Subroutine19 & 0xFFFF
    558                *pBuf++ = HI_UINT16( pRsp->deviceInfo.profileID );
    559          
    560                *pBuf++ = LO_UINT16( pRsp->deviceInfo.deviceID );
   \                     ??CrossCallReturnLabel_10:
   \   0000D4   2422         ADD       A,#0x22
   \   0000D6   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   0000D9   C0E0         PUSH      A
   \   0000DB   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   0000DE   D0E0         POP       A
   \   0000E0   12....       LCALL     ?Subroutine72 & 0xFFFF
    561                *pBuf++ = HI_UINT16( pRsp->deviceInfo.deviceID );
   \                     ??CrossCallReturnLabel_122:
   \   0000E3   C0E0         PUSH      A
   \   0000E5   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0000E8   D0E0         POP       A
   \   0000EA   F0           MOVX      @DPTR,A
    562          
    563                *pBuf++ = pRsp->deviceInfo.version;
   \   0000EB   EE           MOV       A,R6
   \   0000EC   2424         ADD       A,#0x24
   \   0000EE   F582         MOV       DPL,A
   \   0000F0   E4           CLR       A
   \   0000F1   3F           ADDC      A,R7
   \   0000F2   F583         MOV       DPH,A
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   C0E0         PUSH      A
   \   0000F7   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0000FA   D0E0         POP       A
   \   0000FC   F0           MOVX      @DPTR,A
    564                *pBuf++ = pRsp->deviceInfo.grpIdCnt;
   \   0000FD   EE           MOV       A,R6
   \   0000FE   2425         ADD       A,#0x25
   \   000100   F582         MOV       DPL,A
   \   000102   E4           CLR       A
   \   000103   3F           ADDC      A,R7
   \   000104   F583         MOV       DPH,A
   \   000106   E0           MOVX      A,@DPTR
   \   000107   C0E0         PUSH      A
   \   000109   12....       LCALL     ?Subroutine104 & 0xFFFF
    565              }
   \                     ??CrossCallReturnLabel_195:
   \   00010C   D0E0         POP       A
   \   00010E   F0           MOVX      @DPTR,A
    566          
    567              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_SCAN_RSP,
    568                                                  ZCL_FRAME_SERVER_CLIENT_DIR, seqNum, bufLen, buf );
   \                     ??bdbTL_Send_ScanRsp_3:
   \   00010F                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   00010F   78..         MOV       R0,#?V6
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000114   78..         MOV       R0,#?V8
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000119   7418         MOV       A,#0x18
   \   00011B   12....       LCALL     ?XSTACK_DISP0_8
   \   00011E   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000121   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000124   7D01         MOV       R5,#0x1
   \   000126   7C01         MOV       R4,#0x1
   \   000128   AA..         MOV       R2,?V2
   \   00012A   AB..         MOV       R3,?V3
   \   00012C   A9..         MOV       R1,?V4
   \   00012E   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000131   12....       LCALL     ?DEALLOC_XSTACK8
   \   000134   E9           MOV       A,R1
   \   000135   FE           MOV       R6,A
    569              zcl_mem_free( buf );
   \   000136                ; Setup parameters for call to function osal_mem_free
   \   000136   AA..         MOV       R2,?V6
   \   000138   AB..         MOV       R3,?V7
   \   00013A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00013D   8002         SJMP      ??bdbTL_Send_ScanRsp_4
    570            }
    571            else
    572            {
    573              status = ZMemError;
   \                     ??bdbTL_Send_ScanRsp_1:
   \   00013F   7E10         MOV       R6,#0x10
    574            }
    575          
    576            return ( status );
   \                     ??bdbTL_Send_ScanRsp_4:
   \   000141   EE           MOV       A,R6
   \   000142   F9           MOV       R1,A
   \   000143   80..         SJMP      ??Subroutine180_0
    577          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine178_0
   \   000004                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   12....       LCALL     ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000004   EE           MOV       A,R6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000006   8882         MOV       DPL,R0
   \   000008   8983         MOV       DPH,R1
   \   00000A   A3           INC       DPTR
   \   00000B   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00000E                ; Setup parameters for call to function osal_buffer_uint32
   \   00000E   EE           MOV       A,R6
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005                REQUIRE ??Subroutine182_0
   \   000005                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   12....       LCALL     ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000003   22           RET
    578          
    579          /*********************************************************************
    580           * @fn      bdbTL_Send_DeviceInfoRsp
    581           *
    582           * @brief   Call to send out a Device Information Response command
    583           *
    584           * @param   srcEP - sending application's endpoint
    585           * @param   dstAddr - where you want the message to go
    586           * @param   pRsp - response parameters
    587           * @param   seqNum - sequence number
    588           *
    589           * @return  ZStatus_t
    590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine177_0
   \   000006                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    591          ZStatus_t bdbTL_Send_DeviceInfoRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_DeviceInfoRsp:
    592                                              bdbTLDeviceInfoRsp_t *pRsp, uint8 seqNum )
    593          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V5,R1
   \   00000C   8A..         MOV       ?V10,R2
   \   00000E   8B..         MOV       ?V11,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    594            uint8 *buf;
    595            uint8 bufLen = TOUCHLINK_CMDLEN_DEVICE_INFO_RSP;
    596            ZStatus_t status;
    597          
    598            // Calculate the total length needed
    599            bufLen += ( pRsp->cnt * TOUCHLINK_CMDLENOPTIONAL_DEVICE_INFO_RSP );
   \   000014   EC           MOV       A,R4
   \   000015   2406         ADD       A,#0x6
   \   000017   F5..         MOV       ?V6,A
   \   000019   E4           CLR       A
   \   00001A   35..         ADDC      A,?V1
   \   00001C   F5..         MOV       ?V7,A
   \   00001E   85..82       MOV       DPL,?V6
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C4           SWAP      A
   \   000025   54F0         ANL       A,#0xf0
   \   000027   2407         ADD       A,#0x7
   \   000029   85..82       MOV       DPL,?XSP + 0
   \   00002C   85..83       MOV       DPH,?XSP + 1
   \   00002F   F0           MOVX      @DPTR,A
    600          
    601            buf = zcl_mem_alloc( bufLen );
   \   000030   F5..         MOV       ?V2,A
   \   000032   75..00       MOV       ?V3,#0x0
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   FA           MOV       R2,A
   \   000036   AB..         MOV       R3,?V3
   \   000038   12....       LCALL     ?Subroutine94 & 0xFFFF
    602            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_174:
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??bdbTL_Send_DeviceInfoRsp_0 & 0xFFFF
    603            {
    604              uint8 *pBuf = buf;
    605              uint8 i;
    606          
    607              pBuf = zcl_buffer_uint32( pBuf, pRsp->transID );
   \   000040                ; Setup parameters for call to function osal_buffer_uint32
   \   000040   85..82       MOV       DPL,?V0
   \   000043   85..83       MOV       DPH,?V1
   \   000046   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000049   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
    608          
    609              *pBuf++ = pRsp->numSubDevices;
   \   00004F   12....       LCALL     ?Subroutine54 & 0xFFFF
    610              *pBuf++ = pRsp->startIndex;
   \                     ??CrossCallReturnLabel_338:
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   12....       LCALL     ?Subroutine49 & 0xFFFF
    611              *pBuf++ = pRsp->cnt;
   \                     ??CrossCallReturnLabel_356:
   \   00005B   85..82       MOV       DPL,?V6
   \   00005E   85..83       MOV       DPH,?V7
   \   000061   12....       LCALL     ??Subroutine184_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000064   EA           MOV       A,R2
   \   000065   2403         ADD       A,#0x3
   \   000067   FA           MOV       R2,A
   \   000068   5001         JNC       ??bdbTL_Send_DeviceInfoRsp_1
   \   00006A   0B           INC       R3
    612          
    613              // Device information record
    614              for ( i = 0; i < pRsp->cnt; i++ )
   \                     ??bdbTL_Send_DeviceInfoRsp_1:
   \   00006B   75..00       MOV       ?V4,#0x0
   \   00006E   8062         SJMP      ??bdbTL_Send_DeviceInfoRsp_2
    615              {
    616                devInfoRec_t *pRec = &(pRsp->devInfoRec[i]);
   \                     ??bdbTL_Send_DeviceInfoRsp_3:
   \   000070   E5..         MOV       A,?V4
   \   000072   F5..         MOV       ?V12,A
   \   000074   75..00       MOV       ?V13,#0x0
   \   000077   7404         MOV       A,#0x4
   \   000079   78..         MOV       R0,#?V12
   \   00007B   12....       LCALL     ?S_SHL
   \   00007E   E5..         MOV       A,?V0
   \   000080   25..         ADD       A,?V12
   \   000082   F8           MOV       R0,A
   \   000083   E5..         MOV       A,?V1
   \   000085   35..         ADDC      A,?V13
   \   000087   F9           MOV       R1,A
   \   000088   E8           MOV       A,R0
   \   000089   2407         ADD       A,#0x7
   \   00008B   FE           MOV       R6,A
   \   00008C   E4           CLR       A
   \   00008D   39           ADDC      A,R1
   \   00008E   FF           MOV       R7,A
    617          
    618                pBuf = zcl_cpyExtAddr( pBuf, pRec->ieeeAddr );
   \   00008F                ; Setup parameters for call to function sAddrExtCpy
   \   00008F   EE           MOV       A,R6
   \   000090   FC           MOV       R4,A
   \   000091   EF           MOV       A,R7
   \   000092   FD           MOV       R5,A
   \   000093   12....       LCALL     ?Subroutine99 & 0xFFFF
    619          
    620                *pBuf++ = pRec->deviceInfo.endpoint;
   \                     ??CrossCallReturnLabel_179:
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   12....       LCALL     ??Subroutine175_0 & 0xFFFF
    621          
    622                *pBuf++ = LO_UINT16( pRec->deviceInfo.profileID );
   \                     ??CrossCallReturnLabel_328:
   \   00009B   2409         ADD       A,#0x9
   \   00009D   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   0000A0   12....       LCALL     ??Subroutine182_0 & 0xFFFF
    623                *pBuf++ = HI_UINT16( pRec->deviceInfo.profileID );
   \                     ??CrossCallReturnLabel_353:
   \   0000A3   8882         MOV       DPL,R0
   \   0000A5   8983         MOV       DPH,R1
   \   0000A7   12....       LCALL     ?Subroutine63 & 0xFFFF
    624          
    625                *pBuf++ = LO_UINT16( pRec->deviceInfo.deviceID );
   \                     ??CrossCallReturnLabel_102:
   \   0000AA   240B         ADD       A,#0xb
   \   0000AC   12....       LCALL     ?Subroutine29 & 0xFFFF
    626                *pBuf++ = HI_UINT16( pRec->deviceInfo.deviceID );
    627          
    628                *pBuf++ = pRec->deviceInfo.version;
   \                     ??CrossCallReturnLabel_32:
   \   0000AF   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   0000B2   3F           ADDC      A,R7
   \   0000B3   12....       LCALL     ?Subroutine38 & 0xFFFF
    629                *pBuf++ = pRec->deviceInfo.grpIdCnt;
   \                     ??CrossCallReturnLabel_345:
   \   0000B6   EE           MOV       A,R6
   \   0000B7   240E         ADD       A,#0xe
   \   0000B9   F582         MOV       DPL,A
   \   0000BB   E4           CLR       A
   \   0000BC   3F           ADDC      A,R7
   \   0000BD   F583         MOV       DPH,A
   \   0000BF   12....       LCALL     ?Subroutine53 & 0xFFFF
    630          
    631                *pBuf++ = pRec->sort;
   \                     ??CrossCallReturnLabel_82:
   \   0000C2   12....       LCALL     ?Subroutine107 & 0xFFFF
    632              }
   \                     ??CrossCallReturnLabel_508:
   \   0000C5   3F           ADDC      A,R7
   \   0000C6   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000C9   EA           MOV       A,R2
   \   0000CA   2408         ADD       A,#0x8
   \   0000CC   FA           MOV       R2,A
   \   0000CD   5001         JNC       ??bdbTL_Send_DeviceInfoRsp_4
   \   0000CF   0B           INC       R3
   \                     ??bdbTL_Send_DeviceInfoRsp_4:
   \   0000D0   05..         INC       ?V4
   \                     ??bdbTL_Send_DeviceInfoRsp_2:
   \   0000D2   85..82       MOV       DPL,?V6
   \   0000D5   85..83       MOV       DPH,?V7
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   F8           MOV       R0,A
   \   0000DA   E5..         MOV       A,?V4
   \   0000DC   C3           CLR       C
   \   0000DD   98           SUBB      A,R0
   \   0000DE   4090         JC        ??bdbTL_Send_DeviceInfoRsp_3
    633          
    634              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_DEVICE_INFO_RSP,
    635                                                  ZCL_FRAME_SERVER_CLIENT_DIR, seqNum, bufLen, buf );
   \   0000E0                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   0000E0   78..         MOV       R0,#?V8
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E5   78..         MOV       R0,#?V2
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EA   741B         MOV       A,#0x1b
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F5   7D01         MOV       R5,#0x1
   \   0000F7   7C03         MOV       R4,#0x3
   \   0000F9   AA..         MOV       R2,?V10
   \   0000FB   AB..         MOV       R3,?V11
   \   0000FD   A9..         MOV       R1,?V5
   \   0000FF   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000102   12....       LCALL     ?DEALLOC_XSTACK8
   \   000105   E9           MOV       A,R1
   \   000106   FE           MOV       R6,A
    636              zcl_mem_free( buf );
   \   000107                ; Setup parameters for call to function osal_mem_free
   \   000107   AA..         MOV       R2,?V8
   \   000109   AB..         MOV       R3,?V9
   \   00010B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00010E   8002         SJMP      ??bdbTL_Send_DeviceInfoRsp_5
    637            }
    638            else
    639            {
    640              status = ZMemError;
   \                     ??bdbTL_Send_DeviceInfoRsp_0:
   \   000110   7E10         MOV       R6,#0x10
    641            }
    642          
    643            return ( status );
   \                     ??bdbTL_Send_DeviceInfoRsp_5:
   \   000112                REQUIRE ?Subroutine5
   \   000112                ; // Fall through to label ?Subroutine5
    644          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002   7401         MOV       A,#0x1
   \   000004   12....       LCALL     ?DEALLOC_XSTACK8
   \   000007   7F0E         MOV       R7,#0xe
   \   000009   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine181_0
   \   000002                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine208_0
   \   000001                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   240F         ADD       A,#0xf
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET
    645          
    646          /*********************************************************************
    647           * @fn      bdbTL_Send_NwkStartRsp
    648           *
    649           * @brief   Call to send out a Network Start Response command
    650           *
    651           * @param   srcEP - sending application's endpoint
    652           * @param   dstAddr - where you want the message to go
    653           * @param   pRsp - response parameters
    654           * @param   seqNum - sequence number
    655           *
    656           * @return  ZStatus_t
    657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    658          ZStatus_t bdbTL_Send_NwkStartRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_NwkStartRsp:
    659                                            bdbTLNwkStartRsp_t *pRsp, uint8 seqNum )
    660          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
    661            uint8 *buf;
    662            ZStatus_t status;
    663          
    664            buf = zcl_mem_alloc( TOUCHLINK_CMDLEN_NWK_START_RSP );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A11         MOV       R2,#0x11
   \   000011   12....       LCALL     ?Subroutine92 & 0xFFFF
    665            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_170:
   \   000014   606E         JZ        ??bdbTL_Send_NwkStartRsp_0
    666            {
    667              uint8 *pBuf = buf;
    668          
    669              pBuf = zcl_buffer_uint32( pBuf, pRsp->transID );
   \   000016                ; Setup parameters for call to function osal_buffer_uint32
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001F   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
    670          
    671              *pBuf++ = pRsp->status;
   \   000025   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000028   A3           INC       DPTR
   \   000029   AA82         MOV       R2,DPL
   \   00002B   AB83         MOV       R3,DPH
    672          
    673              pBuf = zcl_cpyExtAddr( pBuf, pRsp->extendedPANID );
   \   00002D                ; Setup parameters for call to function sAddrExtCpy
   \   00002D   E5..         MOV       A,?V0
   \   00002F   2405         ADD       A,#0x5
   \   000031   FC           MOV       R4,A
   \   000032   E4           CLR       A
   \   000033   35..         ADDC      A,?V1
   \   000035   FD           MOV       R5,A
   \   000036   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    674          
    675              *pBuf++ = pRsp->nwkUpdateId;
   \   000039   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   00003C   12....       LCALL     ??Subroutine178_0 & 0xFFFF
    676              *pBuf++ = pRsp->logicalChannel;
   \                     ??CrossCallReturnLabel_336:
   \   00003F   E5..         MOV       A,?V0
   \   000041   240E         ADD       A,#0xe
   \   000043   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000046   12....       LCALL     ??Subroutine182_0 & 0xFFFF
    677          
    678              *pBuf++ = LO_UINT16( pRsp->panId );
   \                     ??CrossCallReturnLabel_354:
   \   000049   E5..         MOV       A,?V0
   \   00004B   240F         ADD       A,#0xf
   \   00004D   F8           MOV       R0,A
   \   00004E   E4           CLR       A
   \   00004F   35..         ADDC      A,?V1
   \   000051   12....       LCALL     ?Subroutine34 & 0xFFFF
    679              *pBuf++ = HI_UINT16( pRsp->panId );
    680          
    681              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_NWK_START_RSP,
    682                                                  ZCL_FRAME_SERVER_CLIENT_DIR, seqNum, TOUCHLINK_CMDLEN_NWK_START_RSP, buf );
   \                     ??CrossCallReturnLabel_38:
   \   000054                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000054   78..         MOV       R0,#?V4
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   75..11       MOV       ?V0,#0x11
   \   00005C   75..00       MOV       ?V1,#0x0
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   7414         MOV       A,#0x14
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006F   7D01         MOV       R5,#0x1
   \   000071   7C11         MOV       R4,#0x11
   \   000073   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   \   000079   E9           MOV       A,R1
   \   00007A   FE           MOV       R6,A
    683              zcl_mem_free( buf );
   \   00007B                ; Setup parameters for call to function osal_mem_free
   \   00007B   AA..         MOV       R2,?V4
   \   00007D   AB..         MOV       R3,?V5
   \   00007F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000082   8002         SJMP      ??bdbTL_Send_NwkStartRsp_1
    684            }
    685            else
    686            {
    687              status = ZMemError;
   \                     ??bdbTL_Send_NwkStartRsp_0:
   \   000084   7E10         MOV       R6,#0x10
    688            }
    689          
    690            return ( status );
   \                     ??bdbTL_Send_NwkStartRsp_1:
   \   000086   02....       LJMP      ?Subroutine2 & 0xFFFF
    691          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   E5..         MOV       A,?V0
   \   000002   240D         ADD       A,#0xd
   \   000004                REQUIRE ??Subroutine198_0
   \   000004                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET
    692          
    693          /*********************************************************************
    694           * @fn      bdbTL_Send_NwkJoinRsp
    695           *
    696           * @brief   Call to send out a Network Join Response command
    697           *
    698           * @param   srcEP - sending application's endpoint
    699           * @param   dstAddr - where you want the message to go
    700           * @param   pRsp - response parameters
    701           * @param   cmd - COMMAND_TOUCHLINK_NWK_JOIN_RTR_RSP or COMMAND_TOUCHLINK_NWK_JOIN_ED_RSP
    702           * @param   seqNum - sequence number
    703           *
    704           * @return  ZStatus_t
    705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    706          ZStatus_t bdbTL_Send_NwkJoinRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_NwkJoinRsp:
    707                                           bdbTLNwkJoinRsp_t *pRsp, uint8 cmd, uint8 seqNum )
    708          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    709            uint8 buf[TOUCHLINK_CMDLEN_NWK_JOIN_RSP];
    710          
    711            VOID zcl_buffer_uint32( buf, pRsp->transID );
   \   000014                ; Setup parameters for call to function osal_buffer_uint32
   \   000014   8C82         MOV       DPL,R4
   \   000016   8D83         MOV       DPH,R5
   \   000018   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001B   7404         MOV       A,#0x4
   \   00001D   12....       LCALL     ?XSTACK_DISP101_8
   \   000020   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000023   12....       LCALL     ?DEALLOC_XSTACK8
    712          
    713            buf[4] = pRsp->status;
   \   000026   85..82       MOV       DPL,?V0
   \   000029   85..83       MOV       DPH,?V1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C0E0         PUSH      A
   \   000033   7404         MOV       A,#0x4
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   D0E0         POP       A
   \   00003A   12....       LCALL     ?Subroutine73 & 0xFFFF
    714          
    715            return bdbTL_SendInterPANCommand( srcEP, dstAddr, cmd, ZCL_FRAME_SERVER_CLIENT_DIR, seqNum,
    716                                              TOUCHLINK_CMDLEN_NWK_JOIN_RSP, buf );
   \                     ??CrossCallReturnLabel_127:
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000040   75..05       MOV       ?V0,#0x5
   \   000043   75..00       MOV       ?V1,#0x0
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   7415         MOV       A,#0x15
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   7D01         MOV       R5,#0x1
   \   000058   7415         MOV       A,#0x15
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   FC           MOV       R4,A
   \   00005F   02....       LJMP      ?Subroutine9 & 0xFFFF
    717          }
    718          
    719          /*********************************************************************
    720           * @fn      bdbTL_Send_EndpointInfo
    721           *
    722           * @brief   Call to send out an Endpoint Information command
    723           *
    724           * @param   srcEP - sending application's endpoint
    725           * @param   dstAddr - where you want the message to go
    726           * @param   pCmd - cmd parameters
    727           * @param   disableDefaultRsp - whether to disable the Default Response command
    728           * @param   seqNum - sequence number
    729           *
    730           * @return  ZStatus_t
    731           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    732          ZStatus_t bdbTL_Send_EndpointInfo( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_EndpointInfo:
    733                                             bdbTLEndpointInfo_t *pCmd,
    734                                             uint8 disableDefaultRsp, uint8 seqNum )
    735          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
    736            uint8 *buf;
    737            ZStatus_t status;
    738          
    739            buf = zcl_mem_alloc( TOUCHLINK_CMDLEN_EP_INFO );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A10         MOV       R2,#0x10
   \   000011   12....       LCALL     ?Subroutine92 & 0xFFFF
    740            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_171:
   \   000014   7003         JNZ       $+5
   \   000016   02....       LJMP      ??bdbTL_Send_EndpointInfo_0 & 0xFFFF
    741            {
    742              uint8 *pBuf = buf;
    743          
    744              pBuf = zcl_cpyExtAddr( pBuf, pCmd->ieeeAddr );
   \   000019                ; Setup parameters for call to function sAddrExtCpy
   \   000019   AC..         MOV       R4,?V2
   \   00001B   AD..         MOV       R5,?V3
   \   00001D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    745          
    746              *pBuf++ = LO_UINT16( pCmd->nwkAddr );
   \   000020   E5..         MOV       A,?V2
   \   000022   2408         ADD       A,#0x8
   \   000024   F8           MOV       R0,A
   \   000025   E4           CLR       A
   \   000026   35..         ADDC      A,?V3
   \   000028   12....       LCALL     ?Subroutine21 & 0xFFFF
    747              *pBuf++ = HI_UINT16( pCmd->nwkAddr );
    748          
    749              *pBuf++ = pCmd->endpoint;
   \                     ??CrossCallReturnLabel_15:
   \   00002B   85..82       MOV       DPL,?V2
   \   00002E   85..83       MOV       DPH,?V3
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   12....       LCALL     ?Subroutine64 & 0xFFFF
    750          
    751              *pBuf++ = LO_UINT16( pCmd->profileID );
   \                     ??CrossCallReturnLabel_358:
   \   00003C   E5..         MOV       A,?V2
   \   00003E   240B         ADD       A,#0xb
   \   000040   F8           MOV       R0,A
   \   000041   E4           CLR       A
   \   000042   35..         ADDC      A,?V3
   \   000044   F9           MOV       R1,A
   \   000045   8882         MOV       DPL,R0
   \   000047   F583         MOV       DPH,A
   \   000049   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   00004C   12....       LCALL     ?Subroutine84 & 0xFFFF
    752              *pBuf++ = HI_UINT16( pCmd->profileID );
   \                     ??CrossCallReturnLabel_147:
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ?Subroutine59 & 0xFFFF
    753          
    754              *pBuf++ = LO_UINT16( pCmd->deviceID );
   \                     ??CrossCallReturnLabel_91:
   \   000053   E5..         MOV       A,?V2
   \   000055   240D         ADD       A,#0xd
   \   000057   F8           MOV       R0,A
   \   000058   E4           CLR       A
   \   000059   35..         ADDC      A,?V3
   \   00005B   F9           MOV       R1,A
   \   00005C   8882         MOV       DPL,R0
   \   00005E   12....       LCALL     ?Subroutine38 & 0xFFFF
    755              *pBuf++ = HI_UINT16( pCmd->deviceID );
   \                     ??CrossCallReturnLabel_346:
   \   000061   8882         MOV       DPL,R0
   \   000063   8983         MOV       DPH,R1
   \   000065   A3           INC       DPTR
   \   000066   12....       LCALL     ?Subroutine53 & 0xFFFF
    756          
    757              *pBuf++ = pCmd->version;
   \                     ??CrossCallReturnLabel_83:
   \   000069   E5..         MOV       A,?V2
   \   00006B   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   00006E   35..         ADDC      A,?V3
   \   000070   12....       LCALL     ?Subroutine50 & 0xFFFF
    758          
    759              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_TOUCHLINK,
    760                                        COMMAND_TOUCHLINK_EP_INFO, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    761                                        disableDefaultRsp, 0, seqNum, TOUCHLINK_CMDLEN_EP_INFO, buf );
   \                     ??CrossCallReturnLabel_77:
   \   000073                ; Setup parameters for call to function zcl_SendCommand
   \   000073   78..         MOV       R0,#?V4
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   75..10       MOV       ?V2,#0x10
   \   00007B   75..00       MOV       ?V3,#0x0
   \   00007E   78..         MOV       R0,#?V2
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   7415         MOV       A,#0x15
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008E   E4           CLR       A
   \   00008F   F5..         MOV       ?V2,A
   \   000091   78..         MOV       R0,#?V2
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000096   7417         MOV       A,#0x17
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A1   75..01       MOV       ?V1,#0x1
   \   0000A4   78..         MOV       R0,#?V1
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A9   78..         MOV       R0,#?V1
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AE   75..40       MOV       ?V1,#0x40
   \   0000B1   78..         MOV       R0,#?V1
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B6   7C00         MOV       R4,#0x0
   \   0000B8   7D10         MOV       R5,#0x10
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FA           MOV       R2,A
   \   0000BC   EF           MOV       A,R7
   \   0000BD   FB           MOV       R3,A
   \   0000BE   A9..         MOV       R1,?V0
   \   0000C0   12....       LCALL     ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   0000C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C6   E9           MOV       A,R1
   \   0000C7   FE           MOV       R6,A
    762              zcl_mem_free( buf );
   \   0000C8                ; Setup parameters for call to function osal_mem_free
   \   0000C8   AA..         MOV       R2,?V4
   \   0000CA   AB..         MOV       R3,?V5
   \   0000CC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000CF   8002         SJMP      ??bdbTL_Send_EndpointInfo_1
    763            }
    764            else
    765            {
    766              status = ZMemError;
   \                     ??bdbTL_Send_EndpointInfo_0:
   \   0000D1   7E10         MOV       R6,#0x10
    767            }
    768          
    769            return ( status );
   \                     ??bdbTL_Send_EndpointInfo_1:
   \   0000D3                REQUIRE ?Subroutine2
   \   0000D3                ; // Fall through to label ?Subroutine2
    770          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine184_0
   \   000002                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000003   740B         MOV       A,#0xb
   \   000005   22           RET
    771          
    772          /*********************************************************************
    773           * @fn      bdbTL_Send_GetGrpIDsRsp
    774           *
    775           * @brief   Call to send out a Get Group Identifiers Response command
    776           *
    777           * @param   srcEP - sending application's endpoint
    778           * @param   dstAddr - where you want the message to go
    779           * @param   pRsp - response parameters
    780           * @param   disableDefaultRsp - whether to disable the Default Response command
    781           * @param   seqNum - sequence number
    782           *
    783           * @return  ZStatus_t
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          ZStatus_t bdbTL_Send_GetGrpIDsRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_GetGrpIDsRsp:
    786                                              bdbTLGetGrpIDsRsp_t *pRsp,
    787                                              uint8 disableDefaultRsp, uint8 seqNum )
    788          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine110 & 0xFFFF
    789            uint8 *buf;
    790            uint8 bufLen = TOUCHLINK_CMDLEN_GET_GRP_IDS_RSP;
    791            ZStatus_t status;
    792          
    793            // Calculate the total length needed
    794            bufLen += ( pRsp->cnt * TOUCHLINK_CMDLENOPTIONAL_GET_GRP_IDS_RSP );
   \                     ??CrossCallReturnLabel_202:
   \   00000D   75F003       MOV       B,#0x3
   \   000010   85..82       MOV       DPL,?V4
   \   000013   F583         MOV       DPH,A
   \   000015   E0           MOVX      A,@DPTR
   \   000016   A4           MUL       AB
   \   000017   12....       LCALL     ?Subroutine75 & 0xFFFF
    795          
    796            buf = zcl_mem_alloc( bufLen );
    797            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_131:
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??bdbTL_Send_GetGrpIDsRsp_0 & 0xFFFF
    798            {
    799              uint8 *pBuf = buf;
    800              uint8 i;
    801          
    802              *pBuf++ = pRsp->total;
   \   00001F   12....       LCALL     ?Subroutine18 & 0xFFFF
    803              *pBuf++ = pRsp->startIndex;
    804              *pBuf++ = pRsp->cnt;
   \                     ??CrossCallReturnLabel_7:
   \   000022   F8           MOV       R0,A
   \   000023   E4           CLR       A
   \   000024   35..         ADDC      A,?V1
   \   000026   F9           MOV       R1,A
    805          
    806              // Group information record
    807              for ( i = 0; i < pRsp->cnt; i++ )
   \   000027   7C00         MOV       R4,#0x0
   \   000029   8031         SJMP      ??bdbTL_Send_GetGrpIDsRsp_1
    808              {
    809                grpInfoRec_t *pRec = &(pRsp->grpInfoRec[i]);
   \                     ??bdbTL_Send_GetGrpIDsRsp_2:
   \   00002B   EC           MOV       A,R4
   \   00002C   75F003       MOV       B,#0x3
   \   00002F   A4           MUL       AB
   \   000030   FA           MOV       R2,A
   \   000031   ABF0         MOV       R3,B
   \   000033   85..82       MOV       DPL,?V2
   \   000036   85..83       MOV       DPH,?V3
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   2A           ADD       A,R2
   \   00003E   FA           MOV       R2,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   3B           ADDC      A,R3
   \   000042   FB           MOV       R3,A
    810          
    811                *pBuf++ = LO_UINT16( pRec->grpID );
   \   000043   8A82         MOV       DPL,R2
   \   000045   F583         MOV       DPH,A
   \   000047   12....       LCALL     ??Subroutine179_0 & 0xFFFF
    812                *pBuf++ = HI_UINT16( pRec->grpID );
    813          
    814                *pBuf++ = pRec->grpType;
    815              }
   \                     ??CrossCallReturnLabel_340:
   \   00004A   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   00004D   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000050   A3           INC       DPTR
   \   000051   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000054   E8           MOV       A,R0
   \   000055   2403         ADD       A,#0x3
   \   000057   F8           MOV       R0,A
   \   000058   5001         JNC       ??bdbTL_Send_GetGrpIDsRsp_3
   \   00005A   09           INC       R1
   \                     ??bdbTL_Send_GetGrpIDsRsp_3:
   \   00005B   0C           INC       R4
   \                     ??bdbTL_Send_GetGrpIDsRsp_1:
   \   00005C   85..82       MOV       DPL,?V4
   \   00005F   85..83       MOV       DPH,?V5
   \   000062   E0           MOVX      A,@DPTR
   \   000063   FA           MOV       R2,A
   \   000064   EC           MOV       A,R4
   \   000065   C3           CLR       C
   \   000066   9A           SUBB      A,R2
   \   000067   40C2         JC        ??bdbTL_Send_GetGrpIDsRsp_2
    816          
    817              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_TOUCHLINK,
    818                                        COMMAND_TOUCHLINK_GET_GRP_IDS_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    819                                        disableDefaultRsp, 0, seqNum, bufLen, buf );
   \   000069                ; Setup parameters for call to function zcl_SendCommand
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   78..         MOV       R0,#?V6
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000073   741A         MOV       A,#0x1a
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007E   E4           CLR       A
   \   00007F   F5..         MOV       ?V2,A
   \   000081   F5..         MOV       ?V3,A
   \   000083   78..         MOV       R0,#?V2
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   741C         MOV       A,#0x1c
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000093   75..01       MOV       ?V2,#0x1
   \   000096   78..         MOV       R0,#?V2
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   75..41       MOV       ?V2,#0x41
   \   0000A3   78..         MOV       R0,#?V2
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A8   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV       A,R1
   \   0000AF   FE           MOV       R6,A
    820              zcl_mem_free( buf );
   \   0000B0                ; Setup parameters for call to function osal_mem_free
   \   0000B0   AA..         MOV       R2,?V0
   \   0000B2   AB..         MOV       R3,?V1
   \   0000B4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000B7   8002         SJMP      ??bdbTL_Send_GetGrpIDsRsp_4
    821            }
    822            else
    823            {
    824              status = ZMemError;
   \                     ??bdbTL_Send_GetGrpIDsRsp_0:
   \   0000B9   7E10         MOV       R6,#0x10
    825            }
    826          
    827            return ( status );
   \                     ??bdbTL_Send_GetGrpIDsRsp_4:
   \   0000BB   EE           MOV       A,R6
   \   0000BC   F9           MOV       R1,A
   \   0000BD   7401         MOV       A,#0x1
   \   0000BF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C2   02....       LJMP      ??Subroutine180_0 & 0xFFFF
    828          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D10         MOV       R5,#0x10
   \   000004   EE           MOV       A,R6
   \   000005   FA           MOV       R2,A
   \   000006   EF           MOV       A,R7
   \   000007   FB           MOV       R3,A
   \   000008   A9..         MOV       R1,?V8
   \   00000A                REQUIRE ??Subroutine186_0
   \   00000A                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   89..         MOV       ?V8,R1
   \   000002   EA           MOV       A,R2
   \   000003   FE           MOV       R6,A
   \   000004   EB           MOV       A,R3
   \   000005   FF           MOV       R7,A
   \   000006   8C..         MOV       ?V2,R4
   \   000008   8D..         MOV       ?V3,R5
   \   00000A   EC           MOV       A,R4
   \   00000B   2402         ADD       A,#0x2
   \   00000D   F5..         MOV       ?V4,A
   \   00000F   E4           CLR       A
   \   000010   35..         ADDC      A,?V3
   \   000012   F5..         MOV       ?V5,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   2403         ADD       A,#0x3
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   F0           MOVX      @DPTR,A
   \   000009   F5..         MOV       ?V6,A
   \   00000B   75..00       MOV       ?V7,#0x0
   \   00000E                ; Setup parameters for call to function osal_mem_alloc
   \   00000E                ; Setup parameters for call to function osal_mem_alloc
   \   00000E   FA           MOV       R2,A
   \   00000F   AB..         MOV       R3,?V7
   \   000011   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000009   85..82       MOV       DPL,?V2
   \   00000C   85..83       MOV       DPH,?V3
   \   00000F   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000012   85..82       MOV       DPL,?V4
   \   000015   85..83       MOV       DPH,?V5
   \   000018   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   00001B   EA           MOV       A,R2
   \   00001C   2403         ADD       A,#0x3
   \   00001E   22           RET
    829          
    830          /*********************************************************************
    831           * @fn      bdbTL_Send_GetEPListRsp
    832           *
    833           * @brief   Call to send out a Get Endpoint List Response command
    834           *
    835           * @param   srcEP - sending application's endpoint
    836           * @param   dstAddr - where you want the message to go
    837           * @param   pRsp - response parameters
    838           * @param   disableDefaultRsp - whether to disable the Default Response command
    839           * @param   seqNum - sequence number
    840           *
    841           * @return  ZStatus_t
    842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    843          ZStatus_t bdbTL_Send_GetEPListRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_GetEPListRsp:
    844                                             bdbTLGetEPListRsp_t *pRsp,
    845                                             uint8 disableDefaultRsp, uint8 seqNum )
    846          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine110 & 0xFFFF
    847            uint8 *buf;
    848            uint8 bufLen = TOUCHLINK_CMDLEN_GET_EP_LIST_RSP;
    849            ZStatus_t status;
    850          
    851            // Calculate the total length needed
    852            bufLen += ( pRsp->cnt * TOUCHLINK_CMDLENOPTIONAL_GET_EP_LIST_RSP );
   \                     ??CrossCallReturnLabel_203:
   \   00000D   85..82       MOV       DPL,?V4
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   33           RLC       A
   \   000014   33           RLC       A
   \   000015   33           RLC       A
   \   000016   54F8         ANL       A,#0xf8
   \   000018   12....       LCALL     ?Subroutine75 & 0xFFFF
    853          
    854            buf = zcl_mem_alloc( bufLen );
    855            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_132:
   \   00001B   7003         JNZ       $+5
   \   00001D   02....       LJMP      ??bdbTL_Send_GetEPListRsp_0 & 0xFFFF
    856            {
    857              uint8 *pBuf = buf;
    858              uint8 i;
    859          
    860              *pBuf++ = pRsp->total;
   \   000020   12....       LCALL     ?Subroutine18 & 0xFFFF
    861              *pBuf++ = pRsp->startIndex;
    862              *pBuf++ = pRsp->cnt;
   \                     ??CrossCallReturnLabel_8:
   \   000023   FC           MOV       R4,A
   \   000024   E4           CLR       A
   \   000025   35..         ADDC      A,?V1
   \   000027   FD           MOV       R5,A
    863          
    864              // Endpoint information record
    865              for ( i = 0; i < pRsp->cnt; i++ )
   \   000028   7900         MOV       R1,#0x0
   \   00002A   8076         SJMP      ??bdbTL_Send_GetEPListRsp_1
    866              {
    867                epInfoRec_t *pRec = &(pRsp->epInfoRec[i]);
   \                     ??bdbTL_Send_GetEPListRsp_2:
   \   00002C   E9           MOV       A,R1
   \   00002D   F5..         MOV       ?V10,A
   \   00002F   75..00       MOV       ?V11,#0x0
   \   000032   7403         MOV       A,#0x3
   \   000034   78..         MOV       R0,#?V10
   \   000036   12....       LCALL     ?S_SHL
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   85..83       MOV       DPH,?V3
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   25..         ADD       A,?V10
   \   000045   FA           MOV       R2,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   35..         ADDC      A,?V11
   \   00004A   FB           MOV       R3,A
    868          
    869                *pBuf++ = LO_UINT16( pRec->nwkAddr );
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   F583         MOV       DPH,A
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   8C82         MOV       DPL,R4
   \   000052   8D83         MOV       DPH,R5
   \   000054   12....       LCALL     ?Subroutine72 & 0xFFFF
    870                *pBuf++ = HI_UINT16( pRec->nwkAddr );
   \                     ??CrossCallReturnLabel_123:
   \   000057   8C82         MOV       DPL,R4
   \   000059   8D83         MOV       DPH,R5
   \   00005B   A3           INC       DPTR
   \   00005C   12....       LCALL     ?Subroutine142 & 0xFFFF
    871          
    872                *pBuf++ = pRec->endpoint;
   \                     ??CrossCallReturnLabel_252:
   \   00005F   12....       LCALL     ?Subroutine71 & 0xFFFF
    873          
    874                *pBuf++ = LO_UINT16( pRec->profileID );
   \                     ??CrossCallReturnLabel_113:
   \   000062   EA           MOV       A,R2
   \   000063   2403         ADD       A,#0x3
   \   000065   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000068   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   00006B   F0           MOVX      @DPTR,A
    875                *pBuf++ = HI_UINT16( pRec->profileID );
   \   00006C   85..82       MOV       DPL,?V10
   \   00006F   85..83       MOV       DPH,?V11
   \   000072   A3           INC       DPTR
   \   000073   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000076   F0           MOVX      @DPTR,A
    876          
    877                *pBuf++ = LO_UINT16( pRec->deviceID );
   \   000077   EA           MOV       A,R2
   \   000078   2405         ADD       A,#0x5
   \   00007A   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00007D   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000080   A3           INC       DPTR
   \   000081   F0           MOVX      @DPTR,A
    878                *pBuf++ = HI_UINT16( pRec->deviceID );
   \   000082   85..82       MOV       DPL,?V10
   \   000085   85..83       MOV       DPH,?V11
   \   000088   12....       LCALL     ?Subroutine58 & 0xFFFF
    879          
    880                *pBuf++ = pRec->version;
    881              }
   \                     ??CrossCallReturnLabel_88:
   \   00008B   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000094   A3           INC       DPTR
   \   000095   F0           MOVX      @DPTR,A
   \   000096   EC           MOV       A,R4
   \   000097   2408         ADD       A,#0x8
   \   000099   FA           MOV       R2,A
   \   00009A   E4           CLR       A
   \   00009B   3D           ADDC      A,R5
   \   00009C   FB           MOV       R3,A
   \   00009D   EA           MOV       A,R2
   \   00009E   FC           MOV       R4,A
   \   00009F   EB           MOV       A,R3
   \   0000A0   FD           MOV       R5,A
   \   0000A1   09           INC       R1
   \                     ??bdbTL_Send_GetEPListRsp_1:
   \   0000A2   85..82       MOV       DPL,?V4
   \   0000A5   85..83       MOV       DPH,?V5
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   F8           MOV       R0,A
   \   0000AA   E9           MOV       A,R1
   \   0000AB   C3           CLR       C
   \   0000AC   98           SUBB      A,R0
   \   0000AD   5003         JNC       $+5
   \   0000AF   02....       LJMP      ??bdbTL_Send_GetEPListRsp_2 & 0xFFFF
    882          
    883              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_TOUCHLINK,
    884                                        COMMAND_TOUCHLINK_GET_EP_LIST_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    885                                        disableDefaultRsp, 0, seqNum, bufLen, buf );
   \   0000B2                ; Setup parameters for call to function zcl_SendCommand
   \   0000B2   78..         MOV       R0,#?V0
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B7   78..         MOV       R0,#?V6
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BC   741C         MOV       A,#0x1c
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C7   E4           CLR       A
   \   0000C8   F5..         MOV       ?V2,A
   \   0000CA   F5..         MOV       ?V3,A
   \   0000CC   78..         MOV       R0,#?V2
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D1   741E         MOV       A,#0x1e
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000D9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DC   75..01       MOV       ?V2,#0x1
   \   0000DF   78..         MOV       R0,#?V2
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E4   78..         MOV       R0,#?V2
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E9   75..42       MOV       ?V2,#0x42
   \   0000EC   78..         MOV       R0,#?V2
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F1   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   0000F4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F7   E9           MOV       A,R1
   \   0000F8   FE           MOV       R6,A
    886              zcl_mem_free( buf );
   \   0000F9                ; Setup parameters for call to function osal_mem_free
   \   0000F9   AA..         MOV       R2,?V0
   \   0000FB   AB..         MOV       R3,?V1
   \   0000FD   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000100   8002         SJMP      ??bdbTL_Send_GetEPListRsp_3
    887            }
    888            else
    889            {
    890              status = ZMemError;
   \                     ??bdbTL_Send_GetEPListRsp_0:
   \   000102   7E10         MOV       R6,#0x10
    891            }
    892          
    893            return ( status );
   \                     ??bdbTL_Send_GetEPListRsp_3:
   \   000104   02....       LJMP      ?Subroutine5 & 0xFFFF
    894          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   F5..         MOV       ?V10,A
   \   000002   E4           CLR       A
   \   000003   3B           ADDC      A,R3
   \   000004   F5..         MOV       ?V11,A
   \   000006   85..82       MOV       DPL,?V10
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET
    895          
    896          /*********************************************************************
    897           * @fn      bdbTL_SendInterPANCommand
    898           *
    899           * @brief   Used to send TOUCHLINK Profile and Cluster Specific Inter-PAN Command
    900           *          messages.
    901           *
    902           *          NOTE: The calling application is responsible for incrementing
    903           *                the Sequence Number.
    904           *
    905           * @param   srcEp - source endpoint
    906           * @param   destAddr - destination address
    907           * @param   cmd - command ID
    908           * @param   direction - direction of the command
    909           * @param   seqNumber - identification number for the transaction
    910           * @param   cmdFormatLen - length of the command to be sent
    911           * @param   cmdFormat - command to be sent
    912           *
    913           * @return  ZSuccess if OK
    914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    915          ZStatus_t bdbTL_SendInterPANCommand( uint8 srcEP, afAddrType_t *destAddr, uint8 cmd,
   \                     bdbTL_SendInterPANCommand:
    916                                               uint8 direction, uint8 seqNum, uint16 cmdFormatLen, uint8 *cmdFormat )
    917          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    918            //
    919            // Note: TOUCHLINK Frame Control has a defferent format than ZCL Frame Control
    920            //
    921          
    922            // TOUCHLINK Header Format:
    923            // - Frame control (1 octect):
    924            //   * b3-b0: TOUCHLINK version (0b0000)
    925            //   * b7-b4: Reserved (0b0000)
    926            // - Transaction sequence number (1 octet)
    927            // - Command identifier (1 octect)
    928            return zcl_SendCommand( srcEP, destAddr, ZCL_CLUSTER_ID_TOUCHLINK,
    929                                    cmd, TRUE, direction, TRUE, 0,
    930                                    seqNum, cmdFormatLen, cmdFormat );
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005   740F         MOV       A,#0xf
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00000D   740F         MOV       A,#0xf
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000015   7410         MOV       A,#0x10
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000020   E4           CLR       A
   \   000021   F5..         MOV       ?V2,A
   \   000023   F5..         MOV       ?V3,A
   \   000025   78..         MOV       R0,#?V2
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..01       MOV       ?V1,#0x1
   \   00002D   78..         MOV       R0,#?V1
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000032   ED           MOV       A,R5
   \   000033   F5..         MOV       ?V1,A
   \   000035   78..         MOV       R0,#?V1
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003A   75..01       MOV       ?V1,#0x1
   \   00003D   78..         MOV       R0,#?V1
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000042   EC           MOV       A,R4
   \   000043   F5..         MOV       ?V1,A
   \   000045   78..         MOV       R0,#?V1
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004A   7C00         MOV       R4,#0x0
   \   00004C   7D10         MOV       R5,#0x10
   \   00004E   12....       LCALL     ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000051   02....       LJMP      ?Subroutine0 & 0xFFFF
    931          }
    932          
    933          /*********************************************************************
    934           * @fn      bdbTL_FindCallbacks
    935           *
    936           * @brief   Find the callbacks for an endpoint
    937           *
    938           * @param   endpoint
    939           *
    940           * @return  pointer to the callbacks
    941           */
    942          static bdbTL_AppCallbacks_t *bdbTL_FindCallbacks( uint8 endpoint )
    943          {
    944            bdbTLCBRec_t *pCBs;
    945          
    946            pCBs = bdbTLCBs;
    947            while ( pCBs )
    948            {
    949              if ( pCBs->endpoint == endpoint )
    950                return ( pCBs->CBs );
    951              pCBs = pCBs->next;
    952            }
    953          
    954            return ( (bdbTL_AppCallbacks_t *)NULL );
    955          }
    956          
    957          /*********************************************************************
    958           * @fn      bdbTL_HdlIncoming
    959           *
    960           * @brief   Callback from ZCL to process incoming Commands specific
    961           *          to this cluster library or Profile commands for attributes
    962           *          that aren't in the attribute list
    963           *
    964           * @param   pInMsg - pointer to the incoming message
    965           *
    966           * @return  ZStatus_t
    967           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    968          static ZStatus_t bdbTL_HdlIncoming(  zclIncoming_t *pInMsg )
   \                     bdbTL_HdlIncoming:
    969          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    970            ZStatus_t status = ZSuccess;
    971          
    972            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000010   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   000013   3B           ADDC      A,R3
   \   000014   F583         MOV       DPH,A
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   EA           MOV       A,R2
   \   000019   2410         ADD       A,#0x10
   \   00001B   F582         MOV       DPL,A
   \   00001D   E4           CLR       A
   \   00001E   3B           ADDC      A,R3
   \   00001F   F583         MOV       DPH,A
   \   000021   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000024   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   000027   E9           MOV       A,R1
   \   000028   602E         JZ        ??bdbTL_HdlIncoming_0
    973            {
    974              return ( bdbTL_HdlInInterPANCommands( pInMsg ) );
   \   00002A   90....       MOV       DPTR,#pInterPANCBs
   \   00002D   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000030   7005         JNZ       ??bdbTL_HdlIncoming_1
   \   000032   75..01       MOV       ?V0,#0x1
   \   000035   801D         SJMP      ??bdbTL_HdlIncoming_2
   \                     ??bdbTL_HdlIncoming_1:
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   00003E   7004         JNZ       ??bdbTL_HdlIncoming_3
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   6410         XRL       A,#0x10
   \                     ??bdbTL_HdlIncoming_3:
   \   000044   700A         JNZ       ??bdbTL_HdlIncoming_4
   \   000046                ; Setup parameters for call to function bdbTL_ProcessInLLInterPANCmds
   \   000046   EE           MOV       A,R6
   \   000047   FA           MOV       R2,A
   \   000048   EF           MOV       A,R7
   \   000049   FB           MOV       R3,A
   \   00004A   12....       LCALL     `??bdbTL_ProcessInLLInterPANCmds::?relay`; Banked call to: bdbTL_ProcessInLLInterPANCmds
   \   00004D   E9           MOV       A,R1
   \   00004E   8002         SJMP      ??bdbTL_HdlIncoming_5
   \                     ??bdbTL_HdlIncoming_4:
   \   000050   7401         MOV       A,#0x1
   \                     ??bdbTL_HdlIncoming_5:
   \   000052   F5..         MOV       ?V0,A
    975            }
   \                     ??bdbTL_HdlIncoming_2:
   \   000054   A9..         MOV       R1,?V0
   \   000056   806A         SJMP      ??bdbTL_HdlIncoming_6
    976          
    977            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \                     ??bdbTL_HdlIncoming_0:
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   5407         ANL       A,#0x7
   \   000061   6401         XRL       A,#0x1
   \   000063   7039         JNZ       ??bdbTL_HdlIncoming_7
    978            {
    979              // Is this a manufacturer specific command?
    980              if ( pInMsg->hdr.fc.manuSpecific == 0 )
    981              {
    982                status = bdbTL_HdlInSpecificCommands( pInMsg );
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   12....       LCALL     ?Subroutine161 & 0xFFFF
    983              }
    984              else
    985              {
    986                // We don't support any manufacturer specific command.
    987                status = ZFailure;
    988              }
    989            }
   \                     ??CrossCallReturnLabel_495:
   \   00006C   F9           MOV       R1,A
   \   00006D   E8           MOV       A,R0
   \   00006E   FA           MOV       R2,A
   \   00006F   E9           MOV       A,R1
   \   000070   FB           MOV       R3,A
   \   000071   E8           MOV       A,R0
   \   000072   2414         ADD       A,#0x14
   \   000074   F582         MOV       DPL,A
   \   000076   E4           CLR       A
   \   000077   3B           ADDC      A,R3
   \   000078   F583         MOV       DPH,A
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   FC           MOV       R4,A
   \   00007C   90....       MOV       DPTR,#bdbTLCBs
   \                     ??bdbTL_HdlIncoming_8:
   \   00007F   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000082   601A         JZ        ??bdbTL_HdlIncoming_7
   \   000084   8882         MOV       DPL,R0
   \   000086   8983         MOV       DPH,R1
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   6C           XRL       A,R4
   \   00008C   8882         MOV       DPL,R0
   \   00008E   8983         MOV       DPH,R1
   \   000090   70ED         JNZ       ??bdbTL_HdlIncoming_8
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   FC           MOV       R4,A
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   FD           MOV       R5,A
   \   00009A   EC           MOV       A,R4
   \   00009B   4D           ORL       A,R5
   \   00009C   7004         JNZ       ??bdbTL_HdlIncoming_9
   \                     ??bdbTL_HdlIncoming_7:
   \   00009E   7901         MOV       R1,#0x1
   \   0000A0   8020         SJMP      ??bdbTL_HdlIncoming_6
   \                     ??bdbTL_HdlIncoming_9:
   \   0000A2   8A82         MOV       DPL,R2
   \   0000A4   8B83         MOV       DPH,R3
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   7004         JNZ       ??bdbTL_HdlIncoming_10
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   6410         XRL       A,#0x10
   \                     ??bdbTL_HdlIncoming_10:
   \   0000B1   700B         JNZ       ??bdbTL_HdlIncoming_11
   \   0000B3                ; Setup parameters for call to function bdbTL_ProcessInLLCmds
   \   0000B3   EE           MOV       A,R6
   \   0000B4   FA           MOV       R2,A
   \   0000B5   EF           MOV       A,R7
   \   0000B6   FB           MOV       R3,A
   \   0000B7   12....       LCALL     `??bdbTL_ProcessInLLCmds::?relay`; Banked call to: bdbTL_ProcessInLLCmds
   \   0000BA   E9           MOV       A,R1
   \   0000BB   F8           MOV       R0,A
   \   0000BC   8002         SJMP      ??bdbTL_HdlIncoming_12
   \                     ??bdbTL_HdlIncoming_11:
   \   0000BE   7801         MOV       R0,#0x1
   \                     ??bdbTL_HdlIncoming_12:
   \   0000C0   E8           MOV       A,R0
   \   0000C1   F9           MOV       R1,A
    990            else
    991            {
    992              // Handle all the normal (Read, Write...) commands -- should never get here
    993              status = ZFailure;
    994            }
    995            return ( status );
   \                     ??bdbTL_HdlIncoming_6:
   \   0000C2                REQUIRE ?Subroutine6
   \   0000C2                ; // Fall through to label ?Subroutine6
    996          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    997          
    998          /*********************************************************************
    999           * @fn      bdbTL_HdlInSpecificCommands
   1000           *
   1001           * @brief   Callback from ZCL to process incoming Commands specific
   1002           *          to this cluster library
   1003           *
   1004           * @param   pInMsg - pointer to the incoming message
   1005           *
   1006           * @return  ZStatus_t
   1007           */
   1008          static ZStatus_t bdbTL_HdlInSpecificCommands( zclIncoming_t *pInMsg )
   1009          {
   1010            ZStatus_t status;
   1011            bdbTL_AppCallbacks_t *pCBs;
   1012          
   1013            // make sure endpoint exists
   1014            pCBs = bdbTL_FindCallbacks( pInMsg->msg->endPoint );
   1015            if ( pCBs == NULL )
   1016              return ( ZFailure );
   1017          
   1018            switch ( pInMsg->msg->clusterId )
   1019            {
   1020              case ZCL_CLUSTER_ID_TOUCHLINK:
   1021                status = bdbTL_ProcessInLLCmds( pInMsg, pCBs );
   1022                break;
   1023          
   1024              default:
   1025                status = ZFailure;
   1026                break;
   1027            }
   1028          
   1029            return ( status );
   1030          }
   1031          
   1032          /*********************************************************************
   1033           * @fn      bdbTL_ProcessInLLCmds
   1034           *
   1035           * @brief   Callback from ZCL to process incoming Commands specific
   1036           *          to this cluster library on a command ID basis
   1037           *
   1038           * @param   pInMsg - pointer to the incoming message
   1039           * @param   pCBs - pointer to callbacks
   1040           *
   1041           * @return  ZStatus_t
   1042           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1043          static ZStatus_t bdbTL_ProcessInLLCmds( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs )
   \                     bdbTL_ProcessInLLCmds:
   1044          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   1045            ZStatus_t status = SUCCESS;
   1046          
   1047            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V0,A
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   5408         ANL       A,#0x8
   \   000025   7046         JNZ       ??bdbTL_ProcessInLLCmds_0
   1048            {
   1049              switch ( pInMsg->hdr.commandID )
   \   000027   EA           MOV       A,R2
   \   000028   2406         ADD       A,#0x6
   \   00002A   F8           MOV       R0,A
   \   00002B   E4           CLR       A
   \   00002C   3B           ADDC      A,R3
   \   00002D   F9           MOV       R1,A
   \   00002E   E8           MOV       A,R0
   \   00002F   FC           MOV       R4,A
   \   000030   E9           MOV       A,R1
   \   000031   FD           MOV       R5,A
   \   000032   E5..         MOV       A,?V0
   \   000034   24BF         ADD       A,#-0x41
   \   000036   6005         JZ        ??bdbTL_ProcessInLLCmds_1
   \   000038   14           DEC       A
   \   000039   6016         JZ        ??bdbTL_ProcessInLLCmds_2
   \   00003B   804F         SJMP      ??bdbTL_ProcessInLLCmds_3
   1050              {
   1051                case COMMAND_TOUCHLINK_GET_GRP_IDS_REQ:
   1052                  status = bdbTL_ProcessInCmd_GetGrpIDsReq( pInMsg, pCBs );
   \                     ??bdbTL_ProcessInLLCmds_1:
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000044   6046         JZ        ??bdbTL_ProcessInLLCmds_3
   \   000046   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000049   12....       LCALL     ?CALL_IND
   \   00004C   E9           MOV       A,R1
   \   00004D   601A         JZ        ??bdbTL_ProcessInLLCmds_4
   \                     ??bdbTL_ProcessInLLCmds_5:
   \   00004F   803B         SJMP      ??bdbTL_ProcessInLLCmds_3
   1053                  break;
   1054          
   1055                case COMMAND_TOUCHLINK_GET_EP_LIST_REQ:
   1056                  status = bdbTL_ProcessInCmd_GetEPListReq( pInMsg, pCBs );
   \                     ??bdbTL_ProcessInLLCmds_2:
   \   000051   EE           MOV       A,R6
   \   000052   2402         ADD       A,#0x2
   \   000054   E4           CLR       A
   \   000055   3F           ADDC      A,R7
   \   000056   0E           INC       R6
   \   000057   0E           INC       R6
   \   000058   FF           MOV       R7,A
   \   000059   8E82         MOV       DPL,R6
   \   00005B   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   1057                  break;
   1058          
   1059                default:
   1060                  status = ZFailure;   // Error ignore the command
   1061                  break;
   1062               }
   1063            }
   \                     ??CrossCallReturnLabel_404:
   \   00005E   602C         JZ        ??bdbTL_ProcessInLLCmds_3
   \   000060   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000063   12....       LCALL     ?CALL_IND
   \   000066   E9           MOV       A,R1
   \   000067   7023         JNZ       ??bdbTL_ProcessInLLCmds_3
   \                     ??bdbTL_ProcessInLLCmds_4:
   \   000069   79FF         MOV       R1,#-0x1
   \   00006B   8021         SJMP      ??bdbTL_ProcessInLLCmds_6
   1064            else // Client Commands
   1065            {
   1066              switch ( pInMsg->hdr.commandID )
   \                     ??bdbTL_ProcessInLLCmds_0:
   \   00006D   E5..         MOV       A,?V0
   \   00006F   24C0         ADD       A,#-0x40
   \   000071   6008         JZ        ??bdbTL_ProcessInLLCmds_7
   \   000073   14           DEC       A
   \   000074   600A         JZ        ??bdbTL_ProcessInLLCmds_8
   \   000076   14           DEC       A
   \   000077   600C         JZ        ??bdbTL_ProcessInLLCmds_9
   \   000079   8011         SJMP      ??bdbTL_ProcessInLLCmds_3
   1067              {
   1068                case COMMAND_TOUCHLINK_EP_INFO:
   1069                  status = bdbTL_ProcessInCmd_EndpointInfo( pInMsg, pCBs );
   \                     ??bdbTL_ProcessInLLCmds_7:
   \   00007B                ; Setup parameters for call to function bdbTL_ProcessInCmd_EndpointInfo
   \   00007B   12....       LCALL     `??bdbTL_ProcessInCmd_EndpointInfo::?relay`; Banked call to: bdbTL_ProcessInCmd_EndpointInfo
   \   00007E   8008         SJMP      ??bdbTL_ProcessInLLCmds_10
   1070                  break;
   1071          
   1072                case COMMAND_TOUCHLINK_GET_GRP_IDS_RSP:
   1073                  status = bdbTL_ProcessInCmd_GetGrpIDsRsp( pInMsg, pCBs );
   \                     ??bdbTL_ProcessInLLCmds_8:
   \   000080                ; Setup parameters for call to function bdbTL_ProcessInCmd_GetGrpIDsRsp
   \   000080   12....       LCALL     `??bdbTL_ProcessInCmd_GetGrpIDsRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_GetGrpIDsRsp
   \   000083   8003         SJMP      ??bdbTL_ProcessInLLCmds_10
   1074                  break;
   1075          
   1076                case COMMAND_TOUCHLINK_GET_EP_LIST_RSP:
   1077                  status = bdbTL_ProcessInCmd_GetEPListRsp( pInMsg, pCBs );
   \                     ??bdbTL_ProcessInLLCmds_9:
   \   000085                ; Setup parameters for call to function bdbTL_ProcessInCmd_GetEPListRsp
   \   000085   12....       LCALL     `??bdbTL_ProcessInCmd_GetEPListRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_GetEPListRsp
   \                     ??bdbTL_ProcessInLLCmds_10:
   \   000088   E9           MOV       A,R1
   \   000089   F9           MOV       R1,A
   1078                  break;
   \   00008A   8002         SJMP      ??bdbTL_ProcessInLLCmds_6
   1079          
   1080                default:
   1081                  status = ZFailure;   // Error ignore the command
   \                     ??bdbTL_ProcessInLLCmds_3:
   \   00008C   7901         MOV       R1,#0x1
   1082                  break;
   1083              }
   1084            }
   1085          
   1086            return ( status );
   \                     ??bdbTL_ProcessInLLCmds_6:
   \   00008E   7401         MOV       A,#0x1
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
   \   000093   02....       LJMP      ?Subroutine6 & 0xFFFF
   1087          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   F0           MOVX      @DPTR,A
   \   000017                ; Setup parameters for indirect call
   \   000017                ; Setup parameters for indirect call
   \   000017   8C82         MOV       DPL,R4
   \   000019   8D83         MOV       DPH,R5
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   AC..         MOV       R4,?XSP + 0
   \   00001F   AD..         MOV       R5,?XSP + 1
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   00002F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine195_0
   \   000002                ; // Fall through to label ??Subroutine195_0
   1088          
   1089          
   1090          /*********************************************************************
   1091           * @fn      bdbTL_ProcessInCmd_GetGrpIDsReq
   1092           *
   1093           * @brief   Process in the received Get Group Identifiers Request command.
   1094           *
   1095           * @param   pInMsg - pointer to the incoming message
   1096           * @param   pCBs - pointer to the application callbacks
   1097           *
   1098           * @return  ZStatus_t
   1099           */
   1100          static ZStatus_t bdbTL_ProcessInCmd_GetGrpIDsReq( zclIncoming_t *pInMsg,
   1101                                                            bdbTL_AppCallbacks_t *pCBs )
   1102          {
   1103            if ( pCBs->pfnGetGrpIDsReq )
   1104            {
   1105              bdbTLGetGrpIDsReq_t req;
   1106          
   1107              req.startIndex = pInMsg->pData[0];
   1108          
   1109              if ( pCBs->pfnGetGrpIDsReq( &(pInMsg->msg->srcAddr), &req, pInMsg->hdr.transSeqNum ) == ZSuccess )
   1110              {
   1111                return ( ZCL_STATUS_CMD_HAS_RSP );
   1112              }
   1113            }
   1114          
   1115            return ( ZFailure );
   1116          }
   1117          
   1118          /*********************************************************************
   1119           * @fn      bdbTL_ProcessInCmd_GetEPListReq
   1120           *
   1121           * @brief   Process in the received Get Endpoint List Request command.
   1122           *
   1123           * @param   pInMsg - pointer to the incoming message
   1124           * @param   pCBs - pointer to the application callbacks
   1125           *
   1126           * @return  ZStatus_t
   1127           */
   1128          static ZStatus_t bdbTL_ProcessInCmd_GetEPListReq( zclIncoming_t *pInMsg,
   1129                                                            bdbTL_AppCallbacks_t *pCBs )
   1130          {
   1131            if ( pCBs->pfnGetEPListReq )
   1132            {
   1133              bdbTLGetEPListReq_t req;
   1134          
   1135              req.startIndex = pInMsg->pData[0];
   1136          
   1137              if ( pCBs->pfnGetEPListReq( &(pInMsg->msg->srcAddr), &req, pInMsg->hdr.transSeqNum ) == ZSuccess )
   1138              {
   1139                return ( ZCL_STATUS_CMD_HAS_RSP );
   1140              }
   1141            }
   1142          
   1143            return ( ZFailure );
   1144          }
   1145          
   1146          
   1147          /*********************************************************************
   1148           * @fn      bdbTL_ProcessInCmd_EndpointInfo
   1149           *
   1150           * @brief   Process in the received Endpoint Information command.
   1151           *
   1152           * @param   pInMsg - pointer to the incoming message
   1153           * @param   pCBs - pointer to the application callbacks
   1154           *
   1155           * @return  ZStatus_t
   1156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1157          static ZStatus_t bdbTL_ProcessInCmd_EndpointInfo( zclIncoming_t *pInMsg,
   \                     bdbTL_ProcessInCmd_EndpointInfo:
   1158                                                            bdbTL_AppCallbacks_t *pCBs )
   1159          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   1160            ZStatus_t status = ZFailure;
   \   000009   75..01       MOV       ?V4,#0x1
   1161          
   1162            if ( pCBs->pfnEndpointInfo )
   \   00000C   EC           MOV       A,R4
   \   00000D   2404         ADD       A,#0x4
   \   00000F   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000012   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000015   7003         JNZ       $+5
   \   000017   02....       LJMP      ??bdbTL_ProcessInCmd_EndpointInfo_0 & 0xFFFF
   1163            {
   1164              bdbTLEndpointInfo_t *pCmd;
   1165          
   1166              pCmd = (bdbTLEndpointInfo_t *)zcl_mem_alloc( sizeof( bdbTLEndpointInfo_t ) );
   \   00001A                ; Setup parameters for call to function osal_mem_alloc
   \   00001A   7A10         MOV       R2,#0x10
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV       ?V6,R2
   \   000023   8B..         MOV       ?V7,R3
   \   000025   AE..         MOV       R6,?V6
   \   000027   AF..         MOV       R7,?V7
   1167              if ( pCmd )
   \   000029   EA           MOV       A,R2
   \   00002A   4F           ORL       A,R7
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??bdbTL_ProcessInCmd_EndpointInfo_1 & 0xFFFF
   1168              {
   1169                uint8 *pBuf = pInMsg->pData;
   \   000030   85..82       MOV       DPL,?V0
   \   000033   85..83       MOV       DPH,?V1
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F5..         MOV       ?V4,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F5..         MOV       ?V5,A
   1170          
   1171                zcl_cpyExtAddr( pCmd->ieeeAddr, pBuf );
   \   000045                ; Setup parameters for call to function sAddrExtCpy
   \   000045   AC..         MOV       R4,?V4
   \   000047   FD           MOV       R5,A
   \   000048   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1172                pBuf += Z_EXTADDR_LEN;
   \   00004B   E5..         MOV       A,?V4
   \   00004D   2408         ADD       A,#0x8
   \   00004F   F5..         MOV       ?V4,A
   \   000051   5002         JNC       ??bdbTL_ProcessInCmd_EndpointInfo_2
   \   000053   05..         INC       ?V5
   1173          
   1174                pCmd->nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_2:
   \   000055   F582         MOV       DPL,A
   \   000057   85..83       MOV       DPH,?V5
   \   00005A   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   00005D   8E82         MOV       DPL,R6
   \   00005F   8F83         MOV       DPH,R7
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   12....       LCALL     ?Subroutine81 & 0xFFFF
   1175                pBuf += 2;
   1176          
   1177                pCmd->endpoint = *pBuf++;
   \                     ??CrossCallReturnLabel_142:
   \   00006C   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   F0           MOVX      @DPTR,A
   \   000079   E5..         MOV       A,?V4
   \   00007B   2403         ADD       A,#0x3
   \   00007D   F5..         MOV       ?V4,A
   \   00007F   5002         JNC       ??bdbTL_ProcessInCmd_EndpointInfo_3
   \   000081   05..         INC       ?V5
   1178          
   1179                pCmd->profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_3:
   \   000083   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000086   EE           MOV       A,R6
   \   000087   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   00008A   3F           ADDC      A,R7
   \   00008B   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   1180                pBuf += 2;
   \                     ??CrossCallReturnLabel_383:
   \   00008E   E5..         MOV       A,?V4
   \   000090   2402         ADD       A,#0x2
   \   000092   F5..         MOV       ?V4,A
   \   000094   5002         JNC       ??bdbTL_ProcessInCmd_EndpointInfo_4
   \   000096   05..         INC       ?V5
   1181          
   1182                pCmd->deviceID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_4:
   \   000098   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   00009B   EE           MOV       A,R6
   \   00009C   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00009F   3F           ADDC      A,R7
   \   0000A0   F583         MOV       DPH,A
   \   0000A2   EA           MOV       A,R2
   \   0000A3   12....       LCALL     ?Subroutine81 & 0xFFFF
   1183                pBuf += 2;
   1184          
   1185                pCmd->version = *pBuf++;
   \                     ??CrossCallReturnLabel_143:
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   C0E0         PUSH      A
   \   0000AB   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   0000AE   3F           ADDC      A,R7
   \   0000AF   F583         MOV       DPH,A
   \   0000B1   D0E0         POP       A
   \   0000B3   F0           MOVX      @DPTR,A
   1186          
   1187                status = pCBs->pfnEndpointInfo( &(pInMsg->msg->srcAddr), pCmd );
   \   0000B4                ; Setup parameters for indirect call
   \   0000B4   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   0000B7   12....       LCALL     ?CALL_IND
   \   0000BA   E9           MOV       A,R1
   \   0000BB   F5..         MOV       ?V4,A
   1188          
   1189                zcl_mem_free( pCmd );
   \   0000BD                ; Setup parameters for call to function osal_mem_free
   \   0000BD   EE           MOV       A,R6
   \   0000BE   FA           MOV       R2,A
   \   0000BF   EF           MOV       A,R7
   \   0000C0   FB           MOV       R3,A
   \   0000C1   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C4   8003         SJMP      ??bdbTL_ProcessInCmd_EndpointInfo_1
   1190              }
   1191            }
   1192            else
   1193            {
   1194              status = ZSuccess;
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_0:
   \   0000C6   75..00       MOV       ?V4,#0x0
   1195            }
   1196          
   1197            return ( status );
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_1:
   \   0000C9   A9..         MOV       R1,?V4
   \   0000CB   02....       LJMP      ??Subroutine183_0 & 0xFFFF
   1198          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine189_0
   \   000002                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine190_0
   \   000001                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   85..82       MOV       DPL,?V4
   \   000007   85..83       MOV       DPH,?V5
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine191_0
   \   000001                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   8E82         MOV       DPL,R6
   \   000004   8F83         MOV       DPH,R7
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EE           MOV       A,R6
   \   000001   FC           MOV       R4,A
   \   000002                REQUIRE ??Subroutine192_0
   \   000002                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   EF           MOV       A,R7
   \   000001   FD           MOV       R5,A
   \   000002   85..82       MOV       DPL,?V0
   \   000005   85..83       MOV       DPH,?V1
   \   000008   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   00000B   85..82       MOV       DPL,?V2
   \   00000E   85..83       MOV       DPH,?V3
   \   000011   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   F5..         MOV       ?V2,A
   \   000002   E4           CLR       A
   \   000003   3D           ADDC      A,R5
   \   000004   F5..         MOV       ?V3,A
   \   000006   85..82       MOV       DPL,?V2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000003   EA           MOV       A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   F582         MOV       DPL,A
   \   000002   85..83       MOV       DPH,?V5
   \   000005                REQUIRE ??Subroutine207_0
   \   000005                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
   1199          
   1200          /*********************************************************************
   1201           * @fn      bdbTL_ProcessInCmd_GetGrpIDsRsp
   1202           *
   1203           * @brief   Process in the received Get Group Identifiers Response command.
   1204           *
   1205           * @param   pInMsg - pointer to the incoming message
   1206           * @param   pCBs - pointer to the application callbacks
   1207           *
   1208           * @return  ZStatus_t
   1209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A9..         MOV       R1,?V7
   \   000002                REQUIRE ??Subroutine180_0
   \   000002                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1210          static ZStatus_t bdbTL_ProcessInCmd_GetGrpIDsRsp( zclIncoming_t *pInMsg,
   \                     bdbTL_ProcessInCmd_GetGrpIDsRsp:
   1211                                                            bdbTL_AppCallbacks_t *pCBs )
   1212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   1213            ZStatus_t status = ZFailure;
   \   000009   75..01       MOV       ?V7,#0x1
   1214          
   1215            if ( pCBs->pfnGetGrpIDsRsp )
   \   00000C   EC           MOV       A,R4
   \   00000D   2406         ADD       A,#0x6
   \   00000F   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000012   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000015   7003         JNZ       $+5
   \   000017   02....       LJMP      ??bdbTL_ProcessInCmd_GetGrpIDsRsp_0 & 0xFFFF
   1216            {
   1217              bdbTLGetGrpIDsRsp_t *pRsp;
   1218              uint8 cnt = pInMsg->pData[TOUCHLINK_CMDLEN_GET_GRP_IDS_RSP-1];
   \   00001A   12....       LCALL     ?Subroutine51 & 0xFFFF
   1219              uint8 rspLen = sizeof( bdbTLGetGrpIDsRsp_t ) + ( cnt * sizeof( grpInfoRec_t ) );
   1220          
   1221              pRsp = (bdbTLGetGrpIDsRsp_t *)zcl_mem_alloc( rspLen );
   \                     ??CrossCallReturnLabel_78:
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   75F003       MOV       B,#0x3
   \   000020   A4           MUL       AB
   \   000021   12....       LCALL     ?Subroutine91 & 0xFFFF
   1222              if ( pRsp )
   \                     ??CrossCallReturnLabel_395:
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??bdbTL_ProcessInCmd_GetGrpIDsRsp_0 & 0xFFFF
   1223              {
   1224                uint8 *pBuf = pInMsg->pData;
   \   000029   85..82       MOV       DPL,?V4
   \   00002C   85..83       MOV       DPH,?V5
   \   00002F   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000032   12....       LCALL     ?Subroutine21 & 0xFFFF
   1225                uint8 i;
   1226          
   1227                pRsp->total = *pBuf++;
   1228                pRsp->startIndex = *pBuf++;
   1229                pRsp->cnt = *pBuf++;
   \                     ??CrossCallReturnLabel_16:
   \   000035   8882         MOV       DPL,R0
   \   000037   8983         MOV       DPH,R1
   \   000039   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   00003C   E8           MOV       A,R0
   \   00003D   2403         ADD       A,#0x3
   \   00003F   F8           MOV       R0,A
   \   000040   5001         JNC       ??bdbTL_ProcessInCmd_GetGrpIDsRsp_1
   \   000042   09           INC       R1
   1230                pRsp->grpInfoRec = (grpInfoRec_t *)(pRsp+1);
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsRsp_1:
   \   000043   EA           MOV       A,R2
   \   000044   2403         ADD       A,#0x3
   \   000046   FA           MOV       R2,A
   \   000047   E4           CLR       A
   \   000048   3F           ADDC      A,R7
   \   000049   FB           MOV       R3,A
   \   00004A   EE           MOV       A,R6
   \   00004B   2405         ADD       A,#0x5
   \   00004D   FC           MOV       R4,A
   \   00004E   E4           CLR       A
   \   00004F   3F           ADDC      A,R7
   \   000050   FD           MOV       R5,A
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   EC           MOV       A,R4
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   ED           MOV       A,R5
   \   000059   F0           MOVX      @DPTR,A
   1231          
   1232                for ( i = 0; i < cnt; i++ )
   \   00005A   75..00       MOV       ?V4,#0x0
   \   00005D   8035         SJMP      ??bdbTL_ProcessInCmd_GetGrpIDsRsp_2
   1233                {
   1234                  grpInfoRec_t *pRec = &(pRsp->grpInfoRec[i]);
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsRsp_3:
   \   00005F   E5..         MOV       A,?V4
   \   000061   75F003       MOV       B,#0x3
   \   000064   A4           MUL       AB
   \   000065   FC           MOV       R4,A
   \   000066   85F0..       MOV       ?V5,B
   \   000069   AD..         MOV       R5,?V5
   \   00006B   8A82         MOV       DPL,R2
   \   00006D   8B83         MOV       DPH,R3
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   2C           ADD       A,R4
   \   000071   FC           MOV       R4,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   3D           ADDC      A,R5
   \   000075   FD           MOV       R5,A
   1235          
   1236                  pRec->grpID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000076   8882         MOV       DPL,R0
   \   000078   8983         MOV       DPH,R1
   \   00007A   12....       LCALL     ?Subroutine69 & 0xFFFF
   1237                  pBuf += 2;
   1238          
   1239                  pRec->grpType = *pBuf++;
   1240                }
   \                     ??CrossCallReturnLabel_109:
   \   00007D   8C82         MOV       DPL,R4
   \   00007F   8D83         MOV       DPH,R5
   \   000081   F0           MOVX      @DPTR,A
   \   000082   A3           INC       DPTR
   \   000083   E5..         MOV       A,?V9
   \   000085   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000088   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00008B   E8           MOV       A,R0
   \   00008C   2403         ADD       A,#0x3
   \   00008E   F8           MOV       R0,A
   \   00008F   5001         JNC       ??bdbTL_ProcessInCmd_GetGrpIDsRsp_4
   \   000091   09           INC       R1
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsRsp_4:
   \   000092   05..         INC       ?V4
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsRsp_2:
   \   000094   E5..         MOV       A,?V4
   \   000096   C3           CLR       C
   \   000097   95..         SUBB      A,?V6
   \   000099   40C4         JC        ??bdbTL_ProcessInCmd_GetGrpIDsRsp_3
   1241          
   1242                status = pCBs->pfnGetGrpIDsRsp( &(pInMsg->msg->srcAddr), pRsp );
   \   00009B                ; Setup parameters for indirect call
   \   00009B   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   00009E   12....       LCALL     ?CALL_IND
   \   0000A1   E9           MOV       A,R1
   \   0000A2   F5..         MOV       ?V7,A
   1243          
   1244                zcl_mem_free( pRsp );
   \   0000A4                ; Setup parameters for call to function osal_mem_free
   \   0000A4   EE           MOV       A,R6
   \   0000A5   FA           MOV       R2,A
   \   0000A6   EF           MOV       A,R7
   \   0000A7   FB           MOV       R3,A
   \   0000A8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1245              }
   1246            }
   1247          
   1248            return ( status );
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsRsp_0:
   \   0000AB   02....       LJMP      ?Subroutine4 & 0xFFFF
   1249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   2405         ADD       A,#0x5
   \   000002   FA           MOV       R2,A
   \   000003                REQUIRE ??Subroutine193_0
   \   000003                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   \   000009   AE..         MOV       R6,?V8
   \   00000B   AF..         MOV       R7,?V9
   \   00000D   EA           MOV       A,R2
   \   00000E   4F           ORL       A,R7
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V10,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V9,A
   \   000007   E5..         MOV       A,?V10
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   EA           MOV       A,R2
   \   000001   2408         ADD       A,#0x8
   \   000003   F5..         MOV       ?V4,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V1
   \   000008   F5..         MOV       ?V5,A
   \   00000A   85..82       MOV       DPL,?V4
   \   00000D   F583         MOV       DPH,A
   \   00000F   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V6,A
   \   000017   22           RET
   1250          
   1251          /*********************************************************************
   1252           * @fn      bdbTL_ProcessInCmd_GetEPListRsp
   1253           *
   1254           * @brief   Process in the received Get Endpoint List Response command.
   1255           *
   1256           * @param   pInMsg - pointer to the incoming message
   1257           * @param   pCBs - pointer to the application callbacks
   1258           *
   1259           * @return  ZStatus_t
   1260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          static ZStatus_t bdbTL_ProcessInCmd_GetEPListRsp( zclIncoming_t *pInMsg,
   \                     bdbTL_ProcessInCmd_GetEPListRsp:
   1262                                                            bdbTL_AppCallbacks_t *pCBs )
   1263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   1264            ZStatus_t status = ZFailure;
   \   000009   75..01       MOV       ?V7,#0x1
   1265          
   1266            if ( pCBs->pfnGetEPListRsp )
   \   00000C   EC           MOV       A,R4
   \   00000D   2408         ADD       A,#0x8
   \   00000F   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000012   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000015   7003         JNZ       $+5
   \   000017   02....       LJMP      ??bdbTL_ProcessInCmd_GetEPListRsp_0 & 0xFFFF
   1267            {
   1268              bdbTLGetEPListRsp_t *pRsp;
   1269              uint8 cnt = pInMsg->pData[TOUCHLINK_CMDLEN_GET_EP_LIST_RSP-1];
   \   00001A   12....       LCALL     ?Subroutine51 & 0xFFFF
   1270              uint8 rspLen = sizeof( bdbTLGetEPListRsp_t ) + ( cnt * sizeof( epInfoRec_t ) );
   1271          
   1272              pRsp = (bdbTLGetEPListRsp_t *)zcl_mem_alloc( rspLen );
   \                     ??CrossCallReturnLabel_79:
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   33           RLC       A
   \   00001E   33           RLC       A
   \   00001F   33           RLC       A
   \   000020   54F8         ANL       A,#0xf8
   \   000022   12....       LCALL     ?Subroutine91 & 0xFFFF
   1273              if ( pRsp )
   \                     ??CrossCallReturnLabel_396:
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??bdbTL_ProcessInCmd_GetEPListRsp_0 & 0xFFFF
   1274              {
   1275                uint8 *pBuf = pInMsg->pData;
   \   00002A   85..82       MOV       DPL,?V4
   \   00002D   85..83       MOV       DPH,?V5
   \   000030   12....       LCALL     ?Subroutine131 & 0xFFFF
   1276                uint8 i;
   1277          
   1278                pRsp->total = *pBuf++;
   \                     ??CrossCallReturnLabel_241:
   \   000033   8A82         MOV       DPL,R2
   \   000035   F583         MOV       DPH,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   12....       LCALL     ?Subroutine142 & 0xFFFF
   1279                pRsp->startIndex = *pBuf++;
   \                     ??CrossCallReturnLabel_253:
   \   00003F   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000042   12....       LCALL     ?Subroutine142 & 0xFFFF
   1280                pRsp->cnt = *pBuf++;
   \                     ??CrossCallReturnLabel_254:
   \   000045   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000048   A3           INC       DPTR
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   EA           MOV       A,R2
   \   00004B   2403         ADD       A,#0x3
   \   00004D   FA           MOV       R2,A
   \   00004E   5001         JNC       ??bdbTL_ProcessInCmd_GetEPListRsp_1
   \   000050   0B           INC       R3
   1281                pRsp->epInfoRec = (epInfoRec_t *)(pRsp+1);
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_1:
   \   000051   EE           MOV       A,R6
   \   000052   2403         ADD       A,#0x3
   \   000054   F8           MOV       R0,A
   \   000055   E4           CLR       A
   \   000056   3F           ADDC      A,R7
   \   000057   F9           MOV       R1,A
   \   000058   E8           MOV       A,R0
   \   000059   FC           MOV       R4,A
   \   00005A   E9           MOV       A,R1
   \   00005B   FD           MOV       R5,A
   \   00005C   EE           MOV       A,R6
   \   00005D   2405         ADD       A,#0x5
   \   00005F   F8           MOV       R0,A
   \   000060   E4           CLR       A
   \   000061   3F           ADDC      A,R7
   \   000062   F9           MOV       R1,A
   \   000063   8C82         MOV       DPL,R4
   \   000065   8D83         MOV       DPH,R5
   \   000067   E8           MOV       A,R0
   \   000068   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   1282          
   1283                for ( i = 0; i < cnt; i++ )
   \                     ??CrossCallReturnLabel_381:
   \   00006B   7900         MOV       R1,#0x0
   \   00006D   805A         SJMP      ??bdbTL_ProcessInCmd_GetEPListRsp_2
   1284                {
   1285                  epInfoRec_t *pRec = &(pRsp->epInfoRec[i]);
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_3:
   \   00006F   E9           MOV       A,R1
   \   000070   F5..         MOV       ?V4,A
   \   000072   75..00       MOV       ?V5,#0x0
   \   000075   7403         MOV       A,#0x3
   \   000077   78..         MOV       R0,#?V4
   \   000079   12....       LCALL     ?S_SHL
   \   00007C   8C82         MOV       DPL,R4
   \   00007E   8D83         MOV       DPH,R5
   \   000080   E0           MOVX      A,@DPTR
   \   000081   25..         ADD       A,?V4
   \   000083   F5..         MOV       ?V4,A
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   35..         ADDC      A,?V5
   \   000089   F5..         MOV       ?V5,A
   1286          
   1287                  pRec->nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00008B   8A82         MOV       DPL,R2
   \   00008D   8B83         MOV       DPH,R3
   \   00008F   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000092   85..82       MOV       DPL,?V4
   \   000095   85..83       MOV       DPH,?V5
   \   000098   12....       LCALL     ?Subroutine83 & 0xFFFF
   1288                  pBuf += 2;
   1289          
   1290                  pRec->endpoint = *pBuf++;
   \                     ??CrossCallReturnLabel_144:
   \   00009B   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   EA           MOV       A,R2
   \   0000A0   2403         ADD       A,#0x3
   \   0000A2   FA           MOV       R2,A
   \   0000A3   5001         JNC       ??bdbTL_ProcessInCmd_GetEPListRsp_4
   \   0000A5   0B           INC       R3
   1291          
   1292                  pRec->profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_4:
   \   0000A6   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000A9   F0           MOVX      @DPTR,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   E5..         MOV       A,?V9
   \   0000AD   F0           MOVX      @DPTR,A
   1293                  pBuf += 2;
   \   0000AE   EA           MOV       A,R2
   \   0000AF   2402         ADD       A,#0x2
   \   0000B1   FA           MOV       R2,A
   \   0000B2   5001         JNC       ??bdbTL_ProcessInCmd_GetEPListRsp_5
   \   0000B4   0B           INC       R3
   1294          
   1295                  pRec->deviceID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_5:
   \   0000B5   12....       LCALL     ?Subroutine39 & 0xFFFF
   1296                  pBuf += 2;
   1297          
   1298                  pRec->version = *pBuf++;
   1299                }
   \                     ??CrossCallReturnLabel_49:
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   0000BD   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   EA           MOV       A,R2
   \   0000C2   2403         ADD       A,#0x3
   \   0000C4   FA           MOV       R2,A
   \   0000C5   5001         JNC       ??bdbTL_ProcessInCmd_GetEPListRsp_6
   \   0000C7   0B           INC       R3
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_6:
   \   0000C8   09           INC       R1
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_2:
   \   0000C9   E9           MOV       A,R1
   \   0000CA   C3           CLR       C
   \   0000CB   95..         SUBB      A,?V6
   \   0000CD   40A0         JC        ??bdbTL_ProcessInCmd_GetEPListRsp_3
   1300          
   1301                status = pCBs->pfnGetEPListRsp( &(pInMsg->msg->srcAddr), pRsp );
   \   0000CF                ; Setup parameters for indirect call
   \   0000CF   1C           DEC       R4
   \   0000D0   1C           DEC       R4
   \   0000D1   1C           DEC       R4
   \   0000D2   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   0000D5   12....       LCALL     ?CALL_IND
   \   0000D8   E9           MOV       A,R1
   \   0000D9   F5..         MOV       ?V7,A
   1302          
   1303                zcl_mem_free( pRsp );
   \   0000DB                ; Setup parameters for call to function osal_mem_free
   \   0000DB   EE           MOV       A,R6
   \   0000DC   FA           MOV       R2,A
   \   0000DD   EF           MOV       A,R7
   \   0000DE   FB           MOV       R3,A
   \   0000DF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1304              }
   1305            }
   1306          
   1307            return ( status );
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_0:
   \   0000E2   02....       LJMP      ?Subroutine4 & 0xFFFF
   1308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V9
   \   000004   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F582         MOV       DPL,A
   \   000002   8B83         MOV       DPH,R3
   \   000004   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000007   85..82       MOV       DPL,?V4
   \   00000A   85..83       MOV       DPH,?V5
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   85..82       MOV       DPL,?V4
   \   000006   85..83       MOV       DPH,?V5
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET
   1309          
   1310          /*********************************************************************
   1311          * Inter-PAN functions
   1312          **********************************************************************/
   1313          
   1314          /*********************************************************************
   1315           * @fn      bdbTL_HdlInInterPANCommands
   1316           *
   1317           * @brief   Callback from ZCL to process incoming Inter-PAN Commands
   1318           *          specific to this cluster library
   1319          
   1320           * @param   pInMsg - pointer to the incoming message
   1321           *
   1322           * @return  ZStatus_t
   1323           */
   1324          static ZStatus_t bdbTL_HdlInInterPANCommands( zclIncoming_t *pInMsg )
   1325          {
   1326            ZStatus_t status;
   1327          
   1328            // make sure Inter-PAN callbacks exist
   1329            if ( pInterPANCBs == NULL )
   1330              return ( ZFailure );
   1331          
   1332            switch ( pInMsg->msg->clusterId )
   1333            {
   1334              case ZCL_CLUSTER_ID_TOUCHLINK:
   1335                status = bdbTL_ProcessInLLInterPANCmds( pInMsg );
   1336                break;
   1337          
   1338              default:
   1339                status = ZFailure;
   1340                break;
   1341            }
   1342          
   1343            return ( status );
   1344          }
   1345          
   1346          /*********************************************************************
   1347           * @fn      bdbTL_ProcessInLLInterPANCmds
   1348           *
   1349           * @brief   Callback from ZCL to process incoming Inter-PAN Commands
   1350           *          specific to this cluster library on a command ID basis
   1351           *
   1352           * @param   pInMsg - pointer to the incoming message
   1353           *
   1354           * @return  ZStatus_t
   1355           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004                REQUIRE ??Subroutine194_0
   \   000004                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1356          static ZStatus_t bdbTL_ProcessInLLInterPANCmds( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInLLInterPANCmds:
   1357          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   1358            ZStatus_t status = SUCCESS;
   \   00000E   7E00         MOV       R6,#0x0
   1359            
   1360          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
   1361            if ( touchLinkTargetEnabled == FALSE )
   1362            {
   1363              return status;
   1364            }
   1365          #endif
   1366            
   1367            switch ( pInMsg->hdr.commandID )
   \   000010   EA           MOV       A,R2
   \   000011   2406         ADD       A,#0x6
   \   000013   F5..         MOV       ?V6,A
   \   000015   E4           CLR       A
   \   000016   35..         ADDC      A,?V3
   \   000018   F5..         MOV       ?V7,A
   \   00001A   EA           MOV       A,R2
   \   00001B   2408         ADD       A,#0x8
   \   00001D   F5..         MOV       ?V0,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V3
   \   000022   F5..         MOV       ?V1,A
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   604D         JZ        ??bdbTL_ProcessInLLInterPANCmds_0
   \   000032   14           DEC       A
   \   000033   7003         JNZ       $+5
   \   000035   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_1 & 0xFFFF
   \   000038   14           DEC       A
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_2 & 0xFFFF
   \   00003E   14           DEC       A
   \   00003F   7003         JNZ       $+5
   \   000041   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_3 & 0xFFFF
   \   000044   24FD         ADD       A,#-0x3
   \   000046   7003         JNZ       $+5
   \   000048   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_4 & 0xFFFF
   \   00004B   14           DEC       A
   \   00004C   7003         JNZ       $+5
   \   00004E   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_5 & 0xFFFF
   \   000051   24F7         ADD       A,#-0x9
   \   000053   7003         JNZ       $+5
   \   000055   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_6 & 0xFFFF
   \   000058   14           DEC       A
   \   000059   7003         JNZ       $+5
   \   00005B   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_7 & 0xFFFF
   \   00005E   14           DEC       A
   \   00005F   7003         JNZ       $+5
   \   000061   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_8 & 0xFFFF
   \   000064   14           DEC       A
   \   000065   7003         JNZ       $+5
   \   000067   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_9 & 0xFFFF
   \   00006A   14           DEC       A
   \   00006B   7003         JNZ       $+5
   \   00006D   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_10 & 0xFFFF
   \   000070   14           DEC       A
   \   000071   7003         JNZ       $+5
   \   000073   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_11 & 0xFFFF
   \   000076   14           DEC       A
   \   000077   7003         JNZ       $+5
   \   000079   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_12 & 0xFFFF
   \   00007C   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_13 & 0xFFFF
   1368            {
   1369              case COMMAND_TOUCHLINK_SCAN_REQ:
   1370                status = bdbTL_ProcessInCmd_ScanReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_0:
   \   00007F   90....       MOV       DPTR,#pInterPANCBs
   \   000082   12....       LCALL     ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000085   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000088   7003         JNZ       $+5
   \   00008A   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_14 & 0xFFFF
   \   00008D                ; Setup parameters for call to function osal_build_uint32
   \   00008D   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000090   740F         MOV       A,#0xf
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?XSTORE_R2345
   \   000098   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   00009B   C0E0         PUSH      A
   \   00009D   7413         MOV       A,#0x13
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   D0E0         POP       A
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   85..82       MOV       DPL,?V0
   \   0000A8   85..83       MOV       DPH,?V1
   \   0000AB   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   C0E0         PUSH      A
   \   0000B2   7415         MOV       A,#0x15
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   D0E0         POP       A
   \   0000B9   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000BC   740F         MOV       A,#0xf
   \   0000BE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C1   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000C4   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_15 & 0xFFFF
   1371                break;
   1372          
   1373              case COMMAND_TOUCHLINK_DEVICE_INFO_REQ:
   1374                status = bdbTL_ProcessInCmd_DeviceInfoReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_2:
   \   0000C7   90....       MOV       DPTR,#pInterPANCBs
   \   0000CA   12....       LCALL     ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   0000D2   7003         JNZ       $+5
   \   0000D4   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_14 & 0xFFFF
   \   0000D7                ; Setup parameters for call to function osal_build_uint32
   \   0000D7   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000DA   12....       LCALL     ?XSTORE_R2345
   \   0000DD   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   0000E0   C0E0         PUSH      A
   \   0000E2   7404         MOV       A,#0x4
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   D0E0         POP       A
   \   0000E9   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   0000EC   AC..         MOV       R4,?XSP + 0
   \   0000EE   AD..         MOV       R5,?XSP + 1
   \   0000F0   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000F3   804A         SJMP      ??bdbTL_ProcessInLLInterPANCmds_16
   1375                break;
   1376          
   1377              case COMMAND_TOUCHLINK_IDENTIFY_REQ:
   1378                status = bdbTL_ProcessInCmd_IdentifyReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_4:
   \   0000F5   90....       MOV       DPTR,#pInterPANCBs
   \   0000F8   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000FB   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   0000FE   7003         JNZ       $+5
   \   000100   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_14 & 0xFFFF
   \   000103                ; Setup parameters for call to function osal_build_uint32
   \   000103   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000106   7409         MOV       A,#0x9
   \   000108   12....       LCALL     ?XSTACK_DISP0_8
   \   00010B   12....       LCALL     ?XSTORE_R2345
   \   00010E   85..82       MOV       DPL,?V0
   \   000111   85..83       MOV       DPH,?V1
   \   000114   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000117   F9           MOV       R1,A
   \   000118   8882         MOV       DPL,R0
   \   00011A   F583         MOV       DPH,A
   \   00011C   A3           INC       DPTR
   \   00011D   A3           INC       DPTR
   \   00011E   A3           INC       DPTR
   \   00011F   A3           INC       DPTR
   \   000120   E0           MOVX      A,@DPTR
   \   000121   FA           MOV       R2,A
   \   000122   8882         MOV       DPL,R0
   \   000124   8983         MOV       DPH,R1
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   F9           MOV       R1,A
   \   00012D   740D         MOV       A,#0xd
   \   00012F   12....       LCALL     ?XSTACK_DISP0_8
   \   000132   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000135                ; Setup parameters for indirect call
   \   000135   7409         MOV       A,#0x9
   \   000137   12....       LCALL     ?XSTACK_DISP102_8
   \   00013A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \                     ??bdbTL_ProcessInLLInterPANCmds_16:
   \   00013F   A3           INC       DPTR
   \   000140   A3           INC       DPTR
   \   000141   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_15 & 0xFFFF
   1379                break;
   1380          
   1381              case COMMAND_TOUCHLINK_RESET_TO_FN_REQ:
   1382                status = bdbTL_ProcessInCmd_ResetToFNReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_5:
   \   000144   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000147   2406         ADD       A,#0x6
   \   000149   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   00014C   7003         JNZ       $+5
   \   00014E   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_14 & 0xFFFF
   \   000151                ; Setup parameters for call to function osal_build_uint32
   \   000151   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000154   7405         MOV       A,#0x5
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   12....       LCALL     ?XSTORE_R2345
   \   00015C                ; Setup parameters for indirect call
   \   00015C   7405         MOV       A,#0x5
   \   00015E   12....       LCALL     ?XSTACK_DISP102_8
   \   000161   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000164   2406         ADD       A,#0x6
   \   000166   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_17 & 0xFFFF
   1383                break;
   1384          
   1385              case COMMAND_TOUCHLINK_NWK_START_REQ:
   1386                status = bdbTL_ProcessInCmd_NwkStartReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_6:
   \   000169                ; Setup parameters for call to function bdbTL_ProcessInCmd_NwkStartReq
   \   000169   12....       LCALL     `??bdbTL_ProcessInCmd_NwkStartReq::?relay`; Banked call to: bdbTL_ProcessInCmd_NwkStartReq
   \   00016C   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_18 & 0xFFFF
   1387                break;
   1388          
   1389              case COMMAND_TOUCHLINK_NWK_JOIN_RTR_REQ:
   1390                status = bdbTL_ProcessInCmd_NwkJoinRtrReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_8:
   \   00016F   75..00       MOV       ?V4,#0x0
   \   000172   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000175   240A         ADD       A,#0xa
   \   000177   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   00017A   6027         JZ        ??bdbTL_ProcessInLLInterPANCmds_19
   \   00017C                ; Setup parameters for call to function osal_mem_alloc
   \   00017C   7A2F         MOV       R2,#0x2f
   \   00017E   12....       LCALL     ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000181   6020         JZ        ??bdbTL_ProcessInLLInterPANCmds_19
   \   000183                ; Setup parameters for call to function bdbTL_ParseInCmd_NwkJoinReq
   \   000183   EA           MOV       A,R2
   \   000184   FC           MOV       R4,A
   \   000185   EB           MOV       A,R3
   \   000186   FD           MOV       R5,A
   \   000187   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00018A   EE           MOV       A,R6
   \   00018B   FC           MOV       R4,A
   \   00018C   EF           MOV       A,R7
   \   00018D   FD           MOV       R5,A
   \   00018E   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000191   240A         ADD       A,#0xa
   \   000193   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   000196   12....       LCALL     ?CALL_IND
   \   000199   E9           MOV       A,R1
   \   00019A   F5..         MOV       ?V4,A
   \   00019C                ; Setup parameters for call to function osal_mem_free
   \   00019C   EE           MOV       A,R6
   \   00019D   FA           MOV       R2,A
   \   00019E   EF           MOV       A,R7
   \   00019F   FB           MOV       R3,A
   \   0001A0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??bdbTL_ProcessInLLInterPANCmds_19:
   \   0001A3   AE..         MOV       R6,?V4
   1391                break;
   \   0001A5   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_14 & 0xFFFF
   1392          
   1393              case COMMAND_TOUCHLINK_NWK_JOIN_ED_REQ:
   1394                status = bdbTL_ProcessInCmd_NwkJoinEDReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_10:
   \   0001A8   7F00         MOV       R7,#0x0
   \   0001AA   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   0001AD   240C         ADD       A,#0xc
   \   0001AF   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   0001B2   6026         JZ        ??bdbTL_ProcessInLLInterPANCmds_20
   \   0001B4                ; Setup parameters for call to function osal_mem_alloc
   \   0001B4   7A2F         MOV       R2,#0x2f
   \   0001B6   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0001B9   601F         JZ        ??bdbTL_ProcessInLLInterPANCmds_20
   \   0001BB                ; Setup parameters for call to function bdbTL_ParseInCmd_NwkJoinReq
   \   0001BB   AC..         MOV       R4,?V4
   \   0001BD   AD..         MOV       R5,?V5
   \   0001BF   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0001C2   AC..         MOV       R4,?V4
   \   0001C4   AD..         MOV       R5,?V5
   \   0001C6   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   0001C9   240C         ADD       A,#0xc
   \   0001CB   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   0001CE   12....       LCALL     ?CALL_IND
   \   0001D1   E9           MOV       A,R1
   \   0001D2   FF           MOV       R7,A
   \   0001D3                ; Setup parameters for call to function osal_mem_free
   \   0001D3   AA..         MOV       R2,?V4
   \   0001D5   AB..         MOV       R3,?V5
   \   0001D7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??bdbTL_ProcessInLLInterPANCmds_20:
   \   0001DA   EF           MOV       A,R7
   \   0001DB   807D         SJMP      ??bdbTL_ProcessInLLInterPANCmds_21
   1395                break;
   1396          
   1397              case COMMAND_TOUCHLINK_NWK_UPDATE_REQ:
   1398                status = bdbTL_ProcessInCmd_NwkUpdateReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_12:
   \   0001DD                ; Setup parameters for call to function bdbTL_ProcessInCmd_NwkUpdateReq
   \   0001DD   12....       LCALL     `??bdbTL_ProcessInCmd_NwkUpdateReq::?relay`; Banked call to: bdbTL_ProcessInCmd_NwkUpdateReq
   \   0001E0   8077         SJMP      ??bdbTL_ProcessInLLInterPANCmds_18
   1399                break;
   1400          
   1401              case COMMAND_TOUCHLINK_SCAN_RSP:
   1402                status = bdbTL_ProcessInCmd_ScanRsp( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_1:
   \   0001E2                ; Setup parameters for call to function bdbTL_ProcessInCmd_ScanRsp
   \   0001E2   12....       LCALL     `??bdbTL_ProcessInCmd_ScanRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_ScanRsp
   \   0001E5   8072         SJMP      ??bdbTL_ProcessInLLInterPANCmds_18
   1403                break;
   1404          
   1405              case COMMAND_TOUCHLINK_DEVICE_INFO_RSP:
   1406                status = bdbTL_ProcessInCmd_DeviceInfoRsp( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_3:
   \   0001E7                ; Setup parameters for call to function bdbTL_ProcessInCmd_DeviceInfoRsp
   \   0001E7   12....       LCALL     `??bdbTL_ProcessInCmd_DeviceInfoRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_DeviceInfoRsp
   \   0001EA   806D         SJMP      ??bdbTL_ProcessInLLInterPANCmds_18
   1407                break;
   1408          
   1409              case COMMAND_TOUCHLINK_NWK_START_RSP:
   1410                status = bdbTL_ProcessInCmd_NwkStartRsp( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_7:
   \   0001EC                ; Setup parameters for call to function bdbTL_ProcessInCmd_NwkStartRsp
   \   0001EC   12....       LCALL     `??bdbTL_ProcessInCmd_NwkStartRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_NwkStartRsp
   \   0001EF   8068         SJMP      ??bdbTL_ProcessInLLInterPANCmds_18
   1411                break;
   1412          
   1413              case COMMAND_TOUCHLINK_NWK_JOIN_RTR_RSP:
   1414                status = bdbTL_ProcessInCmd_NwkJoinRtrRsp( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_9:
   \   0001F1   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   0001F4   2416         ADD       A,#0x16
   \   0001F6   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   0001F9   6064         JZ        ??bdbTL_ProcessInLLInterPANCmds_14
   \   0001FB                ; Setup parameters for call to function osal_build_uint32
   \   0001FB   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0001FE   EA           MOV       A,R2
   \   0001FF   F8           MOV       R0,A
   \   000200   EB           MOV       A,R3
   \   000201   F9           MOV       R1,A
   \   000202   EC           MOV       A,R4
   \   000203   FA           MOV       R2,A
   \   000204   ED           MOV       A,R5
   \   000205   FB           MOV       R3,A
   \   000206   85..82       MOV       DPL,?XSP + 0
   \   000209   85..83       MOV       DPH,?XSP + 1
   \   00020C   12....       LCALL     ?XSTORE_R0123
   \   00020F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000212   C0E0         PUSH      A
   \   000214   7404         MOV       A,#0x4
   \   000216   12....       LCALL     ?XSTACK_DISP0_8
   \   000219   D0E0         POP       A
   \   00021B   F0           MOVX      @DPTR,A
   \   00021C                ; Setup parameters for indirect call
   \   00021C   AC..         MOV       R4,?XSP + 0
   \   00021E   AD..         MOV       R5,?XSP + 1
   \   000220   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000223   2416         ADD       A,#0x16
   \   000225   8026         SJMP      ??bdbTL_ProcessInLLInterPANCmds_17
   1415                break;
   1416          
   1417              case COMMAND_TOUCHLINK_NWK_JOIN_ED_RSP:
   1418                status = bdbTL_ProcessInCmd_NwkJoinEDRsp( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_11:
   \   000227   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   00022A   2418         ADD       A,#0x18
   \   00022C   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   00022F   602E         JZ        ??bdbTL_ProcessInLLInterPANCmds_14
   \   000231                ; Setup parameters for call to function osal_build_uint32
   \   000231   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000234   12....       LCALL     ?XSTORE_R2345
   \   000237   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   00023A   C0E0         PUSH      A
   \   00023C   7404         MOV       A,#0x4
   \   00023E   12....       LCALL     ?XSTACK_DISP0_8
   \   000241   D0E0         POP       A
   \   000243   F0           MOVX      @DPTR,A
   \   000244                ; Setup parameters for indirect call
   \   000244   AC..         MOV       R4,?XSP + 0
   \   000246   AD..         MOV       R5,?XSP + 1
   \   000248   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   00024B   2418         ADD       A,#0x18
   \                     ??bdbTL_ProcessInLLInterPANCmds_17:
   \   00024D   F582         MOV       DPL,A
   \   00024F   E4           CLR       A
   \   000250   38           ADDC      A,R0
   \   000251   F583         MOV       DPH,A
   \                     ??bdbTL_ProcessInLLInterPANCmds_15:
   \   000253   12....       LCALL     ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000256   12....       LCALL     ?CALL_IND
   \                     ??bdbTL_ProcessInLLInterPANCmds_18:
   \   000259   E9           MOV       A,R1
   \                     ??bdbTL_ProcessInLLInterPANCmds_21:
   \   00025A   FE           MOV       R6,A
   \   00025B   8002         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1419                break;
   1420          
   1421              default:
   1422                status = ZFailure;   // Error ignore the command
   \                     ??bdbTL_ProcessInLLInterPANCmds_13:
   \   00025D   7E01         MOV       R6,#0x1
   1423                break;
   1424            }
   1425          
   1426            return ( status );
   \                     ??bdbTL_ProcessInLLInterPANCmds_14:
   \   00025F   EE           MOV       A,R6
   \   000260   F9           MOV       R1,A
   \   000261   7417         MOV       A,#0x17
   \   000263   12....       LCALL     ?DEALLOC_XSTACK8
   \   000266   02....       LJMP      ?Subroutine3 & 0xFFFF
   1427          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   85..82       MOV       DPL,?V6
   \   000004   85..83       MOV       DPH,?V7
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   7904         MOV       R1,#0x4
   \   000002   85..82       MOV       DPL,?V0
   \   000005   85..83       MOV       DPH,?V1
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   000009   F583         MOV       DPH,A
   \   00000B   8882         MOV       DPL,R0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine196_0
   \   000006                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   90....       MOV       DPTR,#pInterPANCBs
   \   000003                REQUIRE ??Subroutine200_0
   \   000003                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine206_0
   \   000006                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000003   90....       MOV       DPTR,#pInterPANCBs
   \   000006   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000009   22           RET
   1428          
   1429          /*********************************************************************
   1430           * @fn      bdbTL_ProcessInCmd_ScanReq
   1431           *
   1432           * @brief   Process in the received Scan Request command.
   1433           *
   1434           * @param   pInMsg - pointer to the incoming message
   1435           *
   1436           * @return  ZStatus_t
   1437           */
   1438          static ZStatus_t bdbTL_ProcessInCmd_ScanReq( zclIncoming_t *pInMsg )
   1439          {
   1440            if ( pInterPANCBs->pfnScanReq )
   1441            {
   1442              bdbTLScanReq_t req;
   1443          
   1444              req.transID = zcl_build_uint32( pInMsg->pData, 4 );
   1445          
   1446              req.zInfo.zInfoByte = pInMsg->pData[4];
   1447              req.touchLinkInfo.touchLinkInfoByte = pInMsg->pData[5];
   1448          
   1449              return ( pInterPANCBs->pfnScanReq( &(pInMsg->msg->srcAddr), &req,
   1450                                                 pInMsg->hdr.transSeqNum ) );
   1451            }
   1452          
   1453            return ( ZSuccess );
   1454          }
   1455          
   1456          /*********************************************************************
   1457           * @fn      bdbTL_ProcessInCmd_DeviceInfoReq
   1458           *
   1459           * @brief   Process in the received Device Information Request command.
   1460           *
   1461           * @param   pInMsg - pointer to the incoming message
   1462           *
   1463           * @return  ZStatus_t
   1464           */
   1465          static ZStatus_t bdbTL_ProcessInCmd_DeviceInfoReq( zclIncoming_t *pInMsg )
   1466          {
   1467            if ( pInterPANCBs->pfnDeviceInfoReq )
   1468            {
   1469              bdbTLDeviceInfoReq_t req;
   1470          
   1471              req.transID = zcl_build_uint32( pInMsg->pData, 4 );
   1472          
   1473              req.startIndex = pInMsg->pData[4];
   1474          
   1475              return ( pInterPANCBs->pfnDeviceInfoReq( &(pInMsg->msg->srcAddr), &req,
   1476                                                       pInMsg->hdr.transSeqNum ) );
   1477            }
   1478          
   1479            return ( ZSuccess );
   1480          }
   1481          
   1482          
   1483          /*********************************************************************
   1484           * @fn      bdbTL_ProcessInCmd_IdentifyReq
   1485           *
   1486           * @brief   Process in the received Identify Request command.
   1487           *
   1488           * @param   pInMsg - pointer to the incoming message
   1489           *
   1490           * @return  ZStatus_t
   1491           */
   1492          static ZStatus_t bdbTL_ProcessInCmd_IdentifyReq( zclIncoming_t *pInMsg )
   1493          {
   1494            if ( pInterPANCBs->pfnIdentifyReq )
   1495            {
   1496              bdbTLIdentifyReq_t req;
   1497          
   1498              req.transID = zcl_build_uint32( pInMsg->pData, 4 );
   1499          
   1500              req.IdDuration = BUILD_UINT16( pInMsg->pData[4], pInMsg->pData[5] );
   1501          
   1502              return ( pInterPANCBs->pfnIdentifyReq( &(pInMsg->msg->srcAddr), &req ) );
   1503            }
   1504          
   1505            return ( ZSuccess );
   1506          }
   1507          
   1508          /*********************************************************************
   1509           * @fn      bdbTL_ProcessInCmd_ResetToFNReq
   1510           *
   1511           * @brief   Process in the received Reset to Factory New Request command.
   1512           *
   1513           * @param   pInMsg - pointer to the incoming message
   1514           *
   1515           * @return  ZStatus_t
   1516           */
   1517          static ZStatus_t bdbTL_ProcessInCmd_ResetToFNReq( zclIncoming_t *pInMsg )
   1518          {
   1519            if ( pInterPANCBs->pfnResetToFNReq )
   1520            {
   1521              bdbTLResetToFNReq_t req;
   1522          
   1523              req.transID = zcl_build_uint32( pInMsg->pData, 4 );
   1524          
   1525              return ( pInterPANCBs->pfnResetToFNReq( &(pInMsg->msg->srcAddr), &req ) );
   1526            }
   1527          
   1528            return ( ZSuccess );
   1529          }
   1530          
   1531          /*********************************************************************
   1532           * @fn      bdbTL_ProcessInCmd_NwkStartReq
   1533           *
   1534           * @brief   Process in the received Network Start Request command.
   1535           *
   1536           * @param   pInMsg - pointer to the incoming message
   1537           *
   1538           * @return  ZStatus_t
   1539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005                REQUIRE ??Subroutine188_0
   \   000005                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1540          static ZStatus_t bdbTL_ProcessInCmd_NwkStartReq( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_NwkStartReq:
   1541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine33 & 0xFFFF
   1542            uint8 status = ZSuccess;
   1543          
   1544            if ( pInterPANCBs->pfnNwkStartReq )
   \                     ??CrossCallReturnLabel_444:
   \   000008   2408         ADD       A,#0x8
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   00000D   7003         JNZ       $+5
   \   00000F   02....       LJMP      ??bdbTL_ProcessInCmd_NwkStartReq_0 & 0xFFFF
   1545            {
   1546              bdbTLNwkStartReq_t *pReq;
   1547          
   1548              pReq = (bdbTLNwkStartReq_t *)zcl_mem_alloc( sizeof( bdbTLNwkStartReq_t ) );
   \   000012                ; Setup parameters for call to function osal_mem_alloc
   \   000012   12....       LCALL     ?Subroutine89 & 0xFFFF
   1549              if ( pReq )
   \                     ??CrossCallReturnLabel_521:
   \   000015   7003         JNZ       $+5
   \   000017   02....       LJMP      ??bdbTL_ProcessInCmd_NwkStartReq_0 & 0xFFFF
   1550              {
   1551                uint8 *pBuf = pInMsg->pData;
   \   00001A   12....       LCALL     ?Subroutine12 & 0xFFFF
   1552          
   1553                pReq->transID = zcl_build_uint32( pBuf, 4 );
   \                     ??CrossCallReturnLabel_455:
   \   00001D   12....       LCALL     ?XSTORE_R0123
   1554                pBuf += 4;
   \   000020   EE           MOV       A,R6
   \   000021   2404         ADD       A,#0x4
   \   000023   FE           MOV       R6,A
   \   000024   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_1
   \   000026   0F           INC       R7
   1555          
   1556                zcl_cpyExtAddr( pReq->nwkParams.extendedPANID, pBuf );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_1:
   \   000027                ; Setup parameters for call to function sAddrExtCpy
   \   000027   12....       LCALL     ?Subroutine88 & 0xFFFF
   1557                pBuf += Z_EXTADDR_LEN;
   1558          
   1559                pReq->nwkParams.keyIndex = *pBuf++;
   \                     ??CrossCallReturnLabel_154:
   \   00002A   C0E0         PUSH      A
   \   00002C   E5..         MOV       A,?V0
   \   00002E   240C         ADD       A,#0xc
   \   000030   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000033   D0E0         POP       A
   \   000035   F0           MOVX      @DPTR,A
   \   000036   EE           MOV       A,R6
   \   000037   2409         ADD       A,#0x9
   \   000039   FE           MOV       R6,A
   \   00003A   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_2
   \   00003C   0F           INC       R7
   1560          
   1561                zcl_memcpy( pReq->nwkParams.nwkKey, pBuf, SEC_KEY_LEN );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_2:
   \   00003D                ; Setup parameters for call to function osal_memcpy
   \   00003D   F5..         MOV       ?V4,A
   \   00003F   8F..         MOV       ?V5,R7
   \   000041   75..00       MOV       ?V6,#0x0
   \   000044   78..         MOV       R0,#?V4
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000049   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   1562                pBuf += SEC_KEY_LEN;
   1563          
   1564                pReq->nwkParams.logicalChannel = *pBuf++;
   \   00004F   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000052   C0E0         PUSH      A
   \   000054   E5..         MOV       A,?V0
   \   000056   241D         ADD       A,#0x1d
   \   000058   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   00005B   D0E0         POP       A
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   EE           MOV       A,R6
   \   00005F   2411         ADD       A,#0x11
   \   000061   FE           MOV       R6,A
   \   000062   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_3
   \   000064   0F           INC       R7
   1565          
   1566                pReq->nwkParams.panId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_3:
   \   000065   12....       LCALL     ?Subroutine23 & 0xFFFF
   1567                pBuf += 2;
   \                     ??CrossCallReturnLabel_19:
   \   000068   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_4
   \   00006A   0F           INC       R7
   1568          
   1569                pReq->nwkParams.nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_4:
   \   00006B   12....       LCALL     ?Subroutine15 & 0xFFFF
   1570                pBuf += 2;
   \                     ??CrossCallReturnLabel_4:
   \   00006E   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_5
   \   000070   0F           INC       R7
   1571          
   1572                pReq->nwkParams.grpIDsBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_5:
   \   000071   12....       LCALL     ?Subroutine24 & 0xFFFF
   1573                pBuf += 2;
   \                     ??CrossCallReturnLabel_21:
   \   000074   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_6
   \   000076   0F           INC       R7
   1574          
   1575                pReq->nwkParams.grpIDsEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_6:
   \   000077   12....       LCALL     ?Subroutine25 & 0xFFFF
   1576                pBuf += 2;
   \                     ??CrossCallReturnLabel_23:
   \   00007A   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_7
   \   00007C   0F           INC       R7
   1577          
   1578                pReq->nwkParams.freeNwkAddrBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_7:
   \   00007D   12....       LCALL     ?Subroutine26 & 0xFFFF
   1579                pBuf += 2;
   \                     ??CrossCallReturnLabel_25:
   \   000080   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_8
   \   000082   0F           INC       R7
   1580          
   1581                pReq->nwkParams.freeNwkAddrEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_8:
   \   000083   12....       LCALL     ?Subroutine27 & 0xFFFF
   1582                pBuf += 2;
   \                     ??CrossCallReturnLabel_27:
   \   000086   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_9
   \   000088   0F           INC       R7
   1583          
   1584                pReq->nwkParams.freeGrpIDBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_9:
   \   000089   12....       LCALL     ?Subroutine30 & 0xFFFF
   1585                pBuf += 2;
   \                     ??CrossCallReturnLabel_33:
   \   00008C   FE           MOV       R6,A
   \   00008D   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_10
   \   00008F   0F           INC       R7
   1586          
   1587                pReq->nwkParams.freeGrpIDEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_10:
   \   000090   12....       LCALL     ?Subroutine35 & 0xFFFF
   1588                pBuf += 2;
   \                     ??CrossCallReturnLabel_39:
   \   000093   EE           MOV       A,R6
   \   000094   2402         ADD       A,#0x2
   \   000096   FE           MOV       R6,A
   \   000097   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_11
   \   000099   0F           INC       R7
   1589          
   1590                zcl_cpyExtAddr( pReq->initiatorIeeeAddr, pBuf );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_11:
   \   00009A                ; Setup parameters for call to function sAddrExtCpy
   \   00009A   FC           MOV       R4,A
   \   00009B   EF           MOV       A,R7
   \   00009C   FD           MOV       R5,A
   \   00009D   E5..         MOV       A,?V0
   \   00009F   242E         ADD       A,#0x2e
   \   0000A1   FA           MOV       R2,A
   \   0000A2   E4           CLR       A
   \   0000A3   35..         ADDC      A,?V1
   \   0000A5   FB           MOV       R3,A
   \   0000A6   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1591                pBuf += Z_EXTADDR_LEN;
   \   0000A9   EE           MOV       A,R6
   \   0000AA   2408         ADD       A,#0x8
   \   0000AC   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_12
   \   0000AE   0F           INC       R7
   1592          
   1593                pReq->initiatorNwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_12:
   \   0000AF   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000B2   2436         ADD       A,#0x36
   \   0000B4   12....       LCALL     ?Subroutine82 & 0xFFFF
   1594          
   1595                status = pInterPANCBs->pfnNwkStartReq( &(pInMsg->msg->srcAddr), pReq,
   1596                                                       pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_384:
   \   0000B7                ; Setup parameters for indirect call
   \   0000B7   85..82       MOV       DPL,?V2
   \   0000BA   85..83       MOV       DPH,?V3
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F9           MOV       R1,A
   \   0000C5   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   0000C8   2408         ADD       A,#0x8
   \   0000CA   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   0000CD   12....       LCALL     ?CALL_IND
   \   0000D0   E9           MOV       A,R1
   \   0000D1   FE           MOV       R6,A
   1597          
   1598                zcl_mem_free( pReq );
   \   0000D2                ; Setup parameters for call to function osal_mem_free
   \   0000D2   AA..         MOV       R2,?V0
   \   0000D4   AB..         MOV       R3,?V1
   \   0000D6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1599              }
   1600            }
   1601          
   1602            return ( status );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_0:
   \   0000D9   EE           MOV       A,R6
   \   0000DA   F9           MOV       R1,A
   \   0000DB                REQUIRE ?Subroutine7
   \   0000DB                ; // Fall through to label ?Subroutine7
   1603          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   EE           MOV       A,R6
   \   000001   2410         ADD       A,#0x10
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   7C10         MOV       R4,#0x10
   \   000002   7D00         MOV       R5,#0x0
   \   000004   E5..         MOV       A,?V0
   \   000006   240D         ADD       A,#0xd
   \   000008   FA           MOV       R2,A
   \   000009   E4           CLR       A
   \   00000A   35..         ADDC      A,?V1
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000010   7403         MOV       A,#0x3
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   FC           MOV       R4,A
   \   000001   EF           MOV       A,R7
   \   000002   FD           MOV       R5,A
   \   000003   E5..         MOV       A,?V0
   \   000005   2404         ADD       A,#0x4
   \   000007   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   242C         ADD       A,#0x2c
   \   000005   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F583         MOV       DPH,A
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   E9           MOV       A,R1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   242A         ADD       A,#0x2a
   \   000005   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000008   EE           MOV       A,R6
   \   000009   2402         ADD       A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000003   2428         ADD       A,#0x28
   \   000005   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   2426         ADD       A,#0x26
   \   000005   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   2424         ADD       A,#0x24
   \   000005   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000003   2422         ADD       A,#0x22
   \   000005   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F583         MOV       DPH,A
   \   000007   EA           MOV       A,R2
   \   000008                REQUIRE ??Subroutine197_0
   \   000008                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   EE           MOV       A,R6
   \   000005   2402         ADD       A,#0x2
   \   000007   FE           MOV       R6,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   241E         ADD       A,#0x1e
   \   000005   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   2420         ADD       A,#0x20
   \   000005   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   8A..         MOV       ?V2,R2
   \   000002   8B..         MOV       ?V3,R3
   \   000004   7E00         MOV       R6,#0x0
   \   000006                REQUIRE ??Subroutine199_0
   \   000006                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E                REQUIRE ??Subroutine201_0
   \   00000E                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005   7904         MOV       R1,#0x4
   \   000007   EE           MOV       A,R6
   \   000008   FA           MOV       R2,A
   \   000009   EF           MOV       A,R7
   \   00000A   FB           MOV       R3,A
   \   00000B   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000003   EA           MOV       A,R2
   \   000004   F8           MOV       R0,A
   \   000005   EB           MOV       A,R3
   \   000006   F9           MOV       R1,A
   \   000007   EC           MOV       A,R4
   \   000008   FA           MOV       R2,A
   \   000009   ED           MOV       A,R5
   \   00000A   FB           MOV       R3,A
   \   00000B   85..82       MOV       DPL,?V0
   \   00000E   85..83       MOV       DPH,?V1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine203_0
   \   000006                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   F582         MOV       DPL,A
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   E5..         MOV       A,?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   AC..         MOV       R4,?V0
   \   000002   AD..         MOV       R5,?V1
   \   000004                REQUIRE ??Subroutine205_0
   \   000004                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET
   1604          
   1605          /*********************************************************************
   1606           * @fn      bdbTL_ParseInCmd_NwkJoinReq
   1607           *
   1608           * @brief   Parse in the received Network Router/End Device Join Request command.
   1609           *
   1610           * @param   pBuf - pointer to the incoming message
   1611           *
   1612           * @return  void
   1613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1614          static void bdbTL_ParseInCmd_NwkJoinReq( uint8 *pBuf, bdbTLNwkJoinReq_t *pReq )
   \                     bdbTL_ParseInCmd_NwkJoinReq:
   1615          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1616            pReq->transID = zcl_build_uint32( pBuf, 4 );
   \   00000D                ; Setup parameters for call to function osal_build_uint32
   \   00000D   7904         MOV       R1,#0x4
   \   00000F   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000012   12....       LCALL     ?XSTORE_R0123
   1617            pBuf += 4;
   \   000015   EE           MOV       A,R6
   \   000016   2404         ADD       A,#0x4
   \   000018   FE           MOV       R6,A
   \   000019   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_0
   \   00001B   0F           INC       R7
   1618          
   1619            zcl_cpyExtAddr( pReq->nwkParams.extendedPANID, pBuf );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_0:
   \   00001C                ; Setup parameters for call to function sAddrExtCpy
   \   00001C   12....       LCALL     ?Subroutine88 & 0xFFFF
   1620            pBuf += Z_EXTADDR_LEN;
   1621          
   1622            pReq->nwkParams.keyIndex = *pBuf++;
   \                     ??CrossCallReturnLabel_155:
   \   00001F   C0E0         PUSH      A
   \   000021   E5..         MOV       A,?V0
   \   000023   240C         ADD       A,#0xc
   \   000025   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000028   D0E0         POP       A
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   EE           MOV       A,R6
   \   00002C   2409         ADD       A,#0x9
   \   00002E   FE           MOV       R6,A
   \   00002F   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_1
   \   000031   0F           INC       R7
   1623          
   1624            zcl_memcpy( pReq->nwkParams.nwkKey, pBuf, SEC_KEY_LEN );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_1:
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   F5..         MOV       ?V4,A
   \   000034   8F..         MOV       ?V5,R7
   \   000036   75..00       MOV       ?V6,#0x0
   \   000039   78..         MOV       R0,#?V4
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003E   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   1625            pBuf += SEC_KEY_LEN;
   1626          
   1627            pReq->nwkUpdateId = *pBuf++;
   \   000044   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000047   C0E0         PUSH      A
   \   000049   E5..         MOV       A,?V0
   \   00004B   242E         ADD       A,#0x2e
   \   00004D   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   000050   D0E0         POP       A
   \   000052   F0           MOVX      @DPTR,A
   1628            pReq->nwkParams.logicalChannel = *pBuf++;
   \   000053   EE           MOV       A,R6
   \   000054   2411         ADD       A,#0x11
   \   000056   F582         MOV       DPL,A
   \   000058   E4           CLR       A
   \   000059   3F           ADDC      A,R7
   \   00005A   F583         MOV       DPH,A
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   C0E0         PUSH      A
   \   00005F   E5..         MOV       A,?V0
   \   000061   241D         ADD       A,#0x1d
   \   000063   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   EE           MOV       A,R6
   \   00006A   2412         ADD       A,#0x12
   \   00006C   FE           MOV       R6,A
   \   00006D   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_2
   \   00006F   0F           INC       R7
   1629          
   1630            pReq->nwkParams.panId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_2:
   \   000070   12....       LCALL     ?Subroutine23 & 0xFFFF
   1631            pBuf += 2;
   \                     ??CrossCallReturnLabel_20:
   \   000073   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_3
   \   000075   0F           INC       R7
   1632          
   1633            pReq->nwkParams.nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_3:
   \   000076   12....       LCALL     ?Subroutine15 & 0xFFFF
   1634            pBuf += 2;
   \                     ??CrossCallReturnLabel_5:
   \   000079   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_4
   \   00007B   0F           INC       R7
   1635          
   1636            pReq->nwkParams.grpIDsBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_4:
   \   00007C   12....       LCALL     ?Subroutine24 & 0xFFFF
   1637            pBuf += 2;
   \                     ??CrossCallReturnLabel_22:
   \   00007F   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_5
   \   000081   0F           INC       R7
   1638          
   1639            pReq->nwkParams.grpIDsEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_5:
   \   000082   12....       LCALL     ?Subroutine25 & 0xFFFF
   1640            pBuf += 2;
   \                     ??CrossCallReturnLabel_24:
   \   000085   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_6
   \   000087   0F           INC       R7
   1641          
   1642            pReq->nwkParams.freeNwkAddrBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_6:
   \   000088   12....       LCALL     ?Subroutine26 & 0xFFFF
   1643            pBuf += 2;
   \                     ??CrossCallReturnLabel_26:
   \   00008B   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_7
   \   00008D   0F           INC       R7
   1644          
   1645            pReq->nwkParams.freeNwkAddrEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_7:
   \   00008E   12....       LCALL     ?Subroutine27 & 0xFFFF
   1646            pBuf += 2;
   \                     ??CrossCallReturnLabel_28:
   \   000091   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_8
   \   000093   0F           INC       R7
   1647          
   1648            pReq->nwkParams.freeGrpIDBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_8:
   \   000094   12....       LCALL     ?Subroutine30 & 0xFFFF
   1649            pBuf += 2;
   \                     ??CrossCallReturnLabel_34:
   \   000097   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_9
   \   000099   0F           INC       R7
   1650          
   1651            pReq->nwkParams.freeGrpIDEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_9:
   \   00009A   12....       LCALL     ?Subroutine35 & 0xFFFF
   1652          }
   \                     ??CrossCallReturnLabel_40:
   \   00009D   02....       LJMP      ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000003   22           RET
   1653          
   1654          /*********************************************************************
   1655           * @fn      bdbTL_ProcessInCmd_NwkJoinRtrReq
   1656           *
   1657           * @brief   Process in the received Network Join Router Request command.
   1658           *
   1659           * @param   pInMsg - pointer to the incoming message
   1660           *
   1661           * @return  ZStatus_t
   1662           */
   1663          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinRtrReq( zclIncoming_t *pInMsg )
   1664          {
   1665            ZStatus_t status = ZSuccess;
   1666          
   1667            if ( pInterPANCBs->pfnNwkJoinRtrReq )
   1668            {
   1669              bdbTLNwkJoinReq_t *pReq;
   1670          
   1671              pReq = (bdbTLNwkJoinReq_t *)zcl_mem_alloc( sizeof( bdbTLNwkJoinReq_t ) );
   1672              if ( pReq )
   1673              {
   1674                bdbTL_ParseInCmd_NwkJoinReq( pInMsg->pData, pReq );
   1675          
   1676                status = pInterPANCBs->pfnNwkJoinRtrReq( &(pInMsg->msg->srcAddr), pReq,
   1677                                                         pInMsg->hdr.transSeqNum  );
   1678                zcl_mem_free( pReq );
   1679              }
   1680            }
   1681          
   1682            return ( status );
   1683          }
   1684          
   1685          /*********************************************************************
   1686           * @fn      bdbTL_ProcessInCmd_NwkJoinEDReq
   1687           *
   1688           * @brief   Process in the received Network Join End Device  Request command.
   1689           *
   1690           * @param   pInMsg - pointer to the incoming message
   1691           *
   1692           * @return  ZStatus_t
   1693           */
   1694          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinEDReq( zclIncoming_t *pInMsg )
   1695          {
   1696            ZStatus_t status = ZSuccess;
   1697          
   1698            if ( pInterPANCBs->pfnNwkJoinEDReq )
   1699            {
   1700              bdbTLNwkJoinReq_t *pReq;
   1701          
   1702              pReq = (bdbTLNwkJoinReq_t *)zcl_mem_alloc( sizeof( bdbTLNwkJoinReq_t ) );
   1703              if ( pReq )
   1704              {
   1705                bdbTL_ParseInCmd_NwkJoinReq( pInMsg->pData, pReq );
   1706          
   1707                status = pInterPANCBs->pfnNwkJoinEDReq( &(pInMsg->msg->srcAddr), pReq,
   1708                                                        pInMsg->hdr.transSeqNum );
   1709                zcl_mem_free( pReq );
   1710              }
   1711            }
   1712          
   1713            return ( status );
   1714          }
   1715          
   1716          /*********************************************************************
   1717           * @fn      bdbTL_ProcessInCmd_NwkUpdateReq
   1718           *
   1719           * @brief   Process in the received Network Update Request command.
   1720           *
   1721           * @param   pInMsg - pointer to the incoming message
   1722           *
   1723           * @return  ZStatus_t
   1724           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1725          static ZStatus_t bdbTL_ProcessInCmd_NwkUpdateReq( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_NwkUpdateReq:
   1726          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine33 & 0xFFFF
   1727            ZStatus_t status = ZSuccess;
   1728          
   1729            if ( pInterPANCBs->pfnNwkUpdateReq )
   \                     ??CrossCallReturnLabel_445:
   \   000008   240E         ADD       A,#0xe
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   00000D   605B         JZ        ??bdbTL_ProcessInCmd_NwkUpdateReq_0
   1730            {
   1731              bdbTLNwkUpdateReq_t *pReq;
   1732          
   1733              pReq = (bdbTLNwkUpdateReq_t *)zcl_mem_alloc( sizeof( bdbTLNwkUpdateReq_t ) );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A12         MOV       R2,#0x12
   \   000011   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   1734              if ( pReq )
   \                     ??CrossCallReturnLabel_522:
   \   000014   6054         JZ        ??bdbTL_ProcessInCmd_NwkUpdateReq_0
   1735              {
   1736                uint8 *pBuf = pInMsg->pData;
   \   000016   12....       LCALL     ?Subroutine12 & 0xFFFF
   1737          
   1738                pReq->transID = zcl_build_uint32( pBuf, 4 );
   \                     ??CrossCallReturnLabel_456:
   \   000019   12....       LCALL     ?XSTORE_R0123
   1739                pBuf += 4;
   \   00001C   EE           MOV       A,R6
   \   00001D   2404         ADD       A,#0x4
   \   00001F   FE           MOV       R6,A
   \   000020   5001         JNC       ??bdbTL_ProcessInCmd_NwkUpdateReq_1
   \   000022   0F           INC       R7
   1740          
   1741                zcl_cpyExtAddr( pReq->extendedPANID, pBuf );
   \                     ??bdbTL_ProcessInCmd_NwkUpdateReq_1:
   \   000023                ; Setup parameters for call to function sAddrExtCpy
   \   000023   12....       LCALL     ?Subroutine88 & 0xFFFF
   1742                pBuf += Z_EXTADDR_LEN;
   1743          
   1744                pReq->nwkUpdateId = *pBuf++;
   \                     ??CrossCallReturnLabel_156:
   \   000026   C0E0         PUSH      A
   \   000028   E5..         MOV       A,?V0
   \   00002A   240C         ADD       A,#0xc
   \   00002C   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00002F   D0E0         POP       A
   \   000031   12....       LCALL     ?Subroutine74 & 0xFFFF
   1745                pReq->logicalChannel = *pBuf++;
   \                     ??CrossCallReturnLabel_128:
   \   000034   C0E0         PUSH      A
   \   000036   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000039   D0E0         POP       A
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   EE           MOV       A,R6
   \   00003D   240A         ADD       A,#0xa
   \   00003F   FE           MOV       R6,A
   \   000040   5001         JNC       ??bdbTL_ProcessInCmd_NwkUpdateReq_2
   \   000042   0F           INC       R7
   1746          
   1747                pReq->PANID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkUpdateReq_2:
   \   000043   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000046   240E         ADD       A,#0xe
   \   000048   12....       LCALL     ?Subroutine82 & 0xFFFF
   1748                pBuf += 2;
   \                     ??CrossCallReturnLabel_385:
   \   00004B   EE           MOV       A,R6
   \   00004C   2402         ADD       A,#0x2
   \   00004E   5001         JNC       ??bdbTL_ProcessInCmd_NwkUpdateReq_3
   \   000050   0F           INC       R7
   1749          
   1750                pReq->nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkUpdateReq_3:
   \   000051   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000054   2410         ADD       A,#0x10
   \   000056   12....       LCALL     ?Subroutine10 & 0xFFFF
   1751                pBuf += 2;
   1752          
   1753                status = pInterPANCBs->pfnNwkUpdateReq( &(pInMsg->msg->srcAddr), pReq );
   \                     ??CrossCallReturnLabel_481:
   \   000059   240E         ADD       A,#0xe
   \   00005B   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   00005E   12....       LCALL     ?CALL_IND
   \   000061   E9           MOV       A,R1
   \   000062   FE           MOV       R6,A
   1754          
   1755                zcl_mem_free( pReq );
   \   000063                ; Setup parameters for call to function osal_mem_free
   \   000063   AA..         MOV       R2,?V0
   \   000065   AB..         MOV       R3,?V1
   \   000067   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1756              }
   1757            }
   1758          
   1759            return ( status );
   \                     ??bdbTL_ProcessInCmd_NwkUpdateReq_0:
   \   00006A                REQUIRE ?Subroutine8
   \   00006A                ; // Fall through to label ?Subroutine8
   1760          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002   7F06         MOV       R7,#0x6
   \   000004   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003                ; Setup parameters for indirect call
   \   000003                ; Setup parameters for indirect call
   \   000003                REQUIRE ??Subroutine204_0
   \   000003                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
   1761          
   1762          /*********************************************************************
   1763           * @fn      bdbTL_ProcessInCmd_ScanRsp
   1764           *
   1765           * @brief   Process in the received Scan Response command.
   1766           *
   1767           * @param   pInMsg - pointer to the incoming message
   1768           *
   1769           * @return  ZStatus_t
   1770           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1771          static ZStatus_t bdbTL_ProcessInCmd_ScanRsp( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_ScanRsp:
   1772          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine33 & 0xFFFF
   1773            ZStatus_t status = ZSuccess;
   1774          
   1775            if ( pInterPANCBs->pfnScanRsp )
   \                     ??CrossCallReturnLabel_446:
   \   000008   2410         ADD       A,#0x10
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   00000D   7003         JNZ       $+5
   \   00000F   02....       LJMP      ??bdbTL_ProcessInCmd_ScanRsp_0 & 0xFFFF
   1776            {
   1777              bdbTLScanRsp_t *pRsp;
   1778          
   1779              pRsp = (bdbTLScanRsp_t *)zcl_mem_alloc( sizeof( bdbTLScanRsp_t ) );
   \   000012                ; Setup parameters for call to function osal_mem_alloc
   \   000012   7A26         MOV       R2,#0x26
   \   000014   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   1780              if ( pRsp )
   \                     ??CrossCallReturnLabel_523:
   \   000017   7003         JNZ       $+5
   \   000019   02....       LJMP      ??bdbTL_ProcessInCmd_ScanRsp_0 & 0xFFFF
   1781              {
   1782                uint8 *pBuf = pInMsg->pData;
   \   00001C   85..82       MOV       DPL,?V2
   \   00001F   85..83       MOV       DPH,?V3
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FE           MOV       R6,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FF           MOV       R7,A
   1783          
   1784                zcl_memset( pRsp, 0, sizeof( bdbTLScanRsp_t ) );
   \   00002F                ; Setup parameters for call to function osal_memset
   \   00002F   7C26         MOV       R4,#0x26
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7900         MOV       R1,#0x0
   \   000035   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1785          
   1786                pRsp->transID = zcl_build_uint32( pBuf, 4 );
   \   000038                ; Setup parameters for call to function osal_build_uint32
   \   000038   7904         MOV       R1,#0x4
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000041   12....       LCALL     ?XSTORE_R0123
   1787                pBuf += 4;
   1788          
   1789                pRsp->rssiCorrection = *pBuf++;
   \   000044   12....       LCALL     ?Subroutine13 & 0xFFFF
   1790                pRsp->zInfo.zInfoByte = *pBuf++;
   1791                pRsp->touchLinkInfo.touchLinkInfoByte = *pBuf++;
   \                     ??CrossCallReturnLabel_0:
   \   000047   A3           INC       DPTR
   \   000048   F0           MOVX      @DPTR,A
   \   000049   EE           MOV       A,R6
   \   00004A   2407         ADD       A,#0x7
   \   00004C   FE           MOV       R6,A
   \   00004D   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_1
   \   00004F   0F           INC       R7
   1792          
   1793                pRsp->keyBitmask = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_1:
   \   000050   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   000053   85..82       MOV       DPL,?V0
   \   000056   85..83       MOV       DPH,?V1
   \   000059   12....       LCALL     ?Subroutine77 & 0xFFFF
   1794                pBuf += 2;
   \                     ??CrossCallReturnLabel_510:
   \   00005C   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_2
   \   00005E   0F           INC       R7
   1795          
   1796                pRsp->responseID = zcl_build_uint32( pBuf, 4 );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_2:
   \   00005F                ; Setup parameters for call to function osal_build_uint32
   \   00005F   7904         MOV       R1,#0x4
   \   000061   FA           MOV       R2,A
   \   000062   EF           MOV       A,R7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000067   E5..         MOV       A,?V0
   \   000069   240B         ADD       A,#0xb
   \   00006B   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   00006E   12....       LCALL     ?XSTORE_R2345
   1797                pBuf += 4;
   \   000071   EE           MOV       A,R6
   \   000072   2404         ADD       A,#0x4
   \   000074   FE           MOV       R6,A
   \   000075   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_3
   \   000077   0F           INC       R7
   1798          
   1799                zcl_cpyExtAddr( pRsp->extendedPANID, pBuf );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_3:
   \   000078                ; Setup parameters for call to function sAddrExtCpy
   \   000078   FC           MOV       R4,A
   \   000079   EF           MOV       A,R7
   \   00007A   FD           MOV       R5,A
   \   00007B   E5..         MOV       A,?V0
   \   00007D   240F         ADD       A,#0xf
   \   00007F   12....       LCALL     ?Subroutine96 & 0xFFFF
   1800                pBuf += Z_EXTADDR_LEN;
   1801          
   1802                pRsp->nwkUpdateId = *pBuf++;
   \                     ??CrossCallReturnLabel_175:
   \   000082   C0E0         PUSH      A
   \   000084   E5..         MOV       A,?V0
   \   000086   2417         ADD       A,#0x17
   \   000088   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   00008B   D0E0         POP       A
   \   00008D   12....       LCALL     ?Subroutine74 & 0xFFFF
   1803                pRsp->logicalChannel = *pBuf++;
   \                     ??CrossCallReturnLabel_129:
   \   000090   C0E0         PUSH      A
   \   000092   E5..         MOV       A,?V0
   \   000094   2418         ADD       A,#0x18
   \   000096   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   000099   D0E0         POP       A
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C   EE           MOV       A,R6
   \   00009D   240A         ADD       A,#0xa
   \   00009F   FE           MOV       R6,A
   \   0000A0   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_4
   \   0000A2   0F           INC       R7
   1804          
   1805                pRsp->PANID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_4:
   \   0000A3   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000A6   2419         ADD       A,#0x19
   \   0000A8   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   0000AB   EA           MOV       A,R2
   \   0000AC   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   1806                pBuf += 2;
   \                     ??CrossCallReturnLabel_512:
   \   0000AF   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_5
   \   0000B1   0F           INC       R7
   1807          
   1808                pRsp->nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_5:
   \   0000B2   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000B5   241B         ADD       A,#0x1b
   \   0000B7   12....       LCALL     ?Subroutine82 & 0xFFFF
   1809                pBuf += 2;
   1810          
   1811                pRsp->numSubDevices = *pBuf++;
   \                     ??CrossCallReturnLabel_386:
   \   0000BA   E5..         MOV       A,?V0
   \   0000BC   241D         ADD       A,#0x1d
   \   0000BE   F8           MOV       R0,A
   \   0000BF   E4           CLR       A
   \   0000C0   35..         ADDC      A,?V1
   \   0000C2   F9           MOV       R1,A
   \   0000C3   8E82         MOV       DPL,R6
   \   0000C5   8F83         MOV       DPH,R7
   \   0000C7   A3           INC       DPTR
   \   0000C8   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   0000CB   12....       LCALL     ?Subroutine76 & 0xFFFF
   1812                pRsp->totalGrpIDs = *pBuf++;
   \                     ??CrossCallReturnLabel_133:
   \   0000CE   C0E0         PUSH      A
   \   0000D0   E5..         MOV       A,?V0
   \   0000D2   241E         ADD       A,#0x1e
   \   0000D4   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   0000D7   D0E0         POP       A
   \   0000D9   12....       LCALL     ?Subroutine84 & 0xFFFF
   1813          
   1814                if ( pRsp->numSubDevices == 1 )
   \                     ??CrossCallReturnLabel_149:
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   6401         XRL       A,#0x1
   \   0000DF   7049         JNZ       ??bdbTL_ProcessInCmd_ScanRsp_6
   1815                {
   1816                  pRsp->deviceInfo.endpoint = *pBuf++;
   \   0000E1   8E82         MOV       DPL,R6
   \   0000E3   8F83         MOV       DPH,R7
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   C0E0         PUSH      A
   \   0000EC   E5..         MOV       A,?V0
   \   0000EE   241F         ADD       A,#0x1f
   \   0000F0   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   0000F3   D0E0         POP       A
   \   0000F5   F0           MOVX      @DPTR,A
   \   0000F6   EE           MOV       A,R6
   \   0000F7   2405         ADD       A,#0x5
   \   0000F9   FE           MOV       R6,A
   \   0000FA   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_7
   \   0000FC   0F           INC       R7
   1817          
   1818                  pRsp->deviceInfo.profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_7:
   \   0000FD   12....       LCALL     ?Subroutine15 & 0xFFFF
   1819                  pBuf += 2;
   \                     ??CrossCallReturnLabel_6:
   \   000100   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_8
   \   000102   0F           INC       R7
   1820          
   1821                  pRsp->deviceInfo.deviceID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_8:
   \   000103   12....       LCALL     ?Subroutine36 & 0xFFFF
   1822                  pBuf += 2;
   1823          
   1824                  pRsp->deviceInfo.version = *pBuf++;
   1825                  pRsp->deviceInfo.grpIdCnt = *pBuf;
   1826                }
   \                     ??CrossCallReturnLabel_46:
   \   000106   2422         ADD       A,#0x22
   \   000108   F582         MOV       DPL,A
   \   00010A   E4           CLR       A
   \   00010B   35..         ADDC      A,?V1
   \   00010D   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000110   C0E0         PUSH      A
   \   000112   E5..         MOV       A,?V0
   \   000114   2424         ADD       A,#0x24
   \   000116   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000119   D0E0         POP       A
   \   00011B   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00011E   C0E0         PUSH      A
   \   000120   E5..         MOV       A,?V0
   \   000122   2425         ADD       A,#0x25
   \   000124   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000127   D0E0         POP       A
   \   000129   F0           MOVX      @DPTR,A
   1827          
   1828                status = pInterPANCBs->pfnScanRsp( &(pInMsg->msg->srcAddr), pRsp );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_6:
   \   00012A                ; Setup parameters for indirect call
   \   00012A   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   00012D   2410         ADD       A,#0x10
   \   00012F   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   000132   12....       LCALL     ?CALL_IND
   \   000135   E9           MOV       A,R1
   \   000136   FE           MOV       R6,A
   1829                zcl_mem_free( pRsp );
   \   000137                ; Setup parameters for call to function osal_mem_free
   \   000137   AA..         MOV       R2,?V0
   \   000139   AB..         MOV       R3,?V1
   \   00013B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1830              }
   1831            }
   1832          
   1833            return ( status );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_0:
   \   00013E   02....       LJMP      ?Subroutine8 & 0xFFFF
   1834          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   F582         MOV       DPL,A
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine202_0
   \   000004                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   F583         MOV       DPH,A
   \   000002   EA           MOV       A,R2
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   E9           MOV       A,R1
   \   000006   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009                REQUIRE ??Subroutine209_0
   \   000009                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   12....       LCALL     ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00000A   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   00000D   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000003   22           RET
   1835          
   1836          /*********************************************************************
   1837           * @fn      bdbTL_ProcessInCmd_DeviceInfoRsp
   1838           *
   1839           * @brief   Process in the received Device Information Response command.
   1840           *
   1841           * @param   pInMsg - pointer to the incoming message
   1842           *
   1843           * @return  ZStatus_t
   1844           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1845          static ZStatus_t bdbTL_ProcessInCmd_DeviceInfoRsp( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_DeviceInfoRsp:
   1846          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   1847            ZStatus_t status = ZSuccess;
   \   000009   75..00       MOV       ?V3,#0x0
   1848          
   1849            if ( pInterPANCBs->pfnDeviceInfoRsp )
   \   00000C   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   00000F   2412         ADD       A,#0x12
   \   000011   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000014   7003         JNZ       $+5
   \   000016   02....       LJMP      ??bdbTL_ProcessInCmd_DeviceInfoRsp_0 & 0xFFFF
   1850            {
   1851              bdbTLDeviceInfoRsp_t *pRsp;
   1852              uint8 cnt = pInMsg->pData[TOUCHLINK_CMDLEN_DEVICE_INFO_RSP-1];
   \   000019   EA           MOV       A,R2
   \   00001A   2408         ADD       A,#0x8
   \   00001C   F8           MOV       R0,A
   \   00001D   E4           CLR       A
   \   00001E   35..         ADDC      A,?V7
   \   000020   F9           MOV       R1,A
   \   000021   E8           MOV       A,R0
   \   000022   FE           MOV       R6,A
   \   000023   E9           MOV       A,R1
   \   000024   FF           MOV       R7,A
   \   000025   8882         MOV       DPL,R0
   \   000027   F583         MOV       DPH,A
   \   000029   12....       LCALL     ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   00002C   2406         ADD       A,#0x6
   \   00002E   F582         MOV       DPL,A
   \   000030   E4           CLR       A
   \   000031   38           ADDC      A,R0
   \   000032   F583         MOV       DPH,A
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F5..         MOV       ?V2,A
   1853              uint8 rspLen = sizeof( bdbTLDeviceInfoRsp_t ) + ( cnt * sizeof( devInfoRec_t ) );
   1854          
   1855              pRsp = (bdbTLDeviceInfoRsp_t *)zcl_mem_alloc( rspLen );
   \   000037                ; Setup parameters for call to function osal_mem_alloc
   \   000037   C4           SWAP      A
   \   000038   54F0         ANL       A,#0xf0
   \   00003A   2417         ADD       A,#0x17
   \   00003C   FA           MOV       R2,A
   \   00003D   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   1856              if ( pRsp )
   \                     ??CrossCallReturnLabel_524:
   \   000040   7003         JNZ       $+5
   \   000042   02....       LJMP      ??bdbTL_ProcessInCmd_DeviceInfoRsp_0 & 0xFFFF
   1857              {
   1858                uint8 *pBuf = pInMsg->pData;
   \   000045   8E82         MOV       DPL,R6
   \   000047   8F83         MOV       DPH,R7
   \   000049   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   1859                uint8 i;
   1860          
   1861                pRsp->transID = zcl_build_uint32( pBuf, 4 );
   \                     ??CrossCallReturnLabel_458:
   \   00004C   12....       LCALL     ?XSTORE_R0123
   1862                pBuf += 4;
   1863          
   1864                pRsp->numSubDevices = *pBuf++;
   \   00004F   12....       LCALL     ?Subroutine13 & 0xFFFF
   1865                pRsp->startIndex = *pBuf++;
   1866                pRsp->cnt = *pBuf++;
   \                     ??CrossCallReturnLabel_1:
   \   000052   F0           MOVX      @DPTR,A
   \   000053   EE           MOV       A,R6
   \   000054   2407         ADD       A,#0x7
   \   000056   FE           MOV       R6,A
   \   000057   5001         JNC       ??bdbTL_ProcessInCmd_DeviceInfoRsp_1
   \   000059   0F           INC       R7
   1867          
   1868                for ( i = 0; i < cnt; i++ )
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_1:
   \   00005A   75..00       MOV       ?V3,#0x0
   \   00005D   02....       LJMP      ??bdbTL_ProcessInCmd_DeviceInfoRsp_2 & 0xFFFF
   1869                {
   1870                  devInfoRec_t *pRec = &(pRsp->devInfoRec[i]);
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_3:
   \   000060   E5..         MOV       A,?V3
   \   000062   F5..         MOV       ?V4,A
   \   000064   75..00       MOV       ?V5,#0x0
   \   000067   7404         MOV       A,#0x4
   \   000069   78..         MOV       R0,#?V4
   \   00006B   12....       LCALL     ?S_SHL
   \   00006E   E5..         MOV       A,?V0
   \   000070   25..         ADD       A,?V4
   \   000072   F8           MOV       R0,A
   \   000073   E5..         MOV       A,?V1
   \   000075   35..         ADDC      A,?V5
   \   000077   F9           MOV       R1,A
   \   000078   E8           MOV       A,R0
   \   000079   2407         ADD       A,#0x7
   \   00007B   F5..         MOV       ?V4,A
   \   00007D   E4           CLR       A
   \   00007E   39           ADDC      A,R1
   \   00007F   F5..         MOV       ?V5,A
   1871          
   1872                  zcl_cpyExtAddr( pRec->ieeeAddr, pBuf );
   \   000081                ; Setup parameters for call to function sAddrExtCpy
   \   000081   EE           MOV       A,R6
   \   000082   FC           MOV       R4,A
   \   000083   EF           MOV       A,R7
   \   000084   FD           MOV       R5,A
   \   000085   AA..         MOV       R2,?V4
   \   000087   AB..         MOV       R3,?V5
   \   000089   12....       LCALL     ?Subroutine99 & 0xFFFF
   1873                  pBuf += Z_EXTADDR_LEN;
   1874          
   1875                  pRec->deviceInfo.endpoint = *pBuf++;
   \                     ??CrossCallReturnLabel_180:
   \   00008C   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00008F   A3           INC       DPTR
   \   000090   F0           MOVX      @DPTR,A
   \   000091   EE           MOV       A,R6
   \   000092   2409         ADD       A,#0x9
   \   000094   FE           MOV       R6,A
   \   000095   5001         JNC       ??bdbTL_ProcessInCmd_DeviceInfoRsp_4
   \   000097   0F           INC       R7
   1876          
   1877                  pRec->deviceInfo.profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_4:
   \   000098   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   00009B   85..82       MOV       DPL,?V4
   \   00009E   85..83       MOV       DPH,?V5
   \   0000A1   12....       LCALL     ?Subroutine77 & 0xFFFF
   1878                  pBuf += 2;
   \                     ??CrossCallReturnLabel_511:
   \   0000A4   5001         JNC       ??bdbTL_ProcessInCmd_DeviceInfoRsp_5
   \   0000A6   0F           INC       R7
   1879          
   1880                  pRec->deviceInfo.deviceID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_5:
   \   0000A7   F582         MOV       DPL,A
   \   0000A9   8F83         MOV       DPH,R7
   \   0000AB   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   1881                  pBuf += 2;
   1882          
   1883                  pRec->deviceInfo.version = *pBuf++;
   1884                  pRec->deviceInfo.grpIdCnt = *pBuf++;
   1885          
   1886                  pRec->sort = *pBuf++;
   1887                }
   \                     ??CrossCallReturnLabel_501:
   \   0000AE   E5..         MOV       A,?V4
   \   0000B0   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   0000B3   35..         ADDC      A,?V5
   \   0000B5   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0000B8   C0E0         PUSH      A
   \   0000BA   E5..         MOV       A,?V4
   \   0000BC   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   0000BF   35..         ADDC      A,?V5
   \   0000C1   F583         MOV       DPH,A
   \   0000C3   D0E0         POP       A
   \   0000C5   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000C8   C0E0         PUSH      A
   \   0000CA   E5..         MOV       A,?V4
   \   0000CC   240E         ADD       A,#0xe
   \   0000CE   F582         MOV       DPL,A
   \   0000D0   E4           CLR       A
   \   0000D1   35..         ADDC      A,?V5
   \   0000D3   F583         MOV       DPH,A
   \   0000D5   D0E0         POP       A
   \   0000D7   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   C0E0         PUSH      A
   \   0000DD   E5..         MOV       A,?V4
   \   0000DF   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   0000E2   35..         ADDC      A,?V5
   \   0000E4   F583         MOV       DPH,A
   \   0000E6   D0E0         POP       A
   \   0000E8   F0           MOVX      @DPTR,A
   \   0000E9   EE           MOV       A,R6
   \   0000EA   2405         ADD       A,#0x5
   \   0000EC   FE           MOV       R6,A
   \   0000ED   5001         JNC       ??bdbTL_ProcessInCmd_DeviceInfoRsp_6
   \   0000EF   0F           INC       R7
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_6:
   \   0000F0   05..         INC       ?V3
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_2:
   \   0000F2   E5..         MOV       A,?V3
   \   0000F4   C3           CLR       C
   \   0000F5   95..         SUBB      A,?V2
   \   0000F7   5003         JNC       $+5
   \   0000F9   02....       LJMP      ??bdbTL_ProcessInCmd_DeviceInfoRsp_3 & 0xFFFF
   1888          
   1889                status = pInterPANCBs->pfnDeviceInfoRsp( &(pInMsg->msg->srcAddr), pRsp );
   \   0000FC                ; Setup parameters for indirect call
   \   0000FC   AC..         MOV       R4,?V0
   \   0000FE   AD..         MOV       R5,?V1
   \   000100   85..82       MOV       DPL,?V6
   \   000103   85..83       MOV       DPH,?V7
   \   000106   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000109   2412         ADD       A,#0x12
   \   00010B   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   00010E   12....       LCALL     ?CALL_IND
   \   000111   E9           MOV       A,R1
   \   000112   F5..         MOV       ?V3,A
   1890          
   1891                zcl_mem_free( pRsp );
   \   000114                ; Setup parameters for call to function osal_mem_free
   \   000114   AA..         MOV       R2,?V0
   \   000116   AB..         MOV       R3,?V1
   \   000118   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1892              }
   1893            }
   1894          
   1895            return ( status );
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_0:
   \   00011B   A9..         MOV       R1,?V3
   \   00011D   02....       LJMP      ??Subroutine183_0 & 0xFFFF
   1896          }
   1897          
   1898          /*********************************************************************
   1899           * @fn      bdbTL_ProcessInCmd_NwkStartRsp
   1900           *
   1901           * @brief   Process in the received Network Start Response command.
   1902           *
   1903           * @param   pInMsg - pointer to the incoming message
   1904           *
   1905           * @return  ZStatus_t
   1906           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1907          static ZStatus_t bdbTL_ProcessInCmd_NwkStartRsp( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_NwkStartRsp:
   1908          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine33 & 0xFFFF
   1909            ZStatus_t status = ZSuccess;
   1910          
   1911            if ( pInterPANCBs->pfnNwkStartRsp )
   \                     ??CrossCallReturnLabel_447:
   \   000008   2414         ADD       A,#0x14
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   00000D   6056         JZ        ??bdbTL_ProcessInCmd_NwkStartRsp_0
   1912            {
   1913              bdbTLNwkStartRsp_t *pRsp;
   1914          
   1915              pRsp = (bdbTLNwkStartRsp_t *)zcl_mem_alloc( sizeof( bdbTLNwkStartRsp_t ) );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A11         MOV       R2,#0x11
   \   000011   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   1916              if ( pRsp )
   \                     ??CrossCallReturnLabel_525:
   \   000014   604F         JZ        ??bdbTL_ProcessInCmd_NwkStartRsp_0
   1917              {
   1918                uint8 *pBuf = pInMsg->pData;
   \   000016   12....       LCALL     ?Subroutine12 & 0xFFFF
   1919          
   1920                pRsp->transID = zcl_build_uint32( pBuf, 4 );
   \                     ??CrossCallReturnLabel_457:
   \   000019   12....       LCALL     ?XSTORE_R0123
   1921                pBuf += 4;
   1922          
   1923                pRsp->status = *pBuf++;
   \   00001C   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00001F   EE           MOV       A,R6
   \   000020   2405         ADD       A,#0x5
   \   000022   FE           MOV       R6,A
   \   000023   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartRsp_1
   \   000025   0F           INC       R7
   1924          
   1925                zcl_cpyExtAddr( pRsp->extendedPANID, pBuf );
   \                     ??bdbTL_ProcessInCmd_NwkStartRsp_1:
   \   000026                ; Setup parameters for call to function sAddrExtCpy
   \   000026   FC           MOV       R4,A
   \   000027   EF           MOV       A,R7
   \   000028   FD           MOV       R5,A
   \   000029   E5..         MOV       A,?V0
   \   00002B   2405         ADD       A,#0x5
   \   00002D   12....       LCALL     ?Subroutine96 & 0xFFFF
   1926                pBuf += Z_EXTADDR_LEN;
   1927          
   1928                pRsp->nwkUpdateId = *pBuf++;
   \                     ??CrossCallReturnLabel_176:
   \   000030   C0E0         PUSH      A
   \   000032   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000035   D0E0         POP       A
   \   000037   12....       LCALL     ?Subroutine74 & 0xFFFF
   1929                pRsp->logicalChannel = *pBuf++;
   \                     ??CrossCallReturnLabel_130:
   \   00003A   C0E0         PUSH      A
   \   00003C   E5..         MOV       A,?V0
   \   00003E   240E         ADD       A,#0xe
   \   000040   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000043   D0E0         POP       A
   \   000045   F0           MOVX      @DPTR,A
   \   000046   EE           MOV       A,R6
   \   000047   240A         ADD       A,#0xa
   \   000049   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartRsp_2
   \   00004B   0F           INC       R7
   1930          
   1931                pRsp->panId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartRsp_2:
   \   00004C   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00004F   240F         ADD       A,#0xf
   \   000051   12....       LCALL     ?Subroutine10 & 0xFFFF
   1932          
   1933                status = pInterPANCBs->pfnNwkStartRsp( &(pInMsg->msg->srcAddr), pRsp );
   \                     ??CrossCallReturnLabel_482:
   \   000054   2414         ADD       A,#0x14
   \   000056   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   000059   12....       LCALL     ?CALL_IND
   \   00005C   E9           MOV       A,R1
   \   00005D   FE           MOV       R6,A
   1934          
   1935                zcl_mem_free( pRsp );
   \   00005E                ; Setup parameters for call to function osal_mem_free
   \   00005E   AA..         MOV       R2,?V0
   \   000060   AB..         MOV       R3,?V1
   \   000062   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1936              }
   1937            }
   1938          
   1939            return ( status );
   \                     ??bdbTL_ProcessInCmd_NwkStartRsp_0:
   \   000065   02....       LJMP      ?Subroutine8 & 0xFFFF
   1940          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000009   12....       LCALL     `??bdbTL_ParseInCmd_NwkJoinReq::?relay`; Banked call to: bdbTL_ParseInCmd_NwkJoinReq
   \   00000C                ; Setup parameters for indirect call
   \   00000C                ; Setup parameters for indirect call
   \   00000C   85..82       MOV       DPL,?V6
   \   00000F   85..83       MOV       DPH,?V7
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   22           RET
   1941          
   1942          /*********************************************************************
   1943           * @fn      bdbTL_ProcessInCmd_NwkJoinRtrRsp
   1944           *
   1945           * @brief   Process in the received Network Join Router Response command.
   1946           *
   1947           * @param   pInMsg - pointer to the incoming message
   1948           *
   1949           * @return  ZStatus_t
   1950           */
   1951          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinRtrRsp( zclIncoming_t *pInMsg )
   1952          {
   1953            if ( pInterPANCBs->pfnNwkJoinRtrRsp )
   1954            {
   1955              bdbTLNwkJoinRsp_t rsp;
   1956          
   1957              rsp.transID = zcl_build_uint32( pInMsg->pData, 4 );
   1958          
   1959              rsp.status = pInMsg->pData[4];
   1960          
   1961              return ( pInterPANCBs->pfnNwkJoinRtrRsp( &(pInMsg->msg->srcAddr), &rsp ) );
   1962            }
   1963          
   1964            return ( ZSuccess );
   1965          }
   1966          
   1967          
   1968          /*********************************************************************
   1969           * @fn      bdbTL_ProcessInCmd_NwkJoinEDRsp
   1970           *
   1971           * @brief   Process in the received Network Join End Device Response command.
   1972           *
   1973           * @param   pInMsg - pointer to the incoming message
   1974           *
   1975           * @return  ZStatus_t
   1976           */
   1977          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinEDRsp( zclIncoming_t *pInMsg )
   1978          {
   1979            if ( pInterPANCBs->pfnNwkJoinEDRsp )
   1980            {
   1981              bdbTLNwkJoinRsp_t rsp;
   1982          
   1983              rsp.transID = zcl_build_uint32( pInMsg->pData, 4 );
   1984          
   1985              rsp.status = pInMsg->pData[4];
   1986          
   1987              return ( pInterPANCBs->pfnNwkJoinEDRsp( &(pInMsg->msg->srcAddr), &rsp ) );
   1988            }
   1989          
   1990            return ( ZSuccess );
   1991          }
   1992          
   1993          #endif // BDB_TL_TARGET || BDB_TL_INITIATOR
   1994          
   1995          /********************************************************************************************
   1996          *********************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   bdbTL_HdlIncoming
        0      9   -> StubAPS_InterPan
        0      9   -> bdbTL_ProcessInLLCmds
        0      9   -> bdbTL_ProcessInLLInterPANCmds
      1     59   bdbTL_ParseInCmd_NwkJoinReq
        0     15   -> osal_build_uint32
        0     18   -> osal_memcpy
        0     15   -> sAddrExtCpy
      1     57   bdbTL_ProcessInCmd_DeviceInfoRsp
        0     16   -> osal_build_uint32
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> sAddrExtCpy
      1     26   bdbTL_ProcessInCmd_EndpointInfo
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> sAddrExtCpy
      1     30   bdbTL_ProcessInCmd_GetEPListRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     30   bdbTL_ProcessInCmd_GetGrpIDsRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     59   bdbTL_ProcessInCmd_NwkStartReq
        0     15   -> osal_build_uint32
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
        0     15   -> sAddrExtCpy
      1     55   bdbTL_ProcessInCmd_NwkStartRsp
        0     14   -> osal_build_uint32
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> sAddrExtCpy
      1     55   bdbTL_ProcessInCmd_NwkUpdateReq
        0     14   -> osal_build_uint32
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> sAddrExtCpy
      1     55   bdbTL_ProcessInCmd_ScanRsp
        0     14   -> osal_build_uint32
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> osal_memset
        0     14   -> sAddrExtCpy
      1     19   bdbTL_ProcessInLLCmds
        0     10   -> bdbTL_ProcessInCmd_EndpointInfo
        0     10   -> bdbTL_ProcessInCmd_GetEPListRsp
        0     10   -> bdbTL_ProcessInCmd_GetGrpIDsRsp
      1     50   bdbTL_ProcessInLLInterPANCmds
        0     41   -> bdbTL_ParseInCmd_NwkJoinReq
        0     41   -> bdbTL_ProcessInCmd_DeviceInfoRsp
        0     41   -> bdbTL_ProcessInCmd_NwkStartReq
        0     41   -> bdbTL_ProcessInCmd_NwkStartRsp
        0     41   -> bdbTL_ProcessInCmd_NwkUpdateReq
        0     41   -> bdbTL_ProcessInCmd_ScanRsp
        0     41   -> osal_build_uint32
        0     41   -> osal_mem_alloc
        0     41   -> osal_mem_free
      1     14   bdbTL_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     14   -> zcl_registerPlugin
      0     12   bdbTL_RegisterInterPANCmdCallbacks
        0     12   -> zcl_registerPlugin
      0     51   bdbTL_SendInterPANCommand
        0     23   -> zcl_SendCommand
      1     22   bdbTL_Send_DeviceInfoReq
        0     21   -> bdbTL_SendInterPANCommand
        0     20   -> osal_buffer_uint32
      1     29   bdbTL_Send_DeviceInfoRsp
        0     28   -> bdbTL_SendInterPANCommand
        0     27   -> osal_buffer_uint32
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     29   bdbTL_Send_EndpointInfo
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> sAddrExtCpy
        0     27   -> zcl_SendCommand
      1     36   bdbTL_Send_GetEPListRsp
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     34   -> zcl_SendCommand
      1     34   bdbTL_Send_GetGrpIDsRsp
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     23   bdbTL_Send_IndentifyReq
        0     22   -> bdbTL_SendInterPANCommand
        0     21   -> osal_buffer_uint32
      1     25   bdbTL_Send_NwkJoinReq
        0     23   -> bdbTL_SendInterPANCommand
        0     22   -> osal_buffer_uint32
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     21   -> osal_memcpy
        0     18   -> sAddrExtCpy
      1     23   bdbTL_Send_NwkJoinRsp
        0     21   -> bdbTL_SendInterPANCommand
        0     20   -> osal_buffer_uint32
      1     22   bdbTL_Send_NwkStartReq
        0     21   -> bdbTL_SendInterPANCommand
        0     20   -> osal_buffer_uint32
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     19   -> osal_memcpy
        0     16   -> sAddrExtCpy
      1     22   bdbTL_Send_NwkStartRsp
        0     21   -> bdbTL_SendInterPANCommand
        0     20   -> osal_buffer_uint32
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> sAddrExtCpy
      1     22   bdbTL_Send_NwkUpdateReq
        0     21   -> bdbTL_SendInterPANCommand
        0     20   -> osal_buffer_uint32
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> sAddrExtCpy
      0     22   bdbTL_Send_ResetToFNReq
        0     21   -> bdbTL_SendInterPANCommand
        0     20   -> osal_buffer_uint32
      1     23   bdbTL_Send_ScanReq
        0     22   -> bdbTL_SendInterPANCommand
        0     21   -> osal_buffer_uint32
      1     26   bdbTL_Send_ScanRsp
        0     25   -> bdbTL_SendInterPANCommand
        0     24   -> osal_buffer_uint32
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ??Subroutine168_0
       4  ??Subroutine169_0
       8  ??Subroutine170_0
       5  ??Subroutine171_0
       5  ??Subroutine172_0
       2  ??Subroutine173_0
       6  ??Subroutine174_0
       5  ??Subroutine175_0
       4  ??Subroutine176_0
       4  ??Subroutine177_0
       4  ??Subroutine178_0
       6  ??Subroutine179_0
       5  ??Subroutine180_0
       7  ??Subroutine181_0
       4  ??Subroutine182_0
       5  ??Subroutine183_0
       4  ??Subroutine184_0
       5  ??Subroutine185_0
       6  ??Subroutine186_0
       7  ??Subroutine187_0
       2  ??Subroutine188_0
       1  ??Subroutine189_0
       5  ??Subroutine190_0
       8  ??Subroutine191_0
      21  ??Subroutine192_0
      16  ??Subroutine193_0
       2  ??Subroutine194_0
       7  ??Subroutine195_0
       5  ??Subroutine196_0
       9  ??Subroutine197_0
       8  ??Subroutine198_0
       3  ??Subroutine199_0
       5  ??Subroutine200_0
      15  ??Subroutine201_0
       5  ??Subroutine202_0
       4  ??Subroutine203_0
       4  ??Subroutine204_0
       6  ??Subroutine205_0
       5  ??Subroutine206_0
       6  ??Subroutine207_0
       6  ??Subroutine208_0
       4  ??Subroutine209_0
       6  ??Subroutine210_0
       3  ?Subroutine0
       8  ?Subroutine1
       3  ?Subroutine10
      10  ?Subroutine100
       4  ?Subroutine101
       8  ?Subroutine102
       8  ?Subroutine103
      10  ?Subroutine104
      11  ?Subroutine105
      10  ?Subroutine106
       1  ?Subroutine107
      10  ?Subroutine108
      10  ?Subroutine109
       4  ?Subroutine11
      21  ?Subroutine110
       4  ?Subroutine111
      10  ?Subroutine112
      12  ?Subroutine113
      12  ?Subroutine114
       6  ?Subroutine115
       6  ?Subroutine116
      10  ?Subroutine117
       2  ?Subroutine118
       1  ?Subroutine119
      14  ?Subroutine12
       4  ?Subroutine120
       8  ?Subroutine121
       4  ?Subroutine122
       9  ?Subroutine123
       6  ?Subroutine124
       6  ?Subroutine125
       4  ?Subroutine126
       6  ?Subroutine127
       5  ?Subroutine128
       5  ?Subroutine129
      18  ?Subroutine13
      17  ?Subroutine130
       6  ?Subroutine131
       5  ?Subroutine132
       5  ?Subroutine133
       4  ?Subroutine134
      12  ?Subroutine135
      10  ?Subroutine136
       9  ?Subroutine137
       1  ?Subroutine138
       4  ?Subroutine139
      48  ?Subroutine14
       8  ?Subroutine140
       7  ?Subroutine141
       6  ?Subroutine142
      10  ?Subroutine143
       7  ?Subroutine144
      12  ?Subroutine145
      13  ?Subroutine146
      14  ?Subroutine147
      10  ?Subroutine148
      10  ?Subroutine149
       9  ?Subroutine15
       9  ?Subroutine150
       9  ?Subroutine151
       6  ?Subroutine152
       6  ?Subroutine153
      18  ?Subroutine154
       7  ?Subroutine155
      16  ?Subroutine156
       4  ?Subroutine157
       5  ?Subroutine158
      10  ?Subroutine159
       6  ?Subroutine16
       9  ?Subroutine160
       5  ?Subroutine161
       4  ?Subroutine162
       9  ?Subroutine163
      14  ?Subroutine164
      10  ?Subroutine165
       6  ?Subroutine166
       7  ?Subroutine167
       2  ?Subroutine17
      31  ?Subroutine18
      16  ?Subroutine19
       2  ?Subroutine2
      14  ?Subroutine20
      14  ?Subroutine21
      15  ?Subroutine22
       9  ?Subroutine23
       9  ?Subroutine24
       9  ?Subroutine25
       9  ?Subroutine26
       9  ?Subroutine27
      30  ?Subroutine28
      16  ?Subroutine29
       5  ?Subroutine3
      12  ?Subroutine30
      19  ?Subroutine31
       2  ?Subroutine32
       6  ?Subroutine33
      17  ?Subroutine34
       9  ?Subroutine35
       4  ?Subroutine36
       6  ?Subroutine37
       2  ?Subroutine38
      17  ?Subroutine39
       2  ?Subroutine4
      21  ?Subroutine40
       6  ?Subroutine41
       7  ?Subroutine42
      10  ?Subroutine43
       4  ?Subroutine44
       4  ?Subroutine45
       9  ?Subroutine46
       6  ?Subroutine47
      11  ?Subroutine48
       5  ?Subroutine49
      12  ?Subroutine5
       8  ?Subroutine50
      24  ?Subroutine51
       8  ?Subroutine52
       5  ?Subroutine53
       6  ?Subroutine54
       4  ?Subroutine55
       6  ?Subroutine56
       7  ?Subroutine57
       7  ?Subroutine58
       4  ?Subroutine59
       5  ?Subroutine6
       5  ?Subroutine60
       6  ?Subroutine61
       4  ?Subroutine62
       6  ?Subroutine63
       2  ?Subroutine64
       4  ?Subroutine65
       6  ?Subroutine66
       4  ?Subroutine67
       1  ?Subroutine68
       4  ?Subroutine69
       5  ?Subroutine7
       4  ?Subroutine70
      11  ?Subroutine71
       5  ?Subroutine72
      12  ?Subroutine73
      10  ?Subroutine74
      21  ?Subroutine75
       7  ?Subroutine76
       9  ?Subroutine77
       8  ?Subroutine78
       8  ?Subroutine79
       7  ?Subroutine8
      12  ?Subroutine80
      11  ?Subroutine81
       5  ?Subroutine82
       8  ?Subroutine83
       6  ?Subroutine84
      10  ?Subroutine85
       6  ?Subroutine86
       1  ?Subroutine87
      11  ?Subroutine88
       2  ?Subroutine89
      10  ?Subroutine9
       6  ?Subroutine90
       3  ?Subroutine91
      12  ?Subroutine92
       4  ?Subroutine93
      10  ?Subroutine94
       4  ?Subroutine95
       4  ?Subroutine96
      19  ?Subroutine97
       2  ?Subroutine98
       4  ?Subroutine99
       2  bdbTLCBs
       1  bdbTLPluginRegisted
     194  bdbTL_HdlIncoming
     160  bdbTL_ParseInCmd_NwkJoinReq
     288  bdbTL_ProcessInCmd_DeviceInfoRsp
     206  bdbTL_ProcessInCmd_EndpointInfo
     229  bdbTL_ProcessInCmd_GetEPListRsp
     174  bdbTL_ProcessInCmd_GetGrpIDsRsp
     219  bdbTL_ProcessInCmd_NwkStartReq
     104  bdbTL_ProcessInCmd_NwkStartRsp
     106  bdbTL_ProcessInCmd_NwkUpdateReq
     321  bdbTL_ProcessInCmd_ScanRsp
     150  bdbTL_ProcessInLLCmds
     617  bdbTL_ProcessInLLInterPANCmds
     138  bdbTL_RegisterCmdCallbacks
      63  bdbTL_RegisterInterPANCmdCallbacks
      84  bdbTL_SendInterPANCommand
      90  bdbTL_Send_DeviceInfoReq
     274  bdbTL_Send_DeviceInfoRsp
     211  bdbTL_Send_EndpointInfo
     263  bdbTL_Send_GetEPListRsp
     197  bdbTL_Send_GetGrpIDsRsp
     109  bdbTL_Send_IndentifyReq
     264  bdbTL_Send_NwkJoinReq
      98  bdbTL_Send_NwkJoinRsp
     284  bdbTL_Send_NwkStartReq
     137  bdbTL_Send_NwkStartRsp
     130  bdbTL_Send_NwkUpdateReq
      87  bdbTL_Send_ResetToFNReq
     115  bdbTL_Send_ScanReq
     325  bdbTL_Send_ScanRsp
       2  pInterPANCBs
     174  -- Other

 
 7 311 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
     5 bytes in segment XDATA_Z
 
   174 bytes of CODE     memory
 7 311 bytes of HUGECODE memory
     5 bytes of XDATA    memory

Errors: none
Warnings: none
