###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               15/Jul/2020  11:35:37
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Projects\zstack\ZMain\TI2530DB\OnBoard.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWE7F6.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\ZMain\TI2530DB\OnBoard.c" -D BDB_REPORTING -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\List\OnBoard.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\Obj\OnBoard.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\ZMain\TI2530DB\OnBoard.c
      1          /**************************************************************************************************
      2            Filename:       OnBoard.c
      3            Revised:        $Date: 2012-11-15 11:48:16 -0800 (Thu, 15 Nov 2012) $
      4            Revision:       $Revision: 32196 $
      5          
      6            Description:    This file contains the UI and control for the
      7                            peripherals on the EVAL development board
      8            Notes:          This file targets the Chipcon CC2530/31
      9          
     10          
     11            Copyright 2005-2011 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "ZGlobals.h"
     48          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1
     49          #include "OSAL.h"
     50          #include "MT.h"
     51          #include "MT_SYS.h"
     52          #include "DebugTrace.h"
     53          
     54          /* Hal */
     55          #include "hal_lcd.h"
     56          #include "hal_mcu.h"
     57          #include "hal_timer.h"
     58          #include "hal_key.h"
     59          #include "hal_led.h"
     60          #include "hal_adc.h"
     61          
     62          /* Allow access macRandomByte() */
     63          #include "mac_radio_defs.h"
     64          
     65          /*********************************************************************
     66           * CONSTANTS
     67           */
     68          
     69          // Task ID not initialized
     70          #define NO_TASK_ID 0xFF
     71          
     72          // Minimum length RAM "pattern" for Stack check
     73          #define MIN_RAM_INIT 12
     74          
     75          /*********************************************************************
     76           * GLOBAL VARIABLES
     77           */
     78          
     79          #if defined MAKE_CRC_SHDW
     80          #pragma location="CRC_SHDW"
     81          const CODE uint16 _crcShdw = 0xFFFF;
     82          #pragma required=_crcShdw
     83          
     84          #elif !defined MT_UBL_FUNC
     85          
     86          #pragma location="LOCK_BITS_ADDRESS_SPACE"

   \                                 In  segment LOCK_BITS_ADDRESS_SPACE, align 1
     87          __no_init uint8 _lockBits[16];
   \                     _lockBits:
   \   000000                DS 16
     88          #pragma required=_lockBits
     89          
     90          #if defined ZCL_KEY_ESTABLISH
     91          #include "zcl_cert_data.c"
     92          #else
     93          #pragma location="IEEE_ADDRESS_SPACE"

   \                                 In  segment IEEE_ADDRESS_SPACE, align 1
     94          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
   \                     _nvIEEE:
   \   000000                DS 8
   \   000008                REQUIRE _lockBits
     95          #pragma required=_nvIEEE
     96          #endif
     97          
     98          #pragma location="RESERVED_ADDRESS_SPACE"

   \                                 In  segment RESERVED_ADDRESS_SPACE, align 1
     99          __no_init uint8 _reserved[1932];
   \                     _reserved:
   \   000000                DS 1932
   \   00078C                REQUIRE _nvIEEE
    100          #pragma required=_reserved
    101          #endif
    102          
    103          // 64-bit Extended Address of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 aExtendedAddress[8];
   \                     aExtendedAddress:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
   \   000008                REQUIRE _reserved
    105          
    106          /*********************************************************************
    107           * LOCAL VARIABLES
    108           */
    109          
    110          // Registered keys task ID, initialized to NOT USED.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    111          static uint8 registeredKeysTaskID = NO_TASK_ID;
   \                     registeredKeysTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for registeredKeysTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    112          
    113          /*********************************************************************
    114           * LOCAL FUNCTIONS
    115           */
    116          static void ChkReset( void );
    117          // function pointer for low voltage warning callback

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          static void (*gpLowVoltageWarning)( uint8 voltLevel ) = (void*) NULL;
   \                     gpLowVoltageWarning:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    119          
    120          /*********************************************************************
    121           * @fn      InitBoard()
    122           * @brief   Initialize the CC2420DB Board Peripherals
    123           * @param   level: COLD,WARM,READY
    124           * @return  None
    125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    126          void InitBoard( uint8 level )
   \                     InitBoard:
    127          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    128            if ( level == OB_COLD )
   \   000006   7020         JNZ       ??InitBoard_0
    129            {
    130              // IAR does not zero-out this byte below the XSTACK.
    131              *(uint8 *)0x0 = 0;
   \   000008   900000       MOV       DPTR,#0x0
   \   00000B   E4           CLR       A
   \   00000C   F0           MOVX      @DPTR,A
    132              // Interrupts off
    133              osal_int_disable( INTS_ALL );
   \   00000D                ; Setup parameters for call to function osal_int_disable
   \   00000D   79FF         MOV       R1,#-0x1
   \   00000F   12....       LCALL     `??osal_int_disable::?relay`; Banked call to: osal_int_disable
    134              // Check for Brown-Out reset
    135              ChkReset();
   \   000012   E59D         MOV       A,0x9d
   \   000014   5418         ANL       A,#0x18
   \   000016   F8           MOV       R0,A
   \   000017   6018         JZ        ??InitBoard_1
   \   000019   7408         MOV       A,#0x8
   \   00001B   68           XRL       A,R0
   \   00001C   6013         JZ        ??InitBoard_1
   \   00001E   7410         MOV       A,#0x10
   \   000020   68           XRL       A,R0
   \   000021   600E         JZ        ??InitBoard_1
   \   000023                ; Setup parameters for call to function halAssertHandler
   \   000023   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   \   000026   8009         SJMP      ??InitBoard_1
    136            }
    137            else  // !OB_COLD
    138            {
    139              /* Initialize Key stuff */
    140              HalKeyConfig(HAL_KEY_INTERRUPT_ENABLE , OnBoard_KeyCallback);
   \                     ??InitBoard_0:
   \   000028                ; Setup parameters for call to function HalKeyConfig
   \   000028   7A..         MOV       R2,#`??OnBoard_KeyCallback::?relay` & 0xff
   \   00002A   7B..         MOV       R3,#(`??OnBoard_KeyCallback::?relay` >> 8) & 0xff
   \   00002C   7901         MOV       R1,#0x1
   \   00002E   12....       LCALL     `??HalKeyConfig::?relay`; Banked call to: HalKeyConfig
    141            }
    142          }
   \                     ??InitBoard_1:
   \   000031                REQUIRE ?Subroutine0
   \   000031                REQUIRE SLEEPSTA
   \   000031                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    143          
    144          /*********************************************************************
    145           * @fn      ChkReset()
    146           * @brief   Check reset bits - if reset cause is unknown, assume a
    147           *          brown-out (low power), assume batteries are not reliable,
    148           *          hang in a loop and sequence through the LEDs.
    149           * @param   None
    150           * @return  None
    151           *********************************************************************/
    152          void ChkReset( void )
    153          {
    154            uint8 rib;
    155          
    156            // Isolate reset indicator bits
    157            rib = SLEEPSTA & LRESET;
    158          
    159            if ( rib == RESETPO )
    160            {
    161              // Put code here to handle Power-On reset
    162            }
    163            else if ( rib == RESETEX )
    164            {
    165              // Put code here to handle External reset
    166            }
    167            else if ( rib == RESETWD )
    168            {
    169              // Put code here to handle WatchDog reset
    170            }
    171            else  // Unknown reason - not expected.
    172            {
    173              HAL_ASSERT(0);
    174            }
    175          }
    176          
    177          /*********************************************************************
    178           *                        "Keyboard" Support
    179           *********************************************************************/
    180          
    181          /*********************************************************************
    182           * Keyboard Register function
    183           *
    184           * The keyboard handler is setup to send all keyboard changes to
    185           * one task (if a task is registered).
    186           *
    187           * If a task registers, it will get all the keys. You can change this
    188           * to register for individual keys.
    189           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    190          uint8 RegisterForKeys( uint8 task_id )
   \                     RegisterForKeys:
    191          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    192            // Allow only the first task
    193            if ( registeredKeysTaskID == NO_TASK_ID )
   \   000004   90....       MOV       DPTR,#registeredKeysTaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F4           CPL       A
   \   000009   7006         JNZ       ??RegisterForKeys_0
    194            {
    195              registeredKeysTaskID = task_id;
   \   00000B   E9           MOV       A,R1
   \   00000C   F0           MOVX      @DPTR,A
    196              return ( true );
   \   00000D   7901         MOV       R1,#0x1
   \   00000F   8002         SJMP      ??RegisterForKeys_1
    197            }
    198            else
    199              return ( false );
   \                     ??RegisterForKeys_0:
   \   000011   7900         MOV       R1,#0x0
   \                     ??RegisterForKeys_1:
   \   000013   02....       LJMP      ?Subroutine1 & 0xFFFF
    200          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    201          
    202          /*********************************************************************
    203           * @fn      OnBoard_SendKeys
    204           *
    205           * @brief   Send "Key Pressed" message to application.
    206           *
    207           * @param   keys  - keys that were pressed
    208           *          state - shifted
    209           *
    210           * @return  status
    211           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    212          uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
   \                     OnBoard_SendKeys:
    213          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    214            keyChange_t *msgPtr;
    215          
    216            if ( registeredKeysTaskID != NO_TASK_ID )
   \   000009   90....       MOV       DPTR,#registeredKeysTaskID
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F4           CPL       A
   \   00000E   602B         JZ        ??OnBoard_SendKeys_0
    217            {
    218              // Send the address to the task
    219              msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
   \   000010                ; Setup parameters for call to function osal_msg_allocate
   \   000010   7A04         MOV       R2,#0x4
   \   000012   7B00         MOV       R3,#0x0
   \   000014   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    220              if ( msgPtr )
   \   000017   EA           MOV       A,R2
   \   000018   4B           ORL       A,R3
   \   000019   601C         JZ        ??OnBoard_SendKeys_1
    221              {
    222                msgPtr->hdr.event = KEY_CHANGE;
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   74C0         MOV       A,#-0x40
   \   000021   F0           MOVX      @DPTR,A
    223                msgPtr->state = state;
   \   000022   EF           MOV       A,R7
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   F0           MOVX      @DPTR,A
    224                msgPtr->keys = keys;
   \   000026   EE           MOV       A,R6
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   F0           MOVX      @DPTR,A
    225          
    226                osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
   \   00002F                ; Setup parameters for call to function osal_msg_send
   \   00002F   90....       MOV       DPTR,#registeredKeysTaskID
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F9           MOV       R1,A
   \   000034   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    227              }
    228              return ( ZSuccess );
   \                     ??OnBoard_SendKeys_1:
   \   000037   7900         MOV       R1,#0x0
   \   000039   8002         SJMP      ??OnBoard_SendKeys_2
    229            }
    230            else
    231              return ( ZFailure );
   \                     ??OnBoard_SendKeys_0:
   \   00003B   7901         MOV       R1,#0x1
   \                     ??OnBoard_SendKeys_2:
   \   00003D   7F02         MOV       R7,#0x2
   \   00003F   02....       LJMP      ?BANKED_LEAVE_XDATA
    232          }
    233          
    234          /*********************************************************************
    235           * @fn      OnBoard_KeyCallback
    236           *
    237           * @brief   Callback service for keys
    238           *
    239           * @param   keys  - keys that were pressed
    240           *          state - shifted
    241           *
    242           * @return  void
    243           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
   \                     OnBoard_KeyCallback:
    245          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    246            uint8 shift;
    247            (void)state;
    248          
    249          //  shift = (keys & HAL_KEY_SW_6) ? true : false;
    250            shift = 1;
    251            if ( OnBoard_SendKeys( keys, shift ) != ZSuccess )
   \   000005                ; Setup parameters for call to function OnBoard_SendKeys
   \   000005   7A01         MOV       R2,#0x1
   \   000007   12....       LCALL     `??OnBoard_SendKeys::?relay`; Banked call to: OnBoard_SendKeys
    252            {
    253              // Process SW1 here
    254              if ( keys & HAL_KEY_SW_1 )  // Switch 1
    255              {
    256              }
    257              // Process SW2 here
    258              if ( keys & HAL_KEY_SW_2 )  // Switch 2
    259              {
    260              }
    261              // Process SW3 here
    262              if ( keys & HAL_KEY_SW_3 )  // Switch 3
    263              {
    264              }
    265              // Process SW4 here
    266              if ( keys & HAL_KEY_SW_4 )  // Switch 4
    267              {
    268              }
    269              // Process SW5 here
    270              if ( keys & HAL_KEY_SW_5 )  // Switch 5
    271              {
    272              }
    273              // Process SW6 here
    274              if ( keys & HAL_KEY_SW_6 )  // Switch 6
    275              {
    276              }
    277            }
    278          }
   \   00000A   80..         SJMP      ?Subroutine0
    279          
    280          /*********************************************************************
    281           *                  Low Voltage Protectiion Support
    282           *********************************************************************/
    283          
    284          /*********************************************************************
    285           * @fn      RegisterVoltageWarningCB
    286           *
    287           * @brief   Register Low Voltage Warning Callback
    288           *
    289           * @param   pVoltWarnCB - fundion pointer of the callback
    290           *
    291           * @return  none
    292           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    293          void RegisterVoltageWarningCB( void (*pVoltWarnCB)(uint8) )
   \                     RegisterVoltageWarningCB:
    294          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    295            gpLowVoltageWarning = pVoltWarnCB;
   \   000004   90....       MOV       DPTR,#gpLowVoltageWarning
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   F0           MOVX      @DPTR,A
    296          }
   \   00000C   02....       LJMP      ?Subroutine1 & 0xFFFF
    297          
    298          /*********************************************************************
    299           * @fn      OnBoard_CheckVoltage
    300           *
    301           * @brief   Check voltage and notify the callback of the status
    302           *
    303           * @param   none
    304           *
    305           * @return  TRUE  - The voltage is good for NV writing
    306           *          FALSE - The voltage is not high enough for NV writing
    307           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          bool OnBoard_CheckVoltage( void )
   \                     OnBoard_CheckVoltage:
    309          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    310            uint8 voltageMeasured;
    311            uint8 howGood;
    312          
    313            voltageMeasured = HalAdcCheckVddRaw();
   \   000005                ; Setup parameters for call to function HalAdcCheckVddRaw
   \   000005   12....       LCALL     `??HalAdcCheckVddRaw::?relay`; Banked call to: HalAdcCheckVddRaw
   \   000008   E9           MOV       A,R1
   \   000009   F8           MOV       R0,A
    314          
    315            if ( voltageMeasured > VDD_MIN_GOOD )
   \   00000A   C3           CLR       C
   \   00000B   9453         SUBB      A,#0x53
   \   00000D   5025         JNC       ??OnBoard_CheckVoltage_0
    316            {
    317              howGood = VOLT_LEVEL_GOOD;
    318            }
    319            else if ( voltageMeasured > VDD_MIN_NV )
   \   00000F   E9           MOV       A,R1
   \   000010   C3           CLR       C
   \   000011   944F         SUBB      A,#0x4f
   \   000013   4004         JC        ??OnBoard_CheckVoltage_1
    320            {
    321              howGood = VOLT_LEVEL_CAUTIOUS;
   \   000015   7E01         MOV       R6,#0x1
   \   000017   8002         SJMP      ??OnBoard_CheckVoltage_2
    322            }
    323            else
    324            {
    325              howGood = VOLT_LEVEL_BAD;
   \                     ??OnBoard_CheckVoltage_1:
   \   000019   7E00         MOV       R6,#0x0
    326            }
    327              
    328            if ( gpLowVoltageWarning )
   \                     ??OnBoard_CheckVoltage_2:
   \   00001B   90....       MOV       DPTR,#gpLowVoltageWarning
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   E8           MOV       A,R0
   \   000024   49           ORL       A,R1
   \   000025   600A         JZ        ??OnBoard_CheckVoltage_3
    329            {
    330              if ( howGood < VOLT_LEVEL_GOOD )
    331              {
    332                gpLowVoltageWarning( howGood );
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV       A,R6
   \   000028   F9           MOV       R1,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F583         MOV       DPH,A
   \   00002C   8882         MOV       DPL,R0
   \   00002E   12....       LCALL     ?CALL_IND
    333              }
    334            }
    335          
    336            return ( howGood > VOLT_LEVEL_BAD );
   \                     ??OnBoard_CheckVoltage_3:
   \   000031   EE           MOV       A,R6
   \   000032   6004         JZ        ??OnBoard_CheckVoltage_4
   \                     ??OnBoard_CheckVoltage_0:
   \   000034   7901         MOV       R1,#0x1
   \   000036   8002         SJMP      ??OnBoard_CheckVoltage_5
   \                     ??OnBoard_CheckVoltage_4:
   \   000038   7900         MOV       R1,#0x0
   \                     ??OnBoard_CheckVoltage_5:
   \   00003A   02....       LJMP      ?Subroutine0 & 0xFFFF
    337          }
    338          
    339          /*********************************************************************
    340           * @fn      OnBoard_stack_used
    341           *
    342           * @brief   Runs through the stack looking for touched memory.
    343           *
    344           * @param   none
    345           *
    346           * @return  Maximum number of bytes used by the stack.
    347           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    348          uint16 OnBoard_stack_used(void)
   \                     OnBoard_stack_used:
    349          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    350            uint8 const *ptr;
    351            uint8 cnt = 0;
   \   000004   7800         MOV       R0,#0x0
    352          
    353            for (ptr = CSTACK_END; ptr > CSTACK_BEG; ptr--)
   \   000006   7582..       MOV       DPL,#(SFE(XSTACK) + 255) & 0xff
   \   000009   7583..       MOV       DPH,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   00000C   800E         SJMP      ??OnBoard_stack_used_0
    354            {
    355              if (STACK_INIT_VALUE == *ptr)
    356              {
    357                if (++cnt >= MIN_RAM_INIT)
    358                {
    359                  ptr += MIN_RAM_INIT;
    360                  break;
    361                }
    362              }
    363              else
    364              {
    365                cnt = 0;
   \                     ??OnBoard_stack_used_1:
   \   00000E   7800         MOV       R0,#0x0
    366              }
   \                     ??OnBoard_stack_used_2:
   \   000010   E582         MOV       A,DPL
   \   000012   24FF         ADD       A,#-0x1
   \   000014   F582         MOV       DPL,A
   \   000016   E583         MOV       A,DPH
   \   000018   34FF         ADDC      A,#-0x1
   \   00001A   F583         MOV       DPH,A
   \                     ??OnBoard_stack_used_0:
   \   00001C   C3           CLR       C
   \   00001D   74..         MOV       A,#SFB(XSTACK) & 0xff
   \   00001F   9582         SUBB      A,DPL
   \   000021   74..         MOV       A,#(SFB(XSTACK) >> 8) & 0xff
   \   000023   9583         SUBB      A,DPH
   \   000025   5016         JNC       ??OnBoard_stack_used_3
   \   000027   E0           MOVX      A,@DPTR
   \   000028   64CD         XRL       A,#0xcd
   \   00002A   70E2         JNZ       ??OnBoard_stack_used_1
   \   00002C   08           INC       R0
   \   00002D   E8           MOV       A,R0
   \   00002E   C3           CLR       C
   \   00002F   940C         SUBB      A,#0xc
   \   000031   40DD         JC        ??OnBoard_stack_used_2
   \   000033   E582         MOV       A,DPL
   \   000035   240C         ADD       A,#0xc
   \   000037   F582         MOV       DPL,A
   \   000039   5002         JNC       ??OnBoard_stack_used_3
   \   00003B   0583         INC       DPH
    367            }
    368          
    369            return (uint16)(CSTACK_END - ptr + 1);
   \                     ??OnBoard_stack_used_3:
   \   00003D   74..         MOV       A,#(SFE(XSTACK) + 255) & 0xff
   \   00003F   C3           CLR       C
   \   000040   9582         SUBB      A,DPL
   \   000042   F8           MOV       R0,A
   \   000043   74..         MOV       A,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   000045   9583         SUBB      A,DPH
   \   000047   F9           MOV       R1,A
   \   000048   E8           MOV       A,R0
   \   000049   2401         ADD       A,#0x1
   \   00004B   FA           MOV       R2,A
   \   00004C   E4           CLR       A
   \   00004D   39           ADDC      A,R1
   \   00004E   FB           MOV       R3,A
   \   00004F                REQUIRE ?Subroutine1
   \   00004F                ; // Fall through to label ?Subroutine1
    370          }
    371          
    372          /*********************************************************************
    373           * @fn      _itoa
    374           *
    375           * @brief   convert a 16bit number to ASCII
    376           *
    377           * @param   num -
    378           *          buf -
    379           *          radix -
    380           *
    381           * @return  void
    382           *
    383           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    384          void _itoa(uint16 num, uint8 *buf, uint8 radix)
   \                     _itoa:
    385          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V3,R1
    386            char c,i;
    387            uint8 *p, rst[5];
    388          
    389            p = rst;
   \   000010   A8..         MOV       R0,?XSP + 0
   \   000012   A9..         MOV       R1,?XSP + 1
   \   000014   88..         MOV       ?V0,R0
   \   000016   89..         MOV       ?V1,R1
    390            for ( i=0; i<5; i++,p++ )
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   E5..         MOV       A,?V3
   \   00001D   F5..         MOV       ?V4,A
   \   00001F   75..00       MOV       ?V5,#0x0
    391            {
    392              c = num % radix;  // Isolate a digit
   \                     ??_itoa_0:
   \   000022   EE           MOV       A,R6
   \   000023   F8           MOV       R0,A
   \   000024   EF           MOV       A,R7
   \   000025   F9           MOV       R1,A
   \   000026   AA..         MOV       R2,?V4
   \   000028   AB..         MOV       R3,?V5
   \   00002A   12....       LCALL     ?US_DIV_MOD
   \   00002D   EA           MOV       A,R2
   \   00002E   F8           MOV       R0,A
    393              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
   \   00002F   940A         SUBB      A,#0xa
   \   000031   5004         JNC       ??_itoa_1
   \   000033   7930         MOV       R1,#0x30
   \   000035   8002         SJMP      ??_itoa_2
   \                     ??_itoa_1:
   \   000037   7937         MOV       R1,#0x37
   \                     ??_itoa_2:
   \   000039   EA           MOV       A,R2
   \   00003A   29           ADD       A,R1
   \   00003B   85..82       MOV       DPL,?V0
   \   00003E   85..83       MOV       DPH,?V1
   \   000041   F0           MOVX      @DPTR,A
    394              num /= radix;
   \   000042   EE           MOV       A,R6
   \   000043   F8           MOV       R0,A
   \   000044   EF           MOV       A,R7
   \   000045   F9           MOV       R1,A
   \   000046   AA..         MOV       R2,?V4
   \   000048   AB..         MOV       R3,?V5
   \   00004A   12....       LCALL     ?US_DIV_MOD
   \   00004D   88..         MOV       ?V6,R0
   \   00004F   89..         MOV       ?V7,R1
   \   000051   AE..         MOV       R6,?V6
   \   000053   AF..         MOV       R7,?V7
    395              if ( !num )
   \   000055   E8           MOV       A,R0
   \   000056   4F           ORL       A,R7
   \   000057   600F         JZ        ??_itoa_3
    396                break;
    397            }
   \   000059   05..         INC       ?V2
   \   00005B   A3           INC       DPTR
   \   00005C   8582..       MOV       ?V0,DPL
   \   00005F   8583..       MOV       ?V1,DPH
   \   000062   E5..         MOV       A,?V2
   \   000064   9405         SUBB      A,#0x5
   \   000066   40BA         JC        ??_itoa_0
    398          
    399            for ( c=0 ; c<=i; c++ )
   \                     ??_itoa_3:
   \   000068   7800         MOV       R0,#0x0
    400              *buf++ = *p--;  // Reverse character order
   \                     ??_itoa_4:
   \   00006A   85..82       MOV       DPL,?V0
   \   00006D   85..83       MOV       DPH,?V1
   \   000070   E0           MOVX      A,@DPTR
   \   000071   8C82         MOV       DPL,R4
   \   000073   8D83         MOV       DPH,R5
   \   000075   F0           MOVX      @DPTR,A
   \   000076   E5..         MOV       A,?V0
   \   000078   24FF         ADD       A,#-0x1
   \   00007A   F5..         MOV       ?V0,A
   \   00007C   E5..         MOV       A,?V1
   \   00007E   34FF         ADDC      A,#-0x1
   \   000080   F5..         MOV       ?V1,A
   \   000082   A3           INC       DPTR
   \   000083   AC82         MOV       R4,DPL
   \   000085   AD83         MOV       R5,DPH
   \   000087   08           INC       R0
   \   000088   E5..         MOV       A,?V2
   \   00008A   C3           CLR       C
   \   00008B   98           SUBB      A,R0
   \   00008C   50DC         JNC       ??_itoa_4
    401          
    402            *buf = '\0';
   \   00008E   E4           CLR       A
   \   00008F   F0           MOVX      @DPTR,A
    403          }
   \   000090   7405         MOV       A,#0x5
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   \   000095   7F08         MOV       R7,#0x8
   \   000097   02....       LJMP      ?BANKED_LEAVE_XDATA
    404          
    405          /*********************************************************************
    406           * @fn        Onboard_rand
    407           *
    408           * @brief    Random number generator
    409           *
    410           * @param   none
    411           *
    412           * @return  uint16 - new random number
    413           *
    414           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          uint16 Onboard_rand( void )
   \                     Onboard_rand:
    416          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    417            return ( MAC_RADIO_RANDOM_WORD() );
   \   000004                ; Setup parameters for call to function macMcuRandomWord
   \   000004   12....       LCALL     `??macMcuRandomWord::?relay`; Banked call to: macMcuRandomWord
   \   000007   02....       LJMP      ?Subroutine1 & 0xFFFF
    418          }
    419          
    420          /*********************************************************************
    421           * @fn        Onboard_wait
    422           *
    423           * @brief    Delay wait
    424           *
    425           * @param   uint16 - time to wait
    426           *
    427           * @return  none
    428           *
    429           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          void Onboard_wait( uint16 timeout )
   \                     Onboard_wait:
    431          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8003         SJMP      ??Onboard_wait_0
    432            while (timeout--)
    433            {
    434              asm("NOP");
   \                     ??Onboard_wait_1:
   \   000002   00           NOP
    435              asm("NOP");
   \   000003   00           NOP
    436              asm("NOP");
   \   000004   00           NOP
    437            }
   \                     ??Onboard_wait_0:
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   F9           MOV       R1,A
   \   000009   E8           MOV       A,R0
   \   00000A   24FF         ADD       A,#-0x1
   \   00000C   1A           DEC       R2
   \   00000D   E9           MOV       A,R1
   \   00000E   34FF         ADDC      A,#-0x1
   \   000010   FB           MOV       R3,A
   \   000011   E8           MOV       A,R0
   \   000012   49           ORL       A,R1
   \   000013   70ED         JNZ       ??Onboard_wait_1
    438          }
   \   000015   02....       LJMP      ?BRET
    439          
    440          /*********************************************************************
    441           * @fn      Onboard_soft_reset
    442           *
    443           * @brief   Effect a soft reset.
    444           *
    445           * @param   none
    446           *
    447           * @return  none
    448           *
    449           *********************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    450          __near_func void Onboard_soft_reset( void )
   \                     Onboard_soft_reset:
    451          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    452            HAL_DISABLE_INTERRUPTS();
   \   000000   C2AF         CLR       0xa8.7
    453            // Abort all DMA channels to insure that ongoing operations do not
    454            // interfere with re-configuration.
    455            DMAARM = 0x80 | 0x1F;
   \   000002   75D69F       MOV       0xd6,#-0x61
    456            asm("LJMP 0x0");
   \   000005   020000       LJMP 0x0
    457          }
   \   000008   22           RET
   \   000009                REQUIRE _A_IEN0
   \   000009                REQUIRE DMAARM
    458          
    459          #if defined MT_UBL_FUNC
    460          #if !defined UBL_RC_IMG_PG_BEG
    461          #define UBL_RC_IMG_PG_BEG  (HAL_SB_CRC_ADDR / HAL_FLASH_PAGE_SIZE)
    462          #endif
    463          #if !defined UBL_MD_PG_OFFSET
    464          #define UBL_MD_PG_OFFSET   (HAL_SB_CRC_ADDR % HAL_FLASH_PAGE_SIZE + 2)
    465          #endif
    466          #if !defined UBL_ADDR
    467          #define UBL_MD_ADDR        (HAL_SB_CRC_ADDR + 2)
    468          #endif
    469          
    470          /*********************************************************************
    471           * @fn      MT_UblCommandProcessing
    472           *
    473           * @brief   Effect a soft reset.
    474           *
    475           * @param   pBuf - Pointer to the received MT buffer.
    476           *
    477           * @return  MT_RPC_ERR_COMMAND_ID if the MT command is not MT_UBL_ERASE.
    478           *
    479           *********************************************************************/
    480          uint8 MT_UblCommandProcessing(uint8 *pBuf);
    481          uint8 MT_UblCommandProcessing(uint8 *pBuf)
    482          {
    483            if (pBuf[MT_RPC_POS_CMD1] == MT_UBL_ERASE)
    484            {
    485              uint16 crc[2];
    486              HalFlashRead(UBL_RC_IMG_PG_BEG, UBL_MD_PG_OFFSET, (uint8 *)(crc+1), 2);
    487          
    488              if (crc[1] != 0)
    489              {
    490                crc[1] ^= 0xFFFF;  // Only write to zero bits that are not already zero.
    491                crc[0] = 0xFFFF;
    492                HalFlashWrite((UBL_MD_ADDR - 2) / HAL_FLASH_WORD_SIZE, (uint8 *)crc, 1);
    493              }
    494          
    495              Onboard_soft_reset();
    496            }
    497          
    498            return MT_RPC_ERR_COMMAND_ID;
    499          }
    500          #endif
    501          
    502          /*********************************************************************
    503           *                    EXTERNAL I/O FUNCTIONS
    504           *
    505           * User defined functions to control external devices. Add your code
    506           * to the following functions to control devices wired to DB outputs.
    507           *
    508           *********************************************************************/
    509          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    510          void BigLight_On( void )
   \                     BigLight_On:
    511          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    512            // Put code here to turn on an external light
    513          }
   \   000000   02....       LJMP      ?BRET
    514          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    515          void BigLight_Off( void )
   \                     BigLight_Off:
    516          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    517            // Put code here to turn off an external light
    518          }
   \   000000   02....       LJMP      ?BRET
    519          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    520          void BuzzerControl( uint8 on )
   \                     BuzzerControl:
    521          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    522            // Put code here to turn a buzzer on/off
    523            (void)on;
    524          }
   \   000000   02....       LJMP      ?BRET
    525          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    526          void Dimmer( uint8 lvl )
   \                     Dimmer:
    527          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    528            // Put code here to control a dimmer
    529            (void)lvl;
    530          }
   \   000000   02....       LJMP      ?BRET
    531          
    532          // No dip switches on this board

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          uint8 GetUserDipSw( void )
   \                     GetUserDipSw:
    534          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    535            return 0;
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    536          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for registeredKeysTaskID>`:
   \   000000   FF           DB 255
    537          
    538          /*********************************************************************
    539          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   BigLight_Off
      0      0   BigLight_On
      0      0   BuzzerControl
      0      0   Dimmer
      0      0   GetUserDipSw
      0      9   InitBoard
        0      9   -> HalKeyConfig
        0      9   -> halAssertHandler
        0      9   -> osal_int_disable
      0      9   OnBoard_CheckVoltage
        0      9   -> HalAdcCheckVddRaw
      0      9   OnBoard_KeyCallback
        0      9   -> OnBoard_SendKeys
      1     19   OnBoard_SendKeys
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_send
      2      0   OnBoard_stack_used
      2      0   Onboard_rand
        2      0   -> macMcuRandomWord
      0      0   Onboard_soft_reset
      0      0   Onboard_wait
      2      0   RegisterForKeys
      2      0   RegisterVoltageWarningCB
      1     21   _itoa


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for registeredKeysTaskID>
       5  ?Subroutine0
       7  ?Subroutine1
       3  BigLight_Off
       3  BigLight_On
       3  BuzzerControl
       1  DMAARM
       3  Dimmer
       5  GetUserDipSw
      49  InitBoard
      61  OnBoard_CheckVoltage
      12  OnBoard_KeyCallback
      66  OnBoard_SendKeys
      79  OnBoard_stack_used
      10  Onboard_rand
       9  Onboard_soft_reset
      24  Onboard_wait
      22  RegisterForKeys
      15  RegisterVoltageWarningCB
       1  SLEEPSTA
       1  _A_IEN0
     154  _itoa
      16  _lockBits
       8  _nvIEEE
    1932  _reserved
       8  aExtendedAddress
       2  gpLowVoltageWarning
       1  registeredKeysTaskID
      90  -- Other

 
   521 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
     8 bytes in segment IEEE_ADDRESS_SPACE
    16 bytes in segment LOCK_BITS_ADDRESS_SPACE
     9 bytes in segment NEAR_CODE
 1 932 bytes in segment RESERVED_ADDRESS_SPACE
     3 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    10 bytes in segment XDATA_Z
 
   100 bytes of CODE     memory
     0 bytes of DATA     memory (+ 3 bytes shared)
   521 bytes of HUGECODE memory
 1 967 bytes of XDATA    memory

Errors: none
Warnings: none
