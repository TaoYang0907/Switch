///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              15/Jul/2020  22:11:46
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EW4F86.tmp ("D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c"
//        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
//        -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_TEMPERATURE_MEASUREMENT -D
//        ZCL_GROUPS -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\CoordinatorEB\List\zcl_sampletemperaturesensor.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_sampletemperaturesensor

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleApp_BatteryWarningCB::?relay`,0203H
        FUNCTION `??zclSampleTemperatureSensor_BasicResetCB::?rel`,0203H
        PUBLIC `??zclSampleTemperatureSensor_Init::?relay`
        FUNCTION `??zclSampleTemperatureSensor_Init::?relay`,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessCommissioni,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessInDiscCmdsR,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessIncomingMsg,0203H
        PUBLIC `??zclSampleTemperatureSensor_event_loop::?relay`
        FUNCTION `??zclSampleTemperatureSensor_event_loop::?relay`,0203H
        PUBLIC reportableChange
        FUNCTION zclSampleApp_BatteryWarningCB,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION zclSampleTemperatureSensor_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleTemperatureSensor_Init
        FUNCTION zclSampleTemperatureSensor_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC zclSampleTemperatureSensor_NwkState
        FUNCTION zclSampleTemperatureSensor_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleTemperatureSensor_ProcessIncomingMsg,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclSampleTemperatureSensor_TaskID
        PUBLIC zclSampleTemperatureSensor_event_loop
        FUNCTION zclSampleTemperatureSensor_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
RegisterVoltageWarningCB SYMBOL "RegisterVoltageWarningCB"
`??RegisterVoltageWarningCB::?relay` SYMBOL "?relay", RegisterVoltageWarningCB
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_RepAddAttrCfgRecordDefaultToList SYMBOL "bdb_RepAddAttrCfgRecordDefaultToList"
`??bdb_RepAddAttrCfgRecordDefaultToList::?relay` SYMBOL "?relay", bdb_RepAddAttrCfgRecordDefaultToList
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclSampleTemperatureSensor_ResetAttributesToDefaultValues SYMBOL "zclSampleTemperatureSensor_ResetAttributesToDefaultValues"
??zclSampleTemperatureSensor_ResetAttributesToD SYMBOL "?relay", zclSampleTemperatureSensor_ResetAttributesToDefaultValues
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zclSampleTemperatureSensor_Init SYMBOL "zclSampleTemperatureSensor_Init"
`??zclSampleTemperatureSensor_Init::?relay` SYMBOL "?relay", zclSampleTemperatureSensor_Init
zclSampleTemperatureSensor_event_loop SYMBOL "zclSampleTemperatureSensor_event_loop"
`??zclSampleTemperatureSensor_event_loop::?relay` SYMBOL "?relay", zclSampleTemperatureSensor_event_loop

        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??RegisterVoltageWarningCB::?relay`
        FUNCTION `??RegisterVoltageWarningCB::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`
        FUNCTION `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN ??zclSampleTemperatureSensor_ResetAttributesToD
        FUNCTION ??zclSampleTemperatureSensor_ResetAttributesToD,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterVoltageWarningCB
        FUNCTION RegisterVoltageWarningCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepAddAttrCfgRecordDefaultToList
        FUNCTION bdb_RepAddAttrCfgRecordDefaultToList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleTemperatureSensor_Attrs
        EXTERN zclSampleTemperatureSensor_NumAttributes
        EXTERN zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        FUNCTION zclSampleTemperatureSensor_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleTemperatureSensor_SimpleDesc
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdpExternalStateTaskID

// D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampletemperaturesensor.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6   Description:    Zigbee Cluster Library - sample device application.
//    7 
//    8 
//    9   Copyright 2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application implements a ZigBee Temperature Sensor, based on Z-Stack 3.0.
//   42 
//   43   This application is based on the common sample-application user interface. Please see the main
//   44   comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
//   45   this sample applicetion.
//   46   
//   47   Application-specific UI peripherals being used:
//   48 
//   49   - LEDs:
//   50     LED1 is not used in this application
//   51 
//   52   Application-specific menu system:
//   53 
//   54     <SET LOCAL TEMP> Set the temperature of the local temperature sensor
//   55       Up/Down changes the temperature 
//   56       This screen shows the following information:
//   57         Line2:
//   58           Shows the temperature of the local temperature sensor
//   59 
//   60 *********************************************************************/
//   61 
//   62 /*********************************************************************
//   63  * INCLUDES
//   64  */
//   65 #include "ZComDef.h"
//   66 #include "OSAL.h"
//   67 #include "AF.h"
//   68 #include "ZDApp.h"
//   69 #include "ZDObject.h"
//   70 #include "ZDProfile.h"
//   71 #include "MT_SYS.h"
//   72 
//   73 #include "zcl.h"
//   74 #include "zcl_general.h"
//   75 #include "zcl_ha.h"
//   76 #include "zcl_ms.h"
//   77 
//   78 #include "zcl_sampletemperaturesensor.h"
//   79 
//   80 #include "onboard.h"
//   81 
//   82 /* HAL */
//   83 #include "hal_lcd.h"
//   84 #include "hal_led.h"
//   85 #include "hal_key.h"
//   86 
//   87 #include "bdb_interface.h"
//   88 #include "bdb_Reporting.h"
//   89 
//   90    
//   91 /*********************************************************************
//   92  * MACROS
//   93  */
//   94 
//   95 // how often to report temperature
//   96 #define SAMPLETEMPERATURESENSOR_REPORT_INTERVAL   10000
//   97 
//   98 #define GUI_LOCAL_TEMP    1
//   99 
//  100 #define APP_TITLE "   Temp Sensor  "
//  101 
//  102 /*********************************************************************
//  103  * CONSTANTS
//  104  */
//  105 
//  106 /*********************************************************************
//  107  * TYPEDEFS
//  108  */
//  109 
//  110 /*********************************************************************
//  111  * GLOBAL VARIABLES
//  112  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  113 byte zclSampleTemperatureSensor_TaskID;
zclSampleTemperatureSensor_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  114 
//  115 extern int16 zdpExternalStateTaskID;
//  116 
//  117 /*********************************************************************
//  118  * GLOBAL FUNCTIONS
//  119  */
//  120 
//  121 /*********************************************************************
//  122  * LOCAL VARIABLES
//  123  */
//  124 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  125 devStates_t zclSampleTemperatureSensor_NwkState = DEV_INIT;
zclSampleTemperatureSensor_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleTemperatureSensor_N`
        REQUIRE __INIT_XDATA_I
//  126 
//  127 //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
//  128 
//  129 // Test Endpoint to allow SYS_APP_MSGs
//  130 /*
//  131 static endPointDesc_t sampleTemperatureSensor_TestEp =
//  132 {
//  133   20,                                 // Test endpoint
//  134   0,
//  135   &zclSampleTemperatureSensor_TaskID,
//  136   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  137   (afNetworkLatencyReq_t)0            // No Network Latency req
//  138 };
//  139 */
//  140 #ifdef BDB_REPORTING
//  141 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
//  142   uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0x2C01 is 300 in int16
//  143 #endif
//  144 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4

        RSEG XDATA_I:XDATA:NOROOT(0)
//  145   uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00}; // 0x2C01 is 300 in int16
reportableChange:
        DATA32
        DS 4
        REQUIRE `?<Initializer for reportableChange>`
        REQUIRE __INIT_XDATA_I
//  146 #endif 
//  147 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
//  148   uint8 reportableChange[] = {0x2C, 0x01}; // 0x2C01 is 300 in int16
//  149 #endif 
//  150 #endif
//  151 
//  152 /*********************************************************************
//  153  * LOCAL FUNCTIONS
//  154  */
//  155 static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys );
//  156 static void zclSampleTemperatureSensor_BasicResetCB( void );
//  157 
//  158 static void zclSampleTemperatureSensor_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg);
//  159 
//  160 // Functions to process ZCL Foundation incoming Command/Response messages
//  161 static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  162 #ifdef ZCL_READ
//  163 static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  164 #endif
//  165 #ifdef ZCL_WRITE
//  166 static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  167 #endif
//  168 static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  169 #ifdef ZCL_DISCOVER
//  170 static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  171 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  172 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  173 #endif // ZCL_DISCOVER
//  174 
//  175 static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
//  176 
//  177 /*********************************************************************
//  178  * STATUS STRINGS
//  179  */
//  180 
//  181 /*********************************************************************
//  182  * CONSTANTS
//  183  */
//  184 /*********************************************************************
//  185  * ZCL General Profile Callback table
//  186  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  187 static zclGeneral_AppCallbacks_t zclSampleTemperatureSensor_CmdCallbacks =
zclSampleTemperatureSensor_CmdCallbacks:
        DATA8
        DS 18
        REQUIRE `?<Initializer for zclSampleTemperatureSensor_C`
        REQUIRE __INIT_XDATA_I
//  188 {
//  189   zclSampleTemperatureSensor_BasicResetCB,        // Basic Cluster Reset command
//  190   NULL,                                           // Identify Trigger Effect command
//  191   NULL,             				                      // On/Off cluster command
//  192   NULL,                                           // On/Off cluster enhanced command Off with Effect
//  193   NULL,                                           // On/Off cluster enhanced command On with Recall Global Scene
//  194   NULL,                                           // On/Off cluster enhanced command On with Timed Off
//  195 #ifdef ZCL_LEVEL_CTRL
//  196   NULL,                                           // Level Control Move to Level command
//  197   NULL,                                           // Level Control Move command
//  198   NULL,                                           // Level Control Step command
//  199   NULL,                                           // Level Control Stop command
//  200 #endif
//  201 #ifdef ZCL_GROUPS
//  202   NULL,                                           // Group Response commands
//  203 #endif
//  204 #ifdef ZCL_SCENES
//  205   NULL,                                           // Scene Store Request command
//  206   NULL,                                           // Scene Recall Request command
//  207   NULL,                                           // Scene Response command
//  208 #endif
//  209 #ifdef ZCL_ALARMS
//  210   NULL,                                           // Alarm (Response) commands
//  211 #endif
//  212 #ifdef SE_UK_EXT
//  213   NULL,                                           // Get Event Log command
//  214   NULL,                                           // Publish Event Log command
//  215 #endif
//  216   NULL,                                           // RSSI Location command
//  217   NULL                                            // RSSI Location Response command
//  218 };
//  219 
//  220 /*********************************************************************
//  221  * @fn          zclSampleTemperatureSensor_Init
//  222  *
//  223  * @brief       Initialization function for the zclGeneral layer.
//  224  *
//  225  * @param       none
//  226  *
//  227  * @return      none
//  228  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  229 void zclSampleTemperatureSensor_Init( byte task_id )
zclSampleTemperatureSensor_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_Init
        CODE
//  230 {
        FUNCALL zclSampleTemperatureSensor_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, RegisterVoltageWarningCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, bdb_RepAddAttrCfgRecordDefaultToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
//  231   zclSampleTemperatureSensor_TaskID = task_id;
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      @DPTR,A
//  232 
//  233   // Register the Simple Descriptor for this application
//  234   bdb_RegisterSimpleDescriptor( &zclSampleTemperatureSensor_SimpleDesc ); 
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclSampleTemperatureSensor_SimpleDesc & 0xff
        MOV       R3,#(zclSampleTemperatureSensor_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  235   
//  236   // Register the ZCL General Cluster Library callback functions
//  237   zclGeneral_RegisterCmdCallbacks( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleTemperatureSensor_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleTemperatureSensor_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x8
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  238 
//  239   // Register the application's attribute list
//  240   zclSampleTemperatureSensor_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        LCALL     ??zclSampleTemperatureSensor_ResetAttributesToD; Banked call to: zclSampleTemperatureSensor_ResetAttributesToDefaultValues
//  241   zcl_registerAttrList( SAMPLETEMPERATURESENSOR_ENDPOINT, zclSampleTemperatureSensor_NumAttributes, zclSampleTemperatureSensor_Attrs );   
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclSampleTemperatureSensor_Attrs & 0xff
        MOV       R5,#(zclSampleTemperatureSensor_Attrs >> 8) & 0xff
        MOV       DPTR,#zclSampleTemperatureSensor_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  242 
//  243   // Register the Application to receive the unprocessed Foundation command/response messages
//  244   zcl_registerForMsg( zclSampleTemperatureSensor_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  245 
//  246   // Register low voltage NV memory protection application callback
//  247   RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
        ; Setup parameters for call to function RegisterVoltageWarningCB
        MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
        MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
        LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
//  248 
//  249   // Register for all key events - This app will handle all key events
//  250   RegisterForKeys( zclSampleTemperatureSensor_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  251 
//  252   bdb_RegisterCommissioningStatusCB( zclSampleTemperatureSensor_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV       R2,#??zclSampleTemperatureSensor_ProcessCommissioni & 0xff
        MOV       R3,#(??zclSampleTemperatureSensor_ProcessCommissioni >> 8) & 0xff
        LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  253 
//  254 #ifdef BDB_REPORTING
//  255   //Adds the default configuration values for the temperature attribute of the ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT cluster, for endpoint SAMPLETEMPERATURESENSOR_ENDPOINT
//  256   //Default maxReportingInterval value is 10 seconds
//  257   //Default minReportingInterval value is 3 seconds
//  258   //Default reportChange value is 300 (3 degrees)
//  259   bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT, ATTRID_MS_TEMPERATURE_MEASURED_VALUE, 0, 10, reportableChange);
        ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
        MOV       ?V0,#reportableChange & 0xff
        MOV       ?V1,#(reportableChange >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0xa
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x4
        MOV       R1,#0x8
        LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  260 #endif
//  261   
//  262   zdpExternalStateTaskID = zclSampleTemperatureSensor_TaskID;
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      A,@DPTR
        MOV       DPTR,#zdpExternalStateTaskID
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  263 }
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  264 
//  265 /*********************************************************************
//  266  * @fn          zclSample_event_loop
//  267  *
//  268  * @brief       Event Loop Processor for zclGeneral.
//  269  *
//  270  * @param       none
//  271  *
//  272  * @return      none
//  273  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  274 uint16 zclSampleTemperatureSensor_event_loop( uint8 task_id, uint16 events )
zclSampleTemperatureSensor_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
        CODE
//  275 {
        FUNCALL zclSampleTemperatureSensor_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_ProcessIncomingMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  276   afIncomingMSGPacket_t *MSGpkt;
//  277 
//  278   (void)task_id;  // Intentionally unreferenced parameter
//  279 
//  280   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclSampleTemperatureSensor_event_loop_0
//  281   {
//  282     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleTemperatureSensor_TaskID )) )
//  283     {
//  284       switch ( MSGpkt->hdr.event )
//  285       {
//  286         case ZCL_INCOMING_MSG:
//  287           // Incoming ZCL Foundation command/response messages
//  288           zclSampleTemperatureSensor_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  289           break;
//  290 
//  291         case KEY_CHANGE:
//  292           zclSampleTemperatureSensor_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  293           break;
//  294 
//  295         case ZDO_STATE_CHANGE:
//  296           break;
//  297 
//  298         default:
//  299           break;
//  300       }
//  301 
//  302       // Release the memory
//  303       osal_msg_deallocate( (uint8 *)MSGpkt );
//  304     }
//  305 
//  306     // return unprocessed events
//  307     return (events ^ SYS_EVENT_MSG);
//  308   }
//  309   
//  310 #if ZG_BUILD_ENDDEVICE_TYPE    
//  311   if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
//  312   {
//  313     bdb_ZedAttemptRecoverNwk();
//  314     return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
//  315   }
//  316 #endif
//  317 
//  318   if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
        MOV       A,R2
        ANL       A,#0x10
        JZ        ??zclSampleTemperatureSensor_event_loop_1
//  319   {
//  320     return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
        MOV       A,R2
        XRL       A,#0x10
        SJMP      ??zclSampleTemperatureSensor_event_loop_2
//  321   }
??zclSampleTemperatureSensor_event_loop_3:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       ??zclSampleTemperatureSensor_event_loop_4
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xa
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
??zclSampleTemperatureSensor_event_loop_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleTemperatureSensor_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleTemperatureSensor_event_loop_5
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x34
        JZ        ??zclSampleTemperatureSensor_event_loop_6
        ADD       A,#0x74
        JZ        ??zclSampleTemperatureSensor_event_loop_3
        SJMP      ??zclSampleTemperatureSensor_event_loop_4
??zclSampleTemperatureSensor_event_loop_6:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIncomingMsg
        LCALL     ??zclSampleTemperatureSensor_ProcessIncomingMsg; Banked call to: zclSampleTemperatureSensor_ProcessIncomingMsg
        SJMP      ??zclSampleTemperatureSensor_event_loop_4
??zclSampleTemperatureSensor_event_loop_5:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        MOV       R3,A
        SJMP      ??zclSampleTemperatureSensor_event_loop_7
//  322 
//  323   if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
??zclSampleTemperatureSensor_event_loop_1:
        MOV       A,R2
        ANL       A,#0x20
        JZ        ??zclSampleTemperatureSensor_event_loop_8
//  324   {
//  325     return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
        MOV       A,R2
        XRL       A,#0x20
??zclSampleTemperatureSensor_event_loop_2:
        MOV       R2,A
        SJMP      ??zclSampleTemperatureSensor_event_loop_7
//  326   }
//  327 
//  328   // Discard unknown events
//  329   return 0;
??zclSampleTemperatureSensor_event_loop_8:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclSampleTemperatureSensor_event_loop_7:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  330 }
          CFI EndBlock cfiBlock1
//  331 
//  332 /*********************************************************************
//  333  * @fn      zclSampleTemperatureSensor_HandleKeys
//  334  *
//  335  * @brief   Handles all key events for this device.
//  336  *
//  337  * @param   shift - true if in shift/alt.
//  338  * @param   keys - bit field for key events. Valid entries:
//  339  *                 HAL_KEY_SW_5
//  340  *                 HAL_KEY_SW_4
//  341  *                 HAL_KEY_SW_3
//  342  *                 HAL_KEY_SW_2
//  343  *                 HAL_KEY_SW_1
//  344  *
//  345  * @return  none
//  346  */
//  347 static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys )
//  348 {
//  349   if ( keys & HAL_KEY_SW_6 )  // Switch 6
//  350   {     
//  351     HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  352     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING  );
//  353   }
//  354 }
//  355 
//  356 /*********************************************************************
//  357  * @fn      zclSampleTemperatureSensor_LcdDisplayMainMode
//  358  *
//  359  * @brief   Called to display the main screen on the LCD.
//  360  *
//  361  * @param   none
//  362  *
//  363  * @return  none
//  364  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  365 static void zclSampleTemperatureSensor_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg)
zclSampleTemperatureSensor_ProcessCommissioningStatus:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessCommissioningStatus
        CODE
//  366 {
        FUNCALL zclSampleTemperatureSensor_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessCommissioningStatus, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  367     switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleTemperatureSensor_ProcessCommissioni_1
        DEC       A
        JNZ       ??zclSampleTemperatureSensor_ProcessCommissioni_2
//  368     {
//  369       case BDB_COMMISSIONING_FORMATION:
//  370         if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleTemperatureSensor_ProcessCommissioni_2
//  371         {
//  372           //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
//  373           bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x2
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
        SJMP      ??zclSampleTemperatureSensor_ProcessCommissioni_2
//  374         }
//  375         else
//  376         {
//  377           //Want to try other channels?
//  378           //try with bdb_setChannelAttribute
//  379         }
//  380       break;
//  381       case BDB_COMMISSIONING_NWK_STEERING:
//  382         if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
??zclSampleTemperatureSensor_ProcessCommissioni_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleTemperatureSensor_ProcessCommissioni_2
//  383         {
//  384           //YOUR JOB:
//  385           //We are on the nwk, what now?
//  386           HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  387         }
//  388         else
//  389         {
//  390           //See the possible errors for nwk steering procedure
//  391           //No suitable networks found
//  392           //Want to try other channels?
//  393           //try with bdb_setChannelAttribute
//  394         }
//  395       break;
//  396       case BDB_COMMISSIONING_FINDING_BINDING:
//  397         if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  398         {
//  399           //YOUR JOB:
//  400         }
//  401         else
//  402         {
//  403           //YOUR JOB:
//  404           //retry?, wait for user interaction?
//  405         }
//  406       break;
//  407       case BDB_COMMISSIONING_INITIALIZATION:
//  408         //Initialization notification can only be successful. Failure on initialization 
//  409         //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  410         
//  411         //YOUR JOB:
//  412         //We are on a network, what now?
//  413         
//  414       break;
//  415 #if ZG_BUILD_ENDDEVICE_TYPE    
//  416     case BDB_COMMISSIONING_PARENT_LOST:
//  417       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
//  418       {
//  419         //We did recover from losing parent
//  420       }
//  421       else
//  422       {
//  423         //Parent not found, attempt to rejoin again after a fixed delay
//  424         osal_start_timerEx(zclSampleTemperatureSensor_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
//  425       }
//  426     break;
//  427 #endif 
//  428     }
//  429 
//  430 }
??zclSampleTemperatureSensor_ProcessCommissioni_2:
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock3
//  431 
//  432 /*********************************************************************
//  433  * @fn      zclSampleTemperatureSensor_BasicResetCB
//  434  *
//  435  * @brief   Callback from the ZCL General Cluster Library
//  436  *          to set all the Basic Cluster attributes to default values.
//  437  *
//  438  * @param   none
//  439  *
//  440  * @return  none
//  441  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  442 static void zclSampleTemperatureSensor_BasicResetCB( void )
zclSampleTemperatureSensor_BasicResetCB:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_BasicResetCB
        CODE
//  443 {
        FUNCALL zclSampleTemperatureSensor_BasicResetCB, zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  444   zclSampleTemperatureSensor_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        LCALL     ??zclSampleTemperatureSensor_ResetAttributesToD; Banked call to: zclSampleTemperatureSensor_ResetAttributesToDefaultValues
//  445 }
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock4
//  446 
//  447 /*********************************************************************
//  448  * @fn      zclSampleApp_BatteryWarningCB
//  449  *
//  450  * @brief   Called to handle battery-low situation.
//  451  *
//  452  * @param   voltLevel - level of severity
//  453  *
//  454  * @return  none
//  455  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  456 void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
zclSampleApp_BatteryWarningCB:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zclSampleApp_BatteryWarningCB
        CODE
//  457 {
        ; Saved register size: 0
        ; Auto size: 0
//  458   if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
//  459   {
//  460     // Send warning message to the gateway and blink LED
//  461   }
//  462   else if ( voltLevel == VOLT_LEVEL_BAD )
//  463   {
//  464     // Shut down the system
//  465   }
//  466 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock5
//  467 
//  468 /******************************************************************************
//  469  *
//  470  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  471  *
//  472  *****************************************************************************/
//  473 
//  474 /*********************************************************************
//  475  * @fn      zclSampleTemperatureSensor_ProcessIncomingMsg
//  476  *
//  477  * @brief   Process ZCL Foundation incoming message
//  478  *
//  479  * @param   pInMsg - pointer to the received message
//  480  *
//  481  * @return  none
//  482  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  483 static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
zclSampleTemperatureSensor_ProcessIncomingMsg:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessIncomingMsg
        CODE
//  484 {
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  485   switch ( pInMsg->zclHdr.commandID )
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_1
        ADD       A,#-0x3
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_2
        ADD       A,#-0x9
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_3
        ADD       A,#-0x5
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_4
        ADD       A,#-0x2
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_4
        ADD       A,#-0x2
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_5
        SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
//  486   {
//  487 #ifdef ZCL_READ
//  488     case ZCL_CMD_READ_RSP:
//  489       zclSampleTemperatureSensor_ProcessInReadRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_1:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
        INC       R0
        SJMP      ??CrossCallReturnLabel_0
//  490       break;
//  491 #endif
//  492 #ifdef ZCL_WRITE
//  493     case ZCL_CMD_WRITE_RSP:
//  494       zclSampleTemperatureSensor_ProcessInWriteRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_2:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
        INC       R0
        SJMP      ??CrossCallReturnLabel_1
//  495       break;
//  496 #endif
//  497 #ifdef ZCL_REPORT
//  498     // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
//  499     case ZCL_CMD_CONFIG_REPORT:
//  500       //zclSampleTemperatureSensor_ProcessInConfigReportCmd( pInMsg );
//  501       break;
//  502       case ZCL_CMD_READ_REPORT_CFG:
//  503       //zclSampleTemperatureSensor_ProcessInReadReportCfgCmd( pInMsg );
//  504       break;
//  505     case ZCL_CMD_CONFIG_REPORT_RSP:
//  506       //zclSampleTemperatureSensor_ProcessInConfigReportRspCmd( pInMsg );
//  507       break;
//  508     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  509       //zclSampleTemperatureSensor_ProcessInReadReportCfgRspCmd( pInMsg );
//  510       break;
//  511 
//  512     case ZCL_CMD_REPORT:
//  513       //zclSampleTemperatureSensor_ProcessInReportCmd( pInMsg );
//  514       break;
//  515 #endif
//  516     case ZCL_CMD_DEFAULT_RSP:
//  517       zclSampleTemperatureSensor_ProcessInDefaultRspCmd( pInMsg );
//  518       break;
//  519 #ifdef ZCL_DISCOVER
//  520     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  521       zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_4:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
//  522       break;
//  523 
//  524     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  525       zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
        LCALL     ??zclSampleTemperatureSensor_ProcessInDiscCmdsR; Banked call to: zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
//  526       break;
        SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
//  527 
//  528     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  529       zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_3:
        LCALL     ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JNC       ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
        INC       R2
        SJMP      ??CrossCallReturnLabel_3
//  530       break;
//  531 
//  532     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  533       zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_5:
        LCALL     ?Subroutine1 & 0xFFFF
//  534       break;
//  535 #endif
//  536     default:
//  537       break;
//  538   }
??CrossCallReturnLabel_4:
        SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_7
??zclSampleTemperatureSensor_ProcessIncomingMsg_8:
        INC       R2
??zclSampleTemperatureSensor_ProcessIncomingMsg_7:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleTemperatureSensor_ProcessIncomingMsg_8
//  539 
//  540   if ( pInMsg->attrCmd )
??zclSampleTemperatureSensor_ProcessIncomingMsg_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_9
//  541   {
//  542     osal_mem_free( pInMsg->attrCmd );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  543   }
//  544 }
??zclSampleTemperatureSensor_ProcessIncomingMsg_9:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclSampleTemperatureSensor_ProcessIncomingMsg
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclSampleTemperatureSensor_ProcessIncomingMsg
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV       DPL,R0
        MOV       DPH,R1
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine3_0:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
          CFI Conditional ??CrossCallReturnLabel_2
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zclSampleTemperatureSensor_ProcessIncomingMsg
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zclSampleTemperatureSensor_ProcessIncomingMsg
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#0x0
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
//  545 
//  546 #ifdef ZCL_READ
//  547 /*********************************************************************
//  548  * @fn      zclSampleTemperatureSensor_ProcessInReadRspCmd
//  549  *
//  550  * @brief   Process the "Profile" Read Response Command
//  551  *
//  552  * @param   pInMsg - incoming message to process
//  553  *
//  554  * @return  none
//  555  */
//  556 static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
//  557 {
//  558   zclReadRspCmd_t *readRspCmd;
//  559   uint8 i;
//  560 
//  561   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
//  562   for ( i = 0; i < readRspCmd->numAttr; i++ )
//  563   {
//  564     // Notify the originator of the results of the original read attributes
//  565     // attempt and, for each successfull request, the value of the requested
//  566     // attribute
//  567   }
//  568 
//  569   return ( TRUE );
//  570 }
//  571 #endif // ZCL_READ
//  572 
//  573 #ifdef ZCL_WRITE
//  574 /*********************************************************************
//  575  * @fn      zclSampleTemperatureSensor_ProcessInWriteRspCmd
//  576  *
//  577  * @brief   Process the "Profile" Write Response Command
//  578  *
//  579  * @param   pInMsg - incoming message to process
//  580  *
//  581  * @return  none
//  582  */
//  583 static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
//  584 {
//  585   zclWriteRspCmd_t *writeRspCmd;
//  586   uint8 i;
//  587 
//  588   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
//  589   for ( i = 0; i < writeRspCmd->numAttr; i++ )
//  590   {
//  591     // Notify the device of the results of the its original write attributes
//  592     // command.
//  593   }
//  594 
//  595   return ( TRUE );
//  596 }
//  597 #endif // ZCL_WRITE
//  598 
//  599 /*********************************************************************
//  600  * @fn      zclSampleTemperatureSensor_ProcessInDefaultRspCmd
//  601  *
//  602  * @brief   Process the "Profile" Default Response Command
//  603  *
//  604  * @param   pInMsg - incoming message to process
//  605  *
//  606  * @return  none
//  607  */
//  608 static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
//  609 {
//  610   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
//  611 
//  612   // Device is notified of the Default Response command.
//  613   (void)pInMsg;
//  614 
//  615   return ( TRUE );
//  616 }
//  617 
//  618 #ifdef ZCL_DISCOVER
//  619 /*********************************************************************
//  620  * @fn      zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
//  621  *
//  622  * @brief   Process the Discover Commands Response Command
//  623  *
//  624  * @param   pInMsg - incoming message to process
//  625  *
//  626  * @return  none
//  627  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  628 static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
        CODE
//  629 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  630   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
//  631   uint8 i;
//  632 
//  633   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        LCALL     ??Subroutine3_0 & 0xFFFF
//  634   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
??CrossCallReturnLabel_2:
        SJMP      ??zclSampleTemperatureSensor_ProcessInDiscCmdsR_1
??zclSampleTemperatureSensor_ProcessInDiscCmdsR_2:
        INC       R2
??zclSampleTemperatureSensor_ProcessInDiscCmdsR_1:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleTemperatureSensor_ProcessInDiscCmdsR_2
//  635   {
//  636     // Device is notified of the result of its attribute discovery command.
//  637   }
//  638 
//  639   return ( TRUE );
        MOV       R1,#0x1
        LJMP      ?Subroutine0 & 0xFFFF
//  640 }
          CFI EndBlock cfiBlock17

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleTemperatureSensor_N`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for reportableChange>`:
        DATA8
        DB 44
        DB 1
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleTemperatureSensor_C`:
        DATA16
        DW `??zclSampleTemperatureSensor_BasicResetCB::?rel`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessCommissioni:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_BasicResetCB::?rel`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleApp_BatteryWarningCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleApp_BatteryWarningCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessIncomingMsg:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessIncomingMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessInDiscCmdsR:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd

        END
//  641 
//  642 /*********************************************************************
//  643  * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd
//  644  *
//  645  * @brief   Process the "Profile" Discover Attributes Response Command
//  646  *
//  647  * @param   pInMsg - incoming message to process
//  648  *
//  649  * @return  none
//  650  */
//  651 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
//  652 {
//  653   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
//  654   uint8 i;
//  655 
//  656   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
//  657   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  658   {
//  659     // Device is notified of the result of its attribute discovery command.
//  660   }
//  661 
//  662   return ( TRUE );
//  663 }
//  664 
//  665 /*********************************************************************
//  666  * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
//  667  *
//  668  * @brief   Process the "Profile" Discover Attributes Extended Response Command
//  669  *
//  670  * @param   pInMsg - incoming message to process
//  671  *
//  672  * @return  none
//  673  */
//  674 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
//  675 {
//  676   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
//  677   uint8 i;
//  678 
//  679   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
//  680   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  681   {
//  682     // Device is notified of the result of its attribute discovery command.
//  683   }
//  684 
//  685   return ( TRUE );
//  686 }
//  687 #endif // ZCL_DISCOVER
//  688 
//  689 // GUI_LOCAL_TEMP
//  690 //static void zclSampleTemperatureSensor_UiActionChangeTemp(uint16 keys)
//  691 //{
//  692 //  if ( keys & HAL_KEY_SW_1 )
//  693 //  {
//  694 //    // increase the temperature
//  695 //    if ( zclSampleTemperatureSensor_MeasuredValue < zclSampleTemperatureSensor_MaxMeasuredValue )
//  696 //    {
//  697 //      zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MeasuredValue + 100;  // considering using whole number value
//  698 //#ifdef BDB_REPORTING      
//  699 //      uint8 status = bdb_RepChangedAttrValue(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT, ATTRID_MS_TEMPERATURE_MEASURED_VALUE);
//  700 //#endif
//  701 //    }
//  702 //    else if ( zclSampleTemperatureSensor_MeasuredValue >= zclSampleTemperatureSensor_MaxMeasuredValue )
//  703 //    {
//  704 //      zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MaxMeasuredValue;
//  705 //    }
//  706 //  }
//  707 //  
//  708 //  if ( keys & HAL_KEY_SW_3 )
//  709 //  {
//  710 //    // decrease the temperature
//  711 //    if ( zclSampleTemperatureSensor_MeasuredValue > zclSampleTemperatureSensor_MinMeasuredValue )
//  712 //    {
//  713 //      zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MeasuredValue - 100;  // considering using whole number value
//  714 //#ifdef BDB_REPORTING
//  715 //      uint8 status = bdb_RepChangedAttrValue(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT, ATTRID_MS_TEMPERATURE_MEASURED_VALUE);
//  716 //#endif
//  717 //    }
//  718 //    else if ( zclSampleTemperatureSensor_MeasuredValue <= zclSampleTemperatureSensor_MinMeasuredValue )
//  719 //    {
//  720 //      zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MinMeasuredValue;
//  721 //    }
//  722 //  }
//  723 //  
//  724 //  UI_UpdateLcd();
//  725 //}
//  726 
//  727 /****************************************************************************
//  728 ****************************************************************************/
//  729 
//  730 
// 
// 524 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//  23 bytes in segment XDATA_I
//  23 bytes in segment XDATA_ID
//   1 byte  in segment XDATA_Z
// 
//  65 bytes of CODE     memory
// 524 bytes of HUGECODE memory
//  24 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
