///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              21/Jul/2020  00:36:33
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_Reporting.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EW11C6.tmp ("D:\AA\Z-Stack
//        3.0.2\Components\stack\bdb\bdb_Reporting.c" -D BDB_REPORTING -D
//        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
//        xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D
//        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -D ZCL_ON_OFF -D ZCL_REPORT
//        -D ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
//        --no_cross_call)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\bdb_Reporting.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME bdb_Reporting

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?V13
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_GE
        EXTERN ?FLT_SUB
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_SUB
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SL_GT
        EXTERN ?S_SHL
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GT
        EXTERN ?US_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??bdb_FindEpDesc::?relay`,0203H
        FUNCTION `??bdb_InitReportAttrLiveValues::?relay`,0203H
        PUBLIC `??bdb_ProcessInConfigReportCmd::?relay`
        FUNCTION `??bdb_ProcessInConfigReportCmd::?relay`,0203H
        PUBLIC `??bdb_ProcessInReadReportCfgCmd::?relay`
        FUNCTION `??bdb_ProcessInReadReportCfgCmd::?relay`,0203H
        PUBLIC `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`
        FUNCTION `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`,0203H
        FUNCTION `??bdb_RepCalculateEventElapsedTime::?relay`,0203H
        PUBLIC `??bdb_RepChangedAttrValue::?relay`
        FUNCTION `??bdb_RepChangedAttrValue::?relay`,0203H
        FUNCTION `??bdb_RepConstructAttrCfgArray::?relay`,0203H
        PUBLIC `??bdb_RepConstructReportingData::?relay`
        FUNCTION `??bdb_RepConstructReportingData::?relay`,0203H
        FUNCTION `??bdb_RepFindAttrEntry::?relay`,0203H
        PUBLIC `??bdb_RepInit::?relay`
        FUNCTION `??bdb_RepInit::?relay`,0203H
        FUNCTION `??bdb_RepInitAttrCfgRecords::?relay`,0203H
        FUNCTION `??bdb_RepLoadCfgRecords::?relay`,0203H
        PUBLIC `??bdb_RepMarkHasBindingInEndpointClusterArray::`
        FUNCTION `??bdb_RepMarkHasBindingInEndpointClusterArray::`,0203H
        PUBLIC `??bdb_RepProcessEvent::?relay`
        FUNCTION `??bdb_RepProcessEvent::?relay`,0203H
        FUNCTION `??bdb_RepReport::?relay`,0203H
        FUNCTION `??bdb_RepRestartNextEventTimer::?relay`,0203H
        FUNCTION `??bdb_RepSetupReporting::?relay`,0203H
        PUBLIC `??bdb_RepStartOrContinueReporting::?relay`
        FUNCTION `??bdb_RepStartOrContinueReporting::?relay`,0203H
        FUNCTION `??bdb_RepStartReporting::?relay`,0203H
        FUNCTION `??bdb_RepStopEventTimer::?relay`,0203H
        PUBLIC `??bdb_RepUpdateMarkBindings::?relay`
        FUNCTION `??bdb_RepUpdateMarkBindings::?relay`,0203H
        FUNCTION `??bdb_clusterEndpointArrayAdd::?relay`,0203H
        FUNCTION `??bdb_clusterEndpointArrayFreeAll::?relay`,0203H
        FUNCTION `??bdb_clusterEndpointArrayGetMin::?relay`,0203H
        FUNCTION `??bdb_clusterEndpointArrayIncrementAll::?relay`,0203H
        FUNCTION `??bdb_clusterEndpointArrayInit::?relay`,0203H
        FUNCTION `??bdb_clusterEndpointArrayMoveTo::?relay`,0203H
        FUNCTION `??bdb_clusterEndpointArrayRemoveAt::?relay`,0203H
        FUNCTION `??bdb_clusterEndpointArraySearch::?relay`,0203H
        FUNCTION `??bdb_clusterEndpointArrayUpdateAt::?relay`,0203H
        FUNCTION `??bdb_isAttrValueChangedSurpassDelta::?relay`,0203H
        FUNCTION `??bdb_linkedListAttrAdd::?relay`,0203H
        FUNCTION `??bdb_linkedListAttrClearList::?relay`,0203H
        FUNCTION `??bdb_linkedListAttrFreeAll::?relay`,0203H
        FUNCTION `??bdb_linkedListAttrGetAtIndex::?relay`,0203H
        FUNCTION `??bdb_linkedListAttrInit::?relay`,0203H
        FUNCTION `??bdb_linkedListAttrRemove::?relay`,0203H
        FUNCTION `??bdb_linkedListAttrSearch::?relay`,0203H
        FUNCTION ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo,0203H
        FUNCTION `??bdb_repAttrCfgRecordsArrayAdd::?relay`,0203H
        FUNCTION `??bdb_repAttrCfgRecordsArrayConsolidateValues::`,0203H
        FUNCTION `??bdb_repAttrCfgRecordsArrayCreate::?relay`,0203H
        FUNCTION `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`,0203H
        FUNCTION `??bdb_repAttrCfgRecordsArrayInit::?relay`,0203H
        FUNCTION `??bdb_repAttrCfgRecordsArraySearch::?relay`,0203H
        FUNCTION `??bdb_repAttrDefaultCfgRecordInitValues::?relay`,0203H
        FUNCTION `??bdb_repAttrDefaultCfgRecordsLinkedListAdd::?r`,0203H
        FUNCTION ??bdb_repAttrDefaultCfgRecordsLinkedListFreeAll,0203H
        FUNCTION `??bdb_repAttrDefaultCfgRecordsLinkedListInit::?`,0203H
        FUNCTION `??bdb_repAttrDefaultCfgRecordsLinkedListRemove:`,0203H
        FUNCTION `??bdb_repAttrDefaultCfgRecordsLinkedListSearch:`,0203H
        PUBWEAK __Constant_3e8
        PUBLIC attrDefaultCfgRecordLinkedList
        FUNCTION bdb_FindEpDesc,0203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_InitReportAttrLiveValues,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_ProcessInConfigReportCmd
        FUNCTION bdb_ProcessInConfigReportCmd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC bdb_ProcessInReadReportCfgCmd
        FUNCTION bdb_ProcessInReadReportCfgCmd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC bdb_RepAddAttrCfgRecordDefaultToList
        FUNCTION bdb_RepAddAttrCfgRecordDefaultToList,0a1203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        FUNCTION bdb_RepCalculateEventElapsedTime,080203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_RepChangedAttrValue
        FUNCTION bdb_RepChangedAttrValue,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        FUNCTION bdb_RepConstructAttrCfgArray,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 52, STACK
        PUBLIC bdb_RepConstructReportingData
        FUNCTION bdb_RepConstructReportingData,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_RepFindAttrEntry,0a1203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC bdb_RepInit
        FUNCTION bdb_RepInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_RepInitAttrCfgRecords,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION bdb_RepLoadCfgRecords,0a1203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_RepMarkHasBindingInEndpointClusterArray
        FUNCTION bdb_RepMarkHasBindingInEndpointClusterArray,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_RepProcessEvent
        FUNCTION bdb_RepProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_RepReport,0a1203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 47, STACK
        FUNCTION bdb_RepRestartNextEventTimer,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION bdb_RepSetupReporting,0a1203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_RepStartOrContinueReporting
        FUNCTION bdb_RepStartOrContinueReporting,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION bdb_RepStartReporting,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_RepStopEventTimer,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RepUpdateMarkBindings
        FUNCTION bdb_RepUpdateMarkBindings,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION bdb_clusterEndpointArrayAdd,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_clusterEndpointArrayFreeAll,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_clusterEndpointArrayGetMin,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_clusterEndpointArrayIncrementAll,080203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION bdb_clusterEndpointArrayInit,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_clusterEndpointArrayMoveTo,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION bdb_clusterEndpointArrayRemoveAt,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_clusterEndpointArraySearch,0203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_clusterEndpointArrayUpdateAt,0203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_isAttrValueChangedSurpassDelta,080203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION bdb_linkedListAttrAdd,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION bdb_linkedListAttrClearList,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_linkedListAttrFreeAll,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_linkedListAttrGetAtIndex,0203H
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_linkedListAttrInit,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_linkedListAttrRemove,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION bdb_linkedListAttrSearch,0203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 34, STACK
        FUNCTION bdb_repAttrCfgRecordsArrayAdd,0a1203H
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION bdb_repAttrCfgRecordsArrayConsolidateValues,080203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION bdb_repAttrCfgRecordsArrayCreate,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_repAttrCfgRecordsArrayFreeAll,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_repAttrCfgRecordsArrayInit,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_repAttrCfgRecordsArraySearch,080203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_repAttrDefaultCfgRecordInitValues,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_repAttrDefaultCfgRecordsLinkedListAdd,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION bdb_repAttrDefaultCfgRecordsLinkedListFreeAll,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_repAttrDefaultCfgRecordsLinkedListInit,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_repAttrDefaultCfgRecordsLinkedListRemove,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION bdb_repAttrDefaultCfgRecordsLinkedListSearch,0203H
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_reportingAcceptDefaultConfs
        PUBLIC bdb_reportingAttrCfgRecordsArray
        PUBLIC bdb_reportingAttrCfgRecordsArrayCount
        PUBLIC bdb_reportingAttrCfgRecordsArrayMaxSize
        PUBLIC bdb_reportingClusterEndpointArray
        PUBLIC bdb_reportingClusterEndpointArrayCount
        PUBLIC bdb_reportingNextClusterEndpointIndex
        PUBLIC bdb_reportingNextEventTimeout
        PUBLIC gAttrDataValue
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bindFind            SYMBOL "bindFind"
`??bindFind::?relay` SYMBOL "?relay", bindFind
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclAnalogDataType   SYMBOL "zclAnalogDataType"
`??zclAnalogDataType::?relay` SYMBOL "?relay", zclAnalogDataType
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zclFindAttrRecsList SYMBOL "zclFindAttrRecsList"
`??zclFindAttrRecsList::?relay` SYMBOL "?relay", zclFindAttrRecsList
zclGetDataTypeLength SYMBOL "zclGetDataTypeLength"
`??zclGetDataTypeLength::?relay` SYMBOL "?relay", zclGetDataTypeLength
zcl_ReadAttrData    SYMBOL "zcl_ReadAttrData"
`??zcl_ReadAttrData::?relay` SYMBOL "?relay", zcl_ReadAttrData
zcl_SendConfigReportRspCmd SYMBOL "zcl_SendConfigReportRspCmd"
`??zcl_SendConfigReportRspCmd::?relay` SYMBOL "?relay", zcl_SendConfigReportRspCmd
zcl_SendReadReportCfgRspCmd SYMBOL "zcl_SendReadReportCfgRspCmd"
`??zcl_SendReadReportCfgRspCmd::?relay` SYMBOL "?relay", zcl_SendReadReportCfgRspCmd
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
`??zcl_SendReportCmd::?relay` SYMBOL "?relay", zcl_SendReportCmd
bdb_ProcessInConfigReportCmd SYMBOL "bdb_ProcessInConfigReportCmd"
`??bdb_ProcessInConfigReportCmd::?relay` SYMBOL "?relay", bdb_ProcessInConfigReportCmd
bdb_ProcessInReadReportCfgCmd SYMBOL "bdb_ProcessInReadReportCfgCmd"
`??bdb_ProcessInReadReportCfgCmd::?relay` SYMBOL "?relay", bdb_ProcessInReadReportCfgCmd
bdb_RepAddAttrCfgRecordDefaultToList SYMBOL "bdb_RepAddAttrCfgRecordDefaultToList"
`??bdb_RepAddAttrCfgRecordDefaultToList::?relay` SYMBOL "?relay", bdb_RepAddAttrCfgRecordDefaultToList
bdb_RepChangedAttrValue SYMBOL "bdb_RepChangedAttrValue"
`??bdb_RepChangedAttrValue::?relay` SYMBOL "?relay", bdb_RepChangedAttrValue
bdb_RepConstructReportingData SYMBOL "bdb_RepConstructReportingData"
`??bdb_RepConstructReportingData::?relay` SYMBOL "?relay", bdb_RepConstructReportingData
bdb_RepInit         SYMBOL "bdb_RepInit"
`??bdb_RepInit::?relay` SYMBOL "?relay", bdb_RepInit
bdb_RepMarkHasBindingInEndpointClusterArray SYMBOL "bdb_RepMarkHasBindingInEndpointClusterArray"
`??bdb_RepMarkHasBindingInEndpointClusterArray::` SYMBOL "?relay", bdb_RepMarkHasBindingInEndpointClusterArray
bdb_RepProcessEvent SYMBOL "bdb_RepProcessEvent"
`??bdb_RepProcessEvent::?relay` SYMBOL "?relay", bdb_RepProcessEvent
bdb_RepStartOrContinueReporting SYMBOL "bdb_RepStartOrContinueReporting"
`??bdb_RepStartOrContinueReporting::?relay` SYMBOL "?relay", bdb_RepStartOrContinueReporting
bdb_RepUpdateMarkBindings SYMBOL "bdb_RepUpdateMarkBindings"
`??bdb_RepUpdateMarkBindings::?relay` SYMBOL "?relay", bdb_RepUpdateMarkBindings

        EXTERN `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,00H
        EXTERN `??bindFind::?relay`
        FUNCTION `??bindFind::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclAnalogDataType::?relay`
        FUNCTION `??zclAnalogDataType::?relay`,00H
        EXTERN `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,00H
        EXTERN `??zclFindAttrRecsList::?relay`
        FUNCTION `??zclFindAttrRecsList::?relay`,00H
        EXTERN `??zclGetDataTypeLength::?relay`
        FUNCTION `??zclGetDataTypeLength::?relay`,00H
        EXTERN `??zcl_ReadAttrData::?relay`
        FUNCTION `??zcl_ReadAttrData::?relay`,00H
        EXTERN `??zcl_SendConfigReportRspCmd::?relay`
        FUNCTION `??zcl_SendConfigReportRspCmd::?relay`,00H
        EXTERN `??zcl_SendReadReportCfgRspCmd::?relay`
        FUNCTION `??zcl_SendReadReportCfgRspCmd::?relay`,00H
        EXTERN `??zcl_SendReportCmd::?relay`
        FUNCTION `??zcl_SendReportCmd::?relay`,00H
        EXTERN _NIB
        EXTERN bdb_HeadEpDescriptorList
        EXTERN bdb_TaskID
        EXTERN bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bindFind
        FUNCTION bindFind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN epList
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclAnalogDataType
        FUNCTION zclAnalogDataType,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclFindAttrRec
        FUNCTION zclFindAttrRec,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclFindAttrRecsList
        FUNCTION zclFindAttrRecsList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGetDataTypeLength
        FUNCTION zclGetDataTypeLength,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_ReadAttrData
        FUNCTION zcl_ReadAttrData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendConfigReportRspCmd
        FUNCTION zcl_SendConfigReportRspCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendReadReportCfgRspCmd
        FUNCTION zcl_SendReadReportCfgRspCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_Reporting.c
//    1 /**************************************************************************************************
//    2   Filename:       bdb_Reporting.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the Reporting Attributes functions.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef BDB_REPORTING
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44  
//   45 #include "bdb.h"
//   46 #include "zcl.h"
//   47 #include "ZDObject.h"
//   48 #include "bdb_Reporting.h"
//   49 #include "OSAL.h"
//   50 #include "zcl_ms.h"
//   51 #include "bdb_interface.h"
//   52    
//   53 /*********************************************************************
//   54  * MACROS
//   55  */
//   56 #define EQUAL_LLISTITEMDATA( a, b ) ( a.attrID == b.attrID )
//   57 #define EQUAL_LLISTCFGATTRITEMDATA( a, b ) ( a.endpoint == b.endpoint &&  a.attrID == b.attrID && a.cluster == b.cluster )
//   58 #define FLAGS_TURNOFFALLFLAGS( flags ) ( flags = 0x00 )
//   59 #define FLAGS_TURNOFFFLAG( flags, flagMask ) ( flags &= ~flagMask )
//   60 #define FLAGS_TURNONFLAG( flags, flagMask ) ( flags |= flagMask )
//   61 #define FLAGS_CHECKFLAG( flags, flagMask ) ( (flags & flagMask) > 0? BDBREPORTING_TRUE: BDBREPORTING_FALSE )
//   62 
//   63  /*********************************************************************
//   64  * CONSTANTS
//   65  */
//   66 #define BDBREPORTING_HASBINDING_FLAG_MASK      0x01
//   67 #define BDBREPORTING_NONEXTINCREMENT_FLAG_MASK 0x02
//   68 
//   69    
//   70 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8   
//   71 #define BDBREPORTING_DEFAULTCHANGEVALUE {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
//   72 #endif
//   73 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4   
//   74 #define BDBREPORTING_DEFAULTCHANGEVALUE {0x00, 0x00, 0x00, 0x00}
//   75 #endif
//   76 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2   
//   77 #define BDBREPORTING_DEFAULTCHANGEVALUE {0x00, 0x00}
//   78 #endif
//   79 
//   80 #define BDBREPORTING_MAXINTERVAL_DEFAULT 0x0000
//   81 #define BDBREPORTING_MININTERVAL_DEFAULT 0xFFFF
//   82    
//   83 /*********************************************************************
//   84  * TYPEDEFS
//   85  */
//   86 //Data to hold informaation about an attribute in a linked list thats inside
//   87 //the cluster-endpoint entry 
//   88 typedef struct
//   89 {
//   90   uint16 attrID;
//   91   uint8  lastValueReported[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
//   92   uint8  reportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
//   93 } bdbReportAttrLive_t;
//   94    
//   95    
//   96 //This structrue holds the data of a attribute reporting configiration that
//   97 //is used at runtime and it's saved in the NV
//   98 typedef struct
//   99 {
//  100   uint8 endpoint;
//  101   uint16 cluster;
//  102   uint16 attrID;
//  103   uint16 minReportInt;
//  104   uint16 maxReportInt;
//  105   uint16 defaultMinReportInt;
//  106   uint16 defaultMaxReportInt;
//  107   uint8  reportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
//  108   uint8  defaultReportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
//  109 } bdbReportAttrCfgData_t;   
//  110 
//  111 //This structure represents a node in the linked list of the attributes 
//  112 //data in the cluster-endpoint entry
//  113 typedef struct bdbLinkedListAttrItem
//  114 {
//  115   bdbReportAttrLive_t* data;
//  116   struct bdbLinkedListAttrItem *next;
//  117 } bdbLinkedListAttrItem_t;
//  118 
//  119 
//  120 //This structure represents a linked list of the attributes 
//  121 //data in the cluster-endpoint entry
//  122 typedef struct bdbAttrLinkedListAttr
//  123 {
//  124   uint8 numItems;
//  125   bdbLinkedListAttrItem_t *head;
//  126 } bdbAttrLinkedListAttr_t;
//  127    
//  128 // This structure is an entry of a cluster-endpoint table used by the reporting
//  129 //code (the consolidated values) to actually report periodically
//  130 typedef struct
//  131 {
//  132   uint8 flags;
//  133   uint8  endpoint;             // status field
//  134   uint16  cluster;          // to send or receive reports of the attribute
//  135   uint16  consolidatedMinReportInt;             // attribute ID
//  136   uint16  consolidatedMaxReportInt;           // attribute data type
//  137   uint16  timeSinceLastReport;
//  138   bdbAttrLinkedListAttr_t attrLinkedList;
//  139 } bdbReportAttrClusterEndpoint_t;   
//  140 
//  141 
//  142 //This structure serves to hold the flags data of a bdbReportAttrClusterEndpoint_t 
//  143 //with key =(endpoint,cluster) in instance of the bdb reporting where the table is regenerated
//  144 typedef struct
//  145 {
//  146   uint8 flags;
//  147   uint8  endpoint;            
//  148   uint16  cluster;
//  149 } bdbReportFlagsHolder_t;
//  150 
//  151 //This structure holds the data of a default attribute reporting configuration
//  152 //entered by the application
//  153 typedef struct
//  154 {
//  155   uint8 endpoint; 
//  156   uint16 cluster; 
//  157   uint16 attrID;
//  158   uint16 minReportInt;
//  159   uint16 maxReportInt;
//  160   uint8  reportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
//  161 } bdbReportAttrDefaultCfgData_t;
//  162    
//  163 //This structure represents a node in the linked list of the default attributes 
//  164 //configurations entered by the application
//  165 typedef struct bdbRepAttrDefaultCfgRecordLinkedListItem
//  166 {
//  167   bdbReportAttrDefaultCfgData_t* data;
//  168   struct bdbRepAttrDefaultCfgRecordLinkedListItem *next;
//  169 } bdbRepAttrDefaultCfgRecordLinkedListItem_t;
//  170 
//  171 //This structure represents the linked list of the default attributes 
//  172 //configurations entered by the application
//  173 typedef struct bdbRepAttrDefaultCfgRecordLinkedList
//  174 {
//  175   uint8 numItems;
//  176   bdbRepAttrDefaultCfgRecordLinkedListItem_t *head;
//  177 } bdbRepAttrDefaultCfgRecordLinkedList_t;
//  178 
//  179 
//  180 
//  181 /*********************************************************************
//  182  * GLOBAL VARIABLES
//  183  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  184 uint8 gAttrDataValue[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
gAttrDataValue:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  185 
//  186 /*********************************************************************
//  187  * EXTERNAL VARIABLES
//  188  */
//  189 
//  190 /*********************************************************************
//  191  * EXTERNAL FUNCTIONS
//  192  */
//  193 
//  194 /*********************************************************************
//  195  * LOCAL VARIABLES
//  196  */
//  197 
//  198 //Table of cluster-endpoint entries used to report periodically

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  199 bdbReportAttrClusterEndpoint_t bdb_reportingClusterEndpointArray[BDB_MAX_CLUSTERENDPOINTS_REPORTING];
bdb_reportingClusterEndpointArray:
        DS 65
        REQUIRE __INIT_XDATA_Z
//  200 //Current size of the cluster-endpoint table  

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  201 uint8 bdb_reportingClusterEndpointArrayCount;
bdb_reportingClusterEndpointArrayCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  202 //This variable has the timeout value of the currrent timer use to report peridically

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  203 uint16 bdb_reportingNextEventTimeout;
bdb_reportingNextEventTimeout:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  204 //This variable hasthe index of the cluster-endpoint entry that trigger the current
//  205 //timer use to report periodically 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  206 uint8 bdb_reportingNextClusterEndpointIndex;
bdb_reportingNextClusterEndpointIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  207 //This is the table that holds in the memory the attribute reporting configurations (dynamic table)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  208 bdbReportAttrCfgData_t* bdb_reportingAttrCfgRecordsArray;
bdb_reportingAttrCfgRecordsArray:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  209 //Current size of the attribute reporting configurations table

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  210 uint8 bdb_reportingAttrCfgRecordsArrayCount;
bdb_reportingAttrCfgRecordsArrayCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  211 //Max size of the attribute reporting configurations table

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  212 uint8 bdb_reportingAttrCfgRecordsArrayMaxSize;
bdb_reportingAttrCfgRecordsArrayMaxSize:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  213 //Linked list for holding the default attribute reporting configurations
//  214 //enteres by the application

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  215 bdbRepAttrDefaultCfgRecordLinkedList_t attrDefaultCfgRecordLinkedList;
attrDefaultCfgRecordLinkedList:
        DS 3
        REQUIRE __INIT_XDATA_Z
//  216 //Flag used to signal when not to accept more default attribute reporting configurations

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  217 uint8 bdb_reportingAcceptDefaultConfs;
bdb_reportingAcceptDefaultConfs:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  218 
//  219 /*********************************************************************
//  220  * PUBLIC FUNCTIONS PROTOYPES
//  221  */
//  222 
//  223 /*********************************************************************
//  224  * LOCAL FUNCTIONS PROTOYPES
//  225  */
//  226 
//  227 //Begin: Single linked list for attributes in a cluster-endpoint live entry methods 
//  228 static void bdb_InitReportAttrLiveValues( bdbReportAttrLive_t* item );
//  229 static void bdb_linkedListAttrInit( bdbAttrLinkedListAttr_t *list );
//  230 static uint8 bdb_linkedListAttrAdd( bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t* data );
//  231 static bdbLinkedListAttrItem_t* bdb_linkedListAttrSearch( bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t* searchdata );
//  232 static bdbReportAttrLive_t* bdb_linkedListAttrRemove( bdbAttrLinkedListAttr_t *list );
//  233 static uint8 bdb_linkedListAttrFreeAll( bdbAttrLinkedListAttr_t *list );
//  234 static void bdb_linkedListAttrClearList( bdbAttrLinkedListAttr_t *list );
//  235 static bdbLinkedListAttrItem_t* bdb_linkedListAttrGetAtIndex( bdbAttrLinkedListAttr_t *list, uint8 index );
//  236 //End: Single Linked List methods
//  237 
//  238 //Begin: Cluster-endpoint array live methods
//  239 static void bdb_clusterEndpointArrayInit( void );
//  240 static uint8 bdb_clusterEndpointArrayAdd( uint8 endpoint, uint16 cluster, uint16 consolidatedMinReportInt, uint16 consolidatedMaxReportInt, uint16 timeSinceLastReport );
//  241 static uint8 bdb_clusterEndpointArrayGetMin( void );
//  242 static void bdb_clusterEndpointArrayMoveTo( uint8 indexSrc, uint8 indexDest );
//  243 static uint8 bdb_clusterEndpointArrayUpdateAt( uint8 index, uint16 newTimeSinceLastReport, uint8 markHasBinding, uint8 noNextIncrement );
//  244 static void bdb_clusterEndpointArrayFreeAll( void );
//  245 static uint8 bdb_clusterEndpointArraySearch( uint8 endpoint, uint16 cluster );
//  246 static uint8 bdb_clusterEndpointArrayRemoveAt( uint8 index );
//  247 static void bdb_clusterEndpointArrayIncrementAll( uint16 timeSinceLastReportIncrement, uint8 CheckNoIncrementFlag );
//  248 //End: Cluster-endpoint array live methods
//  249 
//  250 //Begin: Single linked list default attr cfg records methods
//  251 static void bdb_repAttrDefaultCfgRecordInitValues( bdbReportAttrDefaultCfgData_t* item );
//  252 static void bdb_repAttrDefaultCfgRecordsLinkedListInit( bdbRepAttrDefaultCfgRecordLinkedList_t *list );
//  253 static uint8 bdb_repAttrDefaultCfgRecordsLinkedListAdd( bdbRepAttrDefaultCfgRecordLinkedList_t *list, bdbReportAttrDefaultCfgData_t* data );
//  254 static bdbRepAttrDefaultCfgRecordLinkedListItem_t* bdb_repAttrDefaultCfgRecordsLinkedListSearch( bdbRepAttrDefaultCfgRecordLinkedList_t *list, 
//  255                                                                                                 bdbReportAttrDefaultCfgData_t searchdata );
//  256 static bdbReportAttrDefaultCfgData_t* bdb_repAttrDefaultCfgRecordsLinkedListRemove( bdbRepAttrDefaultCfgRecordLinkedList_t *list );
//  257 static uint8 bdb_repAttrDefaultCfgRecordsLinkedListFreeAll( bdbRepAttrDefaultCfgRecordLinkedList_t *list );
//  258 //End: Single linked list default attr cfg records methods
//  259 
//  260 //Begin: Reporting attr configuration array methods
//  261 static void bdb_repAttrCfgRecordsArrayInit( void );
//  262 static uint8 bdb_repAttrCfgRecordsArrayCreate( uint8 maxNumRepAttrConfRecords );
//  263 static uint8 bdb_repAttrCfgRecordsArrayAdd( uint8 endpoint, uint16 cluster, uint16 attrID, uint16 minReportInt, 
//  264                                            uint16 maxReportInt, uint8  reportableChange[], uint16 defMinReportInt, uint16 defMaxReportInt, uint8 defReportChange[] );
//  265 static void bdb_repAttrCfgRecordsArrayFreeAll( void );
//  266 static uint8 bdb_repAttrCfgRecordsArraySearch( uint8 endpoint, uint16 cluster, uint16 attrID );
//  267 static uint8 bdb_repAttrCfgRecordsArrayConsolidateValues( uint8 endpoint, uint16 cluster,  uint16* consolidatedMinReportInt, uint16* consolidatedMaxReportInt );
//  268 //End: Reporting attr configuration array methods
//  269 
//  270 
//  271 static uint8 bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray( void );
//  272 static uint8 bdb_RepConstructAttrCfgArray( void );
//  273 static void bdb_RepInitAttrCfgRecords( void );
//  274 
//  275 static endPointDesc_t* bdb_FindEpDesc( uint8 endPoint );
//  276 static uint8 bdb_RepFindAttrEntry( uint8 endpoint, uint16 cluster, uint16 attrID, zclAttribute_t* attrRes );
//  277 static uint8 bdb_RepLoadCfgRecords( void );
//  278 static uint8 bdb_isAttrValueChangedSurpassDelta( uint8 datatype, uint8* delta, uint8* curValue, uint8* lastValue );
//  279 static uint16 bdb_RepCalculateEventElapsedTime( uint32 remainingTimeoutTimer, uint16 nextEventTimeout );
//  280 static void bdb_RepRestartNextEventTimer( void );
//  281 
//  282 static void bdb_RepStartReporting( void );
//  283 static void bdb_RepStopEventTimer( void );
//  284 static void bdb_RepSetupReporting( void );
//  285 static void bdb_RepReport( uint8 indexClusterEndpoint );
//  286 
//  287 extern zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint ); //Definition is located in zcl.h
//  288 
//  289 /*********************************************************************
//  290  * PUBLIC FUNCTIONS DEFINITIONS
//  291  */
//  292 
//  293  /*********************************************************************
//  294  * @fn          bdb_RepInit
//  295  *
//  296  * @brief       Initiates the tables and linked list used in the reporting code.
//  297  *
//  298  * @param       none
//  299  *
//  300  * @return      none
//  301  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  302 void bdb_RepInit( void )
bdb_RepInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function bdb_RepInit
        CODE
//  303 {
        FUNCALL bdb_RepInit, bdb_repAttrCfgRecordsArrayInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepInit, bdb_repAttrDefaultCfgRecordsLinkedListInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepInit, bdb_clusterEndpointArrayInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  304   bdb_reportingNextEventTimeout = 0;
        MOV       DPTR,#bdb_reportingNextEventTimeout
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  305   bdb_reportingAcceptDefaultConfs = BDBREPORTING_TRUE;
        MOV       DPTR,#bdb_reportingAcceptDefaultConfs
        INC       A
        MOVX      @DPTR,A
//  306   bdb_repAttrCfgRecordsArrayInit( );
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayInit
        LCALL     `??bdb_repAttrCfgRecordsArrayInit::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayInit
//  307   bdb_repAttrDefaultCfgRecordsLinkedListInit( &attrDefaultCfgRecordLinkedList );
        ; Setup parameters for call to function bdb_repAttrDefaultCfgRecordsLinkedListInit
        MOV       R2,#attrDefaultCfgRecordLinkedList & 0xff
        MOV       R3,#(attrDefaultCfgRecordLinkedList >> 8) & 0xff
        LCALL     `??bdb_repAttrDefaultCfgRecordsLinkedListInit::?`; Banked call to: bdb_repAttrDefaultCfgRecordsLinkedListInit
//  308   bdb_clusterEndpointArrayInit( );
        ; Setup parameters for call to function bdb_clusterEndpointArrayInit
        LCALL     `??bdb_clusterEndpointArrayInit::?relay`; Banked call to: bdb_clusterEndpointArrayInit
//  309 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock0
//  310 
//  311  /*********************************************************************
//  312  * @fn          bdb_RepConstructReportingData
//  313  *
//  314  * @brief       Creates the attr reporting configurations by looking at 
//  315  *              the app endpoints, cluster and attr definitions or loads 
//  316  *              from NV the previous configurations.
//  317  *
//  318  * @param       none
//  319  *
//  320  * @return      none
//  321  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  322 void bdb_RepConstructReportingData( void )
bdb_RepConstructReportingData:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function bdb_RepConstructReportingData
        CODE
//  323 {
        FUNCALL bdb_RepConstructReportingData, bdb_RepInitAttrCfgRecords
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepConstructReportingData, bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepConstructReportingData, bdb_repAttrCfgRecordsArrayFreeAll
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  324   //Don't accept anymore default attribute configurations entries
//  325   bdb_reportingAcceptDefaultConfs = BDBREPORTING_FALSE;
        MOV       DPTR,#bdb_reportingAcceptDefaultConfs
        CLR       A
        MOVX      @DPTR,A
//  326   //Construct the attr cfg records
//  327   bdb_RepInitAttrCfgRecords( );
        ; Setup parameters for call to function bdb_RepInitAttrCfgRecords
        LCALL     `??bdb_RepInitAttrCfgRecords::?relay`; Banked call to: bdb_RepInitAttrCfgRecords
//  328   //Construct the endpoint-cluster array
//  329   bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray( );
        ; Setup parameters for call to function bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        LCALL     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo; Banked call to: bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
//  330   //Delete reporting configuration array, it's saved in NV
//  331   bdb_repAttrCfgRecordsArrayFreeAll( ); 
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
        LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
//  332 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock1
//  333 
//  334  /*********************************************************************
//  335  * @fn          bdb_RepMarkHasBindingInEndpointClusterArray
//  336  *
//  337  * @brief       Marks the binding flag as ON at the entry containig the 
//  338  *              cluster-endpoint pair.
//  339  *
//  340  * @param       endpoint - endpoint id of the entry to locate
//  341  * @param       cluster - cluster id of the entry to locate
//  342  *
//  343  * @return      none
//  344  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  345 void bdb_RepMarkHasBindingInEndpointClusterArray( uint8 endpoint, uint16 cluster, uint8 unMark, uint8 setNoNextIncrementFlag )
bdb_RepMarkHasBindingInEndpointClusterArray:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function bdb_RepMarkHasBindingInEndpointClusterArray
        CODE
//  346 {
        FUNCALL bdb_RepMarkHasBindingInEndpointClusterArray, bdb_clusterEndpointArraySearch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepMarkHasBindingInEndpointClusterArray, bdb_clusterEndpointArrayUpdateAt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepMarkHasBindingInEndpointClusterArray, bdb_clusterEndpointArrayUpdateAt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       ?V0,R4
        MOV       A,R5
        MOV       R6,A
//  347   uint8 foundIndex;
//  348   if( bdb_reportingClusterEndpointArrayCount > 0 )
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        JZ        ??bdb_RepMarkHasBindingInEndpointClusterArray_0
//  349   {
//  350     foundIndex = bdb_clusterEndpointArraySearch( endpoint, cluster );
        ; Setup parameters for call to function bdb_clusterEndpointArraySearch
        LCALL     `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
        MOV       A,R1
        MOV       R1,A
//  351     if( foundIndex != BDBREPORTING_INVALIDINDEX )
        MOV       A,#-0x1
        XRL       A,R1
        JZ        ??bdb_RepMarkHasBindingInEndpointClusterArray_0
//  352     {
//  353       if( unMark == BDBREPORTING_TRUE )
        MOV       A,#0x1
        XRL       A,?V0
        JNZ       ??bdb_RepMarkHasBindingInEndpointClusterArray_1
//  354       {
//  355         bdb_clusterEndpointArrayUpdateAt( foundIndex, 0, BDBREPORTING_FALSE, setNoNextIncrementFlag );
        ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
        MOV       A,R6
        MOV       R5,A
        MOV       R4,#0x0
        SJMP      ??bdb_RepMarkHasBindingInEndpointClusterArray_2
//  356       }
//  357       else
//  358       {
//  359         bdb_clusterEndpointArrayUpdateAt( foundIndex, 0, BDBREPORTING_TRUE, setNoNextIncrementFlag );
??bdb_RepMarkHasBindingInEndpointClusterArray_1:
        ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
        MOV       A,R6
        MOV       R5,A
        MOV       R4,#0x1
??bdb_RepMarkHasBindingInEndpointClusterArray_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??bdb_clusterEndpointArrayUpdateAt::?relay`; Banked call to: bdb_clusterEndpointArrayUpdateAt
//  360       }
//  361     }
//  362   }
//  363 }
??bdb_RepMarkHasBindingInEndpointClusterArray_0:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  364 
//  365  /*********************************************************************
//  366  * @fn          bdb_RepStartReporting
//  367  *
//  368  * @brief       Restarts the periodic reporting timer, if the timer was already
//  369  *              running it stops it and to before starting timer sets some state 
//  370  *              variables.
//  371  *
//  372  * @return      none
//  373  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  374 static void bdb_RepStartReporting( void )
bdb_RepStartReporting:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function bdb_RepStartReporting
        CODE
//  375 {
        FUNCALL bdb_RepStartReporting, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepStartReporting, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepStartReporting, bdb_RepRestartNextEventTimer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  376   //Stop if reporting timer is active
//  377   if( !osal_get_timeoutEx( bdb_TaskID, BDB_REPORT_TIMEOUT ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JNZ       ??bdb_RepStartReporting_0
//  378   {
//  379     //timerElapsedTime is zero
//  380     osal_stop_timerEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  381     bdb_reportingNextEventTimeout = 0;
        MOV       DPTR,#bdb_reportingNextEventTimeout
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  382     bdb_reportingNextClusterEndpointIndex = BDBREPORTING_INVALIDINDEX;
        MOV       DPTR,#bdb_reportingNextClusterEndpointIndex
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  383     //Start Timer
//  384     bdb_RepRestartNextEventTimer( );
        ; Setup parameters for call to function bdb_RepRestartNextEventTimer
        LCALL     `??bdb_RepRestartNextEventTimer::?relay`; Banked call to: bdb_RepRestartNextEventTimer
//  385   }
//  386 }
??bdb_RepStartReporting_0:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock3
//  387 
//  388  /*********************************************************************
//  389  * @fn          bdb_RepStartOrContinueReporting
//  390  *
//  391  * @brief       Restarts the periodic reporting timer, if the timer was already
//  392  *              running it calculates the remaining time of timer before stopping it,
//  393  *              then sustracts this elapsed time from the next event endpoint-cluster 
//  394  *              table.
//  395  *
//  396  * @return      none
//  397  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  398 void bdb_RepStartOrContinueReporting( void )
bdb_RepStartOrContinueReporting:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function bdb_RepStartOrContinueReporting
        CODE
//  399 {
        FUNCALL bdb_RepStartOrContinueReporting, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepStartOrContinueReporting, bdb_RepStartReporting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepStartOrContinueReporting, bdb_RepCalculateEventElapsedTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepStartOrContinueReporting, bdb_RepStopEventTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepStartOrContinueReporting, bdb_clusterEndpointArrayIncrementAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepStartOrContinueReporting, bdb_RepStartReporting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  400   //Stop if reporting timer is active
//  401   uint32 remainingTimeOfEvent = osal_get_timeoutEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
//  402   if( remainingTimeOfEvent == 0 )
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JZ        ??bdb_RepStartOrContinueReporting_0
//  403   {
//  404     //Timer was not running
//  405     bdb_RepStartReporting( );
        ; Setup parameters for call to function bdb_RepStartReporting
//  406   }
//  407   else
//  408   {
//  409     uint16 elapsedTime = bdb_RepCalculateEventElapsedTime( remainingTimeOfEvent, bdb_reportingNextEventTimeout );
        ; Setup parameters for call to function bdb_RepCalculateEventElapsedTime
        MOV       DPTR,#bdb_reportingNextEventTimeout
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        LCALL     `??bdb_RepCalculateEventElapsedTime::?relay`; Banked call to: bdb_RepCalculateEventElapsedTime
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,R2
        MOV       ?V1,R3
//  410     bdb_RepStopEventTimer( );
        ; Setup parameters for call to function bdb_RepStopEventTimer
        LCALL     `??bdb_RepStopEventTimer::?relay`; Banked call to: bdb_RepStopEventTimer
//  411     
//  412     bdb_clusterEndpointArrayIncrementAll( elapsedTime, BDBREPORTING_TRUE );
        ; Setup parameters for call to function bdb_clusterEndpointArrayIncrementAll
        MOV       R1,#0x1
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_clusterEndpointArrayIncrementAll::?relay`; Banked call to: bdb_clusterEndpointArrayIncrementAll
//  413     bdb_RepStartReporting( );
        ; Setup parameters for call to function bdb_RepStartReporting
??bdb_RepStartOrContinueReporting_0:
        LCALL     `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
//  414   }
//  415   
//  416 }
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  417 
//  418  /*********************************************************************
//  419  * @fn          bdb_RepCalculateEventElapsedTime
//  420  *
//  421  * @brief       Calculate the elapsed time of the currently running timer, 
//  422  *              the remaining time is roundup.
//  423  *
//  424  * @param       remainingTimeoutTimer - timeout value from the osal_get_timeoutEx method, 
//  425  *              its in milliseconds units
//  426  * @param       nextEventTimeout - the timeout given to the timer when it started
//  427  *
//  428  * @return      the elapsed time in seconds
//  429  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  430 static uint16 bdb_RepCalculateEventElapsedTime( uint32 remainingTimeoutTimer, uint16 nextEventTimeout )
bdb_RepCalculateEventElapsedTime:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function bdb_RepCalculateEventElapsedTime
        CODE
//  431 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V10,R4
        MOV       ?V11,R5
//  432   uint32 passTimeOfEvent = 0;
        MOV       ?V4,#0x0
        MOV       ?V5,#0x0
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  433   passTimeOfEvent = nextEventTimeout*1000 >= remainingTimeoutTimer? nextEventTimeout*1000 - remainingTimeoutTimer: 0;
        MOV       A,?V0
        MOV       B,#-0x18
        MUL       AB
        XCH       A,?V0
        MOV       R0,B
        MOV       B,#0x3
        MUL       AB
        ADD       A,R0
        MOV       R0,A
        MOV       B,#-0x18
        MOV       A,?V1
        MUL       AB
        ADD       A,R0
        MOV       ?V1,A
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V8
        MOV       R1,#?V0
        LCALL     ?UL_GT
        JC        ??bdb_RepCalculateEventElapsedTime_0
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       R0,#?V4
        MOV       R1,#?V8
        LCALL     ?L_SUB
//  434   uint16 elapsedTime = passTimeOfEvent / 1000;
??bdb_RepCalculateEventElapsedTime_0:
        MOV       ?V0,?V4
        MOV       ?V1,?V5
        MOV       ?V2,?V6
        MOV       ?V3,?V7
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V8
        LCALL     ?UL_DIV_MOD
        MOV       R2,?V0
        MOV       R3,?V1
//  435   elapsedTime = elapsedTime + ((passTimeOfEvent % 1000) >0 ? 1:0); //roundup
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?UL_DIV_MOD
        MOV       A,?V0
        ORL       A,?V1
        ORL       A,?V2
        ORL       A,?V3
        JZ        ??bdb_RepCalculateEventElapsedTime_1
        INC       R2
        MOV       A,R2
        JNZ       ??bdb_RepCalculateEventElapsedTime_1
        INC       R3
//  436   return elapsedTime;  
??bdb_RepCalculateEventElapsedTime_1:
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
//  437 }
          CFI EndBlock cfiBlock5
//  438 
//  439  /*********************************************************************
//  440  * @fn          bdb_RepProcessEvent
//  441  *
//  442  * @brief       Method that process the timer expired event in the reporting 
//  443  *              code, it calculate the next cluster-endpoint entry based 
//  444  *              on the minimum with consolidatedMaxReportInt - timeSinceLastReport,
//  445  *              updates timeSinceLastReport of all entries. If the minimum is zero,
//  446  *              report the cluster-endpoint attrs.
//  447  *
//  448  * @return      none
//  449  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  450 void bdb_RepProcessEvent( void )
bdb_RepProcessEvent:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function bdb_RepProcessEvent
        CODE
//  451 {
        FUNCALL bdb_RepProcessEvent, bdb_clusterEndpointArrayIncrementAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepProcessEvent, bdb_clusterEndpointArrayGetMin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepProcessEvent, bdb_RepReport
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepProcessEvent, bdb_clusterEndpointArrayUpdateAt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepProcessEvent, bdb_RepRestartNextEventTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  452   bdb_clusterEndpointArrayIncrementAll( bdb_reportingNextEventTimeout, BDBREPORTING_FALSE );
        ; Setup parameters for call to function bdb_clusterEndpointArrayIncrementAll
        MOV       R1,#0x0
        MOV       DPTR,#bdb_reportingNextEventTimeout
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_clusterEndpointArrayIncrementAll::?relay`; Banked call to: bdb_clusterEndpointArrayIncrementAll
//  453   uint8 minIndex =  bdb_clusterEndpointArrayGetMin( );
        ; Setup parameters for call to function bdb_clusterEndpointArrayGetMin
        LCALL     `??bdb_clusterEndpointArrayGetMin::?relay`; Banked call to: bdb_clusterEndpointArrayGetMin
        MOV       A,R1
        MOV       R6,A
//  454   if( minIndex == BDBREPORTING_INVALIDINDEX )
        MOV       A,#-0x1
        XRL       A,R6
        JZ        ??bdb_RepProcessEvent_0
//  455   {
//  456     return;
//  457   }
//  458    uint16 minVal = bdb_reportingClusterEndpointArray[minIndex].consolidatedMaxReportInt - bdb_reportingClusterEndpointArray[minIndex].timeSinceLastReport;
        MOV       A,R1
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        PUSH      DPL
          CFI CFA_SP SP+-1
        PUSH      DPH
          CFI CFA_SP SP+-2
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        POP       DPH
          CFI CFA_SP SP+-1
        POP       DPL
          CFI CFA_SP SP+0
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,R1
        MOV       R1,A
//  459    if( minVal>0 )
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_RepProcessEvent_1
//  460    { 
//  461      bdb_reportingNextEventTimeout = minVal;
        MOV       DPTR,#bdb_reportingNextEventTimeout
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        SJMP      ??bdb_RepProcessEvent_2
//  462    }
//  463    else
//  464    {
//  465      //Something was triggered, report clusterEndpoint with minIndex 
//  466      bdb_reportingNextClusterEndpointIndex = minIndex;
??bdb_RepProcessEvent_1:
        MOV       A,R6
        MOV       DPTR,#bdb_reportingNextClusterEndpointIndex
        MOVX      @DPTR,A
//  467      bdb_RepReport( BDBREPORTING_INVALIDINDEX );
        ; Setup parameters for call to function bdb_RepReport
        MOV       R1,#-0x1
        LCALL     `??bdb_RepReport::?relay`; Banked call to: bdb_RepReport
//  468      bdb_clusterEndpointArrayUpdateAt( minIndex, 0, BDBREPORTING_IGNORE, BDBREPORTING_IGNORE );
        ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
        MOV       R5,#-0x1
        MOV       R4,#-0x1
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,R6
        MOV       R1,A
        LCALL     `??bdb_clusterEndpointArrayUpdateAt::?relay`; Banked call to: bdb_clusterEndpointArrayUpdateAt
//  469      bdb_reportingNextEventTimeout = 0;  
        MOV       DPTR,#bdb_reportingNextEventTimeout
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
??bdb_RepProcessEvent_2:
        MOVX      @DPTR,A
//  470    }
//  471    bdb_RepRestartNextEventTimer( );
        ; Setup parameters for call to function bdb_RepRestartNextEventTimer
        LCALL     `??bdb_RepRestartNextEventTimer::?relay`; Banked call to: bdb_RepRestartNextEventTimer
//  472 }
??bdb_RepProcessEvent_0:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  473 
//  474 /*********************************************************************
//  475  * @fn      bdb_ProcessInConfigReportCmd
//  476  *
//  477  * @brief   Process the "Profile" Configure Reporting Command
//  478  *
//  479  * @param   pInMsg - incoming message to process
//  480  *
//  481  * @return  TRUE if conditions are meet (attr found, memory available, etc.),
//  482  *          FALSE if not
//  483  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  484 uint8 bdb_ProcessInConfigReportCmd( zclIncomingMsg_t *pInMsg )
bdb_ProcessInConfigReportCmd:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function bdb_ProcessInConfigReportCmd
        CODE
//  485 {
        FUNCALL bdb_ProcessInConfigReportCmd, bdb_FindEpDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, bdb_RepStopEventTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, bdb_RepLoadCfgRecords
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, bdb_repAttrCfgRecordsArraySearch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, zclAnalogDataType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, zclGetDataTypeLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, bdb_RepSetupReporting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, zcl_SendConfigReportRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, bdb_repAttrCfgRecordsArrayFreeAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInConfigReportCmd, bdb_RepStartReporting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V10,R2
        MOV       ?V11,R3
        ; Setup parameters for call to function bdb_FindEpDesc
        MOV       A,R2
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,?V11
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
//  486   zclCfgReportCmd_t *cfgReportCmd;
//  487   zclCfgReportRec_t *reportRec;
//  488   zclCfgReportRspCmd_t *cfgReportRspCmd;
//  489   zclAttrRec_t attrRec;
//  490   uint8 status = ZCL_STATUS_SUCCESS;
//  491   uint8 i;
//  492   uint8 iNumRspRecords;
//  493 
//  494   // Find Ep Descriptor
//  495   endPointDesc_t* epDescriptor = bdb_FindEpDesc( pInMsg->endPoint );
//  496   if( epDescriptor == NULL )
        LCALL     `??bdb_FindEpDesc::?relay`; Banked call to: bdb_FindEpDesc
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_ProcessInConfigReportCmd_0
//  497   {
//  498     return ( FALSE );
//  499   }
//  500   
//  501   // get a pointer to the report configuration record
//  502   cfgReportCmd = (zclCfgReportCmd_t *)pInMsg->attrCmd;
        MOV       A,?V10
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,?V11
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  503   
//  504   if( cfgReportCmd->numAttr == 0 )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        JZ        ??bdb_ProcessInConfigReportCmd_0
//  505   {
//  506     return ( FALSE );
//  507   }
//  508   
//  509   // Allocate space for the response command
//  510   cfgReportRspCmd = (zclCfgReportRspCmd_t *)osal_mem_alloc( sizeof ( zclCfgReportRspCmd_t ) + 
//  511                                                             ( cfgReportCmd->numAttr * sizeof ( zclCfgReportStatus_t) ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       A,#0x2
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
//  512   if ( cfgReportRspCmd == NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_ProcessInConfigReportCmd_0
//  513   {
//  514     return ( FALSE );
//  515   }
//  516  
//  517   //stop any attribute reporting
//  518   bdb_RepStopEventTimer( );
        ; Setup parameters for call to function bdb_RepStopEventTimer
        LCALL     `??bdb_RepStopEventTimer::?relay`; Banked call to: bdb_RepStopEventTimer
//  519   
//  520   //Load cfg records from NV
//  521   status = bdb_RepLoadCfgRecords( );
//  522   if( status != BDBREPORTING_SUCCESS )
        ; Setup parameters for call to function bdb_RepLoadCfgRecords
        LCALL     `??bdb_RepLoadCfgRecords::?relay`; Banked call to: bdb_RepLoadCfgRecords
        MOV       A,R1
        JZ        ??bdb_ProcessInConfigReportCmd_1
//  523   {
//  524     osal_mem_free( cfgReportRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  525     return ( FALSE );
??bdb_ProcessInConfigReportCmd_0:
        MOV       R1,#0x0
        LJMP      ??bdb_ProcessInConfigReportCmd_2 & 0xFFFF
//  526   }
//  527  
//  528   // Process each Attribute Reporting Configuration record
//  529   uint8 confchanged = BDBREPORTING_FALSE;
??bdb_ProcessInConfigReportCmd_1:
        MOV       ?V1,#0x0
//  530   iNumRspRecords = 0;
        MOV       ?V12,#0x0
//  531   for ( i = 0; i < cfgReportCmd->numAttr; i++ )
        MOV       ?V7,#0x0
        SJMP      ??bdb_ProcessInConfigReportCmd_3
//  532   {
//  533     reportRec = &(cfgReportCmd->attrList[i]);
//  534 
//  535     status = ZCL_STATUS_SUCCESS;  // assume success for this rsp record
//  536     
//  537     uint8 atrrCfgRecordIndex =  bdb_repAttrCfgRecordsArraySearch( pInMsg->endPoint, pInMsg->clusterId, reportRec->attrID );
//  538     uint8 status2 = zclFindAttrRec( pInMsg->endPoint, pInMsg->clusterId, reportRec->attrID, &attrRec );
//  539     if( atrrCfgRecordIndex == BDBREPORTING_INVALIDINDEX || status2 == 0 )
//  540     {
//  541       //No cfg record found, 
//  542       status = ZCL_STATUS_INVALID_VALUE;
//  543     }
//  544     else
//  545     {
//  546       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
//  547       {
//  548         if ( reportRec->dataType == attrRec.attr.dataType )
//  549         {
//  550           // This the attribute that is to be reported, for now pass all attrs
//  551           if ( attrRec.attr.accessControl & ACCESS_REPORTABLE )
//  552           {
//  553             if ( reportRec->minReportInt == BDBREPORTING_MININTERVAL_DEFAULT && reportRec->maxReportInt == BDBREPORTING_MAXINTERVAL_DEFAULT )
//  554             {
//  555               //Set the saved default configuration
//  556               confchanged = BDBREPORTING_TRUE;
//  557               bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].minReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].defaultMinReportInt;
//  558               bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].maxReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].defaultMaxReportInt;
//  559               osal_memset( bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, 0x00, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
//  560               osal_memcpy( bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].defaultReportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
//  561               status = ZCL_STATUS_SUCCESS;  
//  562             }
//  563             else
//  564             {
//  565               // valid configuration, change values
//  566               confchanged = BDBREPORTING_TRUE;
//  567               bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].minReportInt = reportRec->minReportInt;
//  568               bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].maxReportInt = reportRec->maxReportInt;
//  569               // For attributes of 'discrete' data types this field is omitted
//  570               if ( zclAnalogDataType( reportRec->dataType ) )
//  571               {
//  572                 osal_memset( bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, 0x00, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
//  573                 osal_memcpy( bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, reportRec->reportableChange, zclGetDataTypeLength( reportRec->dataType ) );
//  574               }
//  575               status = ZCL_STATUS_SUCCESS;             
//  576             }
//  577           }
//  578           else
//  579           {
//  580             // Attribute cannot be reported
//  581             status = ZCL_STATUS_UNREPORTABLE_ATTRIBUTE;
//  582           }
//  583         }
//  584         else
//  585         {
//  586           // Attribute data type is incorrect
//  587           status = ZCL_STATUS_INVALID_DATA_TYPE;
??bdb_ProcessInConfigReportCmd_4:
        MOV       ?V0,#-0x73
//  588         }
//  589       }
//  590       // receiving reports
//  591       else
//  592       {
//  593         status = ZCL_STATUS_SUCCESS;
//  594       }
//  595     
//  596     }
//  597 
//  598     // If not successful then record the status
//  599     if ( status != ZCL_STATUS_SUCCESS )
??bdb_ProcessInConfigReportCmd_5:
        MOV       A,?V0
        JZ        ??bdb_ProcessInConfigReportCmd_6
//  600     {
//  601       cfgReportRspCmd->attrList[iNumRspRecords].status = status;
        MOV       A,?V12
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       A,#0x2
        MOV       R0,#?V4
        LCALL     ?S_SHL
        MOV       A,?V8
        ADD       A,?V4
        MOV       R0,A
        MOV       A,?V9
        ADDC      A,?V5
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
//  602       cfgReportRspCmd->attrList[iNumRspRecords].direction = reportRec->direction;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  603       cfgReportRspCmd->attrList[iNumRspRecords].attrID = reportRec->attrID;
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  604       ++iNumRspRecords;
        INC       ?V12
//  605     }
??bdb_ProcessInConfigReportCmd_6:
        INC       ?V7
??bdb_ProcessInConfigReportCmd_3:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V7
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??bdb_ProcessInConfigReportCmd_7 & 0xFFFF
        MOV       A,?V7
        MOV       B,#0xc
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        MOV       ?V0,#0x0
        MOV       A,?V10
        ADD       A,#0x8
        MOV       ?V14,A
        CLR       A
        ADDC      A,?V11
        MOV       ?V15,A
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArraySearch
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,?V14
        MOV       DPH,?V15
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,?V10
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,?V11
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_repAttrCfgRecordsArraySearch::?relay`; Banked call to: bdb_repAttrCfgRecordsArraySearch
        MOV       A,R1
        MOV       R6,A
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,?V14
        MOV       DPH,?V15
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,?V10
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,?V11
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R1
        MOV       R0,A
        MOV       A,#-0x1
        XRL       A,R6
        JZ        ??bdb_ProcessInConfigReportCmd_8
        MOV       A,R1
        JNZ       ??bdb_ProcessInConfigReportCmd_9
??bdb_ProcessInConfigReportCmd_8:
        MOV       ?V0,#-0x79
        LJMP      ??bdb_ProcessInConfigReportCmd_5 & 0xFFFF
??bdb_ProcessInConfigReportCmd_9:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_ProcessInConfigReportCmd_5 & 0xFFFF
        MOV       A,?V2
        ADD       A,#0x3
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V3
        MOV       ?V5,A
        MOV       DPL,?V4
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        $+5
        LJMP      ??bdb_ProcessInConfigReportCmd_4 & 0xFFFF
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.2
        JC        $+5
        LJMP      ??bdb_ProcessInConfigReportCmd_10 & 0xFFFF
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,?V2
        ADD       A,#0x6
        MOV       R0,A
        CLR       A
        ADDC      A,?V3
        MOV       R1,A
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??bdb_ProcessInConfigReportCmd_11
        MOV       A,#-0x1
        XRL       A,R3
??bdb_ProcessInConfigReportCmd_11:
        JZ        $+5
        LJMP      ??bdb_ProcessInConfigReportCmd_12 & 0xFFFF
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        JZ        $+5
        LJMP      ??bdb_ProcessInConfigReportCmd_12 & 0xFFFF
        MOV       ?V1,#0x1
        MOV       A,R6
        MOV       B,#0x15
        MUL       AB
        MOV       R6,A
        MOV       R7,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R3,A
        MOV       A,R2
        ADD       A,#0xd
        MOV       R2,A
        JNC       ??bdb_ProcessInConfigReportCmd_13
        INC       R3
??bdb_ProcessInConfigReportCmd_13:
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R3,A
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R2
        ADD       A,#0x11
        MOV       ?V4,A
        CLR       A
        ADDC      A,R3
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0xd
        MOV       R2,A
        JNC       ??bdb_ProcessInConfigReportCmd_14
        INC       R3
??bdb_ProcessInConfigReportCmd_14:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        LJMP      ??bdb_ProcessInConfigReportCmd_5 & 0xFFFF
??bdb_ProcessInConfigReportCmd_12:
        MOV       ?V1,#0x1
        MOV       A,R6
        MOV       B,#0x15
        MUL       AB
        MOV       R6,A
        MOV       R7,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       DPL,R4
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclAnalogDataType
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
        MOV       A,R1
        JNZ       $+5
        LJMP      ??bdb_ProcessInConfigReportCmd_5 & 0xFFFF
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R3,A
        MOV       A,R2
        ADD       A,#0xd
        MOV       R2,A
        JNC       ??bdb_ProcessInConfigReportCmd_15
        INC       R3
??bdb_ProcessInConfigReportCmd_15:
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
        ; Setup parameters for call to function zclGetDataTypeLength
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
        MOV       A,R1
        MOV       R1,A
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,R1
        MOV       R4,A
        MOV       R5,#0x0
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0xd
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LJMP      ??bdb_ProcessInConfigReportCmd_14 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 34)
??bdb_ProcessInConfigReportCmd_10:
        MOV       ?V0,#-0x74
        LJMP      ??bdb_ProcessInConfigReportCmd_5 & 0xFFFF
//  606 
//  607   } // going through each attribute
//  608 
//  609   if( confchanged == BDBREPORTING_TRUE )
??bdb_ProcessInConfigReportCmd_7:
        MOV       A,#0x1
        XRL       A,?V1
        JNZ       ??bdb_ProcessInConfigReportCmd_16
//  610   {
//  611    //Write new configs into NV
//  612    status = osal_nv_item_init( ZCD_NV_BDBREPORTINGCONFIG, sizeof(bdbReportAttrCfgData_t)*bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray );
//  613    if( status == SUCCESS )
        ; Setup parameters for call to function osal_nv_item_init
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R4,A
        MOV       R5,B
        MOV       R2,#0x56
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R1
        JNZ       ??bdb_ProcessInConfigReportCmd_17
//  614    {
//  615      //Overwrite values
//  616      osal_nv_write( ZCD_NV_BDBREPORTINGCONFIG,0, sizeof(bdbReportAttrCfgData_t)*bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray );
        ; Setup parameters for call to function osal_nv_write
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       ?V0,A
        MOV       A,B
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x56
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  617    }
//  618 
//  619     bdb_RepSetupReporting( );
??bdb_ProcessInConfigReportCmd_17:
        ; Setup parameters for call to function bdb_RepSetupReporting
        LCALL     `??bdb_RepSetupReporting::?relay`; Banked call to: bdb_RepSetupReporting
//  620   }
//  621   
//  622   // if no response records, then just say 1 with status of success
//  623   cfgReportRspCmd->numAttr = iNumRspRecords;
??bdb_ProcessInConfigReportCmd_16:
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOV       A,?V12
        MOVX      @DPTR,A
//  624   if ( cfgReportRspCmd->numAttr == 0 )
        MOVX      A,@DPTR
        JNZ       ??bdb_ProcessInConfigReportCmd_18
//  625   {
//  626     // Since all attributes were configured successfully, include a single
//  627     // attribute status record in the response command with the status field
//  628     // set to SUCCESS and the attribute ID field and direction omitted.
//  629     cfgReportRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  630     cfgReportRspCmd->numAttr = 1;
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       A
        MOVX      @DPTR,A
//  631   }
//  632 
//  633   // Send the response back
//  634   zcl_SendConfigReportRspCmd( pInMsg->endPoint, &(pInMsg->srcAddr),
//  635                               pInMsg->clusterId, cfgReportRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
//  636                               true, pInMsg->zclHdr.transSeqNum );
??bdb_ProcessInConfigReportCmd_18:
        ; Setup parameters for call to function zcl_SendConfigReportRspCmd
        MOV       DPL,?V10
        MOV       DPH,?V11
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       DPL,?V10
        MOV       DPH,?V11
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,?V10
        ADD       A,#0xa
        MOV       R2,A
        CLR       A
        ADDC      A,?V11
        MOV       R3,A
        MOV       A,?V10
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,?V11
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_SendConfigReportRspCmd::?relay`; Banked call to: zcl_SendConfigReportRspCmd
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  637   osal_mem_free( cfgReportRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  638 
//  639   bdb_repAttrCfgRecordsArrayFreeAll( ); //Free reporting conf array from memory, its saved in NV
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
        LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
//  640 
//  641   bdb_RepStartReporting( );
        ; Setup parameters for call to function bdb_RepStartReporting
        LCALL     `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
//  642 
//  643   return ( TRUE ) ;
        MOV       R1,#0x1
??bdb_ProcessInConfigReportCmd_2:
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
//  644 }
          CFI EndBlock cfiBlock7
//  645 
//  646 
//  647 /*********************************************************************
//  648  * @fn      bdb_ProcessInReadReportCfgCmd
//  649  *
//  650  * @brief   Process the "Profile" Read Reporting Configuration Command
//  651  *
//  652  * @param   pInMsg - incoming message to process
//  653  *
//  654  * @return  TRUE if conditions are meet (attr found, memory available, etc.) or FALSE
//  655  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  656 uint8 bdb_ProcessInReadReportCfgCmd( zclIncomingMsg_t *pInMsg )
bdb_ProcessInReadReportCfgCmd:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function bdb_ProcessInReadReportCfgCmd
        CODE
//  657 {
        FUNCALL bdb_ProcessInReadReportCfgCmd, bdb_FindEpDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, zclAnalogDataType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, zclGetDataTypeLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, bdb_RepLoadCfgRecords
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, bdb_repAttrCfgRecordsArraySearch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, zcl_SendReadReportCfgRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessInReadReportCfgCmd, bdb_repAttrCfgRecordsArrayFreeAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V4,R2
        MOV       ?V5,R3
//  658   zclReadReportCfgCmd_t *readReportCfgCmd;
//  659   zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
//  660   zclReportCfgRspRec_t *reportRspRec;
//  661   uint8 hdrLen;
//  662   uint8 dataLen = 0;
        MOV       R7,#0x0
        ; Setup parameters for call to function bdb_FindEpDesc
        MOV       A,R2
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
//  663   zclAttrRec_t attrRec;
//  664   uint8 i;
//  665   uint8 reportChangeLen;
//  666   uint8 status;
//  667   
//  668   // Find Ep Descriptor
//  669   endPointDesc_t* epDescriptor = bdb_FindEpDesc( pInMsg->endPoint );
        LCALL     `??bdb_FindEpDesc::?relay`; Banked call to: bdb_FindEpDesc
        MOV       ?V0,R2
        MOV       ?V1,R3
//  670   if( epDescriptor==NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??bdb_ProcessInReadReportCfgCmd_0 & 0xFFFF
//  671   {
//  672     return ( FALSE ); // EMBEDDED RETURN
//  673   }
//  674   
//  675   readReportCfgCmd = (zclReadReportCfgCmd_t *)pInMsg->attrCmd;
        MOV       A,?V4
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V14,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V15,A
//  676   
//  677   // Find out the response length (Reportable Change field is of variable length)
//  678   for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
        MOV       R6,#0x0
        SJMP      ??bdb_ProcessInReadReportCfgCmd_1
//  679   {
//  680     // For supported attributes with 'analog' data type, find out the length of
//  681     // the Reportable Change field
//  682     if ( zclFindAttrRec( epDescriptor->endPoint, pInMsg->clusterId,
//  683                          readReportCfgCmd->attrList[i].attrID, &attrRec ) )
??bdb_ProcessInReadReportCfgCmd_2:
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R6
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V14
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V15
        ADDC      A,R1
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R1
        JZ        ??bdb_ProcessInReadReportCfgCmd_3
//  684     {
//  685       if ( zclAnalogDataType( attrRec.attr.dataType ) )
        ; Setup parameters for call to function zclAnalogDataType
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
        MOV       A,R1
        JZ        ??bdb_ProcessInReadReportCfgCmd_3
//  686       {
//  687          reportChangeLen = zclGetDataTypeLength( attrRec.attr.dataType );
        ; Setup parameters for call to function zclGetDataTypeLength
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
        MOV       A,R1
        MOV       R0,A
//  688 
//  689          // add padding if needed
//  690          if ( PADDING_NEEDED( reportChangeLen ) )
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_ProcessInReadReportCfgCmd_4
//  691          {
//  692            reportChangeLen++;
        INC       R0
//  693          }
//  694          dataLen += reportChangeLen;
??bdb_ProcessInReadReportCfgCmd_4:
        MOV       A,R0
        ADD       A,R7
        MOV       R7,A
//  695       }
//  696     }
//  697   }
??bdb_ProcessInReadReportCfgCmd_3:
        INC       R6
??bdb_ProcessInReadReportCfgCmd_1:
        MOV       DPL,?V14
        MOV       DPH,?V15
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        ??bdb_ProcessInReadReportCfgCmd_2
//  698 
//  699   hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( readReportCfgCmd->numAttr * sizeof( zclReportCfgRspRec_t ) );
//  700 
//  701   // Allocate space for the response command
//  702   readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       B,#0xd
        MOV       A,R0
        MUL       AB
        INC       A
        MOV       R0,A
        MOV       A,R7
        MOV       R2,A
        MOV       A,R0
        ADD       A,R2
        MOV       R2,A
        CLR       A
        ADDC      A,#0x0
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
//  703   if ( readReportCfgRspCmd == NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_ProcessInReadReportCfgCmd_0
//  704   {
//  705     return ( FALSE ); // Out of memory
//  706   }
//  707   
//  708   //Load cfg records from NV
//  709   status = bdb_RepLoadCfgRecords( );
//  710   if( status != BDBREPORTING_SUCCESS )
        ; Setup parameters for call to function bdb_RepLoadCfgRecords
        LCALL     `??bdb_RepLoadCfgRecords::?relay`; Banked call to: bdb_RepLoadCfgRecords
        MOV       A,R1
        JZ        ??bdb_ProcessInReadReportCfgCmd_5
//  711   {
//  712     osal_mem_free(readReportCfgRspCmd);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  713     return ( FALSE ); //Out of memory
??bdb_ProcessInReadReportCfgCmd_0:
        MOV       R1,#0x0
        LJMP      ??bdb_ProcessInReadReportCfgCmd_6 & 0xFFFF
//  714   }
//  715 
//  716   readReportCfgRspCmd->numAttr=0;
??bdb_ProcessInReadReportCfgCmd_5:
        MOV       DPL,?V2
        MOV       DPH,?V3
        CLR       A
        MOVX      @DPTR,A
//  717   for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
        MOV       R6,#0x0
        SJMP      ??bdb_ProcessInReadReportCfgCmd_7
//  718   {
//  719     reportRspRec = &(readReportCfgRspCmd->attrList[i]);
//  720     status = ZCL_STATUS_SUCCESS;  // assume success for this rsp record
//  721     
//  722     uint8 atrrCfgRecordIndex =  bdb_repAttrCfgRecordsArraySearch( pInMsg->endPoint, pInMsg->clusterId, readReportCfgCmd->attrList[i].attrID );
//  723     uint8 status2 = zclFindAttrRec( pInMsg->endPoint, pInMsg->clusterId, readReportCfgCmd->attrList[i].attrID, &attrRec );
//  724     if( atrrCfgRecordIndex != BDBREPORTING_INVALIDINDEX && status2 )
//  725     {
//  726       if ( attrRec.attr.accessControl & ACCESS_REPORTABLE )
//  727       {
//  728         // Get the Reporting Configuration
//  729         reportRspRec->dataType = attrRec.attr.dataType;
//  730         reportRspRec->minReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].minReportInt;
//  731         reportRspRec->maxReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].maxReportInt;
//  732         reportRspRec->reportableChange = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange;
//  733       }
//  734       else
//  735       {
//  736         // Attribute not in the Mandatory Reportable Attribute list
//  737         status = ZCL_STATUS_UNREPORTABLE_ATTRIBUTE;
//  738       }      
//  739     }
//  740     else
//  741     {
//  742       // Attribute not found
//  743       status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
??bdb_ProcessInReadReportCfgCmd_8:
        MOV       R7,#-0x7a
//  744     }
//  745     reportRspRec->status = status;
??bdb_ProcessInReadReportCfgCmd_9:
        MOV       A,R7
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      @DPTR,A
//  746     reportRspRec->direction = readReportCfgCmd->attrList[i].direction;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOVX      @DPTR,A
//  747     reportRspRec->attrID = readReportCfgCmd->attrList[i].attrID;
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  748     readReportCfgRspCmd->numAttr++;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
        INC       R6
??bdb_ProcessInReadReportCfgCmd_7:
        MOV       A,?V4
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,?V4
        ADD       A,#0x8
        MOV       ?V12,A
        CLR       A
        ADDC      A,?V5
        MOV       ?V13,A
        MOV       DPL,?V12
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V14
        MOV       DPH,?V15
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??bdb_ProcessInReadReportCfgCmd_10 & 0xFFFF
        MOV       A,R6
        MOV       R4,A
        MOV       B,#0xd
        MUL       AB
        MOV       ?V0,A
        MOV       A,B
        MOV       ?V1,A
        MOV       A,?V2
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,?V3
        ADDC      A,?V1
        MOV       DPH,A
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       R7,#0x0
        MOV       A,R4
        MOV       B,#0x3
        MUL       AB
        MOV       R4,A
        MOV       R5,B
        MOV       A,?V14
        ADD       A,R4
        MOV       R4,A
        MOV       A,?V15
        ADDC      A,R5
        MOV       R5,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V9,A
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArraySearch
        MOV       DPL,?V8
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        LCALL     `??bdb_repAttrCfgRecordsArraySearch::?relay`; Banked call to: bdb_repAttrCfgRecordsArraySearch
        MOV       A,R1
        MOV       ?V6,A
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,?V4
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R1
        MOV       R0,A
        MOV       A,#-0x1
        XRL       A,?V6
        JNZ       $+5
        LJMP      ??bdb_ProcessInReadReportCfgCmd_8 & 0xFFFF
        MOV       A,R1
        JNZ       $+5
        LJMP      ??bdb_ProcessInReadReportCfgCmd_8 & 0xFFFF
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.2
        JC        $+5
        LJMP      ??bdb_ProcessInReadReportCfgCmd_11 & 0xFFFF
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,?V6
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0xd
        MOV       R0,A
        JNC       ??bdb_ProcessInReadReportCfgCmd_12
        INC       R1
??bdb_ProcessInReadReportCfgCmd_12:
        MOV       A,?V0
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        LJMP      ??bdb_ProcessInReadReportCfgCmd_9 & 0xFFFF
??bdb_ProcessInReadReportCfgCmd_11:
        MOV       R7,#-0x74
        LJMP      ??bdb_ProcessInReadReportCfgCmd_9 & 0xFFFF
//  749   }
//  750   
//  751   // Send the response back
//  752   zcl_SendReadReportCfgRspCmd( pInMsg->endPoint, &(pInMsg->srcAddr),
//  753                                pInMsg->clusterId, readReportCfgRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
//  754                                true, pInMsg->zclHdr.transSeqNum );
??bdb_ProcessInReadReportCfgCmd_10:
        ; Setup parameters for call to function zcl_SendReadReportCfgRspCmd
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       A,?V4
        ADD       A,#0xa
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??zcl_SendReadReportCfgRspCmd::?relay`; Banked call to: zcl_SendReadReportCfgRspCmd
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  755   osal_mem_free( readReportCfgRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  756   
//  757   bdb_repAttrCfgRecordsArrayFreeAll( );//Free reporting cfg array from memory, its saved in NV
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
        LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
//  758 
//  759   return ( TRUE );
        MOV       R1,#0x1
??bdb_ProcessInReadReportCfgCmd_6:
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
//  760 }
          CFI EndBlock cfiBlock8
//  761 
//  762 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  763 void bdb_RepUpdateMarkBindings( void )
bdb_RepUpdateMarkBindings:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function bdb_RepUpdateMarkBindings
        CODE
//  764 {
        FUNCALL bdb_RepUpdateMarkBindings, bdb_RepMarkHasBindingInEndpointClusterArray
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepUpdateMarkBindings, bindFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepUpdateMarkBindings, bdb_RepMarkHasBindingInEndpointClusterArray
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepUpdateMarkBindings, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepUpdateMarkBindings, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepUpdateMarkBindings, bdb_RepStartReporting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  765   uint8 numMarkedEntries = 0;
        MOV       ?V4,#0x0
//  766   uint8 i;
//  767   for(i=0; i<bdb_reportingClusterEndpointArrayCount; i++)
        MOV       ?V5,#0x0
        SJMP      ??bdb_RepUpdateMarkBindings_0
//  768   {
//  769     BindingEntry_t* bEntry = bindFind( bdb_reportingClusterEndpointArray[i].endpoint,bdb_reportingClusterEndpointArray[i].cluster,0 ); 
//  770     if(bEntry !=  NULL)
//  771     { //Found a binding with the given cluster and endpoint, mark the Endpoint-cluster entry (this activates reporting)
//  772       if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK ) == BDBREPORTING_FALSE )
//  773       {
//  774         bdb_RepMarkHasBindingInEndpointClusterArray( bdb_reportingClusterEndpointArray[i].endpoint, bdb_reportingClusterEndpointArray[i].cluster, BDBREPORTING_FALSE, BDBREPORTING_IGNORE );
//  775       }
//  776       numMarkedEntries++;
//  777     }
//  778     else
//  779     {
//  780       if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK) == BDBREPORTING_TRUE )
??bdb_RepUpdateMarkBindings_1:
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_RepUpdateMarkBindings_2
//  781       {
//  782         bdb_RepMarkHasBindingInEndpointClusterArray( bdb_reportingClusterEndpointArray[i].endpoint, bdb_reportingClusterEndpointArray[i].cluster, BDBREPORTING_TRUE, BDBREPORTING_IGNORE );
        ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
        MOV       R5,#-0x1
        MOV       R4,#0x1
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_RepMarkHasBindingInEndpointClusterArray::`; Banked call to: bdb_RepMarkHasBindingInEndpointClusterArray
//  783       }
//  784     }
??bdb_RepUpdateMarkBindings_2:
        INC       ?V5
??bdb_RepUpdateMarkBindings_0:
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V5
        CLR       C
        SUBB      A,R0
        JNC       ??bdb_RepUpdateMarkBindings_3
        MOV       A,?V5
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       ?V2,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       ?V3,A
        MOV       DPL,?V2
        MOV       DPH,A
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
        MOV       A,?V2
        ADD       A,#0x2
        MOV       ?V0,A
        CLR       A
        ADDC      A,?V3
        MOV       ?V1,A
        ; Setup parameters for call to function bindFind
        MOV       R4,#0x0
        MOV       DPL,?V0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bindFind::?relay`; Banked call to: bindFind
        MOV       A,R2
        ORL       A,R3
        MOV       DPL,?V2
        MOV       DPH,?V3
        JZ        ??bdb_RepUpdateMarkBindings_1
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        ??bdb_RepUpdateMarkBindings_4
        ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
        MOV       R5,#-0x1
        MOV       R4,#0x0
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_RepMarkHasBindingInEndpointClusterArray::`; Banked call to: bdb_RepMarkHasBindingInEndpointClusterArray
??bdb_RepUpdateMarkBindings_4:
        INC       ?V4
        SJMP      ??bdb_RepUpdateMarkBindings_2
//  785   }
//  786   
//  787   //Checking is bdb_reporting timer is active
//  788   if( osal_get_timeoutEx( bdb_TaskID, BDB_REPORT_TIMEOUT) > 0 )
??bdb_RepUpdateMarkBindings_3:
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JZ        ??bdb_RepUpdateMarkBindings_5
//  789   {
//  790     //If timer is active
//  791     if( numMarkedEntries == 0 ) //No entries
        MOV       A,?V4
        JNZ       ??bdb_RepUpdateMarkBindings_6
//  792     {
//  793       //Stop Timer
//  794       osal_stop_timerEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        SJMP      ??bdb_RepUpdateMarkBindings_6
//  795     }
//  796   }
//  797   else
//  798   {
//  799     if( numMarkedEntries > 0 )
??bdb_RepUpdateMarkBindings_5:
        MOV       A,?V4
        JZ        ??bdb_RepUpdateMarkBindings_6
//  800     {
//  801       //Start timer
//  802       bdb_RepStartReporting( );      
        ; Setup parameters for call to function bdb_RepStartReporting
        LCALL     `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
//  803     }
//  804   }
//  805 }
??bdb_RepUpdateMarkBindings_6:
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  806 
//  807 /*********************************************************************
//  808  * LOCAL FUNCTIONS DEFINITIONS
//  809  */
//  810 
//  811 /*
//  812 * Begin: Single linked list for attributes in a cluster-endpoint live entry methods 
//  813 */
//  814 
//  815 /*********************************************************************
//  816  * @fn      bdb_InitReportAttrLiveValues
//  817  *
//  818  * @brief   Set the bdbReportAttrLive_t fields to initiation values
//  819  *
//  820  * @param   item - Data to initiate
//  821  *
//  822  * @return 
//  823  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  824 static void bdb_InitReportAttrLiveValues( bdbReportAttrLive_t* item )
bdb_InitReportAttrLiveValues:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function bdb_InitReportAttrLiveValues
        CODE
//  825 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  826   uint8 i;
//  827   for( i=0; i<BDBREPORTING_MAX_ANALOG_ATTR_SIZE; i++ )
        MOV       R4,#0x0
        SJMP      ??bdb_InitReportAttrLiveValues_0
//  828   {
//  829     item->lastValueReported[i] = 0x00;
??bdb_InitReportAttrLiveValues_1:
        MOV       A,R4
        MOV       R0,A
        MOV       A,R2
        ADD       A,R0
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  830     item->reportableChange[i] = 0x00;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  831   }
        INC       R4
??bdb_InitReportAttrLiveValues_0:
        MOV       A,R4
        CLR       C
        SUBB      A,#0x4
        JC        ??bdb_InitReportAttrLiveValues_1
//  832   item->attrID = 0x0000;
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  833 
//  834 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock10
//  835 
//  836 /*********************************************************************
//  837  * @fn      bdb_linkedListAttrInit
//  838  *
//  839  * @brief   Initates a linked list for the attrs in the cluster-endpoint entry
//  840  *
//  841  * @param   list - Pointer to linked list
//  842  *
//  843  * @return 
//  844  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  845 static void bdb_linkedListAttrInit( bdbAttrLinkedListAttr_t *list )
bdb_linkedListAttrInit:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function bdb_linkedListAttrInit
        CODE
//  846 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  847   list->head = NULL;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  848   list->numItems = 0;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
//  849 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock11
//  850 
//  851 /*********************************************************************
//  852  * @fn      bdb_linkedListAttrAdd
//  853  *
//  854  * @brief   Initates a linked list for the attrs in the cluster-endpoint entry
//  855  *
//  856  * @param   list - Pointer to linked list
//  857  *
//  858  * @return  Status code (BDBREPORTING_SUCCESS or BDBREPORTING_ERROR)
//  859  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  860 static uint8 bdb_linkedListAttrAdd( bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t* data )
bdb_linkedListAttrAdd:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function bdb_linkedListAttrAdd
        CODE
//  861 {
        FUNCALL bdb_linkedListAttrAdd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  862   bdbLinkedListAttrItem_t* newItem = (bdbLinkedListAttrItem_t *)osal_mem_alloc( sizeof(bdbLinkedListAttrItem_t) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  863   if( newItem == NULL )
        MOV       A,R2
        ORL       A,R1
        JNZ       ??bdb_linkedListAttrAdd_0
//  864   {
//  865     return BDBREPORTING_ERROR;
        MOV       R1,#0x1
        SJMP      ??bdb_linkedListAttrAdd_1
//  866   }
//  867   newItem->data = data;
??bdb_linkedListAttrAdd_0:
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  868   newItem->next = list->head;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
//  869   list->head = newItem;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  870   list->numItems++;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  871   return BDBREPORTING_SUCCESS;
        MOV       R1,#0x0
??bdb_linkedListAttrAdd_1:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  872 }
          CFI EndBlock cfiBlock12
//  873 
//  874 /*********************************************************************
//  875  * @fn      bdb_linkedListAttrSearch
//  876  *
//  877  * @brief   Travers the linked list and search for a node (bdbReportAttrLive_t 
//  878  *          data) with a specific attrID
//  879  *
//  880  * @param   list - Pointer to linked list
//  881  * @param   searchdata - data to search the list (has a specific attrID)
//  882  *
//  883  * @return  A pointer to the node in the list has the searched data, NULL if 
//  884  *          not found
//  885  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  886 static bdbLinkedListAttrItem_t* bdb_linkedListAttrSearch( bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t* searchdata )
bdb_linkedListAttrSearch:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function bdb_linkedListAttrSearch
        CODE
//  887 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  888   bdbLinkedListAttrItem_t* cur = list->head;
        MOV       DPL,R2
        MOV       DPH,R3
        SJMP      ??bdb_linkedListAttrSearch_0
//  889   while( cur != NULL )
//  890   {
//  891     if( EQUAL_LLISTITEMDATA( (*(cur->data)), (*searchdata) ) )
//  892     {
//  893       return cur;
//  894     }
//  895     cur = cur->next;
??bdb_linkedListAttrSearch_1:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
??bdb_linkedListAttrSearch_0:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_linkedListAttrSearch_2
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_linkedListAttrSearch_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??bdb_linkedListAttrSearch_3:
        JNZ       ??bdb_linkedListAttrSearch_1
        SJMP      ??bdb_linkedListAttrSearch_4
//  896   }
//  897   return NULL;
??bdb_linkedListAttrSearch_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_linkedListAttrSearch_4:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
//  898 }
          CFI EndBlock cfiBlock13
//  899 
//  900 /*********************************************************************
//  901  * @fn      bdb_linkedListAttrRemove
//  902  *
//  903  * @brief   Remove the head node from the list
//  904  *
//  905  * @param   list - Pointer to linked list
//  906  *
//  907  * @return  A pointer to the data part of the deleted node, NULL if no node was deleted
//  908  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  909 static bdbReportAttrLive_t* bdb_linkedListAttrRemove( bdbAttrLinkedListAttr_t *list )
bdb_linkedListAttrRemove:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function bdb_linkedListAttrRemove
        CODE
//  910 {
        FUNCALL bdb_linkedListAttrRemove, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  911   bdbReportAttrLive_t* resdata = NULL;
//  912   bdbLinkedListAttrItem_t* cur = list->head;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOV       R4,DPL
        MOV       R5,DPH
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
//  913   if( list->head == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_linkedListAttrRemove_0
//  914   {
//  915     return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??bdb_linkedListAttrRemove_1
//  916   }
//  917   list->head = cur->next;
??bdb_linkedListAttrRemove_0:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  918   resdata =cur->data;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  919   osal_mem_free( cur );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  920   list->numItems--;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        DEC       A
        MOVX      @DPTR,A
//  921   return resdata;
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
??bdb_linkedListAttrRemove_1:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
//  922 }
          CFI EndBlock cfiBlock14
//  923 
//  924 /*********************************************************************
//  925  * @fn      bdb_linkedListAttrFreeAll
//  926  *
//  927  * @brief   Deletes and deallocates all the memory from the linked list
//  928  *
//  929  * @param   list - Pointer to linked list
//  930  *
//  931  * @return  BDBREPORTING_SUCCESS if operation was successful
//  932  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  933 static uint8 bdb_linkedListAttrFreeAll( bdbAttrLinkedListAttr_t *list )
bdb_linkedListAttrFreeAll:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function bdb_linkedListAttrFreeAll
        CODE
//  934 {
        FUNCALL bdb_linkedListAttrFreeAll, bdb_linkedListAttrRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_linkedListAttrFreeAll, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        SJMP      ??bdb_linkedListAttrFreeAll_0
//  935   bdbReportAttrLive_t* toremovedata;
//  936   while( list->head != NULL  )
//  937   {
//  938     toremovedata = bdb_linkedListAttrRemove( list );
//  939     osal_mem_free( toremovedata );
??bdb_linkedListAttrFreeAll_1:
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function bdb_linkedListAttrRemove
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_linkedListAttrRemove::?relay`; Banked call to: bdb_linkedListAttrRemove
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  940   }
??bdb_linkedListAttrFreeAll_0:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_linkedListAttrFreeAll_1
//  941   return BDBREPORTING_SUCCESS;
        MOV       R1,#0x0
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
//  942 }
          CFI EndBlock cfiBlock15
//  943 
//  944 /*********************************************************************
//  945  * @fn      bdb_linkedListAttrClearList
//  946  *
//  947  * @brief   Clears the list without freeing the nodes memory
//  948  *
//  949  * @param   list - Pointer to linked list
//  950  *
//  951  * @return 
//  952  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  953 static void bdb_linkedListAttrClearList( bdbAttrLinkedListAttr_t *list )
bdb_linkedListAttrClearList:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function bdb_linkedListAttrClearList
        CODE
//  954 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  955   list->head = NULL;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  956   list->numItems = 0;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
//  957 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock16
//  958 
//  959 /*********************************************************************
//  960  * @fn      bdb_linkedListAttrGetAtIndex
//  961  *
//  962  * @brief   Returns the ith element of the list starting from the head
//  963  *
//  964  * @param   list - Pointer to linked list
//  965  *
//  966  * @return  A pointer to the ith node element
//  967  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  968 static bdbLinkedListAttrItem_t* bdb_linkedListAttrGetAtIndex( bdbAttrLinkedListAttr_t *list, uint8 index )
bdb_linkedListAttrGetAtIndex:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function bdb_linkedListAttrGetAtIndex
        CODE
//  969 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  970   if( index > list->numItems-1 )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOV       R4,A
        CLR       A
        ADDC      A,#-0x1
        MOV       R5,A
        MOV       A,R1
        MOV       R6,A
        CLR       C
        MOV       A,R4
        SUBB      A,R6
        MOV       A,R5
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??bdb_linkedListAttrGetAtIndex_0
//  971   {
//  972     return NULL;
//  973   }
//  974   bdbLinkedListAttrItem_t* cur = list->head;
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
//  975   uint8 i;
//  976   for( i=0; i<=index; i++ )
        MOV       R0,#0x0
        SJMP      ??bdb_linkedListAttrGetAtIndex_1
//  977   {
//  978     if( cur == NULL )
//  979     {
//  980       return NULL;
//  981     }
//  982     if( i < index )
??bdb_linkedListAttrGetAtIndex_2:
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??bdb_linkedListAttrGetAtIndex_3
//  983     {
//  984       cur = cur->next;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
//  985     }
??bdb_linkedListAttrGetAtIndex_3:
        INC       R0
??bdb_linkedListAttrGetAtIndex_1:
        MOV       A,R1
        CLR       C
        SUBB      A,R0
        JC        ??bdb_linkedListAttrGetAtIndex_4
        MOV       A,R2
        ORL       A,R3
        JNZ       ??bdb_linkedListAttrGetAtIndex_2
??bdb_linkedListAttrGetAtIndex_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
//  986   }
//  987   return cur;
??bdb_linkedListAttrGetAtIndex_4:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
//  988 }
          CFI EndBlock cfiBlock17
//  989 
//  990 /*
//  991 * End: Single linked list for attributes in a cluster-endpoint entry methods
//  992 */
//  993 
//  994 
//  995 /*
//  996 * Begin: Cluster-endpoint array live methods
//  997 */
//  998 
//  999 /*********************************************************************
// 1000  * @fn      bdb_clusterEndpointArrayInit
// 1001  *
// 1002  * @brief   Initiates the clusterEndpoint array variables
// 1003  *
// 1004  * @return  
// 1005  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1006 static void bdb_clusterEndpointArrayInit( void )
bdb_clusterEndpointArrayInit:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function bdb_clusterEndpointArrayInit
        CODE
// 1007 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1008   bdb_reportingClusterEndpointArrayCount = 0;
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        CLR       A
        MOVX      @DPTR,A
// 1009 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock18
// 1010 
// 1011 /*********************************************************************
// 1012  * @fn      bdb_clusterEndpointArrayAdd
// 1013  *
// 1014  * @brief   Adds a new entry to the clusterEndpoint array
// 1015  *
// 1016  * @param   endpoint - Endpoint ID of the entry
// 1017  * @param   cluster - Cluster ID of the entry
// 1018  * @param   consolidatedMinReportInterval - Cluster ID of the entry
// 1019 
// 1020  *
// 1021  * @return  A pointer to the ith node element
// 1022  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1023 static uint8 bdb_clusterEndpointArrayAdd( uint8 endpoint, uint16 cluster, uint16 consolidatedMinReportInt, uint16 consolidatedMaxReportInt, uint16 timeSinceLastReport )
bdb_clusterEndpointArrayAdd:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function bdb_clusterEndpointArrayAdd
        CODE
// 1024 {
        FUNCALL bdb_clusterEndpointArrayAdd, bdb_linkedListAttrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
// 1025   if( bdb_reportingClusterEndpointArrayCount>=BDB_MAX_CLUSTERENDPOINTS_REPORTING )
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x5
        JC        ??bdb_clusterEndpointArrayAdd_0
// 1026   {
// 1027     return BDBREPORTING_ERROR;
        MOV       R1,#0x1
        LJMP      ??bdb_clusterEndpointArrayAdd_1 & 0xFFFF
// 1028   }
// 1029   bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].endpoint = endpoint;
??bdb_clusterEndpointArrayAdd_0:
        MOVX      A,@DPTR
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R7
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      @DPTR,A
// 1030   bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].cluster = cluster;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1031 
// 1032   bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].consolidatedMinReportInt = consolidatedMinReportInt;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 1033   bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].consolidatedMaxReportInt = consolidatedMaxReportInt;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1034   bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].timeSinceLastReport = timeSinceLastReport;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1035   bdb_linkedListAttrInit( &bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].attrLinkedList );
        ; Setup parameters for call to function bdb_linkedListAttrInit
        MOV       A,R0
        ADD       A,#0xa
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??bdb_linkedListAttrInit::?relay`; Banked call to: bdb_linkedListAttrInit
// 1036   FLAGS_TURNOFFALLFLAGS( bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].flags );
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
// 1037   
// 1038   bdb_reportingClusterEndpointArrayCount++;
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
// 1039   return BDBREPORTING_SUCCESS;
        MOV       R1,#0x0
??bdb_clusterEndpointArrayAdd_1:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 1040 }
          CFI EndBlock cfiBlock19
// 1041 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1042 static uint8 bdb_clusterEndpointArrayGetMin( void )
bdb_clusterEndpointArrayGetMin:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function bdb_clusterEndpointArrayGetMin
        CODE
// 1043 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1044   uint8 indexMin = 0xFF;
        MOV       R4,#-0x1
// 1045   uint16 ValueMin = 0xFFFF;
        MOV       R6,#-0x1
        MOV       R7,#-0x1
// 1046   uint16 possibleMin;
// 1047   uint8 i;
// 1048   for( i=0; i<bdb_reportingClusterEndpointArrayCount; i++ )
        MOV       R5,#0x0
        SJMP      ??bdb_clusterEndpointArrayGetMin_0
// 1049   {
// 1050     if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK ) == BDBREPORTING_TRUE )
// 1051     { //Only do with valid entries (HasBinding==true)
// 1052       if( bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_NOPERIODIC &&  
// 1053          bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_REPORTOFF )
// 1054       {
// 1055         //If maxInterval is BDBREPORTING_NOPERIODIC=0x0000 or BDBREPORTING_REPORTOFF=0xFFFF, ignore to calculate min
// 1056         if( ValueMin == 0 )
// 1057         {
// 1058           //stop if we find a minValue of zero because there no other Min less than that
// 1059           break;
// 1060         }
// 1061         possibleMin = bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt - bdb_reportingClusterEndpointArray[i].timeSinceLastReport;
??bdb_clusterEndpointArrayGetMin_1:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        MOV       R0,A
        MOV       A,R3
        SUBB      A,R1
        MOV       R1,A
// 1062         if( possibleMin<ValueMin )
        CLR       C
        MOV       A,R0
        SUBB      A,R6
        MOV       A,R1
        SUBB      A,R7
        JNC       ??bdb_clusterEndpointArrayGetMin_2
// 1063         {
// 1064           indexMin = i;
        MOV       A,R5
        MOV       R4,A
// 1065           ValueMin = possibleMin;
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 1066         }
??bdb_clusterEndpointArrayGetMin_2:
        INC       R5
??bdb_clusterEndpointArrayGetMin_0:
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R5
        CLR       C
        SUBB      A,R0
        JNC       ??bdb_clusterEndpointArrayGetMin_3
        MOV       A,R5
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_clusterEndpointArrayGetMin_2
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_clusterEndpointArrayGetMin_2
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??bdb_clusterEndpointArrayGetMin_4
        MOV       A,#-0x1
        XRL       A,R3
??bdb_clusterEndpointArrayGetMin_4:
        JZ        ??bdb_clusterEndpointArrayGetMin_2
        MOV       A,R6
        ORL       A,R7
        JNZ       ??bdb_clusterEndpointArrayGetMin_1
// 1067       }
// 1068     }
// 1069   }
// 1070   return indexMin;
??bdb_clusterEndpointArrayGetMin_3:
        MOV       A,R4
        MOV       R1,A
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 1071 
// 1072 }
          CFI EndBlock cfiBlock20
// 1073 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1074 static uint8 bdb_clusterEndpointArrayRemoveAt( uint8 index )
bdb_clusterEndpointArrayRemoveAt:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function bdb_clusterEndpointArrayRemoveAt
        CODE
// 1075 {
        FUNCALL bdb_clusterEndpointArrayRemoveAt, bdb_linkedListAttrFreeAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_clusterEndpointArrayRemoveAt, bdb_clusterEndpointArrayMoveTo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 1076   if( index>=bdb_reportingClusterEndpointArrayCount )
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R1
        CLR       C
        SUBB      A,R0
        JC        ??bdb_clusterEndpointArrayRemoveAt_0
// 1077   {
// 1078     return BDBREPORTING_ERROR;
        MOV       R1,#0x1
        SJMP      ??bdb_clusterEndpointArrayRemoveAt_1
// 1079   }
// 1080   //Freeing list, all the other fields are not dynamic
// 1081   bdb_linkedListAttrFreeAll( &bdb_reportingClusterEndpointArray[index].attrLinkedList );
??bdb_clusterEndpointArrayRemoveAt_0:
        ; Setup parameters for call to function bdb_linkedListAttrFreeAll
        MOV       A,R1
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#(bdb_reportingClusterEndpointArray + 10) & 0xff
        ADD       A,R0
        MOV       R2,A
        MOV       A,#((bdb_reportingClusterEndpointArray + 10) >> 8) & 0xff
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??bdb_linkedListAttrFreeAll::?relay`; Banked call to: bdb_linkedListAttrFreeAll
// 1082   //moving last element to free slot
// 1083   bdb_clusterEndpointArrayMoveTo( index, bdb_reportingClusterEndpointArrayCount-1 );
        ; Setup parameters for call to function bdb_clusterEndpointArrayMoveTo
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        DEC       A
        MOV       R2,A
        MOV       A,R6
        MOV       R1,A
        LCALL     `??bdb_clusterEndpointArrayMoveTo::?relay`; Banked call to: bdb_clusterEndpointArrayMoveTo
// 1084   bdb_reportingClusterEndpointArrayCount--;
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        DEC       A
        MOVX      @DPTR,A
// 1085   return BDBREPORTING_SUCCESS;
        MOV       R1,#0x0
??bdb_clusterEndpointArrayRemoveAt_1:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 1086 }
          CFI EndBlock cfiBlock21
// 1087 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1088 static void bdb_clusterEndpointArrayMoveTo( uint8 indexSrc, uint8 indexDest )
bdb_clusterEndpointArrayMoveTo:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function bdb_clusterEndpointArrayMoveTo
        CODE
// 1089 {
        FUNCALL bdb_clusterEndpointArrayMoveTo, bdb_linkedListAttrClearList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1090   bdb_reportingClusterEndpointArray[indexSrc].cluster = bdb_reportingClusterEndpointArray[indexDest].cluster;
        MOV       A,R1
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R2
        MOV       B,#0xd
        MUL       AB
        MOV       R2,A
        MOV       R3,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R2
        MOV       R2,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R3
        MOV       ?V0,R2
        MOV       ?V1,A
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1091   bdb_reportingClusterEndpointArray[indexSrc].endpoint = bdb_reportingClusterEndpointArray[indexDest].endpoint;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      @DPTR,A
// 1092   bdb_reportingClusterEndpointArray[indexSrc].consolidatedMaxReportInt = bdb_reportingClusterEndpointArray[indexDest].consolidatedMaxReportInt;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1093   bdb_reportingClusterEndpointArray[indexSrc].consolidatedMinReportInt = bdb_reportingClusterEndpointArray[indexDest].consolidatedMinReportInt;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1094   bdb_reportingClusterEndpointArray[indexSrc].timeSinceLastReport = bdb_reportingClusterEndpointArray[indexDest].timeSinceLastReport;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1095   bdb_reportingClusterEndpointArray[indexSrc].attrLinkedList = bdb_reportingClusterEndpointArray[indexDest].attrLinkedList;
        MOV       A,?V0
        ADD       A,#0xa
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,A
        MOV       A,R0
        ADD       A,#0xa
        MOV       R4,A
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        MOV       A,#0x3
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1096   bdb_reportingClusterEndpointArray[indexSrc].flags = bdb_reportingClusterEndpointArray[indexDest].flags;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      @DPTR,A
// 1097   bdb_linkedListAttrClearList( &bdb_reportingClusterEndpointArray[indexDest].attrLinkedList );
        ; Setup parameters for call to function bdb_linkedListAttrClearList
        LCALL     `??bdb_linkedListAttrClearList::?relay`; Banked call to: bdb_linkedListAttrClearList
// 1098 }
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock22
// 1099 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1100 static uint8 bdb_clusterEndpointArrayUpdateAt( uint8 index, uint16 newTimeSinceLastReport, uint8 markHasBinding, uint8 markNoNextIncrement )
bdb_clusterEndpointArrayUpdateAt:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function bdb_clusterEndpointArrayUpdateAt
        CODE
// 1101 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1102   if( index >= bdb_reportingClusterEndpointArrayCount )
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R1
        CLR       C
        SUBB      A,R0
        JC        ??bdb_clusterEndpointArrayUpdateAt_0
// 1103   {
// 1104     return BDBREPORTING_ERROR;
        MOV       R1,#0x1
        SJMP      ??bdb_clusterEndpointArrayUpdateAt_1
// 1105   }
// 1106   bdb_reportingClusterEndpointArray[index].timeSinceLastReport = newTimeSinceLastReport;
??bdb_clusterEndpointArrayUpdateAt_0:
        MOV       A,R1
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1107   if( markHasBinding != BDBREPORTING_IGNORE )
        MOV       A,#-0x1
        XRL       A,R4
        JZ        ??bdb_clusterEndpointArrayUpdateAt_2
// 1108   {
// 1109     if( markHasBinding == BDBREPORTING_TRUE )
        MOV       A,#0x1
        XRL       A,R4
        MOV       DPL,R0
        MOV       DPH,R1
        JNZ       ??bdb_clusterEndpointArrayUpdateAt_3
// 1110     {
// 1111       FLAGS_TURNONFLAG( bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_HASBINDING_FLAG_MASK );
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.0
        SJMP      ??bdb_clusterEndpointArrayUpdateAt_4
// 1112     }
// 1113     else
// 1114     {
// 1115       FLAGS_TURNOFFFLAG( bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_HASBINDING_FLAG_MASK );
??bdb_clusterEndpointArrayUpdateAt_3:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.0
??bdb_clusterEndpointArrayUpdateAt_4:
        MOVX      @DPTR,A
// 1116     }
// 1117   }
// 1118   if( markNoNextIncrement != BDBREPORTING_IGNORE )
??bdb_clusterEndpointArrayUpdateAt_2:
        MOV       A,#-0x1
        XRL       A,R5
        JZ        ??bdb_clusterEndpointArrayUpdateAt_5
// 1119   {
// 1120     if( markNoNextIncrement == BDBREPORTING_TRUE )
        MOV       A,#0x1
        XRL       A,R5
        MOV       DPL,R0
        MOV       DPH,R1
        JNZ       ??bdb_clusterEndpointArrayUpdateAt_6
// 1121     {
// 1122       FLAGS_TURNONFLAG( bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK );
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.1
        SJMP      ??bdb_clusterEndpointArrayUpdateAt_7
// 1123     }
// 1124     else
// 1125     {
// 1126       FLAGS_TURNOFFFLAG( bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK );
??bdb_clusterEndpointArrayUpdateAt_6:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.1
??bdb_clusterEndpointArrayUpdateAt_7:
        MOVX      @DPTR,A
// 1127     }
// 1128   }
// 1129   return BDBREPORTING_SUCCESS;
??bdb_clusterEndpointArrayUpdateAt_5:
        MOV       R1,#0x0
??bdb_clusterEndpointArrayUpdateAt_1:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 1130 }
          CFI EndBlock cfiBlock23
// 1131 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1132 static void bdb_clusterEndpointArrayFreeAll( )
bdb_clusterEndpointArrayFreeAll:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function bdb_clusterEndpointArrayFreeAll
        CODE
// 1133 {
        FUNCALL bdb_clusterEndpointArrayFreeAll, bdb_clusterEndpointArrayRemoveAt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1134   uint8 i;
// 1135   uint8 numElements = bdb_reportingClusterEndpointArrayCount;
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       R7,A
// 1136   for( i=0; i<numElements; i++ )
        MOV       R6,#0x0
        SJMP      ??bdb_clusterEndpointArrayFreeAll_0
// 1137   {
// 1138     bdb_clusterEndpointArrayRemoveAt( 0 );
??bdb_clusterEndpointArrayFreeAll_1:
        ; Setup parameters for call to function bdb_clusterEndpointArrayRemoveAt
        MOV       R1,#0x0
        LCALL     `??bdb_clusterEndpointArrayRemoveAt::?relay`; Banked call to: bdb_clusterEndpointArrayRemoveAt
// 1139   }
        INC       R6
??bdb_clusterEndpointArrayFreeAll_0:
        MOV       A,R6
        CLR       C
        SUBB      A,R7
        JC        ??bdb_clusterEndpointArrayFreeAll_1
// 1140 }
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24
// 1141 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1142 static uint8 bdb_clusterEndpointArraySearch( uint8 endpoint, uint16 cluster )
bdb_clusterEndpointArraySearch:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function bdb_clusterEndpointArraySearch
        CODE
// 1143 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
// 1144   uint8 i;
// 1145   uint8 foundIndex = BDBREPORTING_INVALIDINDEX;
        MOV       R1,#-0x1
// 1146   for( i=0; i<bdb_reportingClusterEndpointArrayCount; i++ )
        MOV       R0,#0x0
        SJMP      ??bdb_clusterEndpointArraySearch_0
??bdb_clusterEndpointArraySearch_1:
        INC       R0
??bdb_clusterEndpointArraySearch_0:
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,R0
        CLR       C
        SUBB      A,R4
        JNC       ??bdb_clusterEndpointArraySearch_2
// 1147   {
// 1148     if( bdb_reportingClusterEndpointArray[i].endpoint == endpoint && bdb_reportingClusterEndpointArray[i].cluster == cluster )
        MOV       A,R0
        MOV       B,#0xd
        MUL       AB
        MOV       R4,A
        MOV       R5,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R4
        MOV       R4,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R5
        MOV       R5,A
        MOV       DPL,R4
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
        JNZ       ??bdb_clusterEndpointArraySearch_1
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_clusterEndpointArraySearch_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_clusterEndpointArraySearch_3:
        JNZ       ??bdb_clusterEndpointArraySearch_1
// 1149     {
// 1150       foundIndex = i;
        MOV       A,R0
        MOV       R1,A
// 1151       break;
// 1152     }
// 1153   }
// 1154   return foundIndex;
??bdb_clusterEndpointArraySearch_2:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 1155 }
          CFI EndBlock cfiBlock25
// 1156 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1157 static void bdb_clusterEndpointArrayIncrementAll( uint16 timeSinceLastReportIncrement, uint8 CheckNoIncrementFlag )
bdb_clusterEndpointArrayIncrementAll:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function bdb_clusterEndpointArrayIncrementAll
        CODE
// 1158 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V3,R1
// 1159   uint8 i;
// 1160   uint8 doIncrement;
// 1161   for( i=0; i<bdb_reportingClusterEndpointArrayCount; i++ )
        MOV       ?V2,#0x0
        SJMP      ??bdb_clusterEndpointArrayIncrementAll_0
// 1162   {
// 1163     doIncrement = BDBREPORTING_FALSE;
// 1164     if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK ) == BDBREPORTING_TRUE )
// 1165     { 
// 1166       //Only do with valid entries (HasBinding==true)
// 1167       if( CheckNoIncrementFlag == BDBREPORTING_FALSE )
// 1168       {
// 1169         doIncrement = BDBREPORTING_TRUE;
// 1170       }
// 1171       else
// 1172       {
// 1173         if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK ) == BDBREPORTING_FALSE )
// 1174         {
// 1175           doIncrement = BDBREPORTING_TRUE;
// 1176         }
// 1177       }
// 1178       if( doIncrement == BDBREPORTING_TRUE )
// 1179       {
// 1180         if( bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_NOPERIODIC &&  bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_REPORTOFF )
// 1181         {
// 1182           bdb_reportingClusterEndpointArray[i].timeSinceLastReport = (bdb_reportingClusterEndpointArray[i].timeSinceLastReport+timeSinceLastReportIncrement 
// 1183                                                                       > bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt)? 
// 1184                                                                       bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt: 
// 1185                                                                       bdb_reportingClusterEndpointArray[i].timeSinceLastReport+timeSinceLastReportIncrement;
??bdb_clusterEndpointArrayIncrementAll_1:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,R2
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R3
??bdb_clusterEndpointArrayIncrementAll_2:
        MOV       R5,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 1186         }
// 1187       }
// 1188       FLAGS_TURNOFFFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK ); //Always turn off, one shot functionality
??bdb_clusterEndpointArrayIncrementAll_3:
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.1
        MOVX      @DPTR,A
??bdb_clusterEndpointArrayIncrementAll_4:
        INC       ?V2
??bdb_clusterEndpointArrayIncrementAll_0:
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V2
        CLR       C
        SUBB      A,R0
        JNC       ??bdb_clusterEndpointArrayIncrementAll_5
        MOV       R4,#0x0
        MOV       A,?V2
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_clusterEndpointArrayIncrementAll_4
        MOV       A,?V3
        JZ        ??bdb_clusterEndpointArrayIncrementAll_6
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        ??bdb_clusterEndpointArrayIncrementAll_7
??bdb_clusterEndpointArrayIncrementAll_6:
        MOV       R4,#0x1
??bdb_clusterEndpointArrayIncrementAll_7:
        MOV       A,#0x1
        XRL       A,R4
        JNZ       ??bdb_clusterEndpointArrayIncrementAll_3
        MOV       A,R0
        ADD       A,#0x6
        MOV       R4,A
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        MOV       DPL,R4
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_clusterEndpointArrayIncrementAll_3
        MOV       A,#-0x1
        XRL       A,?V0
        JNZ       ??bdb_clusterEndpointArrayIncrementAll_8
        MOV       A,#-0x1
        XRL       A,?V1
??bdb_clusterEndpointArrayIncrementAll_8:
        JZ        ??bdb_clusterEndpointArrayIncrementAll_3
        MOV       A,R0
        ADD       A,#0x8
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        MOV       R7,A
        MOV       DPL,R6
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,R2
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R3
        MOV       ?V5,A
        CLR       C
        MOV       A,?V0
        SUBB      A,?V4
        MOV       A,?V1
        SUBB      A,?V5
        JC        $+5
        LJMP      ??bdb_clusterEndpointArrayIncrementAll_1 & 0xFFFF
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        LJMP      ??bdb_clusterEndpointArrayIncrementAll_2 & 0xFFFF
// 1189       
// 1190     }
// 1191   }
// 1192 }
??bdb_clusterEndpointArrayIncrementAll_5:
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock26
// 1193 
// 1194 /*
// 1195 * End: Cluster-endpoint array live data methods
// 1196 */
// 1197 
// 1198 
// 1199 /* 
// 1200 * Begin: Single linked list default attr cfg records methods
// 1201 */
// 1202 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1203 static void bdb_repAttrDefaultCfgRecordInitValues( bdbReportAttrDefaultCfgData_t* item )
bdb_repAttrDefaultCfgRecordInitValues:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function bdb_repAttrDefaultCfgRecordInitValues
        CODE
// 1204 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1205   uint8 i;
// 1206   for( i=0; i<BDBREPORTING_MAX_ANALOG_ATTR_SIZE; i++ )
        MOV       R0,#0x0
        SJMP      ??bdb_repAttrDefaultCfgRecordInitValues_0
// 1207   {
// 1208     item->reportableChange[i] = 0x00;
??bdb_repAttrDefaultCfgRecordInitValues_1:
        MOV       A,R0
        MOV       R4,A
        MOV       A,R2
        ADD       A,R4
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
// 1209   }
        INC       R0
??bdb_repAttrDefaultCfgRecordInitValues_0:
        MOV       A,R0
        CLR       C
        SUBB      A,#0x4
        JC        ??bdb_repAttrDefaultCfgRecordInitValues_1
// 1210   item->attrID = 0x0000;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1211   item->endpoint = 0xFF;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 1212   item->cluster = 0xFFFF;
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1213   item->maxReportInt = 0x0000;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1214   item->minReportInt = 0x0000;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1215 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock27
// 1216 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1217 static void bdb_repAttrDefaultCfgRecordsLinkedListInit( bdbRepAttrDefaultCfgRecordLinkedList_t *list )
bdb_repAttrDefaultCfgRecordsLinkedListInit:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function bdb_repAttrDefaultCfgRecordsLinkedListInit
        CODE
// 1218 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1219   list->head = NULL;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1220   list->numItems = 0;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
// 1221 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock28
// 1222 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1223 static uint8 bdb_repAttrDefaultCfgRecordsLinkedListAdd( bdbRepAttrDefaultCfgRecordLinkedList_t *list, bdbReportAttrDefaultCfgData_t* data )
bdb_repAttrDefaultCfgRecordsLinkedListAdd:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function bdb_repAttrDefaultCfgRecordsLinkedListAdd
        CODE
// 1224 {
        FUNCALL bdb_repAttrDefaultCfgRecordsLinkedListAdd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 1225   bdbRepAttrDefaultCfgRecordLinkedListItem_t* newItem = (bdbRepAttrDefaultCfgRecordLinkedListItem_t *)osal_mem_alloc( sizeof(bdbRepAttrDefaultCfgRecordLinkedListItem_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
// 1226   if( newItem == NULL )
        MOV       A,R2
        ORL       A,R1
        JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListAdd_0
// 1227   {
// 1228     return BDBREPORTING_ERROR;
        MOV       R1,#0x1
        SJMP      ??bdb_repAttrDefaultCfgRecordsLinkedListAdd_1
// 1229   }
// 1230   newItem->data = data;
??bdb_repAttrDefaultCfgRecordsLinkedListAdd_0:
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 1231   newItem->next = list->head;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 1232   list->head = newItem;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1233   list->numItems++;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
// 1234   return BDBREPORTING_SUCCESS;
        MOV       R1,#0x0
??bdb_repAttrDefaultCfgRecordsLinkedListAdd_1:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
// 1235 }
          CFI EndBlock cfiBlock29
// 1236 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1237 static bdbRepAttrDefaultCfgRecordLinkedListItem_t* bdb_repAttrDefaultCfgRecordsLinkedListSearch( bdbRepAttrDefaultCfgRecordLinkedList_t *list, bdbReportAttrDefaultCfgData_t searchdata )
bdb_repAttrDefaultCfgRecordsLinkedListSearch:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function bdb_repAttrDefaultCfgRecordsLinkedListSearch
        CODE
// 1238 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1239   bdbRepAttrDefaultCfgRecordLinkedListItem_t* cur = list->head;
        MOV       DPL,R2
        MOV       DPH,R3
        SJMP      ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_0
// 1240   while( cur != NULL )
// 1241   {
// 1242     if( EQUAL_LLISTCFGATTRITEMDATA( (*(cur->data)), searchdata) )
// 1243     {
// 1244       return cur;
// 1245     }
// 1246     cur = cur->next;
??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
??bdb_repAttrDefaultCfgRecordsLinkedListSearch_0:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_2
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R5
??bdb_repAttrDefaultCfgRecordsLinkedListSearch_3:
        JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??bdb_repAttrDefaultCfgRecordsLinkedListSearch_4:
        JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1
        SJMP      ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_5
// 1247   }
// 1248   return NULL;
??bdb_repAttrDefaultCfgRecordsLinkedListSearch_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_repAttrDefaultCfgRecordsLinkedListSearch_5:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 1249 }
          CFI EndBlock cfiBlock30
// 1250 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1251 static bdbReportAttrDefaultCfgData_t* bdb_repAttrDefaultCfgRecordsLinkedListRemove( bdbRepAttrDefaultCfgRecordLinkedList_t *list )
bdb_repAttrDefaultCfgRecordsLinkedListRemove:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function bdb_repAttrDefaultCfgRecordsLinkedListRemove
        CODE
// 1252 {
        FUNCALL bdb_repAttrDefaultCfgRecordsLinkedListRemove, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1253   bdbReportAttrDefaultCfgData_t* resdata = NULL;
// 1254   bdbRepAttrDefaultCfgRecordLinkedListItem_t* cur = list->head;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOV       R4,DPL
        MOV       R5,DPH
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
// 1255   if( list->head == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListRemove_0
// 1256   {
// 1257     return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??bdb_repAttrDefaultCfgRecordsLinkedListRemove_1
// 1258   }
// 1259   list->head = cur->next;
??bdb_repAttrDefaultCfgRecordsLinkedListRemove_0:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1260   resdata =cur->data;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 1261   osal_mem_free( cur );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1262   list->numItems--;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        DEC       A
        MOVX      @DPTR,A
// 1263   return resdata;
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
??bdb_repAttrDefaultCfgRecordsLinkedListRemove_1:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
// 1264 }
          CFI EndBlock cfiBlock31
// 1265 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1266 static uint8 bdb_repAttrDefaultCfgRecordsLinkedListFreeAll( bdbRepAttrDefaultCfgRecordLinkedList_t *list )
bdb_repAttrDefaultCfgRecordsLinkedListFreeAll:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function bdb_repAttrDefaultCfgRecordsLinkedListFreeAll
        CODE
// 1267 {
        FUNCALL bdb_repAttrDefaultCfgRecordsLinkedListFreeAll, bdb_repAttrDefaultCfgRecordsLinkedListRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrDefaultCfgRecordsLinkedListFreeAll, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        SJMP      ??bdb_repAttrDefaultCfgRecordsLinkedListFreeAll_1
// 1268   bdbReportAttrDefaultCfgData_t* toremovedata;
// 1269   while( list->head != NULL )
// 1270   {
// 1271     toremovedata = bdb_repAttrDefaultCfgRecordsLinkedListRemove( list );
// 1272     osal_mem_free( toremovedata );
??bdb_repAttrDefaultCfgRecordsLinkedListFreeAll_2:
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function bdb_repAttrDefaultCfgRecordsLinkedListRemove
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_repAttrDefaultCfgRecordsLinkedListRemove:`; Banked call to: bdb_repAttrDefaultCfgRecordsLinkedListRemove
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1273   }
??bdb_repAttrDefaultCfgRecordsLinkedListFreeAll_1:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListFreeAll_2
// 1274   return BDBREPORTING_SUCCESS;
        MOV       R1,#0x0
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 1275 }
          CFI EndBlock cfiBlock32
// 1276 
// 1277 /* 
// 1278 * End: Single linked list default attr cfg records methods
// 1279 */
// 1280 
// 1281 
// 1282 /*
// 1283 * Begin: Reporting attr configuration array methods
// 1284 */
// 1285 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1286 static void bdb_repAttrCfgRecordsArrayInit( void )
bdb_repAttrCfgRecordsArrayInit:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function bdb_repAttrCfgRecordsArrayInit
        CODE
// 1287 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1288   bdb_reportingAttrCfgRecordsArray = NULL;
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1289   bdb_reportingAttrCfgRecordsArrayCount = 0;
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      @DPTR,A
// 1290 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock33
// 1291 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1292 static uint8 bdb_repAttrCfgRecordsArrayCreate( uint8 maxNumRepAttrConfRecords )
bdb_repAttrCfgRecordsArrayCreate:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function bdb_repAttrCfgRecordsArrayCreate
        CODE
// 1293 {
        FUNCALL bdb_repAttrCfgRecordsArrayCreate, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
// 1294   if( maxNumRepAttrConfRecords==0 )
        JZ        ??bdb_repAttrCfgRecordsArrayCreate_0
// 1295   {
// 1296     return BDBREPORTING_SUCCESS;
// 1297   }
// 1298 
// 1299   bdb_reportingAttrCfgRecordsArrayMaxSize = maxNumRepAttrConfRecords;
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayMaxSize
        MOVX      @DPTR,A
// 1300   bdb_reportingAttrCfgRecordsArray= (bdbReportAttrCfgData_t *)osal_mem_alloc( sizeof( bdbReportAttrCfgData_t )*bdb_reportingAttrCfgRecordsArrayMaxSize );
        ; Setup parameters for call to function osal_mem_alloc
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R2,A
        MOV       R3,B
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1301   bdb_reportingAttrCfgRecordsArrayCount = 0;
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        CLR       A
        MOVX      @DPTR,A
// 1302   if( bdb_reportingAttrCfgRecordsArray==NULL )
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_repAttrCfgRecordsArrayCreate_0
// 1303   {
// 1304     return BDBREPORTING_ERROR;
        MOV       R1,#0x1
        SJMP      ??bdb_repAttrCfgRecordsArrayCreate_1
// 1305   }
// 1306   return BDBREPORTING_SUCCESS;
??bdb_repAttrCfgRecordsArrayCreate_0:
        MOV       R1,#0x0
??bdb_repAttrCfgRecordsArrayCreate_1:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 1307 }
          CFI EndBlock cfiBlock34
// 1308 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1309 static uint8 bdb_repAttrCfgRecordsArrayAdd( uint8 endpoint, uint16 cluster, uint16 attrID, uint16 minReportInt, uint16 maxReportInt, uint8  reportableChange[], 
bdb_repAttrCfgRecordsArrayAdd:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function bdb_repAttrCfgRecordsArrayAdd
        CODE
// 1310                                            uint16 defMinReportInt, uint16 defMaxReportInt, uint8 defReportChange[] )
// 1311 {
        FUNCALL bdb_repAttrCfgRecordsArrayAdd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrCfgRecordsArrayAdd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 1312   if( bdb_reportingAttrCfgRecordsArray==NULL )
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_repAttrCfgRecordsArrayAdd_0
// 1313   {
// 1314     return BDBREPORTING_ERROR;
// 1315   }
// 1316   if( bdb_reportingAttrCfgRecordsArrayCount>=bdb_reportingAttrCfgRecordsArrayMaxSize )
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayMaxSize
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        JC        ??bdb_repAttrCfgRecordsArrayAdd_1
// 1317   {
// 1318     return BDBREPORTING_ERROR;
??bdb_repAttrCfgRecordsArrayAdd_0:
        MOV       R1,#0x1
        LJMP      ??bdb_repAttrCfgRecordsArrayAdd_2 & 0xFFFF
// 1319   }
// 1320   
// 1321   bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].endpoint = endpoint;
??bdb_repAttrCfgRecordsArrayAdd_1:
        MOV       A,R6
        PUSH      A
          CFI CFA_SP SP+-1
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R7,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1322   bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].cluster = cluster;
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R7,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R7
        MOV       DPH,A
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1323   bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].attrID = attrID;
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 1324   bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].minReportInt = minReportInt;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R4
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1325   bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].maxReportInt = maxReportInt;
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R4
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1326   if( reportableChange!=NULL )
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_repAttrCfgRecordsArrayAdd_3
// 1327   {
// 1328     osal_memcpy( bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].reportableChange, reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0xd
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1329   }
// 1330   bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].defaultMinReportInt = defMinReportInt;
??bdb_repAttrCfgRecordsArrayAdd_3:
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R4
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1331   bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].defaultMaxReportInt = defMaxReportInt;
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1332   if( defReportChange != NULL )
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_repAttrCfgRecordsArrayAdd_4
// 1333   {
// 1334     osal_memcpy( bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].defaultReportableChange, defReportChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );   
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x11
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1335   }
// 1336   bdb_reportingAttrCfgRecordsArrayCount++;
??bdb_repAttrCfgRecordsArrayAdd_4:
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
// 1337   return BDBREPORTING_SUCCESS;
        MOV       R1,#0x0
??bdb_repAttrCfgRecordsArrayAdd_2:
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
// 1338 }
          CFI EndBlock cfiBlock35
// 1339 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1340 static void bdb_repAttrCfgRecordsArrayFreeAll( void )
bdb_repAttrCfgRecordsArrayFreeAll:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function bdb_repAttrCfgRecordsArrayFreeAll
        CODE
// 1341 {
        FUNCALL bdb_repAttrCfgRecordsArrayFreeAll, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1342   if( bdb_reportingAttrCfgRecordsArray==NULL )
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_repAttrCfgRecordsArrayFreeAll_0
// 1343   {
// 1344     return;
// 1345   }
// 1346   osal_mem_free( bdb_reportingAttrCfgRecordsArray );
        ; Setup parameters for call to function osal_mem_free
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1347   bdb_reportingAttrCfgRecordsArrayCount = 0;
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        CLR       A
        MOVX      @DPTR,A
// 1348   bdb_reportingAttrCfgRecordsArray=NULL;
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1349 }
??bdb_repAttrCfgRecordsArrayFreeAll_0:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock36
// 1350 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1351 static uint8 bdb_repAttrCfgRecordsArraySearch( uint8 endpoint, uint16 cluster, uint16 attrID )
bdb_repAttrCfgRecordsArraySearch:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function bdb_repAttrCfgRecordsArraySearch
        CODE
// 1352 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       ?V0,R1
// 1353   uint8 i;
// 1354   if( bdb_reportingAttrCfgRecordsArray == NULL )
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_repAttrCfgRecordsArraySearch_0
// 1355   {
// 1356     return BDBREPORTING_INVALIDINDEX;
// 1357   }
// 1358   for( i=0; i<bdb_reportingAttrCfgRecordsArrayCount; i++ )
        MOV       R6,#0x0
        SJMP      ??bdb_repAttrCfgRecordsArraySearch_1
??bdb_repAttrCfgRecordsArraySearch_2:
        INC       R6
??bdb_repAttrCfgRecordsArraySearch_1:
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JNC       ??bdb_repAttrCfgRecordsArraySearch_0
// 1359   {
// 1360     if( bdb_reportingAttrCfgRecordsArray[i].endpoint == endpoint && bdb_reportingAttrCfgRecordsArray[i].cluster == cluster && bdb_reportingAttrCfgRecordsArray[i].attrID == attrID )
        MOV       A,R6
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,?V0
        JNZ       ??bdb_repAttrCfgRecordsArraySearch_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_repAttrCfgRecordsArraySearch_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_repAttrCfgRecordsArraySearch_3:
        JNZ       ??bdb_repAttrCfgRecordsArraySearch_2
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??bdb_repAttrCfgRecordsArraySearch_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R5
??bdb_repAttrCfgRecordsArraySearch_4:
        JNZ       ??bdb_repAttrCfgRecordsArraySearch_2
// 1361     {
// 1362       return i;
        MOV       A,R6
        MOV       R1,A
        SJMP      ??bdb_repAttrCfgRecordsArraySearch_5
// 1363     }
// 1364   }
// 1365   return BDBREPORTING_INVALIDINDEX;
??bdb_repAttrCfgRecordsArraySearch_0:
        MOV       R1,#-0x1
??bdb_repAttrCfgRecordsArraySearch_5:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 1366 }
          CFI EndBlock cfiBlock37
// 1367 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1368 static uint8 bdb_repAttrCfgRecordsArrayConsolidateValues( uint8 endpoint, uint16 cluster,  uint16* consolidatedMinReportInt, uint16* consolidatedMaxReportInt )
bdb_repAttrCfgRecordsArrayConsolidateValues:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function bdb_repAttrCfgRecordsArrayConsolidateValues
        CODE
// 1369 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V4,R1
// 1370   uint8 i;
// 1371   *consolidatedMinReportInt =0xFFFF;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 1372   *consolidatedMaxReportInt = 0xFFFF;
        MOV       DPL,R0
        MOV       DPH,A
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1373   uint8 foundAttr = 0;
        MOV       ?V2,#0x0
// 1374   if( bdb_reportingAttrCfgRecordsArray == NULL )
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_repAttrCfgRecordsArrayConsolidateValues_0 & 0xFFFF
// 1375   {
// 1376     return BDBREPORTING_ERROR;
// 1377   }
// 1378   for( i=0; i<bdb_reportingAttrCfgRecordsArrayCount; i++ )
        MOV       ?V3,#0x0
        LJMP      ??bdb_repAttrCfgRecordsArrayConsolidateValues_1 & 0xFFFF
// 1379   {
// 1380     if( bdb_reportingAttrCfgRecordsArray[i].endpoint == endpoint && bdb_reportingAttrCfgRecordsArray[i].cluster == cluster )
??bdb_repAttrCfgRecordsArrayConsolidateValues_2:
        MOV       A,?V3
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       ?V0,B
        MOV       R1,?V0
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       ?V1,A
        MOV       DPL,?V0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,?V4
        JNZ       ??bdb_repAttrCfgRecordsArrayConsolidateValues_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_repAttrCfgRecordsArrayConsolidateValues_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_repAttrCfgRecordsArrayConsolidateValues_4:
        JNZ       ??bdb_repAttrCfgRecordsArrayConsolidateValues_3
// 1381     {
// 1382       foundAttr++;
        INC       ?V2
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        CLR       C
        MOV       A,?V6
        SUBB      A,?V0
        MOV       A,?V7
        SUBB      A,?V1
        JNC       ??bdb_repAttrCfgRecordsArrayConsolidateValues_5
// 1383       //Consolidate min value
// 1384       if( bdb_reportingAttrCfgRecordsArray[i].minReportInt < *consolidatedMinReportInt )
// 1385       {
// 1386         *consolidatedMinReportInt = bdb_reportingAttrCfgRecordsArray[i].minReportInt;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V7
        MOVX      @DPTR,A
??bdb_repAttrCfgRecordsArrayConsolidateValues_5:
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,?V0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       C
        MOV       A,?V0
        SUBB      A,R0
        MOV       A,?V1
        SUBB      A,R1
        JNC       ??bdb_repAttrCfgRecordsArrayConsolidateValues_3
// 1387       }
// 1388       
// 1389       //Consolidate max value
// 1390       if( bdb_reportingAttrCfgRecordsArray[i].maxReportInt < *consolidatedMaxReportInt )
// 1391       {
// 1392         *consolidatedMaxReportInt = bdb_reportingAttrCfgRecordsArray[i].maxReportInt;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
// 1393       }
// 1394     }
// 1395   }
??bdb_repAttrCfgRecordsArrayConsolidateValues_3:
        INC       ?V3
??bdb_repAttrCfgRecordsArrayConsolidateValues_1:
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V3
        CLR       C
        SUBB      A,R0
        JNC       $+5
        LJMP      ??bdb_repAttrCfgRecordsArrayConsolidateValues_2 & 0xFFFF
// 1396   if( foundAttr==0 )
        MOV       A,?V2
        JNZ       ??bdb_repAttrCfgRecordsArrayConsolidateValues_6
// 1397   {
// 1398     return BDBREPORTING_ERROR;
??bdb_repAttrCfgRecordsArrayConsolidateValues_0:
        MOV       R1,#0x1
        SJMP      ??bdb_repAttrCfgRecordsArrayConsolidateValues_7
// 1399   }
// 1400   return BDBREPORTING_SUCCESS;
??bdb_repAttrCfgRecordsArrayConsolidateValues_6:
        MOV       R1,#0x0
??bdb_repAttrCfgRecordsArrayConsolidateValues_7:
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
// 1401 }
          CFI EndBlock cfiBlock38
// 1402 
// 1403 /*
// 1404 * End: Reporting attr configuration array methods
// 1405 */
// 1406                   
// 1407 
// 1408 /*
// 1409 * Begin: Helper methods
// 1410 */
// 1411 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1412 static uint8 bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray( void )
bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        CODE
// 1413 {
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, bdb_repAttrCfgRecordsArrayConsolidateValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, bdb_clusterEndpointArrayAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, bdb_InitReportAttrLiveValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, bdb_RepFindAttrEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, bdb_linkedListAttrAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, bdb_clusterEndpointArraySearch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, bdb_InitReportAttrLiveValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, bdb_RepFindAttrEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray, bdb_linkedListAttrAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1414   uint8 i;
// 1415   uint16 consolidatedMinReportInt =0xFFFF;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1416   uint16 consolidatedMaxReportInt = 0xFFFF;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1417   uint8 status;
// 1418   uint8 returnStatus = BDBREPORTING_SUCCESS;
        MOV       ?V11,#0x0
// 1419   if( bdb_reportingAttrCfgRecordsArray == NULL )
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_1
// 1420   {
// 1421     return BDBREPORTING_ERROR;
        MOV       R1,#0x1
        LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_2 & 0xFFFF
// 1422   }           
// 1423   for( i=0; i<bdb_reportingAttrCfgRecordsArrayCount; i++ )
??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_1:
        MOV       ?V7,#0x0
        LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_3 & 0xFFFF
// 1424   {
// 1425     uint16 curEndpoint = bdb_reportingAttrCfgRecordsArray[i].endpoint;
// 1426     uint16 curCluster = bdb_reportingAttrCfgRecordsArray[i].cluster;
// 1427     //See if there is already a cluster endpoint item
// 1428     uint8 searchedIndex = bdb_clusterEndpointArraySearch( curEndpoint, curCluster );
// 1429     if(searchedIndex == BDBREPORTING_INVALIDINDEX)
// 1430     {
// 1431       //Not found, add entry
// 1432       status = bdb_repAttrCfgRecordsArrayConsolidateValues( curEndpoint, curCluster, &consolidatedMinReportInt, &consolidatedMaxReportInt );
// 1433       if( status == BDBREPORTING_SUCCESS )
??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_4:
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayConsolidateValues
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V0
        LCALL     `??bdb_repAttrCfgRecordsArrayConsolidateValues::`; Banked call to: bdb_repAttrCfgRecordsArrayConsolidateValues
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_5 & 0xFFFF
// 1434       {
// 1435         status = bdb_clusterEndpointArrayAdd( curEndpoint, curCluster, consolidatedMinReportInt, consolidatedMaxReportInt, 0 );
// 1436         if( status == BDBREPORTING_SUCCESS )
        ; Setup parameters for call to function bdb_clusterEndpointArrayAdd
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V0
        LCALL     `??bdb_clusterEndpointArrayAdd::?relay`; Banked call to: bdb_clusterEndpointArrayAdd
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6 & 0xFFFF
// 1437         {
// 1438           zclAttribute_t zclAttribute;
// 1439           uint8  status;
// 1440           //Add attr value
// 1441           bdbReportAttrLive_t* newItemData;
// 1442           newItemData = (bdbReportAttrLive_t *)osal_mem_alloc( sizeof(bdbReportAttrLive_t) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xa
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
// 1443           if( newItemData == NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6 & 0xFFFF
// 1444           {
// 1445             //Out of memory
// 1446             returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
// 1447             break;
// 1448           }
// 1449           bdb_InitReportAttrLiveValues( newItemData );
        ; Setup parameters for call to function bdb_InitReportAttrLiveValues
        LCALL     `??bdb_InitReportAttrLiveValues::?relay`; Banked call to: bdb_InitReportAttrLiveValues
// 1450           newItemData->attrID = bdb_reportingAttrCfgRecordsArray[i].attrID;
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,?V2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V3
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1451           osal_memcpy( newItemData->reportableChange, bdb_reportingAttrCfgRecordsArray[i].reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
        ; Setup parameters for call to function osal_memcpy
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,?V2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V3
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0xd
        MOV       ?V8,A
        CLR       A
        ADDC      A,R1
        MOV       ?V9,A
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,?V4
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1452           
// 1453           //Read the attribute to keep the table updated
// 1454           if(BDBREPORTING_TRUE == bdb_RepFindAttrEntry(curEndpoint,curCluster,newItemData->attrID,&zclAttribute))
        ; Setup parameters for call to function bdb_RepFindAttrEntry
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V0
        LCALL     `??bdb_RepFindAttrEntry::?relay`; Banked call to: bdb_RepFindAttrEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_7
// 1455           {
// 1456             osal_memcpy(newItemData->lastValueReported, zclAttribute.dataPtr,BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,?V4
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1457           }          
// 1458           
// 1459           status = bdb_linkedListAttrAdd( &(bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount-1].attrLinkedList), newItemData );
// 1460           if( status == BDBREPORTING_ERROR )
??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_7:
        ; Setup parameters for call to function bdb_linkedListAttrAdd
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#(bdb_reportingClusterEndpointArray + 253) & 0xff
        ADD       A,R0
        MOV       R2,A
        MOV       A,#((bdb_reportingClusterEndpointArray - 3) >> 8) & 0xff
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??bdb_linkedListAttrAdd::?relay`; Banked call to: bdb_linkedListAttrAdd
        MOV       A,R1
        XRL       A,#0x1
        JNZ       $+5
        LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6 & 0xFFFF
// 1461           {
// 1462             returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
// 1463             break;
// 1464           }
// 1465         }
// 1466         else
// 1467         {
// 1468           //Out of memory,
// 1469           returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
// 1470           break;
// 1471         }
// 1472       }
// 1473     }
??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_5:
        INC       ?V7
??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_3:
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V7
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_8 & 0xFFFF
        MOV       A,?V7
        MOV       B,#0x15
        MUL       AB
        MOV       ?V2,A
        MOV       A,B
        MOV       ?V3,A
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,?V2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V3
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        ; Setup parameters for call to function bdb_clusterEndpointArraySearch
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V0
        LCALL     `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
        MOV       A,R1
        MOV       ?V6,A
        MOV       A,#-0x1
        XRL       A,R1
        JNZ       $+5
        LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_4 & 0xFFFF
// 1474     else
// 1475     {
// 1476       zclAttribute_t zclAttribute;
// 1477       uint8  status;
// 1478       //Entry found, just add attr data to linked list
// 1479       bdbReportAttrLive_t* newItemData;
// 1480       newItemData = (bdbReportAttrLive_t *)osal_mem_alloc( sizeof( bdbReportAttrLive_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xa
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
// 1481       if( newItemData == NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6 & 0xFFFF
// 1482       {
// 1483         returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
// 1484         break;
// 1485       }
// 1486       bdb_InitReportAttrLiveValues( newItemData );
        ; Setup parameters for call to function bdb_InitReportAttrLiveValues
        LCALL     `??bdb_InitReportAttrLiveValues::?relay`; Banked call to: bdb_InitReportAttrLiveValues
// 1487       newItemData->attrID = bdb_reportingAttrCfgRecordsArray[i].attrID;
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,?V2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V3
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1488       osal_memcpy( newItemData->reportableChange, bdb_reportingAttrCfgRecordsArray[i].reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
        ; Setup parameters for call to function osal_memcpy
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        ADD       A,?V2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V3
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0xd
        MOV       ?V8,A
        CLR       A
        ADDC      A,R1
        MOV       ?V9,A
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,?V4
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1489 
// 1490       //Read the attribute to keep the table updated
// 1491       if(BDBREPORTING_TRUE == bdb_RepFindAttrEntry(curEndpoint,curCluster,newItemData->attrID,&zclAttribute))
        ; Setup parameters for call to function bdb_RepFindAttrEntry
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V0
        LCALL     `??bdb_RepFindAttrEntry::?relay`; Banked call to: bdb_RepFindAttrEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_9
// 1492       {
// 1493         osal_memcpy(newItemData->lastValueReported, zclAttribute.dataPtr,BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,?V4
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1494       }
// 1495       
// 1496       status = bdb_linkedListAttrAdd( &(bdb_reportingClusterEndpointArray[searchedIndex].attrLinkedList), newItemData );
// 1497       if( status == BDBREPORTING_ERROR )
??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_9:
        ; Setup parameters for call to function bdb_linkedListAttrAdd
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       A,?V6
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#(bdb_reportingClusterEndpointArray + 10) & 0xff
        ADD       A,R0
        MOV       R2,A
        MOV       A,#((bdb_reportingClusterEndpointArray + 10) >> 8) & 0xff
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??bdb_linkedListAttrAdd::?relay`; Banked call to: bdb_linkedListAttrAdd
        MOV       A,R1
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_5 & 0xFFFF
// 1498       {
// 1499         returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6:
        MOV       ?V11,#0x2
// 1500         break;
// 1501       }
// 1502     
// 1503     }
// 1504   }
// 1505   return returnStatus;
??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_8:
        MOV       R1,?V11
??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_2:
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
// 1506 }
          CFI EndBlock cfiBlock39
// 1507 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1508 static void bdb_RepInitAttrCfgRecords( void )
bdb_RepInitAttrCfgRecords:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function bdb_RepInitAttrCfgRecords
        CODE
// 1509 {
        FUNCALL bdb_RepInitAttrCfgRecords, bdb_RepConstructAttrCfgArray
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepInitAttrCfgRecords, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepInitAttrCfgRecords, bdb_repAttrCfgRecordsArrayFreeAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepInitAttrCfgRecords, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepInitAttrCfgRecords, bdb_repAttrCfgRecordsArrayCreate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepInitAttrCfgRecords, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepInitAttrCfgRecords, bdb_repAttrDefaultCfgRecordsLinkedListFreeAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1510   bdb_RepConstructAttrCfgArray( ); //Here bdb_reportingAttrCfgRecordsArray is filled
        ; Setup parameters for call to function bdb_RepConstructAttrCfgArray
        LCALL     `??bdb_RepConstructAttrCfgArray::?relay`; Banked call to: bdb_RepConstructAttrCfgArray
// 1511   
// 1512   uint8 status = osal_nv_item_init( ZCD_NV_BDBREPORTINGCONFIG, sizeof( bdbReportAttrCfgData_t )*bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray );
        ; Setup parameters for call to function osal_nv_item_init
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R4,A
        MOV       R5,B
        MOV       R2,#0x56
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        MOV       R0,A
// 1513   if( status == NV_OPER_FAILED )
        MOV       A,#0xa
        XRL       A,R0
        JZ        ??bdb_RepInitAttrCfgRecords_0
// 1514   {
// 1515     return;
// 1516   }
// 1517   else
// 1518   {
// 1519       if( status == NV_ITEM_UNINIT )
        MOV       A,#0x9
        XRL       A,R0
        JZ        ??bdb_RepInitAttrCfgRecords_1
// 1520       {
// 1521         //Do nothing because the reporting cf array data was written in the osal_nv_item method
// 1522       }
// 1523       else
// 1524       {
// 1525         //SUCCESS, There is NV data, read the data
// 1526         bdb_repAttrCfgRecordsArrayFreeAll(); //Clear previous cfg data
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
        LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
// 1527         uint16 sizeNVRecord = osal_nv_item_len(ZCD_NV_BDBREPORTINGCONFIG);
// 1528         uint8 attrCfgRecordsArrayCount = sizeNVRecord / sizeof(bdbReportAttrCfgData_t);
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#0x56
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
        MOV       R2,#0x15
        MOV       R3,#0x0
        LCALL     ?US_DIV_MOD
        MOV       A,R0
        MOV       R6,A
// 1529         
// 1530         status =  bdb_repAttrCfgRecordsArrayCreate(attrCfgRecordsArrayCount);
// 1531         if( status == BDBREPORTING_ERROR )
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayCreate
        MOV       R1,A
        LCALL     `??bdb_repAttrCfgRecordsArrayCreate::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayCreate
        MOV       A,R1
        XRL       A,#0x1
        JZ        ??bdb_RepInitAttrCfgRecords_0
// 1532         {
// 1533           return; // No memory
// 1534         }
// 1535         osal_nv_read( ZCD_NV_BDBREPORTINGCONFIG,0, sizeof( bdbReportAttrCfgData_t )*attrCfgRecordsArrayCount ,bdb_reportingAttrCfgRecordsArray );
        ; Setup parameters for call to function osal_nv_read
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R6
        MOV       B,#0x15
        MUL       AB
        MOV       ?V0,A
        MOV       A,B
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x56
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1536         bdb_reportingAttrCfgRecordsArrayCount = attrCfgRecordsArrayCount;
        MOV       A,R6
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      @DPTR,A
// 1537       }     
// 1538   }  
// 1539   
// 1540   bdb_repAttrDefaultCfgRecordsLinkedListFreeAll( &attrDefaultCfgRecordLinkedList ); //Free the attr default cfg list
??bdb_RepInitAttrCfgRecords_1:
        ; Setup parameters for call to function bdb_repAttrDefaultCfgRecordsLinkedListFreeAll
        MOV       R2,#attrDefaultCfgRecordLinkedList & 0xff
        MOV       R3,#(attrDefaultCfgRecordLinkedList >> 8) & 0xff
        LCALL     ??bdb_repAttrDefaultCfgRecordsLinkedListFreeAll; Banked call to: bdb_repAttrDefaultCfgRecordsLinkedListFreeAll
// 1541 }
??bdb_RepInitAttrCfgRecords_0:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock40
// 1542 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1543 static uint8 bdb_RepConstructAttrCfgArray( void )
bdb_RepConstructAttrCfgArray:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function bdb_RepConstructAttrCfgArray
        CODE
// 1544 {
        FUNCALL bdb_RepConstructAttrCfgArray, bdb_repAttrCfgRecordsArrayFreeAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepConstructAttrCfgArray, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepConstructAttrCfgArray, bdb_repAttrCfgRecordsArrayCreate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepConstructAttrCfgArray, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepConstructAttrCfgArray, bdb_repAttrCfgRecordsArrayAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepConstructAttrCfgArray, bdb_repAttrDefaultCfgRecordsLinkedListSearch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepConstructAttrCfgArray, bdb_repAttrCfgRecordsArrayAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
// 1545    epList_t *epCur =  epList;
// 1546    uint8 status;
// 1547    uint8 i;
// 1548    
// 1549    if( bdb_reportingAttrCfgRecordsArray != NULL )
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_RepConstructAttrCfgArray_0
// 1550    {
// 1551      bdb_repAttrCfgRecordsArrayFreeAll( );
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
        LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
// 1552    }
// 1553    
// 1554    uint8 numRepAttr = 0;
??bdb_RepConstructAttrCfgArray_0:
        MOV       R7,#0x0
// 1555    //First count the number of reportable attributes accross all endpoints
// 1556    for ( epCur = epList; epCur != NULL; epCur = epCur->nextDesc )
        MOV       DPTR,#epList
        SJMP      ??bdb_RepConstructAttrCfgArray_1
// 1557    {
// 1558      zclAttrRecsList* attrItem = zclFindAttrRecsList( epCur->epDesc->endPoint );
// 1559      if( attrItem== NULL )
// 1560      {
// 1561        continue;
// 1562      }
// 1563      if( attrItem->numAttributes > 0 )
// 1564      {
// 1565          for ( i = 0; i < attrItem->numAttributes; i++ )
// 1566          {
// 1567            if( attrItem->attrs[i].attr.accessControl & ACCESS_REPORTABLE )
??bdb_RepConstructAttrCfgArray_2:
        MOV       A,R6
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       A,#0x3
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOV       DPL,R4
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,?V2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V3
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       C,0xE0 /* A   */.2
        JNC       ??bdb_RepConstructAttrCfgArray_3
// 1568            {
// 1569              numRepAttr++;  
        INC       R7
// 1570            }
// 1571          }
??bdb_RepConstructAttrCfgArray_3:
        INC       R6
??bdb_RepConstructAttrCfgArray_4:
        MOV       DPL,R2
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        ??bdb_RepConstructAttrCfgArray_2
??bdb_RepConstructAttrCfgArray_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
??bdb_RepConstructAttrCfgArray_1:
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_RepConstructAttrCfgArray_6
        ; Setup parameters for call to function zclFindAttrRecsList
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,R2
        ORL       A,R5
        JZ        ??bdb_RepConstructAttrCfgArray_5
        MOV       A,R2
        ADD       A,#0x7
        MOV       R0,A
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??bdb_RepConstructAttrCfgArray_5
        MOV       R6,#0x0
        SJMP      ??bdb_RepConstructAttrCfgArray_4
// 1572      }
// 1573    }
// 1574    status =  bdb_repAttrCfgRecordsArrayCreate( numRepAttr );
??bdb_RepConstructAttrCfgArray_6:
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayCreate
        MOV       A,R7
        MOV       R1,A
        LCALL     `??bdb_repAttrCfgRecordsArrayCreate::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayCreate
        MOV       A,R1
        MOV       R1,A
// 1575    if( status != BDBREPORTING_SUCCESS )
        JZ        $+5
        LJMP      ??bdb_RepConstructAttrCfgArray_7 & 0xFFFF
// 1576    {
// 1577      return status;
// 1578    }
// 1579      
// 1580    
// 1581    for ( epCur = epList; epCur != NULL; epCur = epCur->nextDesc )
        MOV       DPTR,#epList
        SJMP      ??bdb_RepConstructAttrCfgArray_8
??bdb_RepConstructAttrCfgArray_9:
        MOV       DPL,?V0
        MOV       DPH,?V1
??bdb_RepConstructAttrCfgArray_8:
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,?V0
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??bdb_RepConstructAttrCfgArray_10 & 0xFFFF
// 1582    {
// 1583      zclAttrRecsList* attrItem = zclFindAttrRecsList( epCur->epDesc->endPoint );
        MOV       A,?V0
        ADD       A,#0x2
        MOV       ?V6,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V7,A
        ; Setup parameters for call to function zclFindAttrRecsList
        MOV       DPL,?V6
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       ?V8,R2
        MOV       ?V9,R3
// 1584      if( attrItem== NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RepConstructAttrCfgArray_9
// 1585      {
// 1586        continue;
// 1587      }
// 1588      if( attrItem->numAttributes > 0 )
        MOV       A,R2
        ADD       A,#0x7
        MOV       ?V10,A
        CLR       A
        ADDC      A,?V9
        MOV       ?V11,A
        MOV       DPL,?V10
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??bdb_RepConstructAttrCfgArray_9
// 1589      {
// 1590        for ( i = 0; i < attrItem->numAttributes; i++ )
        MOV       R6,#0x0
        LJMP      ??bdb_RepConstructAttrCfgArray_11 & 0xFFFF
// 1591        {
// 1592          if( attrItem->attrs[i].attr.accessControl & ACCESS_REPORTABLE )
// 1593          {
// 1594            bdbReportAttrDefaultCfgData_t toSearch;
// 1595            toSearch.endpoint = epCur->epDesc->endPoint;
// 1596            toSearch.cluster = attrItem->attrs[i].clusterID;
// 1597            toSearch.attrID = attrItem->attrs[i].attr.attrId;
// 1598            bdbRepAttrDefaultCfgRecordLinkedListItem_t* lLItemFound = bdb_repAttrDefaultCfgRecordsLinkedListSearch( &attrDefaultCfgRecordLinkedList, toSearch );
// 1599            if( lLItemFound == NULL )
// 1600            {
// 1601              //Add with default static values
// 1602              uint8 changeValue[] = BDBREPORTING_DEFAULTCHANGEVALUE; 
// 1603              status = bdb_repAttrCfgRecordsArrayAdd( epCur->epDesc->endPoint, attrItem->attrs[i].clusterID, 
// 1604                                                     attrItem->attrs[i].attr.attrId, BDBREPORTING_DEFAULTMININTERVAL, BDBREPORTING_DEFAULTMAXINTERVAL, 
// 1605                                                     changeValue, BDBREPORTING_DEFAULTMININTERVAL, BDBREPORTING_DEFAULTMAXINTERVAL, changeValue );
// 1606            }
// 1607            else
// 1608            {
// 1609              //Add with user defined default values
// 1610              status = bdb_repAttrCfgRecordsArrayAdd( epCur->epDesc->endPoint, attrItem->attrs[i].clusterID, 
// 1611                                                     attrItem->attrs[i].attr.attrId, lLItemFound->data->minReportInt, lLItemFound->data->maxReportInt, 
// 1612                                                     lLItemFound->data->reportableChange, lLItemFound->data->minReportInt, lLItemFound->data->maxReportInt, 
// 1613                                                     lLItemFound->data->reportableChange );
??bdb_RepConstructAttrCfgArray_12:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        ADD       A,?V4
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V5
        MOV       ?V5,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R0
        ADD       A,#0x9
        MOV       ?V12,A
        CLR       A
        ADDC      A,R1
        MOV       ?V13,A
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayAdd
        MOV       ?V2,?V12
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       ?V2,?V12
        MOV       ?V3,?V13
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R4,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R5,A
        MOV       DPL,?V4
        MOV       DPH,?V5
??bdb_RepConstructAttrCfgArray_13:
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R3,A
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_repAttrCfgRecordsArrayAdd::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayAdd
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
// 1614            }
??bdb_RepConstructAttrCfgArray_14:
        INC       R6
??bdb_RepConstructAttrCfgArray_11:
        MOV       DPL,?V10
        MOV       DPH,?V11
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??bdb_RepConstructAttrCfgArray_9 & 0xFFFF
        MOV       A,R6
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       A,#0x3
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOV       ?V4,?V2
        MOV       ?V5,?V3
        MOV       A,?V8
        ADD       A,#0x8
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V9
        MOV       ?V3,A
        MOV       DPL,?V2
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,?V4
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V5
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       C,0xE0 /* A   */.2
        JNC       ??bdb_RepConstructAttrCfgArray_14
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R1
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function bdb_repAttrDefaultCfgRecordsLinkedListSearch
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xd
        LCALL     ?PUSH_XSTACK8_X
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       R2,#attrDefaultCfgRecordLinkedList & 0xff
        MOV       R3,#(attrDefaultCfgRecordLinkedList >> 8) & 0xff
        LCALL     `??bdb_repAttrDefaultCfgRecordsLinkedListSearch:`; Banked call to: bdb_repAttrDefaultCfgRecordsLinkedListSearch
        MOV       A,#0xd
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       ?V13,R3
        MOV       R1,?V13
        MOV       A,R2
        ORL       A,R1
        JZ        $+5
        LJMP      ??bdb_RepConstructAttrCfgArray_12 & 0xFFFF
        MOV       DPTR,#`?<Constant {0, 0, 0, 0}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x4
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        ADD       A,?V4
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V5
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayAdd
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       ?V2,#-0x1
        MOV       ?V3,#-0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       ?V2,#0xa
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V2,#-0x1
        MOV       ?V3,#-0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       ?V2,#0xa
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R4,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R5,A
        MOV       DPL,R2
        MOV       DPH,R3
        LJMP      ??bdb_RepConstructAttrCfgArray_13 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 39)
// 1615          }
// 1616        }
// 1617      }
// 1618      
// 1619    }
// 1620    return BDBREPORTING_SUCCESS;
??bdb_RepConstructAttrCfgArray_10:
        MOV       R1,#0x0
??bdb_RepConstructAttrCfgArray_7:
        MOV       A,#0x11
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
// 1621    
// 1622 }
          CFI EndBlock cfiBlock41
// 1623 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1624 static uint8 bdb_RepLoadCfgRecords( void )
bdb_RepLoadCfgRecords:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function bdb_RepLoadCfgRecords
        CODE
// 1625 {
        FUNCALL bdb_RepLoadCfgRecords, bdb_repAttrCfgRecordsArrayFreeAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepLoadCfgRecords, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepLoadCfgRecords, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepLoadCfgRecords, bdb_repAttrCfgRecordsArrayCreate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepLoadCfgRecords, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1626   uint8 status; 
// 1627   if( bdb_reportingAttrCfgRecordsArrayCount>0 && bdb_reportingAttrCfgRecordsArray == NULL )
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        JZ        ??bdb_RepLoadCfgRecords_0
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_RepLoadCfgRecords_0
// 1628   {
// 1629     bdb_repAttrCfgRecordsArrayFreeAll( );
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
        LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
// 1630   }
// 1631   
// 1632   status = osal_nv_item_init( ZCD_NV_BDBREPORTINGCONFIG, sizeof( bdbReportAttrCfgData_t )*bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray );
??bdb_RepLoadCfgRecords_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        MOV       R4,A
        MOV       R5,B
        MOV       R2,#0x56
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        MOV       R0,A
// 1633   if( status == NV_OPER_FAILED )
        MOV       A,#0xa
        XRL       A,R0
        JZ        ??bdb_RepLoadCfgRecords_1
// 1634   {
// 1635     return BDBREPORTING_ERROR;
// 1636   }
// 1637   else
// 1638   {
// 1639       if( status == NV_ITEM_UNINIT )
        MOV       A,#0x9
        XRL       A,R0
        JNZ       ??bdb_RepLoadCfgRecords_2
// 1640       {
// 1641         //was written, this is an error
// 1642         return BDBREPORTING_ERROR;
??bdb_RepLoadCfgRecords_1:
        MOV       R1,#0x1
        SJMP      ??bdb_RepLoadCfgRecords_3
// 1643       }
// 1644       else
// 1645       {
// 1646         //SUCCESS, There is NV data, read the data
// 1647         uint16 sizeNVRecord = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
// 1648         uint8 attrCfgRecordsArrayCount = sizeNVRecord / sizeof( bdbReportAttrCfgData_t );
??bdb_RepLoadCfgRecords_2:
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#0x56
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
        MOV       R2,#0x15
        MOV       R3,#0x0
        LCALL     ?US_DIV_MOD
        MOV       A,R0
        MOV       R6,A
// 1649         
// 1650         status =  bdb_repAttrCfgRecordsArrayCreate( attrCfgRecordsArrayCount );
// 1651         if( status == BDBREPORTING_ERROR )
        ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayCreate
        MOV       R1,A
        LCALL     `??bdb_repAttrCfgRecordsArrayCreate::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayCreate
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_RepLoadCfgRecords_4
// 1652         {
// 1653           return BDBREPORTING_OUTOFMEMORYERROR;
        MOV       R1,#0x2
        SJMP      ??bdb_RepLoadCfgRecords_3
// 1654         }
// 1655         osal_nv_read( ZCD_NV_BDBREPORTINGCONFIG,0,sizeof( bdbReportAttrCfgData_t )*attrCfgRecordsArrayCount ,bdb_reportingAttrCfgRecordsArray );
??bdb_RepLoadCfgRecords_4:
        ; Setup parameters for call to function osal_nv_read
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R6
        MOV       B,#0x15
        MUL       AB
        MOV       ?V0,A
        MOV       A,B
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x56
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1656         bdb_reportingAttrCfgRecordsArrayCount = attrCfgRecordsArrayCount;
        MOV       A,R6
        MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
        MOVX      @DPTR,A
// 1657         return BDBREPORTING_SUCCESS;
        MOV       R1,#0x0
??bdb_RepLoadCfgRecords_3:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
// 1658       }     
// 1659   }  
// 1660 }
          CFI EndBlock cfiBlock42
// 1661 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1662 static void bdb_RepReport( uint8 specificCLusterEndpointIndex )
bdb_RepReport:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function bdb_RepReport
        CODE
// 1663 {
        FUNCALL bdb_RepReport, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepReport, bdb_linkedListAttrGetAtIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepReport, bdb_RepFindAttrEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepReport, zclAnalogDataType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepReport, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepReport, zclGetDataTypeLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepReport, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepReport, bdb_getZCLFrameCounter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepReport, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepReport, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 18
        MOV       A,#-0x12
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
// 1664   afAddrType_t dstAddr;
// 1665   zclReportCmd_t *pReportCmd;
// 1666   uint8 i;
// 1667   
// 1668   bdbReportAttrClusterEndpoint_t* clusterEndpointItem = NULL;
        MOV       R6,#0x0
        MOV       R7,#0x0
// 1669   if( specificCLusterEndpointIndex == BDBREPORTING_INVALIDINDEX )
        MOV       A,#-0x1
        XRL       A,R1
        JNZ       ??bdb_RepReport_0
// 1670   {
// 1671     if( bdb_reportingNextClusterEndpointIndex < bdb_reportingClusterEndpointArrayCount )
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#bdb_reportingNextClusterEndpointIndex
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        JNC       ??bdb_RepReport_1
// 1672     {
// 1673       clusterEndpointItem = &(bdb_reportingClusterEndpointArray[bdb_reportingNextClusterEndpointIndex]);
        MOVX      A,@DPTR
        SJMP      ??bdb_RepReport_2
// 1674     }
// 1675   }
// 1676   else
// 1677   {
// 1678     clusterEndpointItem = &(bdb_reportingClusterEndpointArray[specificCLusterEndpointIndex]);
??bdb_RepReport_0:
        MOV       A,R1
??bdb_RepReport_2:
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       R6,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       R7,A
// 1679   }
// 1680 
// 1681   // actually send the report
// 1682   if( clusterEndpointItem->consolidatedMaxReportInt != ZCL_REPORTING_OFF && clusterEndpointItem->attrLinkedList.numItems )
??bdb_RepReport_1:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??bdb_RepReport_3
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??bdb_RepReport_3:
        JNZ       $+5
        LJMP      ??bdb_RepReport_4 & 0xFFFF
        MOV       A,R6
        ADD       A,#0xa
        MOV       ?V8,A
        CLR       A
        ADDC      A,R7
        MOV       ?V9,A
        MOV       DPL,?V8
        MOV       DPH,A
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_RepReport_4 & 0xFFFF
// 1683   {
// 1684     dstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1685     dstAddr.addr.shortAddr = 0;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1686     dstAddr.endPoint = clusterEndpointItem->endpoint;
// 1687     dstAddr.panId = _NIB.nwkPanId;
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1688     
// 1689     pReportCmd = osal_mem_alloc( sizeof( zclReportCmd_t ) + (clusterEndpointItem->attrLinkedList.numItems * sizeof( zclReport_t )) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       B,#0x5
        MUL       AB
        MOV       R1,B
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V10,R2
        MOV       ?V11,R3
// 1690     if ( pReportCmd != NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??bdb_RepReport_4 & 0xFFFF
// 1691     {
// 1692       pReportCmd->numAttr = clusterEndpointItem->attrLinkedList.numItems;
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
// 1693       for ( i = 0; i < clusterEndpointItem->attrLinkedList.numItems; ++ i )
        MOV       ?V0,#0x0
        LJMP      ??bdb_RepReport_5 & 0xFFFF
// 1694       {
// 1695         pReportCmd->attrList[i].attrID   = 0xFFFF;
??bdb_RepReport_6:
        MOV       A,?V0
        MOV       B,#0x5
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V10
        ADD       A,R0
        MOV       R0,A
        MOV       A,?V11
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOV       ?V4,DPL
        MOV       ?V5,DPH
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1696         pReportCmd->attrList[i].dataType = 0xFF;
        MOV       A,R0
        ADD       A,#0x3
        MOV       ?V14,A
        CLR       A
        ADDC      A,R1
        MOV       ?V15,A
        MOV       DPL,?V14
        MOV       DPH,A
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 1697         pReportCmd->attrList[i].attrData = NULL;
        MOV       A,R0
        ADD       A,#0x4
        MOV       ?V12,A
        CLR       A
        ADDC      A,R1
        MOV       ?V13,A
        MOV       DPL,?V12
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1698         
// 1699         bdbLinkedListAttrItem_t* attrListItem = bdb_linkedListAttrGetAtIndex( &clusterEndpointItem->attrLinkedList, i );      
        ; Setup parameters for call to function bdb_linkedListAttrGetAtIndex
        MOV       R1,?V0
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??bdb_linkedListAttrGetAtIndex::?relay`; Banked call to: bdb_linkedListAttrGetAtIndex
        MOV       ?V2,R2
        MOV       ?V3,R3
// 1700         if(attrListItem!=NULL)
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??bdb_RepReport_7 & 0xFFFF
// 1701         {
// 1702           pReportCmd->attrList[i].attrID = attrListItem->data->attrID;   
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1703           zclAttribute_t attrRec;
// 1704           uint8 attrRes = bdb_RepFindAttrEntry( clusterEndpointItem->endpoint, clusterEndpointItem->cluster, attrListItem->data->attrID, &attrRec );
// 1705           if( attrRes == BDBREPORTING_TRUE )
        ; Setup parameters for call to function bdb_RepFindAttrEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_RepFindAttrEntry::?relay`; Banked call to: bdb_RepFindAttrEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       A,R1
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_RepReport_7 & 0xFFFF
// 1706           {
// 1707             pReportCmd->attrList[i].dataType = attrRec.dataType;          
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPL,?V14
        MOV       DPH,?V15
        MOVX      @DPTR,A
// 1708             pReportCmd->attrList[i].attrData = attrRec.dataPtr;          
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1709             //Update last value reported
// 1710             if( zclAnalogDataType( attrRec.dataType ) )
        ; Setup parameters for call to function zclAnalogDataType
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
        MOV       A,R1
        JZ        ??bdb_RepReport_7
// 1711             { 
// 1712               //Only if the datatype is analog
// 1713               osal_memset( attrListItem->data->lastValueReported,0x00, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1714               osal_memcpy( attrListItem->data->lastValueReported, attrRec.dataPtr, zclGetDataTypeLength( attrRec.dataType ) );
        ; Setup parameters for call to function zclGetDataTypeLength
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
        MOV       A,R1
        MOV       R1,A
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       A,R1
        MOV       R4,A
        MOV       R5,#0x0
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
// 1715             }
// 1716           }
// 1717         }
// 1718       }
??bdb_RepReport_7:
        INC       ?V0
??bdb_RepReport_5:
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V0
        CLR       C
        SUBB      A,R0
        JNC       $+5
        LJMP      ??bdb_RepReport_6 & 0xFFFF
// 1719 
// 1720       zcl_SendReportCmd( clusterEndpointItem->endpoint, &dstAddr,
// 1721                          clusterEndpointItem->cluster, pReportCmd,
// 1722                          ZCL_FRAME_SERVER_CLIENT_DIR, BDB_REPORTING_DISABLE_DEFAULT_RSP, bdb_getZCLFrameCounter( ) );
        ; Setup parameters for call to function bdb_getZCLFrameCounter
        LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
        MOV       A,R1
        ; Setup parameters for call to function zcl_SendReportCmd
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP101_8
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
// 1723 
// 1724       osal_mem_free( pReportCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V10
        MOV       R3,?V11
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1725     }
// 1726   }
// 1727 }
??bdb_RepReport_4:
        MOV       A,#0x12
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock43
// 1728 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1729 static uint8 bdb_isAttrValueChangedSurpassDelta( uint8 datatype, uint8* delta, uint8* curValue, uint8* lastValue )
bdb_isAttrValueChangedSurpassDelta:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function bdb_isAttrValueChangedSurpassDelta
        CODE
// 1730 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
// 1731   uint8 res = BDBREPORTING_FALSE;
        MOV       R6,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
// 1732   switch ( datatype )
        MOV       A,R1
        ADD       A,#-0x20
        JZ        ??bdb_isAttrValueChangedSurpassDelta_0
        DEC       A
        JZ        ??bdb_isAttrValueChangedSurpassDelta_1
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_3 & 0xFFFF
        ADD       A,#-0x5
        JNZ       $+5
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_6 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_6 & 0xFFFF
        ADD       A,#-0xe
        JNZ       $+5
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_7 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_8 & 0xFFFF
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_9 & 0xFFFF
// 1733   {
// 1734     case ZCL_DATATYPE_UINT8:
// 1735     {
// 1736       uint8 L = *((uint8*)lastValue);
??bdb_isAttrValueChangedSurpassDelta_0:
        MOVX      A,@DPTR
        MOV       ?V0,A
// 1737       uint8 D = *((uint8*)delta);
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
// 1738       uint8 C = *((uint8*)curValue);
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1739       if( L >= C )
        MOV       A,R0
        MOV       R4,A
        MOV       R2,?V1
        MOV       R0,?V0
        MOV       A,R0
        CLR       C
        SUBB      A,?V1
        JC        ??bdb_isAttrValueChangedSurpassDelta_10
// 1740       {
// 1741         res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
        MOV       A,R0
        CLR       C
        SUBB      A,R2
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_11
// 1742       }
// 1743       else
// 1744       {
// 1745         res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
??bdb_isAttrValueChangedSurpassDelta_10:
        MOV       A,R2
        CLR       C
        SUBB      A,R0
??bdb_isAttrValueChangedSurpassDelta_11:
        MOV       R0,A
        SUBB      A,0xE0 /* A   */
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,R4
        MOV       A,R1
        SUBB      A,#0x0
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_12 & 0xFFFF
// 1746       }
// 1747       break;
// 1748     }
// 1749     case ZCL_DATATYPE_UINT16:
// 1750     {
// 1751       uint16 L = *((uint16*)lastValue);
??bdb_isAttrValueChangedSurpassDelta_1:
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
// 1752       uint16 D = *((uint16*)delta);
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1753       uint16 C = *((uint16*)curValue);
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
// 1754       if(L>=C)
        CLR       C
        MOV       A,R0
        SUBB      A,R2
        MOV       A,R1
        SUBB      A,R3
        JC        ??bdb_isAttrValueChangedSurpassDelta_13
// 1755       {
// 1756         res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
        MOV       A,R0
        CLR       C
        SUBB      A,R2
        MOV       R0,A
        MOV       A,R1
        SUBB      A,R3
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_14
// 1757       }
// 1758       else
// 1759       {
// 1760         res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
??bdb_isAttrValueChangedSurpassDelta_13:
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        MOV       R0,A
        MOV       A,R3
        SUBB      A,R1
??bdb_isAttrValueChangedSurpassDelta_14:
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,?V0
        MOV       A,R1
        SUBB      A,?V1
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_15 & 0xFFFF
// 1761       }
// 1762       break;
// 1763     }
// 1764     case ZCL_DATATYPE_UINT24:
// 1765     {
// 1766       uint24 L = *((uint24*)lastValue);
??bdb_isAttrValueChangedSurpassDelta_2:
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
// 1767       uint24 D = *((uint24*)delta);
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
// 1768       uint24 C = *((uint24*)curValue);
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
// 1769       if(L>=C)
        MOV       R0,#?V8
        MOV       R1,#?V0
        LCALL     ?UL_GT
        JC        ??bdb_isAttrValueChangedSurpassDelta_16
// 1770       {
// 1771         res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_17
// 1772       }
// 1773       else
// 1774       {
// 1775         res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
// 1776       }
// 1777       break;
// 1778     }
// 1779     case ZCL_DATATYPE_UINT32:
// 1780     {
// 1781       uint32 L = *((uint32*)lastValue);
??bdb_isAttrValueChangedSurpassDelta_3:
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
// 1782       uint32 D = *((uint32*)delta);
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
// 1783       uint32 C = *((uint32*)curValue);
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
// 1784       if(L>=C)
        MOV       R0,#?V8
        MOV       R1,#?V0
        LCALL     ?UL_GT
        JC        ??bdb_isAttrValueChangedSurpassDelta_16
// 1785       {
// 1786         res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
??bdb_isAttrValueChangedSurpassDelta_17:
        MOV       R0,#?V0
        MOV       R1,#?V8
        LCALL     ?L_SUB
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?UL_GT
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_15 & 0xFFFF
// 1787       }
// 1788       else
// 1789       {
// 1790         res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
??bdb_isAttrValueChangedSurpassDelta_16:
        MOV       R0,#?V8
        MOV       R1,#?V0
        LCALL     ?L_SUB
        MOV       R0,#?V4
        MOV       R1,#?V8
        LCALL     ?UL_GT
        LJMP      ??bdb_isAttrValueChangedSurpassDelta_15 & 0xFFFF
// 1791       }
// 1792       break;
// 1793     }
// 1794     case ZCL_DATATYPE_INT8:
// 1795     {
// 1796       int8 L = *((int8*)lastValue);
??bdb_isAttrValueChangedSurpassDelta_4:
        MOVX      A,@DPTR
        MOV       ?V0,A
// 1797       int8 D = *((int8*)delta);
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
// 1798       int8 C = *((int8*)curValue);
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1799       if(L>=C)
        MOV       A,R0
        MOV       R4,A
        RLC       A
        SUBB      A,0xE0 /* A   */
        MOV       R5,A
        MOV       A,?V1
        MOV       R2,A
        RLC       A
        SUBB      A,0xE0 /* A   */
        MOV       R3,A
        MOV       A,?V0
        MOV       R0,A
        RLC       A
        SUBB      A,0xE0 /* A   */
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,?V1
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??bdb_isAttrValueChangedSurpassDelta_18
// 1800       {
// 1801         res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
        MOV       A,R0
        CLR       C
        SUBB      A,R2
        MOV       R0,A
        MOV       A,R1
        SUBB      A,R3
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_19
// 1802       }
// 1803       else
// 1804       {
// 1805         res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
??bdb_isAttrValueChangedSurpassDelta_18:
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        MOV       R0,A
        MOV       A,R3
        SUBB      A,R1
??bdb_isAttrValueChangedSurpassDelta_19:
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,R4
        MOV       A,R1
        SUBB      A,R5
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_12
// 1806       }
// 1807       break;
// 1808     }
// 1809     case ZCL_DATATYPE_INT16:
// 1810     {
// 1811       int16 L = *((int16*)lastValue);
??bdb_isAttrValueChangedSurpassDelta_5:
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
// 1812       int16 D = *((int16*)delta);
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1813       int16 C = *((int16*)curValue);
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
// 1814       if(L>=C)
        CLR       C
        MOV       A,R0
        SUBB      A,R2
        MOV       A,R1
        SUBB      A,R3
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??bdb_isAttrValueChangedSurpassDelta_20
// 1815       {
// 1816         res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
        MOV       A,R0
        CLR       C
        SUBB      A,R2
        MOV       R0,A
        MOV       A,R1
        SUBB      A,R3
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_21
// 1817       }
// 1818       else
// 1819       {
// 1820         res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
??bdb_isAttrValueChangedSurpassDelta_20:
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        MOV       R0,A
        MOV       A,R3
        SUBB      A,R1
??bdb_isAttrValueChangedSurpassDelta_21:
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,?V0
        MOV       A,R1
        SUBB      A,?V1
??bdb_isAttrValueChangedSurpassDelta_12:
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_15
// 1821       }
// 1822       break;
// 1823     }
// 1824     case ZCL_DATATYPE_INT24:
// 1825     {
// 1826       int24 L = *((int24*)lastValue);
// 1827       int24 D = *((int24*)delta);
// 1828       int24 C = *((int24*)curValue);
// 1829       if(L>=C)
// 1830       {
// 1831         res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
// 1832       }
// 1833       else
// 1834       {
// 1835         res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
// 1836       }
// 1837       break;
// 1838     }
// 1839     case ZCL_DATATYPE_INT32:
// 1840     {
// 1841       int32 L = *((int32*)lastValue);
??bdb_isAttrValueChangedSurpassDelta_6:
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
// 1842       int32 D = *((int32*)delta);
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
// 1843       int32 C = *((int32*)curValue);
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
// 1844       if(L>=C)
        MOV       R0,#?V8
        MOV       R1,#?V0
        LCALL     ?SL_GT
        JC        ??bdb_isAttrValueChangedSurpassDelta_22
// 1845       {
// 1846         res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
        MOV       R0,#?V0
        MOV       R1,#?V8
        LCALL     ?L_SUB
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?SL_GT
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_15
// 1847       }
// 1848       else
// 1849       {
// 1850         res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
??bdb_isAttrValueChangedSurpassDelta_22:
        MOV       R0,#?V8
        MOV       R1,#?V0
        LCALL     ?L_SUB
        MOV       R0,#?V4
        MOV       R1,#?V8
        LCALL     ?SL_GT
??bdb_isAttrValueChangedSurpassDelta_15:
        JC        ??bdb_isAttrValueChangedSurpassDelta_9
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_23
// 1851       }
// 1852       break;
// 1853     }
// 1854     case ZCL_DATATYPE_SINGLE_PREC:
// 1855     {
// 1856       float L = *((float*)lastValue);
??bdb_isAttrValueChangedSurpassDelta_7:
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
// 1857       float D = *((float*)delta);
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
// 1858       float C = *((float*)curValue);
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
// 1859       if(L>=C)
        MOV       R0,#?V0
        MOV       R1,#?V8
        LCALL     ?FLT_GE
        JC        ??bdb_isAttrValueChangedSurpassDelta_24
// 1860       {
// 1861         res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
// 1862       }
// 1863       else
// 1864       {
// 1865         res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
        MOV       R0,#?V8
        MOV       R1,#?V0
        LCALL     ?FLT_SUB
        MOV       R0,#?V8
        MOV       R1,#?V4
        LCALL     ?FLT_GE
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_25
// 1866       }
// 1867       break;
// 1868     }
// 1869     case ZCL_DATATYPE_DOUBLE_PREC:
// 1870     {
// 1871       double L = *((double*)lastValue);
??bdb_isAttrValueChangedSurpassDelta_8:
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
// 1872       double D = *((double*)delta);
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
// 1873       double C = *((double*)curValue);
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
// 1874       if(L>=C)
        MOV       R0,#?V0
        MOV       R1,#?V8
        LCALL     ?FLT_GE
        JNC       ??bdb_isAttrValueChangedSurpassDelta_26
// 1875       {
// 1876         res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
??bdb_isAttrValueChangedSurpassDelta_24:
        MOV       R0,#?V0
        MOV       R1,#?V8
        LCALL     ?FLT_SUB
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?FLT_GE
??bdb_isAttrValueChangedSurpassDelta_25:
        JNC       ??bdb_isAttrValueChangedSurpassDelta_9
        SJMP      ??bdb_isAttrValueChangedSurpassDelta_23
// 1877       }
// 1878       else
// 1879       {
// 1880         res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
??bdb_isAttrValueChangedSurpassDelta_26:
        MOV       R0,#?V8
        MOV       R1,#?V0
        LCALL     ?FLT_SUB
        MOV       R0,#?V8
        MOV       R1,#?V4
        LCALL     ?FLT_GE
        JNC       ??bdb_isAttrValueChangedSurpassDelta_9
??bdb_isAttrValueChangedSurpassDelta_23:
        MOV       R6,#0x1
// 1881       }
// 1882       break;
// 1883     }
// 1884     case ZCL_DATATYPE_INT40:
// 1885     case ZCL_DATATYPE_INT48:
// 1886     case ZCL_DATATYPE_INT56:
// 1887     case ZCL_DATATYPE_UINT64:
// 1888     case ZCL_DATATYPE_INT64:
// 1889     case ZCL_DATATYPE_SEMI_PREC:
// 1890     case ZCL_DATATYPE_UINT40:
// 1891     case ZCL_DATATYPE_UINT48:
// 1892     case ZCL_DATATYPE_UINT56:
// 1893     case ZCL_DATATYPE_TOD:
// 1894     case ZCL_DATATYPE_DATE:
// 1895     case ZCL_DATATYPE_UTC:
// 1896     {
// 1897       // Not implemented
// 1898       res = BDBREPORTING_FALSE;
// 1899       break;
// 1900     }
// 1901     default:
// 1902     {
// 1903       res = BDBREPORTING_FALSE;
// 1904       break;
// 1905     }
// 1906   }
// 1907   return res;
??bdb_isAttrValueChangedSurpassDelta_9:
        MOV       A,R6
        MOV       R1,A
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
// 1908 }
          CFI EndBlock cfiBlock44
// 1909 
// 1910 /*
// 1911 * End: Helper methods
// 1912 */
// 1913 
// 1914 
// 1915 /*
// 1916 * Begin: Reporting timer related methods
// 1917 */
// 1918 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1919 static void bdb_RepRestartNextEventTimer( void )
bdb_RepRestartNextEventTimer:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function bdb_RepRestartNextEventTimer
        CODE
// 1920 {
        FUNCALL bdb_RepRestartNextEventTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 1921   uint32 timeMs;
// 1922   // convert from seconds to milliseconds
// 1923   timeMs = 1000L * (bdb_reportingNextEventTimeout); 
// 1924   osal_start_timerEx( bdb_TaskID, BDB_REPORT_TIMEOUT, timeMs );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#bdb_reportingNextEventTimeout
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_MUL
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1925 }
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock45
// 1926 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1927 static void bdb_RepSetupReporting( void )
bdb_RepSetupReporting:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function bdb_RepSetupReporting
        CODE
// 1928 {
        FUNCALL bdb_RepSetupReporting, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepSetupReporting, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepSetupReporting, bdb_clusterEndpointArrayFreeAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepSetupReporting, bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepSetupReporting, bdb_clusterEndpointArraySearch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepSetupReporting, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 1929   uint8 numArrayFlags, i;
// 1930   //Stop if reporting timer is active
// 1931   osal_stop_timerEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1932   
// 1933   numArrayFlags = bdb_reportingClusterEndpointArrayCount;
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        MOV       ?V3,A
// 1934   bdbReportFlagsHolder_t* arrayFlags = (bdbReportFlagsHolder_t *)osal_mem_alloc( sizeof( bdbReportFlagsHolder_t )*numArrayFlags );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       A,#0x2
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
// 1935   if( arrayFlags==NULL )
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bdb_RepSetupReporting_0 & 0xFFFF
// 1936   {
// 1937     return;
// 1938   }
// 1939   for( i=0; i<numArrayFlags; i++ )
        MOV       ?V2,#0x0
        SJMP      ??bdb_RepSetupReporting_1
// 1940   {
// 1941     arrayFlags[i].endpoint =  bdb_reportingClusterEndpointArray[i].endpoint;
??bdb_RepSetupReporting_2:
        MOV       R2,?V2
        MOV       ?V0,R2
        MOV       ?V1,#0x0
        MOV       A,#0x2
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,R6
        ADD       A,?V0
        MOV       R0,A
        MOV       A,R7
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R2
        MOV       B,#0xd
        MUL       AB
        MOV       R2,A
        MOV       R3,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R2
        MOV       R2,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R3
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      @DPTR,A
// 1942     arrayFlags[i].cluster =  bdb_reportingClusterEndpointArray[i].cluster;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 1943     arrayFlags[i].flags =  bdb_reportingClusterEndpointArray[i].flags;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      @DPTR,A
// 1944   }
        INC       ?V2
??bdb_RepSetupReporting_1:
        MOV       A,?V2
        CLR       C
        SUBB      A,?V3
        JC        ??bdb_RepSetupReporting_2
// 1945   
// 1946   if( bdb_reportingClusterEndpointArrayCount > 0 )
        MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
        MOVX      A,@DPTR
        JZ        ??bdb_RepSetupReporting_3
// 1947   {
// 1948     bdb_clusterEndpointArrayFreeAll( );
        ; Setup parameters for call to function bdb_clusterEndpointArrayFreeAll
        LCALL     `??bdb_clusterEndpointArrayFreeAll::?relay`; Banked call to: bdb_clusterEndpointArrayFreeAll
// 1949   }
// 1950   
// 1951   //Built or rebuilt the clusterEndpoint array
// 1952   bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray( );
??bdb_RepSetupReporting_3:
        ; Setup parameters for call to function bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        LCALL     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo; Banked call to: bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
// 1953   
// 1954   for( i=0; i<numArrayFlags;i++ )
        MOV       ?V2,#0x0
        SJMP      ??bdb_RepSetupReporting_4
// 1955   {
// 1956      uint8 clusterEndpointIndex = bdb_clusterEndpointArraySearch( arrayFlags[i].endpoint, arrayFlags[i].cluster );
??bdb_RepSetupReporting_5:
        MOV       A,?V2
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       A,#0x2
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,R6
        ADD       A,?V0
        MOV       R0,A
        MOV       A,R7
        ADDC      A,?V1
        MOV       ?V0,R0
        MOV       ?V1,A
        ; Setup parameters for call to function bdb_clusterEndpointArraySearch
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,?V1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
        MOV       A,R1
        MOV       R0,A
// 1957      if( clusterEndpointIndex != BDBREPORTING_INVALIDINDEX )
        MOV       A,#-0x1
        XRL       A,R0
        JZ        ??bdb_RepSetupReporting_6
// 1958      {
// 1959        bdb_reportingClusterEndpointArray[clusterEndpointIndex].flags = arrayFlags[i].flags;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R1
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1960      }
// 1961   }
??bdb_RepSetupReporting_6:
        INC       ?V2
??bdb_RepSetupReporting_4:
        MOV       A,?V2
        CLR       C
        SUBB      A,?V3
        JC        ??bdb_RepSetupReporting_5
// 1962   osal_mem_free( arrayFlags );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1963 }
??bdb_RepSetupReporting_0:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock46
// 1964 
// 1965                                

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1966 static void bdb_RepStopEventTimer( void )
bdb_RepStopEventTimer:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function bdb_RepStopEventTimer
        CODE
// 1967 {
        FUNCALL bdb_RepStopEventTimer, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1968   osal_stop_timerEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1969 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock47
// 1970 
// 1971 /*
// 1972 * End: Reporting timer related methods
// 1973 */
// 1974 
// 1975 /*
// 1976 * Begin: Ztack zcl helper methods
// 1977 */
// 1978 
// 1979 /*********************************************************************
// 1980  * @fn      bdb_FindEpDesc
// 1981  *
// 1982  * @brief   Find the EndPoint descriptor pointer
// 1983  *
// 1984  * @param   endPoint - EndPoint Id
// 1985  *
// 1986  * @return  CurrEpDescriptor - Pointer to found Simple Descriptor, NULL otherwise
// 1987  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1988 static endPointDesc_t* bdb_FindEpDesc( uint8 endPoint )
bdb_FindEpDesc:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function bdb_FindEpDesc
        CODE
// 1989 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1990   endPointDesc_t *CurrEpDescriptor = NULL;
// 1991   
// 1992   epList_t *bdb_CurrEpDescriptorNextInList;
// 1993   
// 1994   bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
        MOV       DPTR,#bdb_HeadEpDescriptorList
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??bdb_FindEpDesc_0
// 1995   CurrEpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
// 1996   
// 1997   while ( CurrEpDescriptor->endPoint != endPoint )
// 1998   {
// 1999     if ( bdb_CurrEpDescriptorNextInList->nextDesc->nextDesc != NULL )
// 2000     {
// 2001       bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
??bdb_FindEpDesc_1:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
??bdb_FindEpDesc_0:
        MOV       R5,A
// 2002       CurrEpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
        MOV       DPL,R4
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,A
// 2003     }
        MOVX      A,@DPTR
        XRL       A,R1
        JZ        ??bdb_FindEpDesc_2
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        JNZ       ??bdb_FindEpDesc_1
// 2004     else
// 2005     {
// 2006       return ( NULL );
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??bdb_FindEpDesc_3
// 2007     }
// 2008   }
// 2009   return CurrEpDescriptor;
??bdb_FindEpDesc_2:
        MOV       R2,DPL
        MOV       R3,DPH
??bdb_FindEpDesc_3:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 2010 }
          CFI EndBlock cfiBlock48
// 2011 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2012 static uint8 bdb_RepFindAttrEntry( uint8 endpoint, uint16 cluster, uint16 attrID, zclAttribute_t* attrRes )
bdb_RepFindAttrEntry:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function bdb_RepFindAttrEntry
        CODE
// 2013 {
        FUNCALL bdb_RepFindAttrEntry, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepFindAttrEntry, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepFindAttrEntry, zclGetDataTypeLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepFindAttrEntry, zcl_ReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V2,R1
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2014   epList_t *epCur = epList;
// 2015   uint8 i;
// 2016 
// 2017   zcl_memset(gAttrDataValue, 0, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#gAttrDataValue & 0xff
        MOV       R3,#(gAttrDataValue >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2018   for ( epCur = epList; epCur != NULL; epCur = epCur->nextDesc )
        MOV       DPTR,#epList
        SJMP      ??bdb_RepFindAttrEntry_0
??bdb_RepFindAttrEntry_1:
        MOV       DPL,?V4
        MOV       DPH,?V5
??bdb_RepFindAttrEntry_0:
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       A,?V4
        ORL       A,?V5
        JNZ       $+5
        LJMP      ??bdb_RepFindAttrEntry_2 & 0xFFFF
// 2019   {
// 2020     if( epCur->epDesc->endPoint == endpoint )
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,?V2
        XRL       A,R1
        JNZ       ??bdb_RepFindAttrEntry_1
// 2021     {
// 2022       zclAttrRecsList* attrItem = zclFindAttrRecsList( epCur->epDesc->endPoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
// 2023       
// 2024       if( (attrItem != NULL) && ( (attrItem->numAttributes > 0) && (attrItem->attrs != NULL) ) )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RepFindAttrEntry_1
        MOV       A,R2
        ADD       A,#0x7
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       ?V6,R0
        MOV       ?V7,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??bdb_RepFindAttrEntry_1
        MOV       A,R2
        ADD       A,#0x8
        INC       R0
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_RepFindAttrEntry_1
// 2025       {
// 2026         for ( i = 0; i < attrItem->numAttributes; i++ )
        MOV       ?V3,#0x0
        SJMP      ??bdb_RepFindAttrEntry_3
??bdb_RepFindAttrEntry_4:
        INC       ?V3
??bdb_RepFindAttrEntry_3:
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V3
        CLR       C
        SUBB      A,R0
        JNC       ??bdb_RepFindAttrEntry_1
// 2027         {
// 2028           if ( ( attrItem->attrs[i].clusterID == cluster ) && ( attrItem->attrs[i].attr.attrId ==  attrID ) )
        MOV       A,?V3
        MOV       ?V8,A
        MOV       ?V9,#0x0
        MOV       A,#0x3
        MOV       R0,#?V8
        LCALL     ?S_SHL
        MOV       R4,?V8
        MOV       R5,?V9
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,R4
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R5
        MOV       DPL,R0
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,?V0
        XRL       A,R0
        JNZ       ??bdb_RepFindAttrEntry_5
        MOV       A,?V1
        XRL       A,R1
??bdb_RepFindAttrEntry_5:
        JNZ       ??bdb_RepFindAttrEntry_4
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       DPH,A
        POP       DPL
          CFI CFA_SP SP+0
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,R6
        XRL       A,R0
        JNZ       ??bdb_RepFindAttrEntry_6
        MOV       A,R7
        XRL       A,R1
??bdb_RepFindAttrEntry_6:
        JNZ       ??bdb_RepFindAttrEntry_4
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 2029           {
// 2030             uint16 dataLen;
// 2031 
// 2032             attrRes->attrId = attrItem->attrs[i].attr.attrId;
        MOV       DPL,R6
        MOV       DPH,A
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2033             attrRes->dataType = attrItem->attrs[i].attr.dataType;
        MOV       A,R6
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,R4
        MOV       ?V3,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R5
        MOV       DPL,?V3
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      @DPTR,A
// 2034             attrRes->accessControl = attrItem->attrs[i].attr.accessControl;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,R4
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R5
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 2035 
// 2036             dataLen = zclGetDataTypeLength(attrRes->dataType);
        ; Setup parameters for call to function zclGetDataTypeLength
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
// 2037             zcl_ReadAttrData( endpoint, cluster, attrRes->attrId, gAttrDataValue, &dataLen );
        ; Setup parameters for call to function zcl_ReadAttrData
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V4,#gAttrDataValue & 0xff
        MOV       ?V5,#(gAttrDataValue >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,?V2
        LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 2038             attrRes->dataPtr = gAttrDataValue;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#gAttrDataValue & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(gAttrDataValue >> 8) & 0xff
        MOVX      @DPTR,A
// 2039             return BDBREPORTING_TRUE;
        MOV       R1,#0x1
        SJMP      ??bdb_RepFindAttrEntry_7
// 2040           }
// 2041         }
// 2042       }
// 2043     }
// 2044   }
// 2045   return BDBREPORTING_FALSE;
??bdb_RepFindAttrEntry_2:
        MOV       R1,#0x0
??bdb_RepFindAttrEntry_7:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
// 2046  }
          CFI EndBlock cfiBlock49
// 2047 
// 2048 /*
// 2049 * End: Ztack zcl helper methods
// 2050 */                   
// 2051 
// 2052 
// 2053 
// 2054 
// 2055 /*********************************************************************
// 2056 *********************************************************************/
// 2057 
// 2058 /*
// 2059 * Begin: Reporting attr app API methods 
// 2060 */
// 2061 
// 2062 
// 2063 
// 2064  /*********************************************************************
// 2065  * @fn          bdb_RepAddAttrCfgRecordDefaultToList
// 2066  *
// 2067  * @brief       Adds default configuration values for a Reportable Attribute Record
// 2068  *
// 2069  * @param       endpoint
// 2070  * @param       cluster
// 2071  * @param       attrID - Reporable attribute ID
// 2072  * @param       minReportInt - Default value for minimum reportable interval
// 2073  * @param       maxReportInt - Default value for maximum reportable interval
// 2074  * @param       reportableChange - buffer containing attribute value that is the 
// 2075  *              delta change to trigger a report
// 2076  *
// 2077  * @return      ZInvalidParameter - No endpoint, cluster, attribute ID found in simple desc
// 2078  *              ZFailure - No memory to allocate entry
// 2079  *              ZSuccess
// 2080  *              
// 2081  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2082 ZStatus_t bdb_RepAddAttrCfgRecordDefaultToList( uint8 endpoint, uint16 cluster, uint16 attrID, uint16 minReportInt, uint16 maxReportInt, uint8* reportableChange )
bdb_RepAddAttrCfgRecordDefaultToList:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function bdb_RepAddAttrCfgRecordDefaultToList
        CODE
// 2083 {
        FUNCALL bdb_RepAddAttrCfgRecordDefaultToList, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepAddAttrCfgRecordDefaultToList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepAddAttrCfgRecordDefaultToList, bdb_repAttrDefaultCfgRecordInitValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepAddAttrCfgRecordDefaultToList, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepAddAttrCfgRecordDefaultToList, bdb_repAttrDefaultCfgRecordsLinkedListAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepAddAttrCfgRecordDefaultToList, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V4,R1
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2084   uint8 status;
// 2085   epList_t *epCur;
// 2086   uint8 i;
// 2087   
// 2088   if( bdb_reportingAcceptDefaultConfs == BDBREPORTING_FALSE )
        MOV       DPTR,#bdb_reportingAcceptDefaultConfs
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_RepAddAttrCfgRecordDefaultToList_0 & 0xFFFF
// 2089   {
// 2090     //Don't accept anymore default attribute configurations
// 2091     return ZFailure;
// 2092   }
// 2093   
// 2094   //Find if endpoint and cluster values are valid
// 2095   uint8 foundEndpCluster = BDBREPORTING_FALSE;
        MOV       ?V5,#0x0
// 2096   for ( epCur = epList; epCur != NULL; epCur = epCur->nextDesc )
        MOV       DPTR,#epList
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??bdb_RepAddAttrCfgRecordDefaultToList_1
??bdb_RepAddAttrCfgRecordDefaultToList_2:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
??bdb_RepAddAttrCfgRecordDefaultToList_1:
        MOV       R7,A
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bdb_RepAddAttrCfgRecordDefaultToList_3 & 0xFFFF
// 2097   {
// 2098     if( epCur->epDesc->endPoint != endpoint )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,?V4
        XRL       A,R1
        JNZ       ??bdb_RepAddAttrCfgRecordDefaultToList_2
// 2099     {
// 2100       continue;
// 2101     }
// 2102     zclAttrRecsList* attrItem = zclFindAttrRecsList( epCur->epDesc->endPoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       R5,?V7
// 2103     if( attrItem== NULL )
        MOV       A,R2
        ORL       A,R5
        JZ        ??bdb_RepAddAttrCfgRecordDefaultToList_2
// 2104     {
// 2105       continue;
// 2106     }
// 2107     if( attrItem->numAttributes == 0 || attrItem->attrs == NULL )
        MOV       A,R2
        ADD       A,#0x7
        MOV       R0,A
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??bdb_RepAddAttrCfgRecordDefaultToList_2
        MOV       A,?V6
        ADD       A,#0x8
        INC       R0
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_RepAddAttrCfgRecordDefaultToList_2
// 2108     {
// 2109       continue;
// 2110     }
// 2111     for ( i = 0; i < attrItem->numAttributes; i++ )
        MOV       R6,#0x0
        SJMP      ??bdb_RepAddAttrCfgRecordDefaultToList_4
// 2112     {
// 2113       if( attrItem->attrs[i].clusterID != cluster )
// 2114       {
// 2115         continue;
??bdb_RepAddAttrCfgRecordDefaultToList_5:
        INC       R6
??bdb_RepAddAttrCfgRecordDefaultToList_4:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JNC       ??bdb_RepAddAttrCfgRecordDefaultToList_3
        MOV       A,R6
        MOV       ?V6,A
        MOV       ?V7,#0x0
        MOV       A,#0x3
        MOV       R0,#?V6
        LCALL     ?S_SHL
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        ADD       A,?V6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V7
        MOV       DPL,R0
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,?V0
        XRL       A,R0
        JNZ       ??bdb_RepAddAttrCfgRecordDefaultToList_6
        MOV       A,?V1
        XRL       A,R1
??bdb_RepAddAttrCfgRecordDefaultToList_6:
        JNZ       ??bdb_RepAddAttrCfgRecordDefaultToList_5
// 2116       }
// 2117       foundEndpCluster = BDBREPORTING_TRUE;
        MOV       ?V5,#0x1
// 2118       break;
// 2119     }
// 2120     break;
// 2121   }
// 2122   if( foundEndpCluster==BDBREPORTING_FALSE )
??bdb_RepAddAttrCfgRecordDefaultToList_3:
        MOV       A,?V5
        JNZ       ??bdb_RepAddAttrCfgRecordDefaultToList_7
// 2123   {
// 2124     return ZInvalidParameter;
        MOV       R1,#0x2
        LJMP      ??bdb_RepAddAttrCfgRecordDefaultToList_8 & 0xFFFF
// 2125   }
// 2126   
// 2127   //Add default cfg values to list
// 2128   bdbReportAttrDefaultCfgData_t* record = (bdbReportAttrDefaultCfgData_t *)osal_mem_alloc( sizeof( bdbReportAttrDefaultCfgData_t ) );
??bdb_RepAddAttrCfgRecordDefaultToList_7:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xd
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       R6,?V6
        MOV       R7,?V7
// 2129   if( record == NULL)
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bdb_RepAddAttrCfgRecordDefaultToList_0 & 0xFFFF
// 2130   {
// 2131     return ZFailure; //Out of memory
// 2132   }
// 2133   bdb_repAttrDefaultCfgRecordInitValues( record );
        ; Setup parameters for call to function bdb_repAttrDefaultCfgRecordInitValues
        LCALL     `??bdb_repAttrDefaultCfgRecordInitValues::?relay`; Banked call to: bdb_repAttrDefaultCfgRecordInitValues
// 2134   
// 2135   record->endpoint = endpoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,?V4
        MOVX      @DPTR,A
// 2136   record->cluster = cluster;
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
// 2137   record->attrID = attrID;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V3
        MOVX      @DPTR,A
// 2138   record->minReportInt = minReportInt;
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2139   record->maxReportInt = maxReportInt;
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2140   osal_memcpy( record->reportableChange, reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x9
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2141   
// 2142   status = bdb_repAttrDefaultCfgRecordsLinkedListAdd( &attrDefaultCfgRecordLinkedList, record );
// 2143   if( status != BDBREPORTING_SUCCESS )
        ; Setup parameters for call to function bdb_repAttrDefaultCfgRecordsLinkedListAdd
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#attrDefaultCfgRecordLinkedList & 0xff
        MOV       R3,#(attrDefaultCfgRecordLinkedList >> 8) & 0xff
        LCALL     `??bdb_repAttrDefaultCfgRecordsLinkedListAdd::?r`; Banked call to: bdb_repAttrDefaultCfgRecordsLinkedListAdd
        MOV       A,R1
        JZ        ??bdb_RepAddAttrCfgRecordDefaultToList_9
// 2144   {
// 2145     osal_mem_free( record );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2146     return ZFailure; //Out of memory
??bdb_RepAddAttrCfgRecordDefaultToList_0:
        MOV       R1,#0x1
        SJMP      ??bdb_RepAddAttrCfgRecordDefaultToList_8
// 2147   }
// 2148   
// 2149   return ZSuccess;
??bdb_RepAddAttrCfgRecordDefaultToList_9:
        MOV       R1,#0x0
??bdb_RepAddAttrCfgRecordDefaultToList_8:
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
// 2150 }
          CFI EndBlock cfiBlock50
// 2151 
// 2152 
// 2153 
// 2154  /*********************************************************************
// 2155  * @fn          bdb_RepChangedAttrValue
// 2156  *
// 2157  * @brief       Notify BDB reporting attribute module about the change of an 
// 2158  *              attribute value to validate the triggering of a reporting attribute message.
// 2159  *
// 2160  * @param       endpoint
// 2161  * @param       cluster
// 2162  * @param       attrID - Reporable attribute ID
// 2163  *
// 2164  * @return      ZInvalidParameter - No endpoint, cluster, attribute ID found in simple desc
// 2165  *              ZSuccess
// 2166  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2167 ZStatus_t bdb_RepChangedAttrValue( uint8 endpoint, uint16 cluster, uint16 attrID )
bdb_RepChangedAttrValue:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function bdb_RepChangedAttrValue
        CODE
// 2168 {
        FUNCALL bdb_RepChangedAttrValue, bdb_clusterEndpointArraySearch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, bdb_linkedListAttrSearch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, bdb_RepFindAttrEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, bdb_RepCalculateEventElapsedTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, zclAnalogDataType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, bdb_isAttrValueChangedSurpassDelta
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, bdb_RepStopEventTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, bdb_RepReport
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, bdb_clusterEndpointArrayIncrementAll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, bdb_clusterEndpointArrayUpdateAt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RepChangedAttrValue, bdb_RepStartReporting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       ?V10,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2169   uint8 indexClusterEndpoint = bdb_clusterEndpointArraySearch( endpoint, cluster );
        ; Setup parameters for call to function bdb_clusterEndpointArraySearch
        LCALL     `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
        MOV       A,R1
        MOV       ?V0,A
// 2170   if( indexClusterEndpoint == BDBREPORTING_INVALIDINDEX ) 
        MOV       A,#-0x1
        XRL       A,R1
        JNZ       $+5
        LJMP      ??bdb_RepChangedAttrValue_0 & 0xFFFF
// 2171   {
// 2172     //cluter-endpoint not found
// 2173     return ZInvalidParameter;
// 2174   }
// 2175   if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[indexClusterEndpoint].flags, BDBREPORTING_HASBINDING_FLAG_MASK ) == BDBREPORTING_FALSE ) 
        MOV       A,R1
        MOV       B,#0xd
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#bdb_reportingClusterEndpointArray & 0xff
        ADD       A,R0
        MOV       ?V8,A
        MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
        ADDC      A,R1
        MOV       ?V9,A
        MOV       DPL,?V8
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??bdb_RepChangedAttrValue_1 & 0xFFFF
// 2176   {
// 2177     //record has no binding
// 2178     return ZSuccess;
// 2179   }
// 2180   if( bdb_reportingClusterEndpointArray[indexClusterEndpoint].consolidatedMaxReportInt == BDBREPORTING_REPORTOFF ) 
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??bdb_RepChangedAttrValue_2
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??bdb_RepChangedAttrValue_2:
        JNZ       $+5
        LJMP      ??bdb_RepChangedAttrValue_1 & 0xFFFF
// 2181   {
// 2182     //reporting if off for this cluster
// 2183     return ZSuccess;
// 2184   }
// 2185   
// 2186   bdbReportAttrLive_t searchdata;
// 2187   searchdata.attrID = attrID;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V3
        MOVX      @DPTR,A
// 2188   bdbLinkedListAttrItem_t* attrNodeFound = bdb_linkedListAttrSearch( &(bdb_reportingClusterEndpointArray[indexClusterEndpoint].attrLinkedList), &searchdata );
        ; Setup parameters for call to function bdb_linkedListAttrSearch
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP102_8
        MOV       A,?V8
        ADD       A,#0xa
        MOV       R2,A
        CLR       A
        ADDC      A,?V9
        MOV       R3,A
        LCALL     `??bdb_linkedListAttrSearch::?relay`; Banked call to: bdb_linkedListAttrSearch
        MOV       ?V12,R2
        MOV       ?V13,R3
// 2189   if( attrNodeFound == NULL || attrNodeFound->data == NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RepChangedAttrValue_0
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_RepChangedAttrValue_0
// 2190   {
// 2191     return ZInvalidParameter; //Attr not found in cluster-endpoint array
// 2192   }
// 2193   
// 2194   zclAttribute_t attrRec;
// 2195   uint8 attrRes = bdb_RepFindAttrEntry( endpoint, cluster, attrID, &attrRec );
// 2196   if( attrRes != BDBREPORTING_TRUE )
        ; Setup parameters for call to function bdb_RepFindAttrEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V10
        LCALL     `??bdb_RepFindAttrEntry::?relay`; Banked call to: bdb_RepFindAttrEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,R1
        XRL       A,#0x1
        JZ        ??bdb_RepChangedAttrValue_3
// 2197   {
// 2198     return ZInvalidParameter; //Attr not found in attributes app data
??bdb_RepChangedAttrValue_0:
        MOV       R1,#0x2
        LJMP      ??bdb_RepChangedAttrValue_4 & 0xFFFF
// 2199   }
// 2200   
// 2201   //Get time of timer if active
// 2202   uint32 remainingTimeOfEvent = osal_get_timeoutEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
??bdb_RepChangedAttrValue_3:
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
// 2203   uint16 elapsedTime = 0;
        MOV       R6,#0x0
        MOV       R7,#0x0
// 2204   uint8 isTimeRemaining = BDBREPORTING_FALSE;
        MOV       ?V1,#0x0
// 2205   if( remainingTimeOfEvent > 0 )
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JZ        ??bdb_RepChangedAttrValue_5
// 2206   {
// 2207     elapsedTime = bdb_RepCalculateEventElapsedTime( remainingTimeOfEvent, bdb_reportingNextEventTimeout );
        ; Setup parameters for call to function bdb_RepCalculateEventElapsedTime
        MOV       DPTR,#bdb_reportingNextEventTimeout
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        LCALL     `??bdb_RepCalculateEventElapsedTime::?relay`; Banked call to: bdb_RepCalculateEventElapsedTime
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
// 2208     isTimeRemaining =  BDBREPORTING_TRUE;
        MOV       ?V1,#0x1
??bdb_RepChangedAttrValue_5:
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_RepChangedAttrValue_6
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R3,A
        CLR       C
        MOV       A,R0
        SUBB      A,R2
        MOV       A,R1
        SUBB      A,R3
        JNC       ??bdb_RepChangedAttrValue_1
// 2209   }
// 2210   
// 2211   if( bdb_reportingClusterEndpointArray[indexClusterEndpoint].consolidatedMinReportInt != BDBREPORTING_NOLIMIT &&
// 2212      (bdb_reportingClusterEndpointArray[indexClusterEndpoint].timeSinceLastReport + elapsedTime) <= bdb_reportingClusterEndpointArray[indexClusterEndpoint].consolidatedMinReportInt)
// 2213   {
// 2214       //Attr value has changed before minInterval, ommit reporting
// 2215       return ZSuccess;
// 2216   }
// 2217  
// 2218   
// 2219   if( zclAnalogDataType(attrRec.dataType) )
??bdb_RepChangedAttrValue_6:
        ; Setup parameters for call to function zclAnalogDataType
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
        MOV       A,R1
        JZ        ??bdb_RepChangedAttrValue_7
// 2220   {
// 2221     //Checking if   | lastvaluereported - currentvalue | >=  | changevalue |
// 2222     if( bdb_isAttrValueChangedSurpassDelta(attrRec.dataType, attrNodeFound->data->reportableChange, attrRec.dataPtr, attrNodeFound->data->lastValueReported ) == BDBREPORTING_FALSE )
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        ; Setup parameters for call to function bdb_isAttrValueChangedSurpassDelta
        MOV       A,R2
        ADD       A,#0x2
        MOV       ?V2,A
        CLR       A
        ADDC      A,R3
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R2
        ADD       A,#0x6
        MOV       R2,A
        JNC       ??bdb_RepChangedAttrValue_8
        INC       R3
??bdb_RepChangedAttrValue_8:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_isAttrValueChangedSurpassDelta::?relay`; Banked call to: bdb_isAttrValueChangedSurpassDelta
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,R1
        JZ        ??bdb_RepChangedAttrValue_1
// 2223     {
// 2224       //current value does not excced the delta, dont report
// 2225       return ZSuccess;
// 2226     }
// 2227   }
// 2228   else
// 2229   {
// 2230     //Attr is discrete, just report without checking the changeValue
// 2231   }
// 2232   
// 2233   //Stop reporting  
// 2234   bdb_RepStopEventTimer( );
??bdb_RepChangedAttrValue_7:
        ; Setup parameters for call to function bdb_RepStopEventTimer
        LCALL     `??bdb_RepStopEventTimer::?relay`; Banked call to: bdb_RepStopEventTimer
// 2235   bdb_RepReport( indexClusterEndpoint );
        ; Setup parameters for call to function bdb_RepReport
        MOV       R1,?V0
        LCALL     `??bdb_RepReport::?relay`; Banked call to: bdb_RepReport
// 2236   if( isTimeRemaining == BDBREPORTING_TRUE )
        MOV       A,#0x1
        XRL       A,?V1
        JNZ       ??bdb_RepChangedAttrValue_9
// 2237   {
// 2238     bdb_clusterEndpointArrayIncrementAll( elapsedTime, BDBREPORTING_FALSE );
        ; Setup parameters for call to function bdb_clusterEndpointArrayIncrementAll
        MOV       R1,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_clusterEndpointArrayIncrementAll::?relay`; Banked call to: bdb_clusterEndpointArrayIncrementAll
// 2239   }
// 2240   bdb_clusterEndpointArrayUpdateAt( indexClusterEndpoint, 0, BDBREPORTING_IGNORE, BDBREPORTING_IGNORE ); //return time since last report to zero
??bdb_RepChangedAttrValue_9:
        ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
        MOV       R5,#-0x1
        MOV       R4,#-0x1
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,?V0
        LCALL     `??bdb_clusterEndpointArrayUpdateAt::?relay`; Banked call to: bdb_clusterEndpointArrayUpdateAt
// 2241   //Restart reporting
// 2242   bdb_RepStartReporting( );
        ; Setup parameters for call to function bdb_RepStartReporting
        LCALL     `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
// 2243   
// 2244   return ZSuccess;
??bdb_RepChangedAttrValue_1:
        MOV       R1,#0x0
??bdb_RepChangedAttrValue_4:
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
// 2245 }
          CFI EndBlock cfiBlock51

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepConstructReportingData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepConstructReportingData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepMarkHasBindingInEndpointClusterArray::`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepMarkHasBindingInEndpointClusterArray

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepStartReporting::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepStartReporting

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepStartOrContinueReporting::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepStartOrContinueReporting

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepCalculateEventElapsedTime::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepCalculateEventElapsedTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepProcessEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessInConfigReportCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessInConfigReportCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessInReadReportCfgCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessInReadReportCfgCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepUpdateMarkBindings::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepUpdateMarkBindings

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_InitReportAttrLiveValues::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_InitReportAttrLiveValues

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_linkedListAttrInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_linkedListAttrInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_linkedListAttrAdd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_linkedListAttrAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_linkedListAttrSearch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_linkedListAttrSearch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_linkedListAttrRemove::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_linkedListAttrRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_linkedListAttrFreeAll::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_linkedListAttrFreeAll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_linkedListAttrClearList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_linkedListAttrClearList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_linkedListAttrGetAtIndex::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_linkedListAttrGetAtIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_clusterEndpointArrayInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_clusterEndpointArrayInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_clusterEndpointArrayAdd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_clusterEndpointArrayAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_clusterEndpointArrayGetMin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_clusterEndpointArrayGetMin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_clusterEndpointArrayRemoveAt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_clusterEndpointArrayRemoveAt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_clusterEndpointArrayMoveTo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_clusterEndpointArrayMoveTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_clusterEndpointArrayUpdateAt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_clusterEndpointArrayUpdateAt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_clusterEndpointArrayFreeAll::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_clusterEndpointArrayFreeAll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_clusterEndpointArraySearch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_clusterEndpointArraySearch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_clusterEndpointArrayIncrementAll::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_clusterEndpointArrayIncrementAll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrDefaultCfgRecordInitValues::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrDefaultCfgRecordInitValues

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrDefaultCfgRecordsLinkedListInit::?`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrDefaultCfgRecordsLinkedListInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrDefaultCfgRecordsLinkedListAdd::?r`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrDefaultCfgRecordsLinkedListAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrDefaultCfgRecordsLinkedListSearch:`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrDefaultCfgRecordsLinkedListSearch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrDefaultCfgRecordsLinkedListRemove:`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrDefaultCfgRecordsLinkedListRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bdb_repAttrDefaultCfgRecordsLinkedListFreeAll:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrDefaultCfgRecordsLinkedListFreeAll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrCfgRecordsArrayInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrCfgRecordsArrayInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrCfgRecordsArrayCreate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrCfgRecordsArrayCreate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrCfgRecordsArrayAdd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrCfgRecordsArrayAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrCfgRecordsArrayFreeAll::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrCfgRecordsArrayFreeAll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrCfgRecordsArraySearch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrCfgRecordsArraySearch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_repAttrCfgRecordsArrayConsolidateValues::`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrCfgRecordsArrayConsolidateValues

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bdb_repAttrBuildClusterEndPointArrayBasedOnCo:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepInitAttrCfgRecords::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepInitAttrCfgRecords

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepConstructAttrCfgArray::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepConstructAttrCfgArray

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepLoadCfgRecords::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepLoadCfgRecords

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepReport::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepReport

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_isAttrValueChangedSurpassDelta::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_isAttrValueChangedSurpassDelta

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepRestartNextEventTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepRestartNextEventTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepSetupReporting::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepSetupReporting

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepStopEventTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepStopEventTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_FindEpDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_FindEpDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepFindAttrEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepFindAttrEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepAddAttrCfgRecordDefaultToList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepAddAttrCfgRecordDefaultToList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RepChangedAttrValue::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RepChangedAttrValue

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0, 0, 0, 0}>`:
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        END
// 2246 
// 2247 #endif //BDB_REPORTING
// 2248 
// 2249 /*
// 2250 * End: Reporting attr app API methods 
// 2251 */
// 
// 9 970 bytes in segment BANKED_CODE
//   312 bytes in segment BANK_RELAYS
//     8 bytes in segment XDATA_ROM_C
//    81 bytes in segment XDATA_Z
// 
//   312 bytes of CODE     memory
//     4 bytes of CONST    memory (+ 4 bytes shared)
// 9 970 bytes of HUGECODE memory
//    81 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
