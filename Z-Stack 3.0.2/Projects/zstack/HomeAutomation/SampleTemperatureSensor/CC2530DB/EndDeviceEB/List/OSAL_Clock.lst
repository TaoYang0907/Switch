###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  15:06:49
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\osal\common\OSAL_Clock.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW8100.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\osal\common\OSAL_Clock.c" -D BDB_REPORTING -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING
#        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -D ZCL_ON_OFF -D ZCL_REPORT
#        -D ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\OSAL_Clock.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\OSAL_Clock.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\osal\common\OSAL_Clock.c
      1          /******************************************************************************
      2            Filename:       OSAL_Clock.c
      3            Revised:        $Date: 2014-06-30 16:38:56 -0700 (Mon, 30 Jun 2014) $
      4            Revision:       $Revision: 39297 $
      5          
      6            Description:    OSAL Clock definition and manipulation functions.
      7          
      8            Copyright 2008-2014 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          ******************************************************************************/
     38          
     39          /*********************************************************************
     40           * INCLUDES
     41           */
     42          
     43          #include "comdef.h"
     44          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     45          #include "OnBoard.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Clock.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          #define	YearLength(yr)	((uint16)(IsLeapYear(yr) ? 366 : 365))
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          #define	BEGYEAR  2000     //  UTC started at 00:00:00 January 1, 2000
     60          
     61          #define	DAY      86400UL  // 24 hours * 60 minutes * 60 seconds
     62          
     63          /* Check Below for an explanation */
     64          #define COUNTER_TICK320US 204775UL 
     65          
     66          /* converted COUNTER_TICK320US from 320us ticks to ms */
     67          #define COUNTER_ELAPSEDMS 65528UL   
     68          
     69          /* 
     70           * Each tick is 320us so a value greater than 3 implies 
     71           * that atleast one millisecond has elapsed 320us*4 > 1 ms 
     72           */
     73          #define TIMER_CLOCK_UPDATE 4 
     74                                            
     75          /*********************************************************************
     76           * TYPEDEFS
     77           */
     78          
     79          /*********************************************************************
     80           * GLOBAL VARIABLES
     81           */
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          extern uint32 macMcuPrecisionCount(void);
     91          
     92          #if (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
     93          
     94            /*  This function is used to divide a 31 bit dividend by a 16 bit
     95             *  divisor and return a packed 16 bit quotient and 16 bit
     96             *  remainder.
     97             *
     98             *  Note: This routine takes ~25.6us @32MHz. With C overhead, the
     99             *        time is ~32us.
    100             *
    101             *  dividend - 31 bit dividend.
    102             *  divisor - 16 bit divisor.
    103             *
    104             *  return - MSW divisor; LSW quotient
    105             */
    106            extern __near_func uint32 osalMcuDivide31By16To16( uint32 dividend, uint16 divisor );
    107          
    108            #define CONVERT_320US_TO_MS_ELAPSED_REMAINDER( x, y, z ) st( \
    109                                                                         \
    110              /* The 16 bit quotient is in MSW and */                    \
    111              /* the 16 bit remainder is in LSW. */                      \
    112              x = osalMcuDivide31By16To16( x, 25 );                      \
    113                                                                         \
    114              /* Add quotient to y */                                    \
    115              y += (x >> 16);                                            \
    116                                                                         \
    117              /* Copy remainder to z */                                  \
    118              z = (uint16)(x & 0x0FFFF);                                 \
    119            )
    120            
    121            #define CONVERT_MS_TO_S_ELAPSED_REMAINDER( x, y, z ) st(     \
    122                                                                         \
    123              /* The 16 bit quotient is in MSW and */                    \
    124              /* the 16 bit remainder is in LSW. */                      \
    125              x = osalMcuDivide31By16To16( x, 1000 );                    \
    126                                                                         \
    127              /* Add quotient to y */                                    \
    128              y += (x >> 16);                                            \
    129                                                                         \
    130              /* Copy remainder to z */                                  \
    131              z = (uint16)(x & 0x0FFFF);                                 \
    132            )
    133          
    134          #else /* (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533) */
    135          
    136            #define CONVERT_320US_TO_MS_ELAPSED_REMAINDER( x, y, z ) st( \
    137              y += x / 25;                                               \
    138              z = x % 25;                                                \
    139            )
    140            
    141            #define CONVERT_MS_TO_S_ELAPSED_REMAINDER( x, y, z ) st(     \
    142              y += x / 1000;                                             \
    143              z = x % 1000;                                              \
    144            )
    145          #endif /* (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533) */
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          #ifndef USE_ICALL

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151            static uint32 previousMacTimerTick = 0;
   \                     previousMacTimerTick:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152            static uint16 remUsTicks = 0;
   \                     remUsTicks:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    153          #endif /* !USE_ICALL */
    154            

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          static uint32 timeMSec = 0;
   \                     timeMSec:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    156          
    157          // number of seconds since 0 hrs, 0 minutes, 0 seconds, on the
    158          // 1st of January 2000 UTC

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          UTCTime OSAL_timeSeconds = 0;
   \                     OSAL_timeSeconds:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    160          
    161          /*********************************************************************
    162           * LOCAL FUNCTION PROTOTYPES
    163           */
    164          static uint8 monthLength( uint8 lpyr, uint8 mon );
    165          
    166          static void osalClockUpdate( uint32 elapsedMSec );
    167          
    168          /*********************************************************************
    169           * FUNCTIONS
    170           *********************************************************************/
    171          
    172          /*********************************************************************
    173           * @fn      osalTimeUpdate
    174           *
    175           * @brief   Uses the free running rollover count of the MAC backoff timer;
    176           *          this timer runs freely with a constant 320 usec interval.  The
    177           *          count of 320-usec ticks is converted to msecs and used to update
    178           *          the OSAL clock and Timers by invoking osalClockUpdate() and
    179           *          osalTimerUpdate().  This function is intended to be invoked
    180           *          from the background, not interrupt level.
    181           *
    182           * @param   None.
    183           *
    184           * @return  None.
    185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          void osalTimeUpdate( void )
   \                     osalTimeUpdate:
    187          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
    188          #ifndef USE_ICALL
    189            /* Note that when ICall is in use the OSAL tick is not updated
    190             * in this fashion but rather through real OS timer tick. */
    191            halIntState_t intState;
    192            uint32 tmp;
    193            uint32 ticks320us;
    194            uint32 elapsedMSec = 0;
   \   000005   75..00       MOV       ?V8,#0x0
   \   000008   75..00       MOV       ?V9,#0x0
   \   00000B   75..00       MOV       ?V10,#0x0
   \   00000E   75..00       MOV       ?V11,#0x0
    195          
    196            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000011   A2AF         MOV       C,0xa8.7
   \   000013   E4           CLR       A
   \   000014   33           RLC       A
   \   000015   FE           MOV       R6,A
   \   000016   C2AF         CLR       0xa8.7
    197            // Get the free-running count of 320us timer ticks
    198            tmp = macMcuPrecisionCount();
   \   000018                ; Setup parameters for call to function macMcuPrecisionCount
   \   000018   12....       LCALL     `??macMcuPrecisionCount::?relay`; Banked call to: macMcuPrecisionCount
   \   00001B   8A..         MOV       ?V0,R2
   \   00001D   8B..         MOV       ?V1,R3
   \   00001F   8C..         MOV       ?V2,R4
   \   000021   8D..         MOV       ?V3,R5
    199            HAL_EXIT_CRITICAL_SECTION(intState);
   \   000023   EE           MOV       A,R6
   \   000024   A2E0         MOV       C,0xE0 /* A   */.0
   \   000026   92AF         MOV       0xa8.7,C
    200            
    201            if ( tmp != previousMacTimerTick )
   \   000028   90....       MOV       DPTR,#previousMacTimerTick
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?L_EQ_X
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??osalTimeUpdate_0 & 0xFFFF
    202            {
    203              // Calculate the elapsed ticks of the free-running timer.
    204              ticks320us = (tmp - previousMacTimerTick) & 0xffffffffu;
   \   000035   8A..         MOV       ?V4,R2
   \   000037   8B..         MOV       ?V5,R3
   \   000039   8C..         MOV       ?V6,R4
   \   00003B   8D..         MOV       ?V7,R5
   \   00003D   90....       MOV       DPTR,#previousMacTimerTick
   \   000040   78..         MOV       R0,#?V4
   \   000042   12....       LCALL     ?L_SUB_X
    205          
    206              if (ticks320us >= TIMER_CLOCK_UPDATE )
   \   000045   90....       MOV       DPTR,#__Constant_4
   \   000048   78..         MOV       R0,#?V4
   \   00004A   12....       LCALL     ?UL_GE_X
   \   00004D   4003         JC        $+5
   \   00004F   02....       LJMP      ??osalTimeUpdate_0 & 0xFFFF
    207              {
    208                // Store the MAC Timer tick count for the next time through this function.
    209                previousMacTimerTick = tmp;
   \   000052   90....       MOV       DPTR,#previousMacTimerTick
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?L_MOV_TO_X
   \   00005A   8010         SJMP      ??osalTimeUpdate_1
    210                
    211                /*
    212                 * remUsTicks can have a maximum value of 24 (Since remusTicks got by mod 
    213                 * of 25). The value of COUNTER_TICK320US is a multiple of 25 and the 
    214                 * quotient of  CONVERT_320US_TO_MS_ELAPSED_REMAINDER() does not exceed 
    215                 * 0xFFFF or 16 bit.
    216                 */
    217                while(ticks320us >= COUNTER_TICK320US)
    218                {
    219                  ticks320us  -= COUNTER_TICK320US;
   \                     ??osalTimeUpdate_2:
   \   00005C   90....       MOV       DPTR,#__Constant_fffce019
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?L_ADD_X
    220                  elapsedMSec += COUNTER_ELAPSEDMS;
   \   000064   90....       MOV       DPTR,#__Constant_fff8
   \   000067   78..         MOV       R0,#?V8
   \   000069   12....       LCALL     ?L_ADD_X
    221                }
   \                     ??osalTimeUpdate_1:
   \   00006C   90....       MOV       DPTR,#__Constant_31fe7
   \   00006F   78..         MOV       R0,#?V4
   \   000071   12....       LCALL     ?UL_GE_X
   \   000074   40E6         JC        ??osalTimeUpdate_2
    222              
    223                // update converted number with remaining ticks from loop and the
    224                // accumulated remainder from loop
    225                tmp = (ticks320us * 8) + remUsTicks;
    226          
    227                // Convert the 320 us ticks into milliseconds and a remainder
    228                CONVERT_320US_TO_MS_ELAPSED_REMAINDER( tmp, elapsedMSec, remUsTicks );
   \   000076                ; Setup parameters for call to function osalMcuDivide31By16To16
   \   000076   75..19       MOV       ?V0,#0x19
   \   000079   75..00       MOV       ?V1,#0x0
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   7403         MOV       A,#0x3
   \   000083   78..         MOV       R0,#?V4
   \   000085   12....       LCALL     ?L_SHL
   \   000088   90....       MOV       DPTR,#remUsTicks
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   F5..         MOV       ?V0,A
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F5..         MOV       ?V1,A
   \   000092   E4           CLR       A
   \   000093   F5..         MOV       ?V2,A
   \   000095   F5..         MOV       ?V3,A
   \   000097   78..         MOV       R0,#?V4
   \   000099   79..         MOV       R1,#?V0
   \   00009B   12....       LCALL     ?L_ADD
   \   00009E   AA..         MOV       R2,?V4
   \   0000A0   AB..         MOV       R3,?V5
   \   0000A2   AC..         MOV       R4,?V6
   \   0000A4   AD..         MOV       R5,?V7
   \   0000A6   12....       LCALL     osalMcuDivide31By16To16 & 0xFFFF
   \   0000A9   7402         MOV       A,#0x2
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   8A..         MOV       ?V4,R2
   \   0000B0   8B..         MOV       ?V5,R3
   \   0000B2   8C..         MOV       ?V6,R4
   \   0000B4   8D..         MOV       ?V7,R5
   \   0000B6   7410         MOV       A,#0x10
   \   0000B8   78..         MOV       R0,#?V4
   \   0000BA   12....       LCALL     ?UL_SHR
   \   0000BD   78..         MOV       R0,#?V8
   \   0000BF   79..         MOV       R1,#?V4
   \   0000C1   12....       LCALL     ?L_ADD
   \   0000C4   90....       MOV       DPTR,#remUsTicks
   \   0000C7   EA           MOV       A,R2
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   EB           MOV       A,R3
   \   0000CB   F0           MOVX      @DPTR,A
    229                
    230                // Update OSAL Clock and Timers
    231                osalClockUpdate( elapsedMSec );
   \   0000CC                ; Setup parameters for call to function osalClockUpdate
   \   0000CC   AA..         MOV       R2,?V8
   \   0000CE   AB..         MOV       R3,?V9
   \   0000D0   AC..         MOV       R4,?V10
   \   0000D2   AD..         MOV       R5,?V11
   \   0000D4   12....       LCALL     `??osalClockUpdate::?relay`; Banked call to: osalClockUpdate
    232                osalTimerUpdate( elapsedMSec );
   \   0000D7                ; Setup parameters for call to function osalTimerUpdate
   \   0000D7   AA..         MOV       R2,?V8
   \   0000D9   AB..         MOV       R3,?V9
   \   0000DB   AC..         MOV       R4,?V10
   \   0000DD   AD..         MOV       R5,?V11
   \   0000DF   12....       LCALL     `??osalTimerUpdate::?relay`; Banked call to: osalTimerUpdate
    233              }
    234            }
    235          #endif /* USE_ICALL */
    236          }
   \                     ??osalTimeUpdate_0:
   \   0000E2   7F0C         MOV       R7,#0xc
   \   0000E4   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000E7                REQUIRE _A_IEN0
    237          
    238          /*********************************************************************
    239           * @fn      osalClockUpdate
    240           *
    241           * @brief   Updates the OSAL Clock time with elapsed milliseconds.
    242           *
    243           * @param   elapsedMSec - elapsed milliseconds
    244           *
    245           * @return  none
    246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          static void osalClockUpdate( uint32 elapsedMSec )
   \                     osalClockUpdate:
    248          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    249            uint32 tmp;
    250            halIntState_t intState;
    251            
    252            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   FE           MOV       R6,A
   \   000012   C2AF         CLR       0xa8.7
    253            // Add elapsed milliseconds to the saved millisecond portion of time
    254            timeMSec += elapsedMSec;
   \   000014   90....       MOV       DPTR,#timeMSec
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?L_ADD_TO_X
    255          
    256            // Roll up milliseconds to the number of seconds
    257            if ( timeMSec >= 1000 )
   \   00001C   90....       MOV       DPTR,#__Constant_3e8
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?L_MOV_X
   \   000024   90....       MOV       DPTR,#timeMSec
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?UL_GT_X
   \   00002C   4041         JC        ??osalClockUpdate_0
    258            {
    259              tmp = timeMSec;
    260              CONVERT_MS_TO_S_ELAPSED_REMAINDER(tmp, OSAL_timeSeconds, timeMSec);
   \   00002E                ; Setup parameters for call to function osalMcuDivide31By16To16
   \   00002E   75..E8       MOV       ?V0,#-0x18
   \   000031   75..03       MOV       ?V1,#0x3
   \   000034   78..         MOV       R0,#?V0
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   90....       MOV       DPTR,#timeMSec
   \   00003C   12....       LCALL     ?XLOAD_R2345
   \   00003F   12....       LCALL     osalMcuDivide31By16To16 & 0xFFFF
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   \   000047   8A..         MOV       ?V4,R2
   \   000049   8B..         MOV       ?V5,R3
   \   00004B   8A..         MOV       ?V0,R2
   \   00004D   8B..         MOV       ?V1,R3
   \   00004F   8C..         MOV       ?V2,R4
   \   000051   8D..         MOV       ?V3,R5
   \   000053   7410         MOV       A,#0x10
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?UL_SHR
   \   00005A   90....       MOV       DPTR,#OSAL_timeSeconds
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?L_ADD_TO_X
   \   000062   A8..         MOV       R0,?V4
   \   000064   A9..         MOV       R1,?V5
   \   000066   E4           CLR       A
   \   000067   FA           MOV       R2,A
   \   000068   FB           MOV       R3,A
   \   000069   90....       MOV       DPTR,#timeMSec
   \   00006C   12....       LCALL     ?XSTORE_R0123
    261            }
    262            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osalClockUpdate_0:
   \   00006F   EE           MOV       A,R6
   \   000070   A2E0         MOV       C,0xE0 /* A   */.0
   \   000072   92AF         MOV       0xa8.7,C
    263          }
   \   000074   7F08         MOV       R7,#0x8
   \   000076   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000079                REQUIRE _A_IEN0
    264          
    265          #if defined HAL_BOARD_CC2538 || defined USE_ICALL
    266          /*********************************************************************
    267           * @fn      osalAdjustTimer
    268           *
    269           * @brief   Updates the OSAL Clock and Timer with elapsed milliseconds.
    270           *
    271           * @param   MSec - elapsed milliseconds
    272           *
    273           * @return  none
    274           */
    275          void osalAdjustTimer(uint32 Msec )
    276          {
    277            /* Disable SysTick interrupts */ 
    278            SysTickIntDisable(); 
    279            
    280            osalClockUpdate(Msec);
    281            osalTimerUpdate(Msec);
    282            
    283            /* Enable SysTick interrupts */ 
    284            SysTickIntEnable(); 
    285          }
    286          #endif /* HAL_BOARD_CC2538 || USE_ICALL */
    287          
    288          /*********************************************************************
    289           * @fn      osal_setClock
    290           *
    291           * @brief   Set the new time.  This will only set the seconds portion
    292           *          of time and doesn't change the factional second counter.
    293           *
    294           * @param   newTime - number of seconds since 0 hrs, 0 minutes,
    295           *                    0 seconds, on the 1st of January 2000 UTC
    296           *
    297           * @return  none
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void osal_setClock( UTCTime newTime )
   \                     osal_setClock:
    300          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    301            HAL_CRITICAL_STATEMENT(OSAL_timeSeconds = newTime);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   F9           MOV       R1,A
   \   000012   C2AF         CLR       0xa8.7
   \   000014   90....       MOV       DPTR,#OSAL_timeSeconds
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?L_MOV_TO_X
   \   00001C   E9           MOV       A,R1
   \   00001D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001F   92AF         MOV       0xa8.7,C
    302          }
   \   000021   7F04         MOV       R7,#0x4
   \   000023   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000026                REQUIRE _A_IEN0
    303          
    304          /*********************************************************************
    305           * @fn      osal_getClock
    306           *
    307           * @brief   Gets the current time.  This will only return the seconds
    308           *          portion of time and doesn't include the factional second
    309           *          counter.
    310           *
    311           * @param   none
    312           *
    313           * @return  number of seconds since 0 hrs, 0 minutes, 0 seconds,
    314           *          on the 1st of January 2000 UTC
    315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          UTCTime osal_getClock( void )
   \                     osal_getClock:
    317          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    318            return ( OSAL_timeSeconds );
   \   000004   90....       MOV       DPTR,#OSAL_timeSeconds
   \   000007   12....       LCALL     ?XLOAD_R2345
   \   00000A   D083         POP       DPH
   \   00000C   D082         POP       DPL
   \   00000E   02....       LJMP      ?BRET
    319          }
    320          
    321          /*********************************************************************
    322           * @fn      osal_ConvertUTCTime
    323           *
    324           * @brief   Converts UTCTime to UTCTimeStruct
    325           *
    326           * @param   tm - pointer to breakdown struct
    327           *
    328           * @param   secTime - number of seconds since 0 hrs, 0 minutes,
    329           *          0 seconds, on the 1st of January 2000 UTC
    330           *
    331           * @return  none
    332           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    333          void osal_ConvertUTCTime( UTCTimeStruct *tm, UTCTime secTime )
   \                     osal_ConvertUTCTime:
    334          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   741A         MOV       A,#0x1a
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   78..         MOV       R0,#?V4
   \   00001C   12....       LCALL     ?L_MOV_X
    335            // calculate the time less than a day - hours, minutes, seconds
    336            {
    337              uint32 day = secTime % DAY;
   \   00001F   85....       MOV       ?V0,?V4
   \   000022   85....       MOV       ?V1,?V5
   \   000025   85....       MOV       ?V2,?V6
   \   000028   85....       MOV       ?V3,?V7
   \   00002B   90....       MOV       DPTR,#__Constant_15180
   \   00002E   78..         MOV       R0,#?V8
   \   000030   12....       LCALL     ?L_MOV_X
   \   000033   78..         MOV       R0,#?V0
   \   000035   79..         MOV       R1,#?V8
   \   000037   12....       LCALL     ?UL_DIV_MOD
    338              tm->seconds = day % 60UL;
   \   00003A   85....       MOV       ?V12,?V8
   \   00003D   85....       MOV       ?V13,?V9
   \   000040   85....       MOV       ?V14,?V10
   \   000043   85....       MOV       ?V15,?V11
   \   000046   90....       MOV       DPTR,#__Constant_3c
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?L_MOV_X
   \   00004E   78..         MOV       R0,#?V12
   \   000050   79..         MOV       R1,#?V0
   \   000052   12....       LCALL     ?UL_DIV_MOD
   \   000055   85..82       MOV       DPL,?XSP + 0
   \   000058   85..83       MOV       DPH,?XSP + 1
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F8           MOV       R0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F583         MOV       DPH,A
   \   000061   8882         MOV       DPL,R0
   \   000063   E5..         MOV       A,?V0
   \   000065   F0           MOVX      @DPTR,A
    339              tm->minutes = (day % 3600UL) / 60UL;
   \   000066   85....       MOV       ?V12,?V8
   \   000069   85....       MOV       ?V13,?V9
   \   00006C   85....       MOV       ?V14,?V10
   \   00006F   85....       MOV       ?V15,?V11
   \   000072   90....       MOV       DPTR,#__Constant_e10
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?L_MOV_X
   \   00007A   78..         MOV       R0,#?V12
   \   00007C   79..         MOV       R1,#?V0
   \   00007E   12....       LCALL     ?UL_DIV_MOD
   \   000081   90....       MOV       DPTR,#__Constant_3c
   \   000084   78..         MOV       R0,#?V12
   \   000086   12....       LCALL     ?L_MOV_X
   \   000089   78..         MOV       R0,#?V0
   \   00008B   79..         MOV       R1,#?V12
   \   00008D   12....       LCALL     ?UL_DIV_MOD
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F8           MOV       R0,A
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   F583         MOV       DPH,A
   \   00009C   8882         MOV       DPL,R0
   \   00009E   A3           INC       DPTR
   \   00009F   E5..         MOV       A,?V0
   \   0000A1   F0           MOVX      @DPTR,A
    340              tm->hour = day / 3600UL;
   \   0000A2   90....       MOV       DPTR,#__Constant_e10
   \   0000A5   78..         MOV       R0,#?V0
   \   0000A7   12....       LCALL     ?L_MOV_X
   \   0000AA   78..         MOV       R0,#?V8
   \   0000AC   79..         MOV       R1,#?V0
   \   0000AE   12....       LCALL     ?UL_DIV_MOD
   \   0000B1   85..82       MOV       DPL,?XSP + 0
   \   0000B4   85..83       MOV       DPH,?XSP + 1
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   F8           MOV       R0,A
   \   0000B9   A3           INC       DPTR
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   F583         MOV       DPH,A
   \   0000BD   8882         MOV       DPL,R0
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   E5..         MOV       A,?V8
   \   0000C3   F0           MOVX      @DPTR,A
    341            }
    342          
    343            // Fill in the calendar - day, month, year
    344            {
    345              uint16 numDays = secTime / DAY;
   \   0000C4   90....       MOV       DPTR,#__Constant_15180
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?L_MOV_X
   \   0000CC   78..         MOV       R0,#?V4
   \   0000CE   79..         MOV       R1,#?V0
   \   0000D0   12....       LCALL     ?UL_DIV_MOD
   \   0000D3   AE..         MOV       R6,?V4
   \   0000D5   AF..         MOV       R7,?V5
    346              tm->year = BEGYEAR;
   \   0000D7   85..82       MOV       DPL,?XSP + 0
   \   0000DA   85..83       MOV       DPH,?XSP + 1
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   2405         ADD       A,#0x5
   \   0000E0   F5..         MOV       ?V0,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   3400         ADDC      A,#0x0
   \   0000E6   F5..         MOV       ?V1,A
   \   0000E8   85..82       MOV       DPL,?V0
   \   0000EB   F583         MOV       DPH,A
   \   0000ED   74D0         MOV       A,#-0x30
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   7407         MOV       A,#0x7
   \   0000F3   8018         SJMP      ??osal_ConvertUTCTime_0
    347              while ( numDays >= YearLength( tm->year ) )
    348              {
    349                numDays -= YearLength( tm->year );
   \                     ??osal_ConvertUTCTime_1:
   \   0000F5   786D         MOV       R0,#0x6d
   \                     ??osal_ConvertUTCTime_2:
   \   0000F7   C3           CLR       C
   \   0000F8   EE           MOV       A,R6
   \   0000F9   98           SUBB      A,R0
   \   0000FA   FE           MOV       R6,A
   \   0000FB   EF           MOV       A,R7
   \   0000FC   9401         SUBB      A,#0x1
   \   0000FE   FF           MOV       R7,A
    350                tm->year++;
   \   0000FF   85..82       MOV       DPL,?V0
   \   000102   85..83       MOV       DPH,?V1
   \   000105   E0           MOVX      A,@DPTR
   \   000106   2401         ADD       A,#0x1
   \   000108   F0           MOVX      @DPTR,A
   \   000109   A3           INC       DPTR
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   3400         ADDC      A,#0x0
   \                     ??osal_ConvertUTCTime_0:
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   85..82       MOV       DPL,?V0
   \   000111   85..83       MOV       DPH,?V1
   \   000114   E0           MOVX      A,@DPTR
   \   000115   FC           MOV       R4,A
   \   000116   A3           INC       DPTR
   \   000117   E0           MOVX      A,@DPTR
   \   000118   FD           MOV       R5,A
   \   000119   EC           MOV       A,R4
   \   00011A   F8           MOV       R0,A
   \   00011B   ED           MOV       A,R5
   \   00011C   F9           MOV       R1,A
   \   00011D   7A90         MOV       R2,#-0x70
   \   00011F   7B01         MOV       R3,#0x1
   \   000121   12....       LCALL     ?US_DIV_MOD
   \   000124   8A..         MOV       ?V2,R2
   \   000126   8B..         MOV       ?V3,R3
   \   000128   EA           MOV       A,R2
   \   000129   4B           ORL       A,R3
   \   00012A   6014         JZ        ??osal_ConvertUTCTime_3
   \   00012C   EC           MOV       A,R4
   \   00012D   F8           MOV       R0,A
   \   00012E   ED           MOV       A,R5
   \   00012F   F9           MOV       R1,A
   \   000130   7A64         MOV       R2,#0x64
   \   000132   7B00         MOV       R3,#0x0
   \   000134   12....       LCALL     ?US_DIV_MOD
   \   000137   EA           MOV       A,R2
   \   000138   4B           ORL       A,R3
   \   000139   6009         JZ        ??osal_ConvertUTCTime_4
   \   00013B   EC           MOV       A,R4
   \   00013C   5403         ANL       A,#0x3
   \   00013E   7004         JNZ       ??osal_ConvertUTCTime_4
   \                     ??osal_ConvertUTCTime_3:
   \   000140   786E         MOV       R0,#0x6e
   \   000142   8002         SJMP      ??osal_ConvertUTCTime_5
   \                     ??osal_ConvertUTCTime_4:
   \   000144   786D         MOV       R0,#0x6d
   \                     ??osal_ConvertUTCTime_5:
   \   000146   EE           MOV       A,R6
   \   000147   98           SUBB      A,R0
   \   000148   EF           MOV       A,R7
   \   000149   9401         SUBB      A,#0x1
   \   00014B   401E         JC        ??osal_ConvertUTCTime_6
   \   00014D   E5..         MOV       A,?V2
   \   00014F   45..         ORL       A,?V3
   \   000151   6014         JZ        ??osal_ConvertUTCTime_7
   \   000153   EC           MOV       A,R4
   \   000154   F8           MOV       R0,A
   \   000155   ED           MOV       A,R5
   \   000156   F9           MOV       R1,A
   \   000157   7A64         MOV       R2,#0x64
   \   000159   7B00         MOV       R3,#0x0
   \   00015B   12....       LCALL     ?US_DIV_MOD
   \   00015E   EA           MOV       A,R2
   \   00015F   4B           ORL       A,R3
   \   000160   6093         JZ        ??osal_ConvertUTCTime_1
   \   000162   EC           MOV       A,R4
   \   000163   5403         ANL       A,#0x3
   \   000165   708E         JNZ       ??osal_ConvertUTCTime_1
   \                     ??osal_ConvertUTCTime_7:
   \   000167   786E         MOV       R0,#0x6e
   \   000169   808C         SJMP      ??osal_ConvertUTCTime_2
    351              }
    352          
    353              tm->month = 0;
   \                     ??osal_ConvertUTCTime_6:
   \   00016B   85..82       MOV       DPL,?XSP + 0
   \   00016E   85..83       MOV       DPH,?XSP + 1
   \   000171   E0           MOVX      A,@DPTR
   \   000172   2404         ADD       A,#0x4
   \   000174   F5..         MOV       ?V2,A
   \   000176   A3           INC       DPTR
   \   000177   E0           MOVX      A,@DPTR
   \   000178   3400         ADDC      A,#0x0
   \   00017A   F5..         MOV       ?V3,A
   \   00017C   85..82       MOV       DPL,?V2
   \   00017F   F583         MOV       DPH,A
   \   000181   E4           CLR       A
   \   000182   801F         SJMP      ??osal_ConvertUTCTime_8
    354              while ( numDays >= monthLength( IsLeapYear( tm->year ), tm->month ) )
    355              {
    356                numDays -= monthLength( IsLeapYear( tm->year ), tm->month );
   \                     ??osal_ConvertUTCTime_9:
   \   000184   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCTime_10:
   \   000186                ; Setup parameters for call to function monthLength
   \   000186   85..82       MOV       DPL,?V2
   \   000189   85..83       MOV       DPH,?V3
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   FA           MOV       R2,A
   \   00018E   12....       LCALL     `??monthLength::?relay`; Banked call to: monthLength
   \   000191   E9           MOV       A,R1
   \   000192   F8           MOV       R0,A
   \   000193   C3           CLR       C
   \   000194   EE           MOV       A,R6
   \   000195   98           SUBB      A,R0
   \   000196   FE           MOV       R6,A
   \   000197   EF           MOV       A,R7
   \   000198   9400         SUBB      A,#0x0
   \   00019A   FF           MOV       R7,A
    357                tm->month++;
   \   00019B   85..82       MOV       DPL,?V2
   \   00019E   85..83       MOV       DPH,?V3
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   04           INC       A
   \                     ??osal_ConvertUTCTime_8:
   \   0001A3   F0           MOVX      @DPTR,A
   \   0001A4   85..82       MOV       DPL,?V0
   \   0001A7   85..83       MOV       DPH,?V1
   \   0001AA   E0           MOVX      A,@DPTR
   \   0001AB   FC           MOV       R4,A
   \   0001AC   A3           INC       DPTR
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   FD           MOV       R5,A
   \   0001AF   EC           MOV       A,R4
   \   0001B0   F8           MOV       R0,A
   \   0001B1   ED           MOV       A,R5
   \   0001B2   F9           MOV       R1,A
   \   0001B3   7A90         MOV       R2,#-0x70
   \   0001B5   7B01         MOV       R3,#0x1
   \   0001B7   12....       LCALL     ?US_DIV_MOD
   \   0001BA   EA           MOV       A,R2
   \   0001BB   4B           ORL       A,R3
   \   0001BC   6014         JZ        ??osal_ConvertUTCTime_11
   \   0001BE   EC           MOV       A,R4
   \   0001BF   F8           MOV       R0,A
   \   0001C0   ED           MOV       A,R5
   \   0001C1   F9           MOV       R1,A
   \   0001C2   7A64         MOV       R2,#0x64
   \   0001C4   7B00         MOV       R3,#0x0
   \   0001C6   12....       LCALL     ?US_DIV_MOD
   \   0001C9   EA           MOV       A,R2
   \   0001CA   4B           ORL       A,R3
   \   0001CB   6009         JZ        ??osal_ConvertUTCTime_12
   \   0001CD   EC           MOV       A,R4
   \   0001CE   5403         ANL       A,#0x3
   \   0001D0   7004         JNZ       ??osal_ConvertUTCTime_12
   \                     ??osal_ConvertUTCTime_11:
   \   0001D2   7901         MOV       R1,#0x1
   \   0001D4   8002         SJMP      ??osal_ConvertUTCTime_13
   \                     ??osal_ConvertUTCTime_12:
   \   0001D6   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCTime_13:
   \   0001D8                ; Setup parameters for call to function monthLength
   \   0001D8   85..82       MOV       DPL,?V2
   \   0001DB   85..83       MOV       DPH,?V3
   \   0001DE   E0           MOVX      A,@DPTR
   \   0001DF   FA           MOV       R2,A
   \   0001E0   12....       LCALL     `??monthLength::?relay`; Banked call to: monthLength
   \   0001E3   E9           MOV       A,R1
   \   0001E4   F8           MOV       R0,A
   \   0001E5   C3           CLR       C
   \   0001E6   EE           MOV       A,R6
   \   0001E7   98           SUBB      A,R0
   \   0001E8   EF           MOV       A,R7
   \   0001E9   9400         SUBB      A,#0x0
   \   0001EB   4039         JC        ??osal_ConvertUTCTime_14
   \   0001ED   85..82       MOV       DPL,?V0
   \   0001F0   85..83       MOV       DPH,?V1
   \   0001F3   E0           MOVX      A,@DPTR
   \   0001F4   FC           MOV       R4,A
   \   0001F5   A3           INC       DPTR
   \   0001F6   E0           MOVX      A,@DPTR
   \   0001F7   FD           MOV       R5,A
   \   0001F8   EC           MOV       A,R4
   \   0001F9   F8           MOV       R0,A
   \   0001FA   ED           MOV       A,R5
   \   0001FB   F9           MOV       R1,A
   \   0001FC   7A90         MOV       R2,#-0x70
   \   0001FE   7B01         MOV       R3,#0x1
   \   000200   12....       LCALL     ?US_DIV_MOD
   \   000203   EA           MOV       A,R2
   \   000204   4B           ORL       A,R3
   \   000205   601A         JZ        ??osal_ConvertUTCTime_15
   \   000207   EC           MOV       A,R4
   \   000208   F8           MOV       R0,A
   \   000209   ED           MOV       A,R5
   \   00020A   F9           MOV       R1,A
   \   00020B   7A64         MOV       R2,#0x64
   \   00020D   7B00         MOV       R3,#0x0
   \   00020F   12....       LCALL     ?US_DIV_MOD
   \   000212   EA           MOV       A,R2
   \   000213   4B           ORL       A,R3
   \   000214   7003         JNZ       $+5
   \   000216   02....       LJMP      ??osal_ConvertUTCTime_9 & 0xFFFF
   \   000219   EC           MOV       A,R4
   \   00021A   5403         ANL       A,#0x3
   \   00021C   6003         JZ        $+5
   \   00021E   02....       LJMP      ??osal_ConvertUTCTime_9 & 0xFFFF
   \                     ??osal_ConvertUTCTime_15:
   \   000221   7901         MOV       R1,#0x1
   \   000223   02....       LJMP      ??osal_ConvertUTCTime_10 & 0xFFFF
    358              }
    359          
    360              tm->day = numDays;
   \                     ??osal_ConvertUTCTime_14:
   \   000226   EE           MOV       A,R6
   \   000227   C0E0         PUSH      A
   \   000229   85..82       MOV       DPL,?XSP + 0
   \   00022C   85..83       MOV       DPH,?XSP + 1
   \   00022F   E0           MOVX      A,@DPTR
   \   000230   F8           MOV       R0,A
   \   000231   A3           INC       DPTR
   \   000232   E0           MOVX      A,@DPTR
   \   000233   F583         MOV       DPH,A
   \   000235   8882         MOV       DPL,R0
   \   000237   A3           INC       DPTR
   \   000238   A3           INC       DPTR
   \   000239   A3           INC       DPTR
   \   00023A   D0E0         POP       A
   \   00023C   F0           MOVX      @DPTR,A
    361            }
    362          }
   \   00023D   7402         MOV       A,#0x2
   \   00023F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000242   7F10         MOV       R7,#0x10
   \   000244   02....       LJMP      ?BANKED_LEAVE_XDATA
    363          
    364          /*********************************************************************
    365           * @fn      monthLength
    366           *
    367           * @param   lpyr - 1 for leap year, 0 if not
    368           *
    369           * @param   mon - 0 - 11 (jan - dec)
    370           *
    371           * @return  number of days in specified month
    372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          static uint8 monthLength( uint8 lpyr, uint8 mon )
   \                     monthLength:
    374          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    375            uint8 days = 31;
   \   000002   791F         MOV       R1,#0x1f
    376          
    377          	if ( mon == 1 ) // feb
   \   000004   7401         MOV       A,#0x1
   \   000006   6A           XRL       A,R2
   \   000007   7006         JNZ       ??monthLength_0
    378            {
    379          		days = ( 28 + lpyr );
   \   000009   741C         MOV       A,#0x1c
   \   00000B   28           ADD       A,R0
   \   00000C   F9           MOV       R1,A
   \   00000D   800E         SJMP      ??monthLength_1
    380            }
    381            else
    382            {
    383              if ( mon > 6 ) // aug-dec
   \                     ??monthLength_0:
   \   00000F   EA           MOV       A,R2
   \   000010   C3           CLR       C
   \   000011   9407         SUBB      A,#0x7
   \   000013   4001         JC        ??monthLength_2
    384              {
    385                mon--;
   \   000015   1A           DEC       R2
    386              }
    387          
    388              if ( mon & 1 )
   \                     ??monthLength_2:
   \   000016   EA           MOV       A,R2
   \   000017   A2E0         MOV       C,0xE0 /* A   */.0
   \   000019   5002         JNC       ??monthLength_1
    389              {
    390                days = 30;
   \   00001B   791E         MOV       R1,#0x1e
    391              }
    392            }
    393          
    394          	return ( days );
   \                     ??monthLength_1:
   \   00001D   02....       LJMP      ?BRET
    395          }
    396          
    397          /*********************************************************************
    398           * @fn      osal_ConvertUTCSecs
    399           *
    400           * @brief   Converts a UTCTimeStruct to UTCTime
    401           *
    402           * @param   tm - pointer to provided struct
    403           *
    404           * @return  number of seconds since 00:00:00 on 01/01/2000 (UTC)
    405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          UTCTime osal_ConvertUTCSecs( UTCTimeStruct *tm )
   \                     osal_ConvertUTCSecs:
    407          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    408            uint32 seconds;
    409          
    410            /* Seconds for the partial day */
    411            seconds = (((tm->hour * 60UL) + tm->minutes) * 60UL) + tm->seconds;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V4,A
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V5,A
   \   000015   F5..         MOV       ?V6,A
   \   000017   F5..         MOV       ?V7,A
   \   000019   90....       MOV       DPTR,#__Constant_3c
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?L_MOV_X
   \   000021   78..         MOV       R0,#?V4
   \   000023   79..         MOV       R1,#?V0
   \   000025   12....       LCALL     ?L_MUL
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V0,A
   \   000030   E4           CLR       A
   \   000031   F5..         MOV       ?V1,A
   \   000033   F5..         MOV       ?V2,A
   \   000035   F5..         MOV       ?V3,A
   \   000037   78..         MOV       R0,#?V4
   \   000039   79..         MOV       R1,#?V0
   \   00003B   12....       LCALL     ?L_ADD
   \   00003E   90....       MOV       DPTR,#__Constant_3c
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?L_MOV_X
   \   000046   78..         MOV       R0,#?V4
   \   000048   79..         MOV       R1,#?V0
   \   00004A   12....       LCALL     ?L_MUL
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F5..         MOV       ?V0,A
   \   000054   E4           CLR       A
   \   000055   F5..         MOV       ?V1,A
   \   000057   F5..         MOV       ?V2,A
   \   000059   F5..         MOV       ?V3,A
   \   00005B   78..         MOV       R0,#?V4
   \   00005D   79..         MOV       R1,#?V0
   \   00005F   12....       LCALL     ?L_ADD
    412          
    413            /* Account for previous complete days */
    414            {
    415              /* Start with complete days in current month */
    416              uint16 days = tm->day;
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F5..         MOV       ?V0,A
    417          
    418              /* Next, complete months in current year */
    419              {
    420                int8 month = tm->month;
   \   000068   8A82         MOV       DPL,R2
   \   00006A   8B83         MOV       DPH,R3
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F5..         MOV       ?V8,A
   \   000073   8011         SJMP      ??osal_ConvertUTCSecs_0
    421                while ( --month >= 0 )
    422                {
    423                  days += monthLength( IsLeapYear( tm->year ), month );
   \                     ??osal_ConvertUTCSecs_1:
   \   000075   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCSecs_2:
   \   000077                ; Setup parameters for call to function monthLength
   \   000077   AA..         MOV       R2,?V8
   \   000079   12....       LCALL     `??monthLength::?relay`; Banked call to: monthLength
   \   00007C   E5..         MOV       A,?V0
   \   00007E   29           ADD       A,R1
   \   00007F   F5..         MOV       ?V0,A
   \   000081   E4           CLR       A
   \   000082   35..         ADDC      A,?V1
   \   000084   F5..         MOV       ?V1,A
   \                     ??osal_ConvertUTCSecs_0:
   \   000086   15..         DEC       ?V8
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F5..         MOV       ?V2,A
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F5..         MOV       ?V3,A
   \   000098   E5..         MOV       A,?V8
   \   00009A   C3           CLR       C
   \   00009B   9400         SUBB      A,#0x0
   \   00009D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00009F   65D0         XRL       A,PSW
   \   0000A1   33           RLC       A
   \   0000A2   4028         JC        ??osal_ConvertUTCSecs_3
   \   0000A4   A8..         MOV       R0,?V2
   \   0000A6   A9..         MOV       R1,?V3
   \   0000A8   7A90         MOV       R2,#-0x70
   \   0000AA   7B01         MOV       R3,#0x1
   \   0000AC   12....       LCALL     ?US_DIV_MOD
   \   0000AF   EA           MOV       A,R2
   \   0000B0   4B           ORL       A,R3
   \   0000B1   6015         JZ        ??osal_ConvertUTCSecs_4
   \   0000B3   A8..         MOV       R0,?V2
   \   0000B5   A9..         MOV       R1,?V3
   \   0000B7   7A64         MOV       R2,#0x64
   \   0000B9   7B00         MOV       R3,#0x0
   \   0000BB   12....       LCALL     ?US_DIV_MOD
   \   0000BE   EA           MOV       A,R2
   \   0000BF   4B           ORL       A,R3
   \   0000C0   60B3         JZ        ??osal_ConvertUTCSecs_1
   \   0000C2   E5..         MOV       A,?V2
   \   0000C4   5403         ANL       A,#0x3
   \   0000C6   70AD         JNZ       ??osal_ConvertUTCSecs_1
   \                     ??osal_ConvertUTCSecs_4:
   \   0000C8   7901         MOV       R1,#0x1
   \   0000CA   80AB         SJMP      ??osal_ConvertUTCSecs_2
    424                }
    425              }
    426          
    427              /* Next, complete years before current year */
    428              {
    429                uint16 year = tm->year;
   \                     ??osal_ConvertUTCSecs_3:
   \   0000CC   AC..         MOV       R4,?V2
   \   0000CE   AD..         MOV       R5,?V3
   \   0000D0   800D         SJMP      ??osal_ConvertUTCSecs_5
    430                while ( --year >= BEGYEAR )
    431                {
    432                  days += YearLength( year );
   \                     ??osal_ConvertUTCSecs_6:
   \   0000D2   786D         MOV       R0,#0x6d
   \                     ??osal_ConvertUTCSecs_7:
   \   0000D4   E5..         MOV       A,?V0
   \   0000D6   28           ADD       A,R0
   \   0000D7   F5..         MOV       ?V0,A
   \   0000D9   E5..         MOV       A,?V1
   \   0000DB   3401         ADDC      A,#0x1
   \   0000DD   F5..         MOV       ?V1,A
   \                     ??osal_ConvertUTCSecs_5:
   \   0000DF   EC           MOV       A,R4
   \   0000E0   24FF         ADD       A,#-0x1
   \   0000E2   1C           DEC       R4
   \   0000E3   ED           MOV       A,R5
   \   0000E4   34FF         ADDC      A,#-0x1
   \   0000E6   FD           MOV       R5,A
   \   0000E7   C3           CLR       C
   \   0000E8   EC           MOV       A,R4
   \   0000E9   94D0         SUBB      A,#-0x30
   \   0000EB   ED           MOV       A,R5
   \   0000EC   9407         SUBB      A,#0x7
   \   0000EE   4027         JC        ??osal_ConvertUTCSecs_8
   \   0000F0   EC           MOV       A,R4
   \   0000F1   F8           MOV       R0,A
   \   0000F2   ED           MOV       A,R5
   \   0000F3   F9           MOV       R1,A
   \   0000F4   7A90         MOV       R2,#-0x70
   \   0000F6   7B01         MOV       R3,#0x1
   \   0000F8   12....       LCALL     ?US_DIV_MOD
   \   0000FB   EA           MOV       A,R2
   \   0000FC   4B           ORL       A,R3
   \   0000FD   6014         JZ        ??osal_ConvertUTCSecs_9
   \   0000FF   EC           MOV       A,R4
   \   000100   F8           MOV       R0,A
   \   000101   ED           MOV       A,R5
   \   000102   F9           MOV       R1,A
   \   000103   7A64         MOV       R2,#0x64
   \   000105   7B00         MOV       R3,#0x0
   \   000107   12....       LCALL     ?US_DIV_MOD
   \   00010A   EA           MOV       A,R2
   \   00010B   4B           ORL       A,R3
   \   00010C   60C4         JZ        ??osal_ConvertUTCSecs_6
   \   00010E   EC           MOV       A,R4
   \   00010F   5403         ANL       A,#0x3
   \   000111   70BF         JNZ       ??osal_ConvertUTCSecs_6
   \                     ??osal_ConvertUTCSecs_9:
   \   000113   786E         MOV       R0,#0x6e
   \   000115   80BD         SJMP      ??osal_ConvertUTCSecs_7
    433                }
    434              }
    435          
    436              /* Add total seconds before partial day */
    437              seconds += (days * DAY);
    438            }
    439          
    440            return ( seconds );
   \                     ??osal_ConvertUTCSecs_8:
   \   000117   E4           CLR       A
   \   000118   F5..         MOV       ?V2,A
   \   00011A   F5..         MOV       ?V3,A
   \   00011C   90....       MOV       DPTR,#__Constant_15180
   \   00011F   78..         MOV       R0,#?V8
   \   000121   12....       LCALL     ?L_MOV_X
   \   000124   78..         MOV       R0,#?V0
   \   000126   79..         MOV       R1,#?V8
   \   000128   12....       LCALL     ?L_MUL
   \   00012B   78..         MOV       R0,#?V4
   \   00012D   79..         MOV       R1,#?V0
   \   00012F   12....       LCALL     ?L_ADD
   \   000132   AA..         MOV       R2,?V4
   \   000134   AB..         MOV       R3,?V5
   \   000136   AC..         MOV       R4,?V6
   \   000138   AD..         MOV       R5,?V7
   \   00013A   7F0C         MOV       R7,#0xc
   \   00013C   02....       LJMP      ?BANKED_LEAVE_XDATA
    441          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4:
   \   000000   04000000     DD 4

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffce019:
   \   000000   19E0FCFF     DD 4294762521

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fff8:
   \   000000   F8FF0000     DD 65528

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_31fe7:
   \   000000   E71F0300     DD 204775

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_15180:
   \   000000   80510100     DD 86400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3c:
   \   000000   3C000000     DD 60

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_e10:
   \   000000   100E0000     DD 3600

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     26   monthLength
      0     38   osalClockUpdate
        0     18   -> osalMcuDivide31By16To16
      0     22   osalTimeUpdate
        0     20   -> macMcuPrecisionCount
        0     20   -> osalClockUpdate
        0     22   -> osalMcuDivide31By16To16
        0     20   -> osalTimerUpdate
      0     20   osal_ConvertUTCSecs
        0     20   -> monthLength
      1     30   osal_ConvertUTCTime
        0     26   -> monthLength
      2      0   osal_getClock
      0     12   osal_setClock


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  OSAL_timeSeconds
       1  _A_IEN0
       4  __Constant_15180
       4  __Constant_31fe7
       4  __Constant_3c
       4  __Constant_3e8
       4  __Constant_4
       4  __Constant_e10
       4  __Constant_fff8
       4  __Constant_fffce019
      32  monthLength
     121  osalClockUpdate
     231  osalTimeUpdate
     319  osal_ConvertUTCSecs
     583  osal_ConvertUTCTime
      17  osal_getClock
      38  osal_setClock
       4  previousMacTimerTick
       2  remUsTicks
       4  timeMSec
      42  -- Other

 
 1 341 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    32 bytes in segment XDATA_ROM_C
    14 bytes in segment XDATA_Z
 
    42 bytes of CODE     memory
     0 bytes of CONST    memory (+ 32 bytes shared)
     0 bytes of DATA     memory (+  1 byte  shared)
 1 341 bytes of HUGECODE memory
    14 bytes of XDATA    memory

Errors: none
Warnings: none
