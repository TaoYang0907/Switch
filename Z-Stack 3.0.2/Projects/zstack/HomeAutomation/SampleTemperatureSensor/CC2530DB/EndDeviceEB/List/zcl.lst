###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               21/Jul/2020  00:36:38
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\zcl\zcl.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW223B.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\zcl\zcl.c" -D BDB_REPORTING -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS
#        -D ZCL_ON_OFF -D ZCL_REPORT -D ZCL_REPORT_DESTINATION_DEVICE -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\zcl.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\zcl.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\zcl\zcl.c
      1          /**************************************************************************************************
      2            Filename:       zcl.c
      3            Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
      4            Revision:       $Revision: 44489 $
      5          
      6            Description:    This file contains the Zigbee Cluster Library Foundation functions.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "AF.h"
     45          #include "APS.h"
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          
     49          #if defined ( INTER_PAN )
     50            #include "stub_aps.h"
     51          #endif
     52             
     53          #ifdef BDB_REPORTING
     54            #include "bdb_Reporting.h"
     55          #endif
     56          #include "bdb_interface.h"
     57          
     58          #include "zcl_green_power.h"
     59          
     60             
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          /*** Frame Control ***/
     65          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     66          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     67          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     68          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     69          
     70          /*** Attribute Access Control ***/
     71          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     72          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     73          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     74          #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
     75          #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
     76          #define zcl_AccessClient( a )         ( (a) & ACCESS_CLIENT )
     77          
     78          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     79          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     80          
     81          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     82                                                  (zclHdr).fc.manuSpecific == 0          && \
     83                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     84          
     85          // Commands that have corresponding responses (ZCL_CMD_WRITE_NO_RSP, does not have response, but must not send default response)
     86          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \
     87                                                  (cmd) == ZCL_CMD_WRITE                  || \
     88                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \
     89                                                  (cmd) == ZCL_CMD_WRITE_NO_RSP           || \
     90                                                  (cmd) == ZCL_CMD_CONFIG_REPORT          || \
     91                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG        || \
     92                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \
     93                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \
     94                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \
     95                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \
     96                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     97          #define  ZCL_VALID_MIN_HEADER_LEN  3
     98          
     99          /*********************************************************************
    100           * CONSTANTS
    101           */
    102          
    103          /*********************************************************************
    104           * TYPEDEFS
    105           */
    106          typedef struct zclLibPlugin
    107          {
    108            struct zclLibPlugin *next;
    109            uint16              startClusterID;    // starting cluster ID
    110            uint16              endClusterID;      // ending cluster ID
    111            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
    112          } zclLibPlugin_t;
    113          
    114          // Command record list
    115          typedef struct zclCmdRecsList
    116          {
    117            struct zclCmdRecsList *pNext;
    118            uint8                 endpoint;
    119            uint8                 numCommands;
    120            CONST zclCommandRec_t *pCmdRecs;
    121          } zclCmdRecsList_t;
    122          
    123          
    124          // Cluster option list item
    125          typedef struct zclClusterOptionList
    126          {
    127            struct zclClusterOptionList *next;
    128            uint8                       endpoint;   // Used to link it into the endpoint descriptor
    129            uint8                       numOptions; // Number of the following records
    130            zclOptionRec_t              *options;   // option records
    131          } zclClusterOptionList;
    132          
    133          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
    134          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
    135          
    136          typedef struct
    137          {
    138            zclParseInProfileCmd_t   pfnParseInProfile;
    139            zclProcessInProfileCmd_t pfnProcessInProfile;
    140          } zclCmdItems_t;
    141          
    142          
    143          // List record for external handler for unhandled ZCL Foundation commands/rsps
    144          typedef struct zclExternalFoundationHandlerList
    145          {
    146              struct zclExternalFoundationHandlerList *next;
    147              uint8 zcl_ExternalTaskID;
    148              uint8 zcl_ExternalEndPoint;
    149          } zclExternalFoundationHandlerList;
    150          
    151          
    152          /*********************************************************************
    153           * GLOBAL VARIABLES
    154           */
    155          
    156          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157            uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          #endif
    159          
    160          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          // ZCL Sequence number
    164          //uint8 zcl_SeqNum = 0x00;  //Not longer used, refer to bdb_getZCLFrameCounter() in bdb_interface.h

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 zcl_InSeqNum = 0x00;
   \                     zcl_InSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zcl_radius = AF_DEFAULT_RADIUS;
   \                     zcl_radius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zcl_radius>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          static uint8 savedZCLTransSeqNum = 0;
   \                     savedZCLTransSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          
    171          /*********************************************************************
    172           * EXTERNAL VARIABLES
    173           */
    174          
    175          /*********************************************************************
    176           * EXTERNAL FUNCTIONS
    177           */
    178          
    179          /*********************************************************************
    180           * LOCAL VARIABLES
    181           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    183          
    184          #if defined ( ZCL_DISCOVER )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185            static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
   \                     gpCmdList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    186          #endif
    187          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    190          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
   \                     rawAFMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    192          
    193          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
   \                     externalEndPointHandlerList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    195          #endif
    196          
    197          /*********************************************************************
    198           * LOCAL FUNCTIONS
    199           */
    200          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    201          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    202          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    203          
    204          #if !defined ( ZCL_STANDALONE )
    205          static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
    206          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
    207          #endif // !defined ( ZCL_STANDALONE )
    208          
    209          #if defined ( ZCL_DISCOVER )
    210            static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
    211          #endif
    212          
    213          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
    214          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    215          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    216          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    217          
    218          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    219          
    220          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
    221          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
    222          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
    223          #endif // ZCL_READ || ZCL_WRITE
    224          
    225          #ifdef ZCL_READ
    226          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
    227          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
    228          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
    229                                                   uint8 *pAttrData, uint16 *pDataLen );
    230          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    231          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    232          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    233          #endif // ZCL_READ
    234          
    235          #ifdef ZCL_WRITE
    236          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
    237                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    238          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
    239                                                    zclAttrRec_t *pAttr, uint8 *pAttrData );
    240          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    241          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    242          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    243          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    244          #endif // ZCL_WRITE
    245          
    246          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    247          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    248          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    249          #endif
    250          
    251          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    252          
    253          #ifdef ZCL_DISCOVER
    254          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
    255          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
    256          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
    257          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
    258          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
    259          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    260          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
    261          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    262          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    263          #endif // ZCL_DISCOVER
    264          
    265          /*********************************************************************
    266           * Parse Profile Command Function Table
    267           */
    268          

   \                                 In  segment CODE_C, align 1
    269          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ....         DW `??zclParseInReadCmd::?relay`
   \   000002   ....         DW `??zclProcessInReadCmd::?relay`
   \   000004   ....         DW `??zclParseInReadRspCmd::?relay`
   \   000006   ....         DW `??zcl_HandleExternal::?relay`
   \   000008   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000A   ....         DW `??zclProcessInWriteCmd::?relay`
   \   00000C   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000E   ....         DW `??zclProcessInWriteUndividedCmd::?relay`
   \   000010   ....         DW `??zclParseInWriteRspCmd::?relay`
   \   000012   ....         DW `??zcl_HandleExternal::?relay`
   \   000014   ....         DW `??zclParseInWriteCmd::?relay`
   \   000016   ....         DW `??zclProcessInWriteCmd::?relay`
   \   000018   ....         DW `??zclParseInConfigReportCmd::?relay`
   \   00001A   ....         DW `??zcl_HandleExternal::?relay`
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   ....         DW `??zclParseInReadReportCfgCmd::?relay`
   \   000022   ....         DW `??zcl_HandleExternal::?relay`
   \   000024   0000         DW 0H
   \   000026   0000         DW 0H
   \   000028   ....         DW `??zclParseInReportCmd::?relay`
   \   00002A   ....         DW `??zcl_HandleExternal::?relay`
   \   00002C   ....         DW `??zclParseInDefaultRspCmd::?relay`
   \   00002E   ....         DW `??zcl_HandleExternal::?relay`
   \   000030   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000032   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000034   ....         DW `??zclParseInDiscAttrsRspCmd::?relay`
   \   000036   ....         DW `??zcl_HandleExternal::?relay`
   \   000038   0000         DW 0H
   \   00003A   0000         DW 0H
   \   00003C   0000         DW 0H
   \   00003E   0000         DW 0H
   \   000040   0000         DW 0H
   \   000042   0000         DW 0H
   \   000044   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   000046   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000048   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   00004A   ....         DW `??zcl_HandleExternal::?relay`
   \   00004C   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   00004E   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000050   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   000052   ....         DW `??zcl_HandleExternal::?relay`
   \   000054   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000056   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000058   ....         DW `??zclParseInDiscAttrsExtRspCmd::?relay`
   \   00005A   ....         DW `??zcl_HandleExternal::?relay`
    270          {
    271          #ifdef ZCL_READ
    272            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    273            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
    274          #else
    275            /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    276            /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    277          #endif // ZCL_READ
    278          
    279          #ifdef ZCL_WRITE
    280            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    281            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    282            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
    283            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    284          #else
    285            /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    286            /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    287            /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    288            /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    289          #endif // ZCL_WRITE
    290          
    291          #ifdef ZCL_REPORTING_DEVICE
    292              /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
    293          #else
    294              /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    295          #endif
    296          
    297          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    298              /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
    299          #else
    300              /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    301          #endif
    302          
    303          #ifdef ZCL_REPORTING_DEVICE
    304              /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
    305          #else
    306              /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    307          #endif
    308          
    309          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    310              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
    311          #else
    312              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    313          #endif
    314          
    315          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    316              /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
    317          #else
    318              /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    319          #endif
    320          
    321            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
    322          
    323          #ifdef ZCL_DISCOVER
    324            /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    325            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
    326            /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    327            /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    328            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    329            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    330            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    331            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    332            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    333            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    334            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
    335          #else
    336            /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
    337            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    338            /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    339            /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    340            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    341            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    342            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    343            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    344            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    345            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    346            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    347          #endif // ZCL_DISCOVER
    348          };
    349          
    350          /*********************************************************************
    351           * PUBLIC FUNCTIONS
    352           *********************************************************************/
    353          
    354          #if !defined ( ZCL_STANDALONE )
    355          /*********************************************************************
    356           * @fn          zcl_Init
    357           *
    358           * @brief       Initialization function for the zcl layer.
    359           *
    360           * @param       task_id - ZCL task id
    361           *
    362           * @return      none
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    365          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    366            zcl_TaskID = task_id;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#zcl_TaskID
   \   000008   F0           MOVX      @DPTR,A
    367          }
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
    368          #endif
    369          
    370          #if !defined ( ZCL_STANDALONE )
    371          /*********************************************************************
    372           * @fn          zcl_event_loop
    373           *
    374           * @brief       Event Loop Processor for zcl.
    375           *
    376           * @param       task_id - task id
    377           * @param       events - event bitmap
    378           *
    379           * @return      unprocessed events
    380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    382          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
    383            uint8 *msgPtr;
    384          
    385            (void)task_id;  // Intentionally unreferenced parameter
    386          
    387            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV       A,R3
   \   00000A   5480         ANL       A,#0x80
   \   00000C   6057         JZ        ??zcl_event_loop_0
    388            {
    389              msgPtr = osal_msg_receive( zcl_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   8023         SJMP      ??zcl_event_loop_1
    390              while ( msgPtr != NULL )
    391              {
    392                uint8 dealloc = TRUE;
    393          
    394                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    395                {
    396                  zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
    397                }
    398                else
    399                {
    400                  uint8 taskID;
    401                  taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_2:
   \   000010                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   000010   EE           MOV       A,R6
   \   000011   FA           MOV       R2,A
   \   000012   EF           MOV       A,R7
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000017   E9           MOV       A,R1
   \   000018   F9           MOV       R1,A
    402          
    403                  if ( taskID != TASK_NO_TASK )
   \   000019   74FF         MOV       A,#-0x1
   \   00001B   69           XRL       A,R1
   \   00001C   600A         JZ        ??zcl_event_loop_3
    404                  {
    405                    // send it to another task to process.
    406                    osal_msg_send( taskID, msgPtr );
   \   00001E                ; Setup parameters for call to function osal_msg_send
   \   00001E   EE           MOV       A,R6
   \   00001F   FA           MOV       R2,A
   \   000020   EF           MOV       A,R7
   \   000021   FB           MOV       R3,A
   \   000022   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    407                    dealloc = FALSE;
   \   000025   75..00       MOV       ?V0,#0x0
    408                  }
    409                }
    410          
    411                // Release the memory
    412                if ( dealloc )
   \                     ??zcl_event_loop_3:
   \   000028   E5..         MOV       A,?V0
   \   00002A   6007         JZ        ??zcl_event_loop_1
    413                {
    414                  osal_msg_deallocate( msgPtr );
   \   00002C                ; Setup parameters for call to function osal_msg_deallocate
   \   00002C   EE           MOV       A,R6
   \   00002D   FA           MOV       R2,A
   \   00002E   EF           MOV       A,R7
   \   00002F   FB           MOV       R3,A
   \   000030   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    415                }
    416          
    417                // Next
    418                msgPtr = osal_msg_receive( zcl_TaskID );
   \                     ??zcl_event_loop_1:
   \   000033                ; Setup parameters for call to function osal_msg_receive
   \   000033   90....       MOV       DPTR,#zcl_TaskID
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003B   8A..         MOV       ?V0,R2
   \   00003D   8B..         MOV       ?V1,R3
   \   00003F   AE..         MOV       R6,?V0
   \   000041   AF..         MOV       R7,?V1
   \   000043   EE           MOV       A,R6
   \   000044   4F           ORL       A,R7
   \   000045   6015         JZ        ??zcl_event_loop_4
   \   000047   75..01       MOV       ?V0,#0x1
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   641A         XRL       A,#0x1a
   \   000051   70BD         JNZ       ??zcl_event_loop_2
   \   000053                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   000053   EE           MOV       A,R6
   \   000054   FA           MOV       R2,A
   \   000055   EF           MOV       A,R7
   \   000056   FB           MOV       R3,A
   \   000057   12....       LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
   \   00005A   80CC         SJMP      ??zcl_event_loop_3
    419              }
    420          
    421              // return unprocessed events
    422              return (events ^ SYS_EVENT_MSG);
   \                     ??zcl_event_loop_4:
   \   00005C   AA..         MOV       R2,?V2
   \   00005E   E5..         MOV       A,?V3
   \   000060   6480         XRL       A,#0x80
   \   000062   FB           MOV       R3,A
   \   000063   8004         SJMP      ??zcl_event_loop_5
    423            }
    424          
    425          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    426            if ( events & ZCL_DATABUF_SEND )
    427            {
    428              gpNotificationMsg_t *gpNotification = NULL;
    429              gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    430              gpd_ID_t gpd_ID;
    431              uint8 *pgpdid;
    432              uint8 entry[PROXY_TBL_ENTRY_LEN];
    433              uint8 appId;
    434              uint8 nwkSeqNum;
    435              uint8 apsSecNum;
    436              uint16 nwkAddr;
    437              
    438              gpNotification = gp_GetHeadNotificationMsg( );
    439              
    440              if ( gpNotification == NULL )
    441              {
    442                return 0;
    443              }
    444              
    445              pCmdPayloadMsgCurr = ( gpCmdPayloadMsg_t* ) gpNotification->pMsg ;
    446              appId = PROXY_TBL_GET_APPLICTION_ID((uint16)*pCmdPayloadMsgCurr->pMsg);
    447              
    448              // To save the NIB nwk sequense number and use the GP alias nwk sequence number
    449              // for the GP notification
    450              nwkSeqNum = _NIB.SequenceNum;
    451              _NIB.SequenceNum = pCmdPayloadMsgCurr->secNum;
    452              
    453              // To save the NIB nwk address and use the GP alias nwk address for the GP notification
    454              nwkAddr = _NIB.nwkDevAddress;
    455              
    456              if( appId == GP_OPT_APP_ID_GPD )
    457              {
    458                pgpdid = pCmdPayloadMsgCurr->pMsg + sizeof( uint16 );
    459                
    460                osal_memcpy( &_NIB.nwkDevAddress, pgpdid, sizeof(uint16) );
    461                gpd_ID.AppID = GP_OPT_APP_ID_GPD;
    462                osal_memcpy( &gpd_ID.GPDId.SrcID, pgpdid, sizeof( uint32 ) );
    463              }
    464              else if( appId == GP_OPT_APP_ID_IEEE )
    465              {
    466                pgpdid = pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN;
    467                
    468                osal_revmemcpy( &_NIB.nwkDevAddress,(pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN), sizeof(uint16) );
    469                
    470                gpd_ID.AppID = GP_OPT_APP_ID_IEEE;
    471          
    472                pgpdid = pCmdPayloadMsgCurr->pMsg + sizeof( uint16 );
    473                osal_memcpy( gpd_ID.GPDId.GPDExtAddr, pgpdid, Z_EXTADDR_LEN );
    474              }
    475              
    476              gp_getProxyTableByGpId(&gpd_ID, entry, NULL);
    477          
    478              if ( PROXY_TBL_GET_ASSIGNED_ALIAS( entry[PROXY_TBL_ENTRY_OPT + 1] ) )
    479              {
    480                _NIB.nwkDevAddress = 0;
    481                osal_memcpy( (uint8*)&_NIB.nwkDevAddress, &entry[PROXY_TBL_ENTRY_ALIAS], sizeof(uint16));
    482              }
    483              
    484              // save aps sequence number
    485              apsSecNum = APS_Counter;
    486              APS_Counter = pCmdPayloadMsgCurr->secNum;
    487              
    488              // Set nwk radius for zcl frame
    489              if ( entry[PROXY_TBL_ENTRY_GRP_RAD] != 0xFF)
    490              {
    491                zcl_radius =  entry[PROXY_TBL_ENTRY_GRP_RAD];
    492              }
    493              
    494              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &gpNotification->addr, ZCL_CLUSTER_ID_GREEN_POWER,
    495                                    COMMAND_GP_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    496                                    TRUE, 0,  bdb_getZCLFrameCounter(), pCmdPayloadMsgCurr->lenght, pCmdPayloadMsgCurr->pMsg );
    497              
    498              // restore nwk radius
    499              zcl_radius = AF_DEFAULT_RADIUS;
    500              
    501              // restore aps sequence number
    502              APS_Counter = apsSecNum;
    503               
    504              // Restore the NIB nwk sequence number
    505              _NIB.SequenceNum = nwkSeqNum;
    506              
    507              // Restore the NIB nwk address
    508              _NIB.nwkDevAddress = nwkAddr;
    509              
    510              gp_NotificationMsgClean( gp_GetPHeadNotification ( ) );
    511              
    512              if ( gp_GetHeadNotificationMsg ( ) != NULL )
    513              {
    514                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
    515              }
    516            }
    517          #endif
    518          
    519            // Discard unknown events
    520            return 0;
   \                     ??zcl_event_loop_0:
   \   000065   7A00         MOV       R2,#0x0
   \   000067   7B00         MOV       R3,#0x0
   \                     ??zcl_event_loop_5:
   \   000069   7F04         MOV       R7,#0x4
   \   00006B   02....       LJMP      ?BANKED_LEAVE_XDATA
    521          }
    522          #endif
    523          
    524          #if !defined ( ZCL_STANDALONE )
    525          /*********************************************************************
    526           * @fn      zcl_registerForMsg
    527           *
    528           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    529           *          messages that aren't processed to one task (if a task is
    530           *          registered).
    531           *
    532           * @param   taskId - task Id of the Application where commands will be sent to
    533           *
    534           * @return  TRUE if task registeration successful, FALSE otherwise
    535           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    537          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    538            return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   7AFF         MOV       R2,#-0x1
   \   000007   12....       LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
   \   00000A   7F01         MOV       R7,#0x1
   \   00000C   02....       LJMP      ?BANKED_LEAVE_XDATA
    539          }
    540          
    541          /*********************************************************************
    542           * @fn      zcl_registerForMsgExt
    543           *
    544           * @brief   This function enables a Task to register to recieve all
    545           *          incoming Foundation Command/Response messages, for a particular
    546           *          End Point, that aren't processed by ZCL.
    547           *
    548           *          NOTE: Any Task registered for a unique end point will take
    549           *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
    550           *          value.  ie. If task A registers for End Point 1, task B registers
    551           *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
    552           *          sent to Task A and NOT Task B.
    553           *
    554           * @param   taskId - task Id of the Application where commands will be sent to
    555           * @param   endPointId - end point Id of interest
    556           *
    557           * @return  TRUE if task registeration successful, FALSE otherwise
    558           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    559          uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
   \                     zcl_registerForMsgExt:
    560          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    561            return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   12....       LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
   \   000008   7F01         MOV       R7,#0x1
   \   00000A   02....       LJMP      ?BANKED_LEAVE_XDATA
    562          }
    563          
    564          /*********************************************************************
    565           * @fn      zcl_addExternalFoundationHandler
    566           *
    567           * @brief   This function adds a record to the internal list of external
    568           *          handlers of unhandled incoming Foundation Command/Response messages.
    569           *
    570           * @param   taskId - task Id of the Application where commands will be sent to
    571           * @param   endPointId - end point Id of interest
    572           *
    573           * @return  TRUE if task registeration successful, FALSE otherwise
    574           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    575          uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
   \                     zcl_addExternalFoundationHandler:
    576          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    577            zclExternalFoundationHandlerList *pNewItem;
    578            zclExternalFoundationHandlerList *pLoop;
    579            zclExternalFoundationHandlerList *pLoopPrev;
    580          
    581            // Fill in the new endpoint registrant list
    582            pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    583            if ( pNewItem == NULL )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   605C         JZ        ??zcl_addExternalFoundationHandler_0
    584            {
    585              return ( false );
    586            }
    587          
    588            pNewItem->zcl_ExternalEndPoint = endPointId;
   \   000014   EF           MOV       A,R7
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
    589            pNewItem->zcl_ExternalTaskID = taskId;
   \   00001D   EE           MOV       A,R6
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
    590            pNewItem->next = NULL;
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   E4           CLR       A
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   F0           MOVX      @DPTR,A
    591          
    592            // Add to the list
    593            if ( externalEndPointHandlerList == NULL )
   \   00002D   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   E8           MOV       A,R0
   \   000036   49           ORL       A,R1
   \   000037   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00003A   7006         JNZ       ??zcl_addExternalFoundationHandler_1
    594            {
    595              externalEndPointHandlerList = pNewItem;
   \   00003C   EA           MOV       A,R2
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   EB           MOV       A,R3
   \   000040   8061         SJMP      ??zcl_addExternalFoundationHandler_2
    596            }
    597            else
    598            {
    599              // make sure no one else tried to register for this endpoint
    600              pLoop = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_1:
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F8           MOV       R0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
    601              pLoopPrev = externalEndPointHandlerList;
   \   000047   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   FC           MOV       R4,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FD           MOV       R5,A
   \   00004F   800D         SJMP      ??zcl_addExternalFoundationHandler_3
    602          
    603              while ( pLoop != NULL )
    604              {
    605                if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
    606                {
    607                  zcl_mem_free(pNewItem);
    608                  return ( false );
    609                }
    610                pLoopPrev = pLoop;
   \                     ??zcl_addExternalFoundationHandler_4:
   \   000051   E8           MOV       A,R0
   \   000052   FC           MOV       R4,A
   \   000053   E9           MOV       A,R1
   \   000054   FD           MOV       R5,A
    611                pLoop = pLoop->next;
   \   000055   8882         MOV       DPL,R0
   \   000057   8983         MOV       DPH,R1
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F8           MOV       R0,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F9           MOV       R1,A
   \                     ??zcl_addExternalFoundationHandler_3:
   \   00005E   E8           MOV       A,R0
   \   00005F   49           ORL       A,R1
   \   000060   6012         JZ        ??zcl_addExternalFoundationHandler_5
   \   000062   8882         MOV       DPL,R0
   \   000064   8983         MOV       DPH,R1
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   6F           XRL       A,R7
   \   00006B   70E4         JNZ       ??zcl_addExternalFoundationHandler_4
   \   00006D                ; Setup parameters for call to function osal_mem_free
   \   00006D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??zcl_addExternalFoundationHandler_0:
   \   000070   7900         MOV       R1,#0x0
   \   000072   8032         SJMP      ??zcl_addExternalFoundationHandler_6
    612              }
    613          
    614              if ( endPointId == AF_BROADCAST_ENDPOINT )
   \                     ??zcl_addExternalFoundationHandler_5:
   \   000074   74FF         MOV       A,#-0x1
   \   000076   6F           XRL       A,R7
   \   000077   7012         JNZ       ??zcl_addExternalFoundationHandler_7
    615              {
    616                // put new registration at the end of the list
    617                pLoopPrev->next = pNewItem;
   \   000079   8C82         MOV       DPL,R4
   \   00007B   8D83         MOV       DPH,R5
   \   00007D   EA           MOV       A,R2
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   A3           INC       DPTR
   \   000080   EB           MOV       A,R3
   \   000081   F0           MOVX      @DPTR,A
    618                pNewItem->next = NULL;
   \   000082   8A82         MOV       DPL,R2
   \   000084   8B83         MOV       DPH,R3
   \   000086   E4           CLR       A
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   8018         SJMP      ??zcl_addExternalFoundationHandler_2
    619              }
    620              else
    621              {
    622                // put new registration at the front of the list
    623                zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_7:
   \   00008B   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F8           MOV       R0,A
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F9           MOV       R1,A
    624                externalEndPointHandlerList = pNewItem;
   \   000093   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000096   EA           MOV       A,R2
   \   000097   F0           MOVX      @DPTR,A
   \   000098   A3           INC       DPTR
   \   000099   EB           MOV       A,R3
   \   00009A   F0           MOVX      @DPTR,A
    625                pNewItem->next = temp;
   \   00009B   8A82         MOV       DPL,R2
   \   00009D   8B83         MOV       DPH,R3
   \   00009F   E8           MOV       A,R0
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E9           MOV       A,R1
   \                     ??zcl_addExternalFoundationHandler_2:
   \   0000A3   F0           MOVX      @DPTR,A
    626              }
    627            }
    628          
    629            return ( true );
   \   0000A4   7901         MOV       R1,#0x1
   \                     ??zcl_addExternalFoundationHandler_6:
   \   0000A6   7F02         MOV       R7,#0x2
   \   0000A8   02....       LJMP      ?BANKED_LEAVE_XDATA
    630          
    631          }
    632          
    633          /*********************************************************************
    634           * @fn      zcl_getExternalFoundationHandler
    635           *
    636           * @brief   This function retrieves the Task ID of the task registered
    637           *          to received unhandled incoming Foundation Command/Response messages
    638           *          for a particular End Point ID.
    639           *
    640           * @param   pInMsg - recevied ZCL command
    641           *
    642           * @return  TASK ID of registered task.  If no task is reigistered, it returns
    643           *          TASK_NO_TASK.
    644           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
   \                     zcl_getExternalFoundationHandler:
    646          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    647            zclExternalFoundationHandlerList *pLoop;
    648            uint8 addressedEndPointId = pInMsg->endPoint;
   \   000004   EA           MOV       A,R2
   \   000005   2414         ADD       A,#0x14
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FA           MOV       R2,A
    649          
    650            // make sure no one else tried to register for this endpoint
    651            pLoop = externalEndPointHandlerList;
   \   00000F   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000012   8004         SJMP      ??zcl_getExternalFoundationHandler_0
    652          
    653            while ( pLoop != NULL )
    654            {
    655              if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
    656                   ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
    657              {
    658                return ( pLoop->zcl_ExternalTaskID );
    659              }
    660              pLoop = pLoop->next;
   \                     ??zcl_getExternalFoundationHandler_1:
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \                     ??zcl_getExternalFoundationHandler_0:
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   E8           MOV       A,R0
   \   00001E   49           ORL       A,R1
   \   00001F   601C         JZ        ??zcl_getExternalFoundationHandler_2
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   FB           MOV       R3,A
   \   00002A   EA           MOV       A,R2
   \   00002B   6B           XRL       A,R3
   \   00002C   6005         JZ        ??zcl_getExternalFoundationHandler_3
   \   00002E   74FF         MOV       A,#-0x1
   \   000030   6B           XRL       A,R3
   \   000031   70E1         JNZ       ??zcl_getExternalFoundationHandler_1
   \                     ??zcl_getExternalFoundationHandler_3:
   \   000033   8882         MOV       DPL,R0
   \   000035   8983         MOV       DPH,R1
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   8002         SJMP      ??zcl_getExternalFoundationHandler_4
    661            }
    662          
    663            return ( TASK_NO_TASK );
   \                     ??zcl_getExternalFoundationHandler_2:
   \   00003D   79FF         MOV       R1,#-0x1
   \                     ??zcl_getExternalFoundationHandler_4:
   \   00003F   D083         POP       DPH
   \   000041   D082         POP       DPL
   \   000043   02....       LJMP      ?BRET
    664          }
    665          #endif
    666          
    667          #if !defined ( ZCL_STANDALONE )
    668          /*********************************************************************
    669           * @fn      zcl_HandleExternal
    670           *
    671           * @brief
    672           *
    673           * @param   pInMsg - incoming message to process
    674           *
    675           * @return  TRUE
    676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
   \                     zcl_HandleExternal:
    678          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    679            zclIncomingMsg_t *pCmd;
    680            uint8 taskID;
    681          
    682            taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
   \   000009                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FB           MOV       R3,A
   \   000012   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000015   E9           MOV       A,R1
   \   000016   F5..         MOV       ?V2,A
    683          
    684            if ( taskID == TASK_NO_TASK )
   \   000018   74FF         MOV       A,#-0x1
   \   00001A   69           XRL       A,R1
   \   00001B   7003         JNZ       $+5
   \   00001D   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    685            {
    686              return ( TRUE );
    687            }
    688          
    689            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \   000020                ; Setup parameters for call to function osal_msg_allocate
   \   000020   7A19         MOV       R2,#0x19
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
   \   00002B   AE..         MOV       R6,?V4
   \   00002D   AF..         MOV       R7,?V5
    690            if ( pCmd != NULL )
   \   00002F   EA           MOV       A,R2
   \   000030   4F           ORL       A,R7
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    691            {
    692              // fill in the message
    693              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   7434         MOV       A,#0x34
   \   00003C   F0           MOVX      @DPTR,A
    694              pCmd->zclHdr    = pInMsg->hdr;
   \   00003D   85..82       MOV       DPL,?V0
   \   000040   85..83       MOV       DPH,?V1
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   EA           MOV       A,R2
   \   000046   2402         ADD       A,#0x2
   \   000048   FC           MOV       R4,A
   \   000049   E4           CLR       A
   \   00004A   3F           ADDC      A,R7
   \   00004B   FD           MOV       R5,A
   \   00004C   7406         MOV       A,#0x6
   \   00004E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    695              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000051   85..82       MOV       DPL,?V0
   \   000054   85..83       MOV       DPH,?V1
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F8           MOV       R0,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F583         MOV       DPH,A
   \   00005D   8882         MOV       DPL,R0
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F8           MOV       R0,A
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F9           MOV       R1,A
   \   000068   8A82         MOV       DPL,R2
   \   00006A   8B83         MOV       DPH,R3
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   E8           MOV       A,R0
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   E9           MOV       A,R1
   \   000078   F0           MOVX      @DPTR,A
    696              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \   000079   85..82       MOV       DPL,?V0
   \   00007C   85..83       MOV       DPH,?V1
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F8           MOV       R0,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   C8           XCH       A,R0
   \   000084   2406         ADD       A,#0x6
   \   000086   F582         MOV       DPL,A
   \   000088   E4           CLR       A
   \   000089   38           ADDC      A,R0
   \   00008A   F583         MOV       DPH,A
   \   00008C   EA           MOV       A,R2
   \   00008D   240A         ADD       A,#0xa
   \   00008F   FC           MOV       R4,A
   \   000090   E4           CLR       A
   \   000091   3F           ADDC      A,R7
   \   000092   FD           MOV       R5,A
   \   000093   740C         MOV       A,#0xc
   \   000095   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    697              pCmd->endPoint  = pInMsg->msg->endPoint;
   \   000098   85..82       MOV       DPL,?V0
   \   00009B   85..83       MOV       DPH,?V1
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F8           MOV       R0,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   C8           XCH       A,R0
   \   0000A3   2414         ADD       A,#0x14
   \   0000A5   F582         MOV       DPL,A
   \   0000A7   E4           CLR       A
   \   0000A8   38           ADDC      A,R0
   \   0000A9   F583         MOV       DPH,A
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   C0E0         PUSH      A
   \   0000AE   EA           MOV       A,R2
   \   0000AF   2416         ADD       A,#0x16
   \   0000B1   F582         MOV       DPL,A
   \   0000B3   E4           CLR       A
   \   0000B4   3F           ADDC      A,R7
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   D0E0         POP       A
   \   0000B9   F0           MOVX      @DPTR,A
    698              pCmd->attrCmd   = pInMsg->attrCmd;
   \   0000BA   E5..         MOV       A,?V0
   \   0000BC   240C         ADD       A,#0xc
   \   0000BE   F8           MOV       R0,A
   \   0000BF   E4           CLR       A
   \   0000C0   35..         ADDC      A,?V1
   \   0000C2   F9           MOV       R1,A
   \   0000C3   8882         MOV       DPL,R0
   \   0000C5   F583         MOV       DPH,A
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   FA           MOV       R2,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   FB           MOV       R3,A
   \   0000CC   EE           MOV       A,R6
   \   0000CD   2417         ADD       A,#0x17
   \   0000CF   F582         MOV       DPL,A
   \   0000D1   E4           CLR       A
   \   0000D2   3F           ADDC      A,R7
   \   0000D3   F583         MOV       DPH,A
   \   0000D5   EA           MOV       A,R2
   \   0000D6   F0           MOVX      @DPTR,A
   \   0000D7   A3           INC       DPTR
   \   0000D8   EB           MOV       A,R3
   \   0000D9   F0           MOVX      @DPTR,A
    699              
    700          #ifdef BDB_REPORTING
    701              if(pCmd->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT)
   \   0000DA   8E82         MOV       DPL,R6
   \   0000DC   8F83         MOV       DPH,R7
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   FA           MOV       R2,A
   \   0000E7   7406         MOV       A,#0x6
   \   0000E9   6A           XRL       A,R2
   \   0000EA   7009         JNZ       ??zcl_HandleExternal_1
    702              {
    703                bdb_ProcessInConfigReportCmd(pCmd);
   \   0000EC                ; Setup parameters for call to function bdb_ProcessInConfigReportCmd
   \   0000EC   EE           MOV       A,R6
   \   0000ED   FA           MOV       R2,A
   \   0000EE   EF           MOV       A,R7
   \   0000EF   FB           MOV       R3,A
   \   0000F0   12....       LCALL     `??bdb_ProcessInConfigReportCmd::?relay`; Banked call to: bdb_ProcessInConfigReportCmd
    704                osal_msg_deallocate((uint8*)pCmd);
   \   0000F3                ; Setup parameters for call to function osal_msg_deallocate
   \   0000F3   800C         SJMP      ??zcl_HandleExternal_2
    705                return TRUE;          
    706              }
    707              if(pCmd->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG)
   \                     ??zcl_HandleExternal_1:
   \   0000F5   7408         MOV       A,#0x8
   \   0000F7   6A           XRL       A,R2
   \   0000F8   7010         JNZ       ??zcl_HandleExternal_3
    708              {
    709                bdb_ProcessInReadReportCfgCmd(pCmd);
   \   0000FA                ; Setup parameters for call to function bdb_ProcessInReadReportCfgCmd
   \   0000FA   EE           MOV       A,R6
   \   0000FB   FA           MOV       R2,A
   \   0000FC   EF           MOV       A,R7
   \   0000FD   FB           MOV       R3,A
   \   0000FE   12....       LCALL     `??bdb_ProcessInReadReportCfgCmd::?relay`; Banked call to: bdb_ProcessInReadReportCfgCmd
    710                osal_msg_deallocate((uint8*)pCmd);
   \   000101                ; Setup parameters for call to function osal_msg_deallocate
   \                     ??zcl_HandleExternal_2:
   \   000101   EE           MOV       A,R6
   \   000102   FA           MOV       R2,A
   \   000103   EF           MOV       A,R7
   \   000104   FB           MOV       R3,A
   \   000105   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    711                return TRUE;
   \   000108   8011         SJMP      ??zcl_HandleExternal_0
    712              }
    713          #endif
    714              // Application will free the attrCmd buffer
    715              pInMsg->attrCmd = NULL;
   \                     ??zcl_HandleExternal_3:
   \   00010A   8882         MOV       DPL,R0
   \   00010C   8983         MOV       DPH,R1
   \   00010E   E4           CLR       A
   \   00010F   F0           MOVX      @DPTR,A
   \   000110   A3           INC       DPTR
   \   000111   F0           MOVX      @DPTR,A
    716          
    717              /* send message through task message */
    718              osal_msg_send( taskID, (uint8 *)pCmd );
   \   000112                ; Setup parameters for call to function osal_msg_send
   \   000112   EE           MOV       A,R6
   \   000113   FA           MOV       R2,A
   \   000114   EF           MOV       A,R7
   \   000115   FB           MOV       R3,A
   \   000116   A9..         MOV       R1,?V2
   \   000118   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    719            }
    720          
    721            return ( TRUE );
   \                     ??zcl_HandleExternal_0:
   \   00011B   7901         MOV       R1,#0x1
   \   00011D   7F06         MOV       R7,#0x6
   \   00011F   02....       LJMP      ?BANKED_LEAVE_XDATA
    722          }
    723          #endif
    724          
    725          
    726          /*********************************************************************
    727           * @fn          zcl_getRawAFMsg
    728           *
    729           * @brief       Call to get original unprocessed AF message
    730           *              (not parsed by ZCL).
    731           *
    732           *   NOTE:  This function can only be called during a ZCL callback function
    733           *          and the calling function must NOT change any data in the message.
    734           *
    735           * @param       none
    736           *
    737           * @return      pointer to original AF message, NULL if not processing
    738           *              AF message.
    739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    740          afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
   \                     zcl_getRawAFMsg:
    741          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    742            return ( rawAFMsg );
   \   000004   90....       MOV       DPTR,#rawAFMsg
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FA           MOV       R2,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FB           MOV       R3,A
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
    743          }
    744          
    745          /*********************************************************************
    746           * @fn          zcl_getParsedTransSeqNum
    747           *
    748           * @brief       Call to the get the transaction sequence number from
    749           *              the incoming message.
    750           *
    751           *   NOTE:  This function can only be called during a ZCL callback function
    752           *          and the calling function must NOT change any data in the message.
    753           *
    754           * @param       none
    755           *
    756           * @return      transaction sequence number.
    757           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    758          uint8 zcl_getParsedTransSeqNum( void )
   \                     zcl_getParsedTransSeqNum:
    759          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    760            return ( savedZCLTransSeqNum );
   \   000004   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
    761          }
    762          
    763          /*********************************************************************
    764           * @fn          zcl_registerPlugin
    765           *
    766           * @brief       Add a Cluster Library handler
    767           *
    768           * @param       startClusterID - starting cluster ID
    769           * @param       endClusterID - ending cluster ID
    770           * @param       pfnHdlr - function pointer to incoming message handler
    771           *
    772           * @return      ZSuccess if OK
    773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    774          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    775                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    776          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    777            zclLibPlugin_t *pNewItem;
    778            zclLibPlugin_t *pLoop;
    779          
    780            // Fill in the new profile list
    781            pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A08         MOV       R2,#0x8
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    782            if ( pNewItem == NULL )
   \   00001C   EA           MOV       A,R2
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerPlugin_0
    783            {
    784              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   806C         SJMP      ??zcl_registerPlugin_1
    785            }
    786          
    787            // Fill in the plugin record.
    788            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_0:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
    789            pNewItem->startClusterID = startClusterID;
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E5..         MOV       A,?V0
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   E5..         MOV       A,?V1
   \   000038   F0           MOVX      @DPTR,A
    790            pNewItem->endClusterID = endClusterID;
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   EE           MOV       A,R6
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   EF           MOV       A,R7
   \   000045   F0           MOVX      @DPTR,A
    791            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \   000046   740C         MOV       A,#0xc
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   FA           MOV       R2,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   FB           MOV       R3,A
   \   000050   8882         MOV       DPL,R0
   \   000052   8983         MOV       DPH,R1
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   EA           MOV       A,R2
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   EB           MOV       A,R3
   \   00005E   F0           MOVX      @DPTR,A
    792          
    793            // Find spot in list
    794            if (  plugins == NULL )
   \   00005F   90....       MOV       DPTR,#plugins
   \   000062   E0           MOVX      A,@DPTR
   \   000063   FA           MOV       R2,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   FB           MOV       R3,A
   \   000067   EA           MOV       A,R2
   \   000068   4B           ORL       A,R3
   \   000069   90....       MOV       DPTR,#plugins
   \   00006C   601B         JZ        ??zcl_registerPlugin_2
    795            {
    796              plugins = pNewItem;
    797            }
    798            else
    799            {
    800              // Look for end of list
    801              pLoop = plugins;
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   FC           MOV       R4,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   8003         SJMP      ??zcl_registerPlugin_3
    802              while ( pLoop->next != NULL )
    803              {
    804                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_4:
   \   000074   EA           MOV       A,R2
   \   000075   FC           MOV       R4,A
   \   000076   EB           MOV       A,R3
   \                     ??zcl_registerPlugin_3:
   \   000077   FD           MOV       R5,A
    805              }
   \   000078   8C82         MOV       DPL,R4
   \   00007A   8D83         MOV       DPH,R5
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FB           MOV       R3,A
   \   000081   EA           MOV       A,R2
   \   000082   4B           ORL       A,R3
   \   000083   70EF         JNZ       ??zcl_registerPlugin_4
    806          
    807              // Put new item at end of list
    808              pLoop->next = pNewItem;
   \   000085   8C82         MOV       DPL,R4
   \   000087   8D83         MOV       DPH,R5
   \                     ??zcl_registerPlugin_2:
   \   000089   E8           MOV       A,R0
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   E9           MOV       A,R1
   \   00008D   F0           MOVX      @DPTR,A
    809            }
    810          
    811            return ( ZSuccess );
   \   00008E   7900         MOV       R1,#0x0
   \                     ??zcl_registerPlugin_1:
   \   000090   7F04         MOV       R7,#0x4
   \   000092   02....       LJMP      ?BANKED_LEAVE_XDATA
    812          }
    813          
    814          #ifdef ZCL_DISCOVER
    815          /*********************************************************************
    816           * @fn          zcl_registerCmdList
    817           *
    818           * @brief       Register a Command List with ZCL Foundation
    819           *
    820           * @param       endpoint - endpoint the attribute list belongs to
    821           * @param       newCmdList - array of command records
    822           *
    823           * @return      ZSuccess if OK
    824           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    825          ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
   \                     zcl_registerCmdList:
    826          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    827            zclCmdRecsList_t *pNewItem;
    828            zclCmdRecsList_t *pLoop;
    829          
    830            // Fill in the new profile list
    831            pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    832            if ( pNewItem == NULL )
   \   00001C   EA           MOV       A,R2
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerCmdList_0
    833            {
    834              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8059         SJMP      ??zcl_registerCmdList_1
    835            }
    836          
    837            pNewItem->pNext = (zclCmdRecsList_t *)NULL;
   \                     ??zcl_registerCmdList_0:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
    838            pNewItem->endpoint = endpoint;
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E5..         MOV       A,?V0
   \   000034   F0           MOVX      @DPTR,A
    839            pNewItem->numCommands = cmdListSize;
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E5..         MOV       A,?V1
   \   00003E   F0           MOVX      @DPTR,A
    840            pNewItem->pCmdRecs = newCmdList;
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   EE           MOV       A,R6
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   EF           MOV       A,R7
   \   00004B   F0           MOVX      @DPTR,A
    841          
    842            // Find spot in list
    843            if ( gpCmdList == NULL )
   \   00004C   90....       MOV       DPTR,#gpCmdList
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FA           MOV       R2,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   FB           MOV       R3,A
   \   000054   EA           MOV       A,R2
   \   000055   4B           ORL       A,R3
   \   000056   90....       MOV       DPTR,#gpCmdList
   \   000059   601B         JZ        ??zcl_registerCmdList_2
    844            {
    845              gpCmdList = pNewItem;
    846            }
    847            else
    848            {
    849              // Look for end of list
    850              pLoop = gpCmdList;
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   FC           MOV       R4,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   8003         SJMP      ??zcl_registerCmdList_3
    851              while ( pLoop->pNext != NULL )
    852              {
    853                pLoop = pLoop->pNext;
   \                     ??zcl_registerCmdList_4:
   \   000061   EA           MOV       A,R2
   \   000062   FC           MOV       R4,A
   \   000063   EB           MOV       A,R3
   \                     ??zcl_registerCmdList_3:
   \   000064   FD           MOV       R5,A
    854              }
   \   000065   8C82         MOV       DPL,R4
   \   000067   8D83         MOV       DPH,R5
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FA           MOV       R2,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FB           MOV       R3,A
   \   00006E   EA           MOV       A,R2
   \   00006F   4B           ORL       A,R3
   \   000070   70EF         JNZ       ??zcl_registerCmdList_4
    855          
    856              // Put new item at end of list
    857              pLoop->pNext = pNewItem;
   \   000072   8C82         MOV       DPL,R4
   \   000074   8D83         MOV       DPH,R5
   \                     ??zcl_registerCmdList_2:
   \   000076   E8           MOV       A,R0
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   E9           MOV       A,R1
   \   00007A   F0           MOVX      @DPTR,A
    858            }
    859          
    860            return ( ZSuccess );
   \   00007B   7900         MOV       R1,#0x0
   \                     ??zcl_registerCmdList_1:
   \   00007D   7F04         MOV       R7,#0x4
   \   00007F   02....       LJMP      ?BANKED_LEAVE_XDATA
    861          }
    862          #endif  // ZCL_DISCOVER
    863          
    864          /*********************************************************************
    865           * @fn          zcl_registerAttrList
    866           *
    867           * @brief       Register an Attribute List with ZCL Foundation
    868           *
    869           * @param       endpoint - endpoint the attribute list belongs to
    870           * @param       numAttr - number of attributes in list
    871           * @param       newAttrList - array of Attribute records.
    872           *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
    873           *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
    874           *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    875           *
    876           * @return      ZSuccess if OK
    877           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    878          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    879          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    880            zclAttrRecsList *pNewItem;
    881            zclAttrRecsList *pLoop;
    882          
    883            // Fill in the new profile list
    884            pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0A         MOV       R2,#0xa
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    885            if ( pNewItem == NULL )
   \   00001C   EA           MOV       A,R2
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerAttrList_0
    886            {
    887              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   806C         SJMP      ??zcl_registerAttrList_1
    888            }
    889          
    890            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_0:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
    891            pNewItem->endpoint = endpoint;
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E5..         MOV       A,?V0
   \   000034   F0           MOVX      @DPTR,A
    892            pNewItem->pfnReadWriteCB = NULL;
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E4           CLR       A
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
    893            pNewItem->numAttributes = numAttr;
   \   000040   8A82         MOV       DPL,R2
   \   000042   8B83         MOV       DPH,R3
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E5..         MOV       A,?V1
   \   00004D   F0           MOVX      @DPTR,A
    894            pNewItem->attrs = newAttrList;
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   EE           MOV       A,R6
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   EF           MOV       A,R7
   \   00005E   F0           MOVX      @DPTR,A
    895          
    896            // Find spot in list
    897            if ( attrList == NULL )
   \   00005F   90....       MOV       DPTR,#attrList
   \   000062   E0           MOVX      A,@DPTR
   \   000063   FA           MOV       R2,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   FB           MOV       R3,A
   \   000067   EA           MOV       A,R2
   \   000068   4B           ORL       A,R3
   \   000069   90....       MOV       DPTR,#attrList
   \   00006C   601B         JZ        ??zcl_registerAttrList_2
    898            {
    899              attrList = pNewItem;
    900            }
    901            else
    902            {
    903              // Look for end of list
    904              pLoop = attrList;
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   FC           MOV       R4,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   8003         SJMP      ??zcl_registerAttrList_3
    905              while ( pLoop->next != NULL )
    906              {
    907                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_4:
   \   000074   EA           MOV       A,R2
   \   000075   FC           MOV       R4,A
   \   000076   EB           MOV       A,R3
   \                     ??zcl_registerAttrList_3:
   \   000077   FD           MOV       R5,A
    908              }
   \   000078   8C82         MOV       DPL,R4
   \   00007A   8D83         MOV       DPH,R5
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FB           MOV       R3,A
   \   000081   EA           MOV       A,R2
   \   000082   4B           ORL       A,R3
   \   000083   70EF         JNZ       ??zcl_registerAttrList_4
    909          
    910              // Put new item at end of list
    911              pLoop->next = pNewItem;
   \   000085   8C82         MOV       DPL,R4
   \   000087   8D83         MOV       DPH,R5
   \                     ??zcl_registerAttrList_2:
   \   000089   E8           MOV       A,R0
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   E9           MOV       A,R1
   \   00008D   F0           MOVX      @DPTR,A
    912            }
    913          
    914            return ( ZSuccess );
   \   00008E   7900         MOV       R1,#0x0
   \                     ??zcl_registerAttrList_1:
   \   000090   7F04         MOV       R7,#0x4
   \   000092   02....       LJMP      ?BANKED_LEAVE_XDATA
    915          }
    916          
    917          /*********************************************************************
    918           * @fn          zcl_registerClusterOptionList
    919           *
    920           * @brief       Register a Cluster Option List with ZCL Foundation
    921           *
    922           * @param       endpoint - endpoint the option list belongs to
    923           * @param       numOption - number of options in list
    924           * @param       optionList - array of cluster option records.
    925           *
    926           *              NOTE: This API should be called to enable 'Application
    927           *                    Link Key' security and/or 'APS ACK' for a specific
    928           *                    Cluster. The 'Application Link Key' is discarded
    929           *                    if security isn't enabled on the device.
    930           *                    The default behavior is 'Network Key' when security
    931           *                    is enabled and no 'APS ACK' for the ZCL messages.
    932           *
    933           * @return      ZSuccess if OK
    934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    935          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    937            zclClusterOptionList *pNewItem;
    938            zclClusterOptionList *pLoop;
    939          
    940            // Fill in the new profile list
    941            pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    942            if ( pNewItem == NULL )
   \   00001C   EA           MOV       A,R2
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerClusterOptionList_0
    943            {
    944              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8059         SJMP      ??zcl_registerClusterOptionList_1
    945            }
    946          
    947            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_0:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
    948            pNewItem->endpoint = endpoint;
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E5..         MOV       A,?V0
   \   000034   F0           MOVX      @DPTR,A
    949            pNewItem->numOptions = numOption;
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E5..         MOV       A,?V1
   \   00003E   F0           MOVX      @DPTR,A
    950            pNewItem->options = optionList;
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   EE           MOV       A,R6
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   EF           MOV       A,R7
   \   00004B   F0           MOVX      @DPTR,A
    951          
    952            // Find spot in list
    953            if ( clusterOptionList == NULL )
   \   00004C   90....       MOV       DPTR,#clusterOptionList
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FA           MOV       R2,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   FB           MOV       R3,A
   \   000054   EA           MOV       A,R2
   \   000055   4B           ORL       A,R3
   \   000056   90....       MOV       DPTR,#clusterOptionList
   \   000059   601B         JZ        ??zcl_registerClusterOptionList_2
    954            {
    955              clusterOptionList = pNewItem;
    956            }
    957            else
    958            {
    959              // Look for end of list
    960              pLoop = clusterOptionList;
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   FC           MOV       R4,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   8003         SJMP      ??zcl_registerClusterOptionList_3
    961              while ( pLoop->next != NULL )
    962              {
    963                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_4:
   \   000061   EA           MOV       A,R2
   \   000062   FC           MOV       R4,A
   \   000063   EB           MOV       A,R3
   \                     ??zcl_registerClusterOptionList_3:
   \   000064   FD           MOV       R5,A
    964              }
   \   000065   8C82         MOV       DPL,R4
   \   000067   8D83         MOV       DPH,R5
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FA           MOV       R2,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FB           MOV       R3,A
   \   00006E   EA           MOV       A,R2
   \   00006F   4B           ORL       A,R3
   \   000070   70EF         JNZ       ??zcl_registerClusterOptionList_4
    965          
    966              // Put new item at end of list
    967              pLoop->next = pNewItem;
   \   000072   8C82         MOV       DPL,R4
   \   000074   8D83         MOV       DPH,R5
   \                     ??zcl_registerClusterOptionList_2:
   \   000076   E8           MOV       A,R0
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   E9           MOV       A,R1
   \   00007A   F0           MOVX      @DPTR,A
    968            }
    969          
    970            return ( ZSuccess );
   \   00007B   7900         MOV       R1,#0x0
   \                     ??zcl_registerClusterOptionList_1:
   \   00007D   7F04         MOV       R7,#0x4
   \   00007F   02....       LJMP      ?BANKED_LEAVE_XDATA
    971          }
    972          
    973          /*********************************************************************
    974           * @fn          zcl_registerValidateAttrData
    975           *
    976           * @brief       Add a validation function for attribute data
    977           *
    978           * @param       pfnValidateAttrData - function pointer to validate routine
    979           *
    980           * @return      ZSuccess if OK
    981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    982          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    983          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    984            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   F0           MOVX      @DPTR,A
    985          
    986            return ( ZSuccess );
   \   00000C   7900         MOV       R1,#0x0
   \   00000E   D083         POP       DPH
   \   000010   D082         POP       DPL
   \   000012   02....       LJMP      ?BRET
    987          }
    988          
    989          /*********************************************************************
    990           * @fn          zcl_registerReadWriteCB
    991           *
    992           * @brief       Register the application's callback function to read/write
    993           *              attribute data, and authorize read/write operation.
    994           *
    995           *              Note: The pfnReadWriteCB callback function is only required
    996           *                    when the attribute data format is unknown to ZCL. The
    997           *                    callback function gets called when the pointer 'dataPtr'
    998           *                    to the attribute value is NULL in the attribute database
    999           *                    registered with the ZCL.
   1000           *
   1001           *              Note: The pfnAuthorizeCB callback function is only required
   1002           *                    when the Read/Write operation on an attribute requires
   1003           *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
   1004           *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
   1005           *
   1006           * @param       endpoint - application's endpoint
   1007           * @param       pfnReadWriteCB - function pointer to read/write routine
   1008           * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
   1009           *
   1010           * @return      ZSuccess if successful. ZFailure, otherwise.
   1011           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1012          ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
   \                     zcl_registerReadWriteCB:
   1013                                             zclAuthorizeCB_t pfnAuthorizeCB )
   1014          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1015            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8B..         MOV       ?V5,R3
   \   000012   A9..         MOV       R1,?V5
   1016          
   1017            if ( pRec != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   49           ORL       A,R1
   \   000016   6020         JZ        ??zcl_registerReadWriteCB_0
   1018            {
   1019              pRec->pfnReadWriteCB = pfnReadWriteCB;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   EE           MOV       A,R6
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   EF           MOV       A,R7
   \   000023   F0           MOVX      @DPTR,A
   1020              pRec->pfnAuthorizeCB = pfnAuthorizeCB;
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   E5..         MOV       A,?V0
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   E5..         MOV       A,?V1
   \   000033   F0           MOVX      @DPTR,A
   1021          
   1022              return ( ZSuccess );
   \   000034   7900         MOV       R1,#0x0
   \   000036   8002         SJMP      ??zcl_registerReadWriteCB_1
   1023            }
   1024          
   1025            return ( ZFailure );
   \                     ??zcl_registerReadWriteCB_0:
   \   000038   7901         MOV       R1,#0x1
   \                     ??zcl_registerReadWriteCB_1:
   \   00003A   7F06         MOV       R7,#0x6
   \   00003C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1026          }
   1027          
   1028          /*********************************************************************
   1029           * @fn      zcl_DeviceOperational
   1030           *
   1031           * @brief   Used to see whether or not the device can send or respond
   1032           *          to application level commands.
   1033           *
   1034           * @param   srcEP - source endpoint
   1035           * @param   clusterID - cluster ID
   1036           * @param   frameType - command type
   1037           * @param   cmd - command ID
   1038           *
   1039           * @return  TRUE if device is operational, FALSE otherwise
   1040           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1041          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
   \                     zcl_DeviceOperational:
   1042                                              uint8 frameType, uint8 cmd, uint16 profileID )
   1043          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   1044            zclAttrRec_t attrRec;
   1045            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
   1046          
   1047            (void)profileID;  // Intentionally unreferenced parameter
   1048          
   1049            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
   1050            // cannot send or respond to application level commands, other than commands
   1051            // to read or write attributes. Note that the Identify cluster cannot be
   1052            // disabled, and remains functional regardless of this setting.
   1053            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000015   EC           MOV       A,R4
   \   000016   7006         JNZ       ??zcl_DeviceOperational_0
   \   000018   ED           MOV       A,R5
   \   000019   C3           CLR       C
   \   00001A   9406         SUBB      A,#0x6
   \   00001C   4050         JC        ??zcl_DeviceOperational_1
   1054            {
   1055              return ( TRUE );
   1056            }
   1057          
   1058            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   00001E   7403         MOV       A,#0x3
   \   000020   6A           XRL       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   604A         JZ        ??zcl_DeviceOperational_1
   1059            {
   1060              return ( TRUE );
   1061            }
   1062          
   1063            // Is device enabled?
   1064            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
   1065                                 ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000024                ; Setup parameters for call to function zclFindAttrRec
   \   000024   7401         MOV       A,#0x1
   \   000026   12....       LCALL     ?XSTACK_DISP100_8
   \   000029   88..         MOV       ?V2,R0
   \   00002B   89..         MOV       ?V3,R1
   \   00002D   78..         MOV       R0,#?V2
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   7C12         MOV       R4,#0x12
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7A00         MOV       R2,#0x0
   \   000038   7B00         MOV       R3,#0x0
   \   00003A   EE           MOV       A,R6
   \   00003B   F9           MOV       R1,A
   \   00003C   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00003F   7402         MOV       A,#0x2
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044   E9           MOV       A,R1
   \   000045   601C         JZ        ??zcl_DeviceOperational_2
   1066            {
   1067          #ifdef ZCL_READ
   1068              zclReadAttrData( &deviceEnabled, &attrRec, NULL );
   \   000047                ; Setup parameters for call to function zclReadAttrData
   \   000047   E4           CLR       A
   \   000048   F5..         MOV       ?V2,A
   \   00004A   F5..         MOV       ?V3,A
   \   00004C   78..         MOV       R0,#?V2
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7403         MOV       A,#0x3
   \   000053   12....       LCALL     ?XSTACK_DISP102_8
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP101_8
   \   00005B   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   1069          #endif
   1070            }
   1071          
   1072            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_2:
   \   000063   85..82       MOV       DPL,?XSP + 0
   \   000066   85..83       MOV       DPH,?XSP + 1
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   6401         XRL       A,#0x1
   \   00006C   7004         JNZ       ??zcl_DeviceOperational_3
   \                     ??zcl_DeviceOperational_1:
   \   00006E   7901         MOV       R1,#0x1
   \   000070   8002         SJMP      ??zcl_DeviceOperational_4
   \                     ??zcl_DeviceOperational_3:
   \   000072   7900         MOV       R1,#0x0
   \                     ??zcl_DeviceOperational_4:
   \   000074   7409         MOV       A,#0x9
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   \   000079   7F04         MOV       R7,#0x4
   \   00007B   02....       LJMP      ?BANKED_LEAVE_XDATA
   1073          }
   1074          
   1075          /*********************************************************************
   1076           * @fn      zcl_SendCommand
   1077           *
   1078           * @brief   Used to send Profile and Cluster Specific Command messages.
   1079           *
   1080           *          NOTE: The calling application is responsible for incrementing
   1081           *                the Sequence Number.
   1082           *
   1083           * @param   srcEp - source endpoint
   1084           * @param   destAddr - destination address
   1085           * @param   clusterID - cluster ID
   1086           * @param   cmd - command ID
   1087           * @param   specific - whether the command is Cluster Specific
   1088           * @param   direction - client/server direction of the command
   1089           * @param   disableDefaultRsp - disable Default Response command
   1090           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1091           * @param   seqNumber - identification number for the transaction
   1092           * @param   cmdFormatLen - length of the command to be sent
   1093           * @param   cmdFormat - command to be sent
   1094           *
   1095           * @return  ZSuccess if OK
   1096           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1097          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
   1098                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
   1099                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
   1100                                     uint16 cmdFormatLen, uint8 *cmdFormat )
   1101          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V10,R1
   \   00000C   8A..         MOV       ?V14,R2
   \   00000E   8B..         MOV       ?V15,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
   1102            endPointDesc_t *epDesc;
   1103            zclFrameHdr_t hdr;
   1104            uint8 *msgBuf;
   1105            uint16 msgLen;
   1106            uint8 *pBuf;
   1107            uint8 options;
   1108            ZStatus_t status;
   1109          
   1110            epDesc = afFindEndPointDesc( srcEP );
   \   000014                ; Setup parameters for call to function afFindEndPointDesc
   \   000014   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000017   8A..         MOV       ?V12,R2
   \   000019   8B..         MOV       ?V13,R3
   1111            if ( epDesc == NULL )
   \   00001B   EA           MOV       A,R2
   \   00001C   4B           ORL       A,R3
   \   00001D   7005         JNZ       ??zcl_SendCommand_0
   1112            {
   1113              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \   00001F   7902         MOV       R1,#0x2
   \   000021   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1114            }
   1115          
   1116          #if defined ( INTER_PAN )
   1117            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
   1118            {
   1119              options = AF_TX_OPTIONS_NONE;
   1120            }
   1121            else
   1122          #endif
   1123            {
   1124              options = zclGetClusterOption( srcEP, clusterID );
   \                     ??zcl_SendCommand_0:
   \   000024                ; Setup parameters for call to function zclGetClusterOption
   \   000024   AA..         MOV       R2,?V0
   \   000026   AB..         MOV       R3,?V1
   \   000028   A9..         MOV       R1,?V10
   \   00002A   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   00002D   E9           MOV       A,R1
   \   00002E   F5..         MOV       ?V7,A
   1125          
   1126              // The cluster might not have been defined to use security but if this message
   1127              // is in response to another message that was using APS security this message
   1128              // will be sent with APS security
   1129              if ( !( options & AF_EN_SECURITY ) )
   \   000030   A2E6         MOV       C,0xE0 /* A   */.6
   \   000032   401F         JC        ??zcl_SendCommand_2
   1130              {
   1131                afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
   \   000034                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000034   12....       LCALL     `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   000037   8B..         MOV       ?V3,R3
   \   000039   A9..         MOV       R1,?V3
   1132          
   1133                if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
   \   00003B   EA           MOV       A,R2
   \   00003C   49           ORL       A,R1
   \   00003D   6014         JZ        ??zcl_SendCommand_2
   \   00003F   EA           MOV       A,R2
   \   000040   2419         ADD       A,#0x19
   \   000042   F582         MOV       DPL,A
   \   000044   E4           CLR       A
   \   000045   39           ADDC      A,R1
   \   000046   F583         MOV       DPH,A
   \   000048   E0           MOVX      A,@DPTR
   \   000049   6401         XRL       A,#0x1
   \   00004B   7006         JNZ       ??zcl_SendCommand_2
   1134                {
   1135                  options |= AF_EN_SECURITY;
   \   00004D   E5..         MOV       A,?V7
   \   00004F   D2E6         SETB      0xE0 /* A   */.6
   \   000051   F5..         MOV       ?V7,A
   1136                }
   1137              }
   1138            }
   1139          
   1140            zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \                     ??zcl_SendCommand_2:
   \   000053                ; Setup parameters for call to function osal_memset
   \   000053   7C06         MOV       R4,#0x6
   \   000055   7D00         MOV       R5,#0x0
   \   000057   7900         MOV       R1,#0x0
   \   000059   AA..         MOV       R2,?XSP + 0
   \   00005B   AB..         MOV       R3,?XSP + 1
   \   00005D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1141          
   1142            // Not Profile wide command (like READ, WRITE)
   1143            if ( specific )
   \   000060   741F         MOV       A,#0x1f
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   E0           MOVX      A,@DPTR
   \   000066   85..82       MOV       DPL,?XSP + 0
   \   000069   85..83       MOV       DPH,?XSP + 1
   \   00006C   6009         JZ        ??zcl_SendCommand_3
   1144            {
   1145              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   54FC         ANL       A,#0xfc
   \   000071   F0           MOVX      @DPTR,A
   \   000072   E0           MOVX      A,@DPTR
   \   000073   4401         ORL       A,#0x1
   \   000075   8003         SJMP      ??zcl_SendCommand_4
   1146            }
   1147            else
   1148            {
   1149              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_3:
   \   000077   E0           MOVX      A,@DPTR
   \   000078   54FC         ANL       A,#0xfc
   \                     ??zcl_SendCommand_4:
   \   00007A   F0           MOVX      @DPTR,A
   1150            }
   1151          
   1152            if ( ( epDesc->simpleDesc == NULL ) ||
   1153                 ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
   1154                                          cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \   00007B   85..82       MOV       DPL,?V12
   \   00007E   85..83       MOV       DPH,?V13
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F8           MOV       R0,A
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F9           MOV       R1,A
   \   00008A   E8           MOV       A,R0
   \   00008B   49           ORL       A,R1
   \   00008C   602B         JZ        ??zcl_SendCommand_5
   \   00008E   741E         MOV       A,#0x1e
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   E0           MOVX      A,@DPTR
   \   000094   FE           MOV       R6,A
   \   000095                ; Setup parameters for call to function zcl_DeviceOperational
   \   000095   8882         MOV       DPL,R0
   \   000097   8983         MOV       DPH,R1
   \   000099   A3           INC       DPTR
   \   00009A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00009D   EE           MOV       A,R6
   \   00009E   FD           MOV       R5,A
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   5403         ANL       A,#0x3
   \   0000A7   FC           MOV       R4,A
   \   0000A8   AA..         MOV       R2,?V0
   \   0000AA   AB..         MOV       R3,?V1
   \   0000AC   A9..         MOV       R1,?V10
   \   0000AE   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000B1   7402         MOV       A,#0x2
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   E9           MOV       A,R1
   \   0000B7   7005         JNZ       ??zcl_SendCommand_6
   1155            {
   1156              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_5:
   \   0000B9   7901         MOV       R1,#0x1
   \   0000BB   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1157            }
   \                     ??zcl_SendCommand_6:
   \   0000BE   7422         MOV       A,#0x22
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F8           MOV       R0,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   F9           MOV       R1,A
   1158          
   1159            // Fill in the Maufacturer Code
   1160            if ( manuCode != 0 )
   \   0000C8   E8           MOV       A,R0
   \   0000C9   49           ORL       A,R1
   \   0000CA   6014         JZ        ??zcl_SendCommand_7
   1161            {
   1162              hdr.fc.manuSpecific = 1;
   \   0000CC   85..82       MOV       DPL,?XSP + 0
   \   0000CF   85..83       MOV       DPH,?XSP + 1
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   4404         ORL       A,#0x4
   \   0000D5   F0           MOVX      @DPTR,A
   1163              hdr.manuCode = manuCode;
   \   0000D6   7402         MOV       A,#0x2
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E8           MOV       A,R0
   \   0000DC   F0           MOVX      @DPTR,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   E9           MOV       A,R1
   \   0000DF   F0           MOVX      @DPTR,A
   1164            }
   1165          
   1166            // Set the Command Direction
   1167            if ( direction )
   \                     ??zcl_SendCommand_7:
   \   0000E0   7420         MOV       A,#0x20
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   85..82       MOV       DPL,?XSP + 0
   \   0000E9   85..83       MOV       DPH,?XSP + 1
   \   0000EC   6005         JZ        ??zcl_SendCommand_8
   1168            {
   1169              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   4408         ORL       A,#0x8
   \   0000F1   8003         SJMP      ??zcl_SendCommand_9
   1170            }
   1171            else
   1172            {
   1173              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_8:
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   54F7         ANL       A,#0xf7
   \                     ??zcl_SendCommand_9:
   \   0000F6   F0           MOVX      @DPTR,A
   1174            }
   1175          
   1176            // Set the Disable Default Response field
   1177            if ( disableDefaultRsp )
   \   0000F7   7421         MOV       A,#0x21
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   85..82       MOV       DPL,?XSP + 0
   \   000100   85..83       MOV       DPH,?XSP + 1
   \   000103   6005         JZ        ??zcl_SendCommand_10
   1178            {
   1179              hdr.fc.disableDefaultRsp = 1;
   \   000105   E0           MOVX      A,@DPTR
   \   000106   4410         ORL       A,#0x10
   \   000108   8003         SJMP      ??zcl_SendCommand_11
   1180            }
   1181            else
   1182            {
   1183              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_10:
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   54EF         ANL       A,#0xef
   \                     ??zcl_SendCommand_11:
   \   00010D   F0           MOVX      @DPTR,A
   1184            }
   1185          
   1186            // Fill in the Transaction Sequence Number
   1187            hdr.transSeqNum = seqNum;
   \   00010E   7424         MOV       A,#0x24
   \   000110   12....       LCALL     ?XSTACK_DISP0_8
   \   000113   E0           MOVX      A,@DPTR
   \   000114   C0E0         PUSH      A
   \   000116   7404         MOV       A,#0x4
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   D0E0         POP       A
   \   00011D   F0           MOVX      @DPTR,A
   1188          
   1189            // Fill in the command
   1190            hdr.commandID = cmd;
   \   00011E   EE           MOV       A,R6
   \   00011F   C0E0         PUSH      A
   \   000121   7405         MOV       A,#0x5
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   D0E0         POP       A
   \   000128   F0           MOVX      @DPTR,A
   1191          
   1192            // calculate the needed buffer size
   1193            msgLen = zclCalcHdrSize( &hdr );
   \   000129                ; Setup parameters for call to function zclCalcHdrSize
   \   000129   AA..         MOV       R2,?XSP + 0
   \   00012B   AB..         MOV       R3,?XSP + 1
   \   00012D   12....       LCALL     `??zclCalcHdrSize::?relay`; Banked call to: zclCalcHdrSize
   \   000130   7425         MOV       A,#0x25
   \   000132   12....       LCALL     ?XSTACK_DISP0_8
   \   000135   E0           MOVX      A,@DPTR
   \   000136   F5..         MOV       ?V8,A
   \   000138   A3           INC       DPTR
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   F5..         MOV       ?V9,A
   1194            msgLen += cmdFormatLen;
   \   00013C   E9           MOV       A,R1
   \   00013D   25..         ADD       A,?V8
   \   00013F   FE           MOV       R6,A
   \   000140   E4           CLR       A
   \   000141   35..         ADDC      A,?V9
   \   000143   FF           MOV       R7,A
   1195          
   1196            // Allocate the buffer needed
   1197            msgBuf = zcl_mem_alloc( msgLen );
   \   000144                ; Setup parameters for call to function osal_mem_alloc
   \   000144   EE           MOV       A,R6
   \   000145   FA           MOV       R2,A
   \   000146   EF           MOV       A,R7
   \   000147   FB           MOV       R3,A
   \   000148   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00014B   8A..         MOV       ?V2,R2
   \   00014D   8B..         MOV       ?V3,R3
   1198            if ( msgBuf != NULL )
   \   00014F   EA           MOV       A,R2
   \   000150   4B           ORL       A,R3
   \   000151   6071         JZ        ??zcl_SendCommand_12
   1199            {
   1200              // Fill in the ZCL Header
   1201              pBuf = zclBuildHdr( &hdr, msgBuf );
   \   000153                ; Setup parameters for call to function zclBuildHdr
   \   000153   AC..         MOV       R4,?V2
   \   000155   AD..         MOV       R5,?V3
   \   000157   AA..         MOV       R2,?XSP + 0
   \   000159   AB..         MOV       R3,?XSP + 1
   \   00015B   12....       LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
   1202          
   1203              // Fill in the command frame
   1204              zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
   \   00015E                ; Setup parameters for call to function osal_memcpy
   \   00015E   7427         MOV       A,#0x27
   \   000160   12....       LCALL     ?XSTACK_DISP0_8
   \   000163   E0           MOVX      A,@DPTR
   \   000164   F5..         MOV       ?V4,A
   \   000166   A3           INC       DPTR
   \   000167   E0           MOVX      A,@DPTR
   \   000168   F5..         MOV       ?V5,A
   \   00016A   75..00       MOV       ?V6,#0x0
   \   00016D   78..         MOV       R0,#?V4
   \   00016F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000172   AC..         MOV       R4,?V8
   \   000174   AD..         MOV       R5,?V9
   \   000176   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000179   7403         MOV       A,#0x3
   \   00017B   12....       LCALL     ?DEALLOC_XSTACK8
   1205          
   1206              status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
   1207                                       &APS_Counter, options, zcl_radius );
   \   00017E                ; Setup parameters for call to function AF_DataRequest
   \   00017E   90....       MOV       DPTR,#zcl_radius
   \   000181   E0           MOVX      A,@DPTR
   \   000182   F5..         MOV       ?V4,A
   \   000184   78..         MOV       R0,#?V4
   \   000186   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000189   75....       MOV       ?V4,#APS_Counter & 0xff
   \   00018C   75....       MOV       ?V5,#(APS_Counter >> 8) & 0xff
   \   00018F   78..         MOV       R0,#?V4
   \   000191   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000194   78..         MOV       R0,#?V2
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000199   8E..         MOV       ?V4,R6
   \   00019B   8F..         MOV       ?V5,R7
   \   00019D   78..         MOV       R0,#?V4
   \   00019F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A2   78..         MOV       R0,#?V0
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A7   A9..         MOV       R1,?V7
   \   0001A9   AC..         MOV       R4,?V12
   \   0001AB   AD..         MOV       R5,?V13
   \   0001AD   AA..         MOV       R2,?V14
   \   0001AF   AB..         MOV       R3,?V15
   \   0001B1   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0001B4   7409         MOV       A,#0x9
   \   0001B6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B9   E9           MOV       A,R1
   \   0001BA   FE           MOV       R6,A
   1208              zcl_mem_free ( msgBuf );
   \   0001BB                ; Setup parameters for call to function osal_mem_free
   \   0001BB   AA..         MOV       R2,?V2
   \   0001BD   AB..         MOV       R3,?V3
   \   0001BF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001C2   8002         SJMP      ??zcl_SendCommand_13
   1209            }
   1210            else
   1211            {
   1212              status = ZMemError;
   \                     ??zcl_SendCommand_12:
   \   0001C4   7E10         MOV       R6,#0x10
   1213            }
   1214          
   1215            return ( status );
   \                     ??zcl_SendCommand_13:
   \   0001C6   EE           MOV       A,R6
   \   0001C7   F9           MOV       R1,A
   \                     ??zcl_SendCommand_1:
   \   0001C8   7406         MOV       A,#0x6
   \   0001CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CD   7F10         MOV       R7,#0x10
   \   0001CF   02....       LJMP      ?BANKED_LEAVE_XDATA
   1216          }
   1217          
   1218          #ifdef ZCL_READ
   1219          /*********************************************************************
   1220           * @fn      zcl_SendRead
   1221           *
   1222           * @brief   Send a Read command
   1223           *
   1224           * @param   srcEP - Application's endpoint
   1225           * @param   dstAddr - destination address
   1226           * @param   clusterID - cluster ID
   1227           * @param   readCmd - read command to be sent
   1228           * @param   direction - direction of the command
   1229           * @param   seqNum - transaction sequence number
   1230           *
   1231           * @return  ZSuccess if OK
   1232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1233          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
   1234                                  uint16 clusterID, zclReadCmd_t *readCmd,
   1235                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
   1236          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V5,A
   1237            uint16 dataLen;
   1238            uint8 *buf;
   1239            uint8 *pBuf;
   1240            ZStatus_t status;
   1241          
   1242            dataLen = readCmd->numAttr * 2; // Attribute ID
   \   00001B   85..82       MOV       DPL,?V4
   \   00001E   F583         MOV       DPH,A
   \   000020   E0           MOVX      A,@DPTR
   \   000021   25E0         ADD       A,0xE0 /* A   */
   \   000023   F5..         MOV       ?V6,A
   \   000025   E4           CLR       A
   \   000026   33           RLC       A
   \   000027   F5..         MOV       ?V7,A
   1243          
   1244            buf = zcl_mem_alloc( dataLen );
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   AA..         MOV       R2,?V6
   \   00002B   FB           MOV       R3,A
   \   00002C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002F   8A..         MOV       ?V0,R2
   \   000031   8B..         MOV       ?V1,R3
   1245            if ( buf != NULL )
   \   000033   EA           MOV       A,R2
   \   000034   4B           ORL       A,R3
   \   000035   7003         JNZ       $+5
   \   000037   02....       LJMP      ??zcl_SendRead_0 & 0xFFFF
   1246            {
   1247              uint8 i;
   1248          
   1249              // Load the buffer - serially
   1250              pBuf = buf;
   \   00003A   A8..         MOV       R0,?V0
   \   00003C   A9..         MOV       R1,?V1
   1251              for (i = 0; i < readCmd->numAttr; i++)
   \   00003E   7C00         MOV       R4,#0x0
   \   000040   8030         SJMP      ??zcl_SendRead_1
   1252              {
   1253                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_2:
   \   000042   EC           MOV       A,R4
   \   000043   25E0         ADD       A,0xE0 /* A   */
   \   000045   FA           MOV       R2,A
   \   000046   E4           CLR       A
   \   000047   33           RLC       A
   \   000048   FB           MOV       R3,A
   \   000049   E5..         MOV       A,?V4
   \   00004B   2A           ADD       A,R2
   \   00004C   F582         MOV       DPL,A
   \   00004E   E5..         MOV       A,?V5
   \   000050   3B           ADDC      A,R3
   \   000051   F583         MOV       DPH,A
   \   000053   A3           INC       DPTR
   \   000054   AA82         MOV       R2,DPL
   \   000056   AB83         MOV       R3,DPH
   \   000058   E0           MOVX      A,@DPTR
   \   000059   8882         MOV       DPL,R0
   \   00005B   8983         MOV       DPH,R1
   \   00005D   F0           MOVX      @DPTR,A
   1254                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   \   00005E   8A82         MOV       DPL,R2
   \   000060   8B83         MOV       DPH,R3
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   8882         MOV       DPL,R0
   \   000066   8983         MOV       DPH,R1
   \   000068   A3           INC       DPTR
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   E8           MOV       A,R0
   \   00006B   2402         ADD       A,#0x2
   \   00006D   F8           MOV       R0,A
   \   00006E   5001         JNC       ??zcl_SendRead_3
   \   000070   09           INC       R1
   1255              }
   \                     ??zcl_SendRead_3:
   \   000071   0C           INC       R4
   \                     ??zcl_SendRead_1:
   \   000072   85..82       MOV       DPL,?V4
   \   000075   85..83       MOV       DPH,?V5
   \   000078   E0           MOVX      A,@DPTR
   \   000079   FA           MOV       R2,A
   \   00007A   EC           MOV       A,R4
   \   00007B   C3           CLR       C
   \   00007C   9A           SUBB      A,R2
   \   00007D   40C3         JC        ??zcl_SendRead_2
   1256          
   1257              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
   1258                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00007F                ; Setup parameters for call to function zcl_SendCommand
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   78..         MOV       R0,#?V6
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000089   741C         MOV       A,#0x1c
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F5..         MOV       ?V3,A
   \   000091   78..         MOV       R0,#?V3
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000096   E4           CLR       A
   \   000097   F5..         MOV       ?V4,A
   \   000099   F5..         MOV       ?V5,A
   \   00009B   78..         MOV       R0,#?V4
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A0   741E         MOV       A,#0x1e
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   F5..         MOV       ?V3,A
   \   0000A8   78..         MOV       R0,#?V3
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   741E         MOV       A,#0x1e
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F5..         MOV       ?V3,A
   \   0000B5   78..         MOV       R0,#?V3
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BA   75..00       MOV       ?V3,#0x0
   \   0000BD   78..         MOV       R0,#?V3
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   78..         MOV       R0,#?V3
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C7   EE           MOV       A,R6
   \   0000C8   FC           MOV       R4,A
   \   0000C9   EF           MOV       A,R7
   \   0000CA   FD           MOV       R5,A
   \   0000CB   AA..         MOV       R2,?V8
   \   0000CD   AB..         MOV       R3,?V9
   \   0000CF   A9..         MOV       R1,?V2
   \   0000D1   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D4   740B         MOV       A,#0xb
   \   0000D6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D9   E9           MOV       A,R1
   \   0000DA   FE           MOV       R6,A
   1259              zcl_mem_free( buf );
   \   0000DB                ; Setup parameters for call to function osal_mem_free
   \   0000DB   AA..         MOV       R2,?V0
   \   0000DD   AB..         MOV       R3,?V1
   \   0000DF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E2   8002         SJMP      ??zcl_SendRead_4
   1260            }
   1261            else
   1262            {
   1263              status = ZMemError;
   \                     ??zcl_SendRead_0:
   \   0000E4   7E10         MOV       R6,#0x10
   1264            }
   1265          
   1266            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000E6   EE           MOV       A,R6
   \   0000E7   F9           MOV       R1,A
   \   0000E8   7F0C         MOV       R7,#0xc
   \   0000EA   02....       LJMP      ?BANKED_LEAVE_XDATA
   1267          }
   1268          
   1269          /*********************************************************************
   1270           * @fn      zcl_SendReadRsp
   1271           *
   1272           * @brief   Send a Read Response command.
   1273           *
   1274           * @param   srcEP - Application's endpoint
   1275           * @param   dstAddr - destination address
   1276           * @param   clusterID - cluster ID
   1277           * @param   readRspCmd - read response command to be sent
   1278           * @param   direction - direction of the command
   1279           * @param   seqNum - transaction sequence number
   1280           *
   1281           * @return  ZSuccess if OK
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
   1284                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
   1285                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V12,R2
   \   00000E   8B..         MOV       ?V13,R3
   \   000010   8C..         MOV       ?V6,R4
   \   000012   8D..         MOV       ?V7,R5
   1287            uint8 *buf;
   1288            uint16 len = 0;
   \   000014   7E00         MOV       R6,#0x0
   \   000016   7F00         MOV       R7,#0x0
   1289            ZStatus_t status;
   1290            uint8 i;
   1291          
   1292            // calculate the size of the command
   1293            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   7418         MOV       A,#0x18
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V8,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V9,A
   \   000027   8019         SJMP      ??zcl_SendReadRsp_0
   1294            {
   1295              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1296          
   1297              len += 2 + 1; // Attribute ID + Status
   1298          
   1299              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1300              {
   1301                len++; // Attribute Data Type length
   1302          
   1303                // Attribute Data length
   1304                if ( statusRec->data != NULL )
   1305                {
   1306                  len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
   1307                }
   1308                else
   1309                {
   1310                  len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
   \                     ??zcl_SendReadRsp_1:
   \   000029                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   FC           MOV       R4,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FD           MOV       R5,A
   \   00002E   AA..         MOV       R2,?V6
   \   000030   AB..         MOV       R3,?V7
   \   000032   A9..         MOV       R1,?V3
   \   000034   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zcl_SendReadRsp_2:
   \   000037   8B..         MOV       ?V1,R3
   \   000039   EE           MOV       A,R6
   \   00003A   2A           ADD       A,R2
   \   00003B   FE           MOV       R6,A
   \   00003C   EF           MOV       A,R7
   \   00003D   35..         ADDC      A,?V1
   \   00003F   FF           MOV       R7,A
   1311                }
   \                     ??zcl_SendReadRsp_3:
   \   000040   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_0:
   \   000042   85..82       MOV       DPL,?V8
   \   000045   85..83       MOV       DPH,?V9
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F8           MOV       R0,A
   \   00004A   E5..         MOV       A,?V2
   \   00004C   C3           CLR       C
   \   00004D   98           SUBB      A,R0
   \   00004E   5048         JNC       ??zcl_SendReadRsp_4
   \   000050   E5..         MOV       A,?V2
   \   000052   75F006       MOV       B,#0x6
   \   000055   A4           MUL       AB
   \   000056   F8           MOV       R0,A
   \   000057   A9F0         MOV       R1,B
   \   000059   E5..         MOV       A,?V8
   \   00005B   28           ADD       A,R0
   \   00005C   F582         MOV       DPL,A
   \   00005E   E5..         MOV       A,?V9
   \   000060   39           ADDC      A,R1
   \   000061   F583         MOV       DPH,A
   \   000063   A3           INC       DPTR
   \   000064   A882         MOV       R0,DPL
   \   000066   A983         MOV       R1,DPH
   \   000068   EE           MOV       A,R6
   \   000069   2403         ADD       A,#0x3
   \   00006B   FE           MOV       R6,A
   \   00006C   E4           CLR       A
   \   00006D   3F           ADDC      A,R7
   \   00006E   FF           MOV       R7,A
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   70CC         JNZ       ??zcl_SendReadRsp_3
   \   000074   0E           INC       R6
   \   000075   EE           MOV       A,R6
   \   000076   7001         JNZ       ??zcl_SendReadRsp_5
   \   000078   0F           INC       R7
   \                     ??zcl_SendReadRsp_5:
   \   000079   8882         MOV       DPL,R0
   \   00007B   8983         MOV       DPH,R1
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FA           MOV       R2,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   FB           MOV       R3,A
   \   000086   EA           MOV       A,R2
   \   000087   4B           ORL       A,R3
   \   000088   8882         MOV       DPL,R0
   \   00008A   8983         MOV       DPH,R1
   \   00008C   609B         JZ        ??zcl_SendReadRsp_1
   \   00008E                ; Setup parameters for call to function zclGetAttrDataLength
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F9           MOV       R1,A
   \   000093   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000096   809F         SJMP      ??zcl_SendReadRsp_2
   1312              }
   1313            }
   1314          
   1315            buf = zcl_mem_alloc( len );
   \                     ??zcl_SendReadRsp_4:
   \   000098                ; Setup parameters for call to function osal_mem_alloc
   \   000098   EE           MOV       A,R6
   \   000099   FA           MOV       R2,A
   \   00009A   EF           MOV       A,R7
   \   00009B   FB           MOV       R3,A
   \   00009C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009F   8A..         MOV       ?V0,R2
   \   0000A1   8B..         MOV       ?V1,R3
   \   0000A3   8A..         MOV       ?V4,R2
   \   0000A5   8B..         MOV       ?V5,R3
   1316            if ( buf != NULL )
   \   0000A7   EA           MOV       A,R2
   \   0000A8   4B           ORL       A,R3
   \   0000A9   7003         JNZ       $+5
   \   0000AB   02....       LJMP      ??zcl_SendReadRsp_6 & 0xFFFF
   1317            {
   1318              // Load the buffer - serially
   1319              uint8 *pBuf = buf;
   1320          
   1321              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   0000AE   75..00       MOV       ?V2,#0x0
   \   0000B1   8040         SJMP      ??zcl_SendReadRsp_7
   1322              {
   1323                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1324          
   1325                *pBuf++ = LO_UINT16( statusRec->attrID );
   1326                *pBuf++ = HI_UINT16( statusRec->attrID );
   1327                *pBuf++ = statusRec->status;
   1328          
   1329                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1330                {
   1331                  *pBuf++ = statusRec->dataType;
   1332          
   1333                  if ( statusRec->data != NULL )
   1334                  {
   1335                    // Copy attribute data to the buffer to be sent out
   1336                    pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
   1337                  }
   1338                  else
   1339                  {
   1340                    uint16 dataLen;
   1341          
   1342                    // Read attribute data directly into the buffer to be sent out
   1343                    zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
   \                     ??zcl_SendReadRsp_8:
   \   0000B3                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   0000B3   A8..         MOV       R0,?XSP + 0
   \   0000B5   A9..         MOV       R1,?XSP + 1
   \   0000B7   88..         MOV       ?V10,R0
   \   0000B9   89..         MOV       ?V11,R1
   \   0000BB   78..         MOV       R0,#?V10
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C0   78..         MOV       R0,#?V0
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C5   8A82         MOV       DPL,R2
   \   0000C7   8B83         MOV       DPH,R3
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   FC           MOV       R4,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   FD           MOV       R5,A
   \   0000CE   AA..         MOV       R2,?V6
   \   0000D0   AB..         MOV       R3,?V7
   \   0000D2   A9..         MOV       R1,?V3
   \   0000D4   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   0000D7   7404         MOV       A,#0x4
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
   1344                    pBuf += dataLen;
   \   0000DC   85..82       MOV       DPL,?XSP + 0
   \   0000DF   85..83       MOV       DPH,?XSP + 1
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F8           MOV       R0,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F9           MOV       R1,A
   \   0000E7   E5..         MOV       A,?V0
   \   0000E9   28           ADD       A,R0
   \   0000EA   F5..         MOV       ?V0,A
   \   0000EC   E5..         MOV       A,?V1
   \   0000EE   39           ADDC      A,R1
   \   0000EF   F5..         MOV       ?V1,A
   1345                  }
   \                     ??zcl_SendReadRsp_9:
   \   0000F1   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_7:
   \   0000F3   85..82       MOV       DPL,?V8
   \   0000F6   85..83       MOV       DPH,?V9
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   F8           MOV       R0,A
   \   0000FB   E5..         MOV       A,?V2
   \   0000FD   C3           CLR       C
   \   0000FE   98           SUBB      A,R0
   \   0000FF   4003         JC        $+5
   \   000101   02....       LJMP      ??zcl_SendReadRsp_10 & 0xFFFF
   \   000104   E5..         MOV       A,?V2
   \   000106   75F006       MOV       B,#0x6
   \   000109   A4           MUL       AB
   \   00010A   F8           MOV       R0,A
   \   00010B   A9F0         MOV       R1,B
   \   00010D   E5..         MOV       A,?V8
   \   00010F   28           ADD       A,R0
   \   000110   F582         MOV       DPL,A
   \   000112   E5..         MOV       A,?V9
   \   000114   39           ADDC      A,R1
   \   000115   F583         MOV       DPH,A
   \   000117   A3           INC       DPTR
   \   000118   AA82         MOV       R2,DPL
   \   00011A   AB83         MOV       R3,DPH
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   85..82       MOV       DPL,?V0
   \   000120   85..83       MOV       DPH,?V1
   \   000123   F0           MOVX      @DPTR,A
   \   000124   8A82         MOV       DPL,R2
   \   000126   8B83         MOV       DPH,R3
   \   000128   A3           INC       DPTR
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   85..82       MOV       DPL,?V0
   \   00012D   85..83       MOV       DPH,?V1
   \   000130   A3           INC       DPTR
   \   000131   F0           MOVX      @DPTR,A
   \   000132   EA           MOV       A,R2
   \   000133   2402         ADD       A,#0x2
   \   000135   F8           MOV       R0,A
   \   000136   E4           CLR       A
   \   000137   3B           ADDC      A,R3
   \   000138   F9           MOV       R1,A
   \   000139   8882         MOV       DPL,R0
   \   00013B   F583         MOV       DPH,A
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   85..82       MOV       DPL,?V0
   \   000141   85..83       MOV       DPH,?V1
   \   000144   A3           INC       DPTR
   \   000145   A3           INC       DPTR
   \   000146   F0           MOVX      @DPTR,A
   \   000147   E5..         MOV       A,?V0
   \   000149   2403         ADD       A,#0x3
   \   00014B   F5..         MOV       ?V0,A
   \   00014D   5002         JNC       ??zcl_SendReadRsp_11
   \   00014F   05..         INC       ?V1
   \                     ??zcl_SendReadRsp_11:
   \   000151   8882         MOV       DPL,R0
   \   000153   8983         MOV       DPH,R1
   \   000155   E0           MOVX      A,@DPTR
   \   000156   7099         JNZ       ??zcl_SendReadRsp_9
   \   000158   EA           MOV       A,R2
   \   000159   2403         ADD       A,#0x3
   \   00015B   08           INC       R0
   \   00015C   E4           CLR       A
   \   00015D   3B           ADDC      A,R3
   \   00015E   F9           MOV       R1,A
   \   00015F   8882         MOV       DPL,R0
   \   000161   F583         MOV       DPH,A
   \   000163   E0           MOVX      A,@DPTR
   \   000164   85..82       MOV       DPL,?V0
   \   000167   85..83       MOV       DPH,?V1
   \   00016A   F0           MOVX      @DPTR,A
   \   00016B   A3           INC       DPTR
   \   00016C   8582..       MOV       ?V0,DPL
   \   00016F   8583..       MOV       ?V1,DPH
   \   000172   8A82         MOV       DPL,R2
   \   000174   8B83         MOV       DPH,R3
   \   000176   A3           INC       DPTR
   \   000177   A3           INC       DPTR
   \   000178   A3           INC       DPTR
   \   000179   A3           INC       DPTR
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   FC           MOV       R4,A
   \   00017C   A3           INC       DPTR
   \   00017D   E0           MOVX      A,@DPTR
   \   00017E   8C82         MOV       DPL,R4
   \   000180   F583         MOV       DPH,A
   \   000182   E582         MOV       A,DPL
   \   000184   4583         ORL       A,DPH
   \   000186   7003         JNZ       $+5
   \   000188   02....       LJMP      ??zcl_SendReadRsp_8 & 0xFFFF
   \   00018B                ; Setup parameters for call to function zclSerializeData
   \   00018B   AC..         MOV       R4,?V0
   \   00018D   AD..         MOV       R5,?V1
   \   00018F   AA82         MOV       R2,DPL
   \   000191   AB83         MOV       R3,DPH
   \   000193   8882         MOV       DPL,R0
   \   000195   8983         MOV       DPH,R1
   \   000197   E0           MOVX      A,@DPTR
   \   000198   F9           MOV       R1,A
   \   000199   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   00019C   8A..         MOV       ?V0,R2
   \   00019E   8B..         MOV       ?V1,R3
   \   0001A0   02....       LJMP      ??zcl_SendReadRsp_9 & 0xFFFF
   1346                }
   1347              } // for loop
   1348          
   1349              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
   1350                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zcl_SendReadRsp_10:
   \   0001A3                ; Setup parameters for call to function zcl_SendCommand
   \   0001A3   78..         MOV       R0,#?V4
   \   0001A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A8   8E..         MOV       ?V0,R6
   \   0001AA   8F..         MOV       ?V1,R7
   \   0001AC   78..         MOV       R0,#?V0
   \   0001AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B1   7420         MOV       A,#0x20
   \   0001B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   F5..         MOV       ?V0,A
   \   0001B9   78..         MOV       R0,#?V0
   \   0001BB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001BE   E4           CLR       A
   \   0001BF   F5..         MOV       ?V0,A
   \   0001C1   F5..         MOV       ?V1,A
   \   0001C3   78..         MOV       R0,#?V0
   \   0001C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C8   7422         MOV       A,#0x22
   \   0001CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CD   E0           MOVX      A,@DPTR
   \   0001CE   F5..         MOV       ?V0,A
   \   0001D0   78..         MOV       R0,#?V0
   \   0001D2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D5   7422         MOV       A,#0x22
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   F5..         MOV       ?V0,A
   \   0001DD   78..         MOV       R0,#?V0
   \   0001DF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001E2   75..00       MOV       ?V0,#0x0
   \   0001E5   78..         MOV       R0,#?V0
   \   0001E7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001EA   75..01       MOV       ?V0,#0x1
   \   0001ED   78..         MOV       R0,#?V0
   \   0001EF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F2   AC..         MOV       R4,?V6
   \   0001F4   AD..         MOV       R5,?V7
   \   0001F6   AA..         MOV       R2,?V12
   \   0001F8   AB..         MOV       R3,?V13
   \   0001FA   A9..         MOV       R1,?V3
   \   0001FC   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001FF   740B         MOV       A,#0xb
   \   000201   12....       LCALL     ?DEALLOC_XSTACK8
   \   000204   E9           MOV       A,R1
   \   000205   FE           MOV       R6,A
   1351              zcl_mem_free( buf );
   \   000206                ; Setup parameters for call to function osal_mem_free
   \   000206   AA..         MOV       R2,?V4
   \   000208   AB..         MOV       R3,?V5
   \   00020A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00020D   8002         SJMP      ??zcl_SendReadRsp_12
   1352            }
   1353            else
   1354            {
   1355              status = ZMemError;
   \                     ??zcl_SendReadRsp_6:
   \   00020F   7E10         MOV       R6,#0x10
   1356            }
   1357          
   1358            return ( status );
   \                     ??zcl_SendReadRsp_12:
   \   000211   EE           MOV       A,R6
   \   000212   F9           MOV       R1,A
   \   000213   7402         MOV       A,#0x2
   \   000215   12....       LCALL     ?DEALLOC_XSTACK8
   \   000218   7F0E         MOV       R7,#0xe
   \   00021A   02....       LJMP      ?BANKED_LEAVE_XDATA
   1359          }
   1360          #endif // ZCL_READ
   1361          
   1362          #ifdef ZCL_WRITE
   1363          /*********************************************************************
   1364           * @fn      sendWriteRequest
   1365           *
   1366           * @brief   Send a Write command
   1367           *
   1368           * @param   dstAddr - destination address
   1369           * @param   clusterID - cluster ID
   1370           * @param   writeCmd - write command to be sent
   1371           * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
   1372           * @param   direction - direction of the command
   1373           * @param   seqNum - transaction sequence number
   1374           *
   1375           * @return  ZSuccess if OK
   1376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1377          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendWriteRequest:
   1378                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
   1379                                          uint8 disableDefaultRsp, uint8 seqNum )
   1380          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   8C..         MOV       ?V6,R4
   \   00000D   8D..         MOV       ?V7,R5
   1381            uint8 *buf;
   1382            uint16 dataLen = 0;
   \   00000F   7E00         MOV       R6,#0x0
   \   000011   7F00         MOV       R7,#0x0
   1383            ZStatus_t status;
   1384            uint8 i;
   1385          
   1386            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000013   75..00       MOV       ?V2,#0x0
   \   000016   7416         MOV       A,#0x16
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V4,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V5,A
   \   000022   803D         SJMP      ??zcl_SendWriteRequest_0
   1387            {
   1388              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   000024   E5..         MOV       A,?V2
   \   000026   75F005       MOV       B,#0x5
   \   000029   A4           MUL       AB
   \   00002A   F8           MOV       R0,A
   \   00002B   A9F0         MOV       R1,B
   \   00002D   E5..         MOV       A,?V4
   \   00002F   28           ADD       A,R0
   \   000030   F582         MOV       DPL,A
   \   000032   E5..         MOV       A,?V5
   \   000034   39           ADDC      A,R1
   \   000035   F583         MOV       DPH,A
   \   000037   A3           INC       DPTR
   \   000038   A882         MOV       R0,DPL
   \   00003A   A983         MOV       R1,DPH
   1389          
   1390              dataLen += 2 + 1; // Attribute ID + Attribute Type
   1391          
   1392              // Attribute Data
   1393              dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \   00003C                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FA           MOV       R2,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FB           MOV       R3,A
   \   000044   8882         MOV       DPL,R0
   \   000046   8983         MOV       DPH,R1
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00004F   8B..         MOV       ?V1,R3
   \   000051   EA           MOV       A,R2
   \   000052   2403         ADD       A,#0x3
   \   000054   F8           MOV       R0,A
   \   000055   E4           CLR       A
   \   000056   35..         ADDC      A,?V1
   \   000058   F9           MOV       R1,A
   \   000059   EE           MOV       A,R6
   \   00005A   28           ADD       A,R0
   \   00005B   FE           MOV       R6,A
   \   00005C   EF           MOV       A,R7
   \   00005D   39           ADDC      A,R1
   \   00005E   FF           MOV       R7,A
   1394            }
   \   00005F   05..         INC       ?V2
   \                     ??zcl_SendWriteRequest_0:
   \   000061   85..82       MOV       DPL,?V4
   \   000064   85..83       MOV       DPH,?V5
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F8           MOV       R0,A
   \   000069   E5..         MOV       A,?V2
   \   00006B   C3           CLR       C
   \   00006C   98           SUBB      A,R0
   \   00006D   40B5         JC        ??zcl_SendWriteRequest_1
   1395          
   1396            buf = zcl_mem_alloc( dataLen );
   \   00006F                ; Setup parameters for call to function osal_mem_alloc
   \   00006F   EE           MOV       A,R6
   \   000070   FA           MOV       R2,A
   \   000071   EF           MOV       A,R7
   \   000072   FB           MOV       R3,A
   \   000073   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000076   8A..         MOV       ?V0,R2
   \   000078   8B..         MOV       ?V1,R3
   1397            if ( buf != NULL )
   \   00007A   EA           MOV       A,R2
   \   00007B   4B           ORL       A,R3
   \   00007C   7003         JNZ       $+5
   \   00007E   02....       LJMP      ??zcl_SendWriteRequest_2 & 0xFFFF
   1398            {
   1399              // Load the buffer - serially
   1400              uint8 *pBuf = buf;
   \   000081   A8..         MOV       R0,?V0
   \   000083   A9..         MOV       R1,?V1
   1401              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000085   75..00       MOV       ?V2,#0x0
   \   000088   8070         SJMP      ??zcl_SendWriteRequest_3
   1402              {
   1403                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_4:
   \   00008A   E5..         MOV       A,?V2
   \   00008C   75F005       MOV       B,#0x5
   \   00008F   A4           MUL       AB
   \   000090   FA           MOV       R2,A
   \   000091   ABF0         MOV       R3,B
   \   000093   E5..         MOV       A,?V4
   \   000095   2A           ADD       A,R2
   \   000096   F582         MOV       DPL,A
   \   000098   E5..         MOV       A,?V5
   \   00009A   3B           ADDC      A,R3
   \   00009B   F583         MOV       DPH,A
   \   00009D   A3           INC       DPTR
   \   00009E   8582..       MOV       ?V12,DPL
   \   0000A1   8583..       MOV       ?V13,DPH
   1404          
   1405                *pBuf++ = LO_UINT16( statusRec->attrID );
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   8882         MOV       DPL,R0
   \   0000A7   8983         MOV       DPH,R1
   \   0000A9   F0           MOVX      @DPTR,A
   1406                *pBuf++ = HI_UINT16( statusRec->attrID );
   \   0000AA   85..82       MOV       DPL,?V12
   \   0000AD   85..83       MOV       DPH,?V13
   \   0000B0   A3           INC       DPTR
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   8882         MOV       DPL,R0
   \   0000B4   8983         MOV       DPH,R1
   \   0000B6   A3           INC       DPTR
   \   0000B7   F0           MOVX      @DPTR,A
   1407                *pBuf++ = statusRec->dataType;
   \   0000B8   E5..         MOV       A,?V12
   \   0000BA   2402         ADD       A,#0x2
   \   0000BC   FA           MOV       R2,A
   \   0000BD   E4           CLR       A
   \   0000BE   35..         ADDC      A,?V13
   \   0000C0   8A..         MOV       ?V10,R2
   \   0000C2   F5..         MOV       ?V11,A
   \   0000C4   8A82         MOV       DPL,R2
   \   0000C6   F583         MOV       DPH,A
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   8882         MOV       DPL,R0
   \   0000CB   8983         MOV       DPH,R1
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   F0           MOVX      @DPTR,A
   1408          
   1409                pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
   \   0000D0                ; Setup parameters for call to function zclSerializeData
   \   0000D0   E8           MOV       A,R0
   \   0000D1   2403         ADD       A,#0x3
   \   0000D3   FC           MOV       R4,A
   \   0000D4   E4           CLR       A
   \   0000D5   39           ADDC      A,R1
   \   0000D6   FD           MOV       R5,A
   \   0000D7   85..82       MOV       DPL,?V12
   \   0000DA   85..83       MOV       DPH,?V13
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   FA           MOV       R2,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   FB           MOV       R3,A
   \   0000E5   85..82       MOV       DPL,?V10
   \   0000E8   85..83       MOV       DPH,?V11
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   F9           MOV       R1,A
   \   0000ED   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   0000F0   8A..         MOV       ?V10,R2
   \   0000F2   8B..         MOV       ?V11,R3
   \   0000F4   A8..         MOV       R0,?V10
   \   0000F6   A9..         MOV       R1,?V11
   1410              }
   \   0000F8   05..         INC       ?V2
   \                     ??zcl_SendWriteRequest_3:
   \   0000FA   85..82       MOV       DPL,?V4
   \   0000FD   85..83       MOV       DPH,?V5
   \   000100   E0           MOVX      A,@DPTR
   \   000101   FA           MOV       R2,A
   \   000102   E5..         MOV       A,?V2
   \   000104   C3           CLR       C
   \   000105   9A           SUBB      A,R2
   \   000106   4082         JC        ??zcl_SendWriteRequest_4
   1411          
   1412              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
   1413                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000108                ; Setup parameters for call to function zcl_SendCommand
   \   000108   78..         MOV       R0,#?V0
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010D   8E..         MOV       ?V4,R6
   \   00010F   8F..         MOV       ?V5,R7
   \   000111   78..         MOV       R0,#?V4
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000116   741F         MOV       A,#0x1f
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F5..         MOV       ?V2,A
   \   00011E   78..         MOV       R0,#?V2
   \   000120   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000123   E4           CLR       A
   \   000124   F5..         MOV       ?V4,A
   \   000126   F5..         MOV       ?V5,A
   \   000128   78..         MOV       R0,#?V4
   \   00012A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012D   7421         MOV       A,#0x21
   \   00012F   12....       LCALL     ?XSTACK_DISP0_8
   \   000132   E0           MOVX      A,@DPTR
   \   000133   F5..         MOV       ?V2,A
   \   000135   78..         MOV       R0,#?V2
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013A   7421         MOV       A,#0x21
   \   00013C   12....       LCALL     ?XSTACK_DISP0_8
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   F5..         MOV       ?V2,A
   \   000142   78..         MOV       R0,#?V2
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000147   75..00       MOV       ?V2,#0x0
   \   00014A   78..         MOV       R0,#?V2
   \   00014C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00014F   7422         MOV       A,#0x22
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   E0           MOVX      A,@DPTR
   \   000155   F5..         MOV       ?V2,A
   \   000157   78..         MOV       R0,#?V2
   \   000159   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00015C   AC..         MOV       R4,?V6
   \   00015E   AD..         MOV       R5,?V7
   \   000160   AA..         MOV       R2,?V8
   \   000162   AB..         MOV       R3,?V9
   \   000164   A9..         MOV       R1,?V3
   \   000166   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000169   740B         MOV       A,#0xb
   \   00016B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016E   E9           MOV       A,R1
   \   00016F   FE           MOV       R6,A
   1414              zcl_mem_free( buf );
   \   000170                ; Setup parameters for call to function osal_mem_free
   \   000170   AA..         MOV       R2,?V0
   \   000172   AB..         MOV       R3,?V1
   \   000174   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000177   8002         SJMP      ??zcl_SendWriteRequest_5
   1415            }
   1416            else
   1417            {
   1418              status = ZMemError;
   \                     ??zcl_SendWriteRequest_2:
   \   000179   7E10         MOV       R6,#0x10
   1419            }
   1420          
   1421            return ( status);
   \                     ??zcl_SendWriteRequest_5:
   \   00017B   EE           MOV       A,R6
   \   00017C   F9           MOV       R1,A
   \   00017D   7F0E         MOV       R7,#0xe
   \   00017F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1422          }
   1423          
   1424          /*********************************************************************
   1425           * @fn      zcl_SendWriteRsp
   1426           *
   1427           * @brief   Send a Write Response command
   1428           *
   1429           * @param   dstAddr - destination address
   1430           * @param   clusterID - cluster ID
   1431           * @param   wrtieRspCmd - write response command to be sent
   1432           * @param   direction - direction of the command
   1433           * @param   seqNum - transaction sequence number
   1434           *
   1435           * @return  ZSuccess if OK
   1436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1437          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
   1438                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
   1439                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1440          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V5,A
   1441            uint16 dataLen;
   1442            uint8 *buf;
   1443            ZStatus_t status;
   1444          
   1445            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \   00001B   85..82       MOV       DPL,?V4
   \   00001E   F583         MOV       DPH,A
   \   000020   E0           MOVX      A,@DPTR
   \   000021   75F003       MOV       B,#0x3
   \   000024   A4           MUL       AB
   \   000025   F5..         MOV       ?V6,A
   \   000027   E5F0         MOV       A,B
   \   000029   F5..         MOV       ?V7,A
   1446          
   1447            buf = zcl_mem_alloc( dataLen );
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   AA..         MOV       R2,?V6
   \   00002D   FB           MOV       R3,A
   \   00002E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000031   8A..         MOV       ?V0,R2
   \   000033   8B..         MOV       ?V1,R3
   1448            if ( buf != NULL )
   \   000035   EA           MOV       A,R2
   \   000036   4B           ORL       A,R3
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??zcl_SendWriteRsp_0 & 0xFFFF
   1449            {
   1450              // Load the buffer - serially
   1451              uint8 i;
   1452              uint8 *pBuf = buf;
   \   00003C   A8..         MOV       R0,?V0
   \   00003E   A9..         MOV       R1,?V1
   1453              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   000040   7C00         MOV       R4,#0x0
   \   000042   8042         SJMP      ??zcl_SendWriteRsp_1
   1454              {
   1455                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_2:
   \   000044   EC           MOV       A,R4
   \   000045   75F003       MOV       B,#0x3
   \   000048   A4           MUL       AB
   \   000049   FA           MOV       R2,A
   \   00004A   ABF0         MOV       R3,B
   \   00004C   E5..         MOV       A,?V4
   \   00004E   2A           ADD       A,R2
   \   00004F   FA           MOV       R2,A
   \   000050   E5..         MOV       A,?V5
   \   000052   3B           ADDC      A,R3
   \   000053   FB           MOV       R3,A
   \   000054   8A82         MOV       DPL,R2
   \   000056   F583         MOV       DPH,A
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   8882         MOV       DPL,R0
   \   00005C   8983         MOV       DPH,R1
   \   00005E   F0           MOVX      @DPTR,A
   1456                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \   00005F   EA           MOV       A,R2
   \   000060   2402         ADD       A,#0x2
   \   000062   FA           MOV       R2,A
   \   000063   5001         JNC       ??zcl_SendWriteRsp_3
   \   000065   0B           INC       R3
   \                     ??zcl_SendWriteRsp_3:
   \   000066   F582         MOV       DPL,A
   \   000068   8B83         MOV       DPH,R3
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   8882         MOV       DPL,R0
   \   00006D   8983         MOV       DPH,R1
   \   00006F   A3           INC       DPTR
   \   000070   F0           MOVX      @DPTR,A
   1457                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   \   000071   8A82         MOV       DPL,R2
   \   000073   8B83         MOV       DPH,R3
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   8882         MOV       DPL,R0
   \   000079   8983         MOV       DPH,R1
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   E8           MOV       A,R0
   \   00007F   2403         ADD       A,#0x3
   \   000081   F8           MOV       R0,A
   \   000082   5001         JNC       ??zcl_SendWriteRsp_4
   \   000084   09           INC       R1
   1458              }
   \                     ??zcl_SendWriteRsp_4:
   \   000085   0C           INC       R4
   \                     ??zcl_SendWriteRsp_1:
   \   000086   85..82       MOV       DPL,?V4
   \   000089   85..83       MOV       DPH,?V5
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   FA           MOV       R2,A
   \   00008E   EC           MOV       A,R4
   \   00008F   C3           CLR       C
   \   000090   9A           SUBB      A,R2
   \   000091   40B1         JC        ??zcl_SendWriteRsp_2
   1459          
   1460              // If there's only a single status record and its status field is set to
   1461              // SUCCESS then omit the attribute ID field.
   1462              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   000093   7401         MOV       A,#0x1
   \   000095   6A           XRL       A,R2
   \   000096   700A         JNZ       ??zcl_SendWriteRsp_5
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   7006         JNZ       ??zcl_SendWriteRsp_5
   1463              {
   1464                dataLen = 1;
   \   00009C   75..01       MOV       ?V6,#0x1
   \   00009F   75..00       MOV       ?V7,#0x0
   1465              }
   1466          
   1467              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
   1468                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_5:
   \   0000A2                ; Setup parameters for call to function zcl_SendCommand
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   78..         MOV       R0,#?V6
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   741C         MOV       A,#0x1c
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F5..         MOV       ?V3,A
   \   0000B4   78..         MOV       R0,#?V3
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B9   E4           CLR       A
   \   0000BA   F5..         MOV       ?V4,A
   \   0000BC   F5..         MOV       ?V5,A
   \   0000BE   78..         MOV       R0,#?V4
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C3   741E         MOV       A,#0x1e
   \   0000C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   F5..         MOV       ?V3,A
   \   0000CB   78..         MOV       R0,#?V3
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D0   741E         MOV       A,#0x1e
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F5..         MOV       ?V3,A
   \   0000D8   78..         MOV       R0,#?V3
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DD   75..00       MOV       ?V3,#0x0
   \   0000E0   78..         MOV       R0,#?V3
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E5   75..04       MOV       ?V3,#0x4
   \   0000E8   78..         MOV       R0,#?V3
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000ED   EE           MOV       A,R6
   \   0000EE   FC           MOV       R4,A
   \   0000EF   EF           MOV       A,R7
   \   0000F0   FD           MOV       R5,A
   \   0000F1   AA..         MOV       R2,?V8
   \   0000F3   AB..         MOV       R3,?V9
   \   0000F5   A9..         MOV       R1,?V2
   \   0000F7   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000FA   740B         MOV       A,#0xb
   \   0000FC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FF   E9           MOV       A,R1
   \   000100   FE           MOV       R6,A
   1469              zcl_mem_free( buf );
   \   000101                ; Setup parameters for call to function osal_mem_free
   \   000101   AA..         MOV       R2,?V0
   \   000103   AB..         MOV       R3,?V1
   \   000105   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000108   8002         SJMP      ??zcl_SendWriteRsp_6
   1470            }
   1471            else
   1472            {
   1473              status = ZMemError;
   \                     ??zcl_SendWriteRsp_0:
   \   00010A   7E10         MOV       R6,#0x10
   1474            }
   1475          
   1476            return ( status );
   \                     ??zcl_SendWriteRsp_6:
   \   00010C   EE           MOV       A,R6
   \   00010D   F9           MOV       R1,A
   \   00010E   7F0C         MOV       R7,#0xc
   \   000110   02....       LJMP      ?BANKED_LEAVE_XDATA
   1477          }
   1478          #endif // ZCL_WRITE
   1479          
   1480          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1481          /*********************************************************************
   1482           * @fn      zcl_SendConfigReportCmd
   1483           *
   1484           * @brief   Send a Configure Reporting command
   1485           *
   1486           * @param   dstAddr - destination address
   1487           * @param   clusterID - cluster ID
   1488           * @param   cfgReportCmd - configure reporting command to be sent
   1489           * @param   direction - direction of the command
   1490           * @param   seqNum - transaction sequence number
   1491           *
   1492           * @return  ZSuccess if OK
   1493           */
   1494          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1495                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
   1496                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1497          {
   1498            uint8 *buf;
   1499            uint16 dataLen = 0;
   1500            ZStatus_t status;
   1501            uint8 i;
   1502          
   1503            // Find out the data length
   1504            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1505            {
   1506              zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1507          
   1508              dataLen += 1 + 2; // Direction + Attribute ID
   1509          
   1510              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1511              {
   1512                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1513          
   1514                // Find out the size of the Reportable Change field (for Analog data types)
   1515                if ( zclAnalogDataType( reportRec->dataType ) )
   1516                {
   1517                  dataLen += zclGetDataTypeLength( reportRec->dataType );
   1518                }
   1519              }
   1520              else
   1521              {
   1522                dataLen += 2; // Timeout Period
   1523              }
   1524            }
   1525          
   1526            buf = zcl_mem_alloc( dataLen );
   1527            if ( buf != NULL )
   1528            {
   1529              // Load the buffer - serially
   1530              uint8 *pBuf = buf;
   1531          
   1532              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1533              {
   1534                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1535          
   1536                *pBuf++ = reportRec->direction;
   1537                *pBuf++ = LO_UINT16( reportRec->attrID );
   1538                *pBuf++ = HI_UINT16( reportRec->attrID );
   1539          
   1540                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1541                {
   1542                  *pBuf++ = reportRec->dataType;
   1543                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
   1544                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
   1545                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
   1546                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
   1547          
   1548                  if ( zclAnalogDataType( reportRec->dataType ) )
   1549                  {
   1550                    pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
   1551                  }
   1552                }
   1553                else
   1554                {
   1555                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
   1556                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
   1557                }
   1558              } // for loop
   1559          
   1560              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
   1561                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1562              zcl_mem_free( buf );
   1563            }
   1564            else
   1565            {
   1566              status = ZMemError;
   1567            }
   1568          
   1569            return ( status );
   1570          }
   1571          #endif
   1572          
   1573          #ifdef ZCL_REPORTING_DEVICE
   1574          /*********************************************************************
   1575           * @fn      zcl_SendConfigReportRspCmd
   1576           *
   1577           * @brief   Send a Configure Reporting Response command
   1578           *
   1579           * @param   dstAddr - destination address
   1580           * @param   clusterID - cluster ID
   1581           * @param   cfgReportRspCmd - configure reporting response command to be sent
   1582           * @param   direction - direction of the command
   1583           * @param   seqNum - transaction sequence number
   1584           *
   1585           * @return  ZSuccess if OK
   1586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1587          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendConfigReportRspCmd:
   1588                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
   1589                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1590          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V5,A
   1591            uint16 dataLen;
   1592            uint8 *buf;
   1593            ZStatus_t status;
   1594          
   1595            // Atrribute list (Status, Direction and Attribute ID)
   1596            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
   \   00001B   85..82       MOV       DPL,?V4
   \   00001E   F583         MOV       DPH,A
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V0,A
   \   000023   75..00       MOV       ?V1,#0x0
   \   000026   7402         MOV       A,#0x2
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?S_SHL
   \   00002D   85....       MOV       ?V6,?V0
   \   000030   85....       MOV       ?V7,?V1
   1597          
   1598            buf = zcl_mem_alloc( dataLen );
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   AA..         MOV       R2,?V6
   \   000035   AB..         MOV       R3,?V7
   \   000037   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003A   8A..         MOV       ?V0,R2
   \   00003C   8B..         MOV       ?V1,R3
   1599            if ( buf != NULL )
   \   00003E   EA           MOV       A,R2
   \   00003F   4B           ORL       A,R3
   \   000040   7003         JNZ       $+5
   \   000042   02....       LJMP      ??zcl_SendConfigReportRspCmd_0 & 0xFFFF
   1600            {
   1601              // Load the buffer - serially
   1602              uint8 *pBuf = buf;
   1603              uint8 i;
   1604          
   1605              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   \   000045   7900         MOV       R1,#0x0
   \   000047   8058         SJMP      ??zcl_SendConfigReportRspCmd_1
   1606              {
   1607                *pBuf++ = cfgReportRspCmd->attrList[i].status;
   \                     ??zcl_SendConfigReportRspCmd_2:
   \   000049   E9           MOV       A,R1
   \   00004A   F5..         MOV       ?V10,A
   \   00004C   75..00       MOV       ?V11,#0x0
   \   00004F   7402         MOV       A,#0x2
   \   000051   78..         MOV       R0,#?V10
   \   000053   12....       LCALL     ?S_SHL
   \   000056   E5..         MOV       A,?V4
   \   000058   25..         ADD       A,?V10
   \   00005A   FC           MOV       R4,A
   \   00005B   E5..         MOV       A,?V5
   \   00005D   35..         ADDC      A,?V11
   \   00005F   FD           MOV       R5,A
   \   000060   8C82         MOV       DPL,R4
   \   000062   F583         MOV       DPH,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   8A82         MOV       DPL,R2
   \   000068   8B83         MOV       DPH,R3
   \   00006A   F0           MOVX      @DPTR,A
   1608                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
   \   00006B   8C82         MOV       DPL,R4
   \   00006D   8D83         MOV       DPH,R5
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   8A82         MOV       DPL,R2
   \   000074   8B83         MOV       DPH,R3
   \   000076   A3           INC       DPTR
   \   000077   F0           MOVX      @DPTR,A
   1609                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
   \   000078   EC           MOV       A,R4
   \   000079   2403         ADD       A,#0x3
   \   00007B   FC           MOV       R4,A
   \   00007C   5001         JNC       ??zcl_SendConfigReportRspCmd_3
   \   00007E   0D           INC       R5
   \                     ??zcl_SendConfigReportRspCmd_3:
   \   00007F   F582         MOV       DPL,A
   \   000081   8D83         MOV       DPH,R5
   \   000083   E0           MOVX      A,@DPTR
   \   000084   8A82         MOV       DPL,R2
   \   000086   8B83         MOV       DPH,R3
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   F0           MOVX      @DPTR,A
   1610                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
   \   00008B   8C82         MOV       DPL,R4
   \   00008D   8D83         MOV       DPH,R5
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   8A82         MOV       DPL,R2
   \   000093   8B83         MOV       DPH,R3
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   F0           MOVX      @DPTR,A
   \   000099   EA           MOV       A,R2
   \   00009A   2404         ADD       A,#0x4
   \   00009C   FA           MOV       R2,A
   \   00009D   5001         JNC       ??zcl_SendConfigReportRspCmd_4
   \   00009F   0B           INC       R3
   1611              }
   \                     ??zcl_SendConfigReportRspCmd_4:
   \   0000A0   09           INC       R1
   \                     ??zcl_SendConfigReportRspCmd_1:
   \   0000A1   85..82       MOV       DPL,?V4
   \   0000A4   85..83       MOV       DPH,?V5
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   F8           MOV       R0,A
   \   0000A9   E9           MOV       A,R1
   \   0000AA   C3           CLR       C
   \   0000AB   98           SUBB      A,R0
   \   0000AC   409B         JC        ??zcl_SendConfigReportRspCmd_2
   1612          
   1613              // If there's only a single status record and its status field is set to
   1614              // SUCCESS then omit the attribute ID field.
   1615              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   0000AE   7401         MOV       A,#0x1
   \   0000B0   68           XRL       A,R0
   \   0000B1   700A         JNZ       ??zcl_SendConfigReportRspCmd_5
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   7006         JNZ       ??zcl_SendConfigReportRspCmd_5
   1616              {
   1617                dataLen = 1;
   \   0000B7   75..01       MOV       ?V6,#0x1
   \   0000BA   75..00       MOV       ?V7,#0x0
   1618              }
   1619          
   1620              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1621                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
   1622                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendConfigReportRspCmd_5:
   \   0000BD                ; Setup parameters for call to function zcl_SendCommand
   \   0000BD   78..         MOV       R0,#?V0
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C2   78..         MOV       R0,#?V6
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C7   741C         MOV       A,#0x1c
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F5..         MOV       ?V3,A
   \   0000CF   78..         MOV       R0,#?V3
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D4   E4           CLR       A
   \   0000D5   F5..         MOV       ?V4,A
   \   0000D7   F5..         MOV       ?V5,A
   \   0000D9   78..         MOV       R0,#?V4
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DE   741E         MOV       A,#0x1e
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   F5..         MOV       ?V3,A
   \   0000E6   78..         MOV       R0,#?V3
   \   0000E8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EB   741E         MOV       A,#0x1e
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F5..         MOV       ?V3,A
   \   0000F3   78..         MOV       R0,#?V3
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F8   75..00       MOV       ?V3,#0x0
   \   0000FB   78..         MOV       R0,#?V3
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000100   75..07       MOV       ?V3,#0x7
   \   000103   78..         MOV       R0,#?V3
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000108   EE           MOV       A,R6
   \   000109   FC           MOV       R4,A
   \   00010A   EF           MOV       A,R7
   \   00010B   FD           MOV       R5,A
   \   00010C   AA..         MOV       R2,?V8
   \   00010E   AB..         MOV       R3,?V9
   \   000110   A9..         MOV       R1,?V2
   \   000112   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000115   740B         MOV       A,#0xb
   \   000117   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011A   E9           MOV       A,R1
   \   00011B   FE           MOV       R6,A
   1623              zcl_mem_free( buf );
   \   00011C                ; Setup parameters for call to function osal_mem_free
   \   00011C   AA..         MOV       R2,?V0
   \   00011E   AB..         MOV       R3,?V1
   \   000120   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000123   8002         SJMP      ??zcl_SendConfigReportRspCmd_6
   1624            }
   1625            else
   1626            {
   1627              status = ZMemError;
   \                     ??zcl_SendConfigReportRspCmd_0:
   \   000125   7E10         MOV       R6,#0x10
   1628            }
   1629          
   1630            return ( status );
   \                     ??zcl_SendConfigReportRspCmd_6:
   \   000127   EE           MOV       A,R6
   \   000128   F9           MOV       R1,A
   \   000129   7F0C         MOV       R7,#0xc
   \   00012B   02....       LJMP      ?BANKED_LEAVE_XDATA
   1631          }
   1632          #endif
   1633          
   1634          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1635          /*********************************************************************
   1636           * @fn      zcl_SendReadReportCfgCmd
   1637           *
   1638           * @brief   Send a Read Reporting Configuration command
   1639           *
   1640           * @param   dstAddr - destination address
   1641           * @param   clusterID - cluster ID
   1642           * @param   readReportCfgCmd - read reporting configuration command to be sent
   1643           * @param   direction - direction of the command
   1644           * @param   seqNum - transaction sequence number
   1645           *
   1646           * @return  ZSuccess if OK
   1647           */
   1648          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1649                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
   1650                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1651          {
   1652            uint16 dataLen;
   1653            uint8 *buf;
   1654            ZStatus_t status;
   1655          
   1656            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
   1657          
   1658            buf = zcl_mem_alloc( dataLen );
   1659            if ( buf != NULL )
   1660            {
   1661              // Load the buffer - serially
   1662              uint8 *pBuf = buf;
   1663              uint8 i;
   1664          
   1665              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
   1666              {
   1667                *pBuf++ = readReportCfgCmd->attrList[i].direction;
   1668                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
   1669                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
   1670              }
   1671          
   1672              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
   1673                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1674              zcl_mem_free( buf );
   1675            }
   1676            else
   1677            {
   1678              status = ZMemError;
   1679            }
   1680          
   1681            return ( status );
   1682          }
   1683          #endif
   1684          
   1685          #ifdef ZCL_REPORTING_DEVICE
   1686          /*********************************************************************
   1687           * @fn      zcl_SendReadReportCfgRspCmd
   1688           *
   1689           * @brief   Send a Read Reporting Configuration Response command
   1690           *
   1691           * @param   dstAddr - destination address
   1692           * @param   clusterID - cluster ID
   1693           * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
   1694           * @param   direction - direction of the command
   1695           * @param   seqNum - transaction sequence number
   1696           *
   1697           * @return  ZSuccess if OK
   1698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1699          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadReportCfgRspCmd:
   1700                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1701                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1702          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   89..         MOV       ?V1,R1
   \   000017   8C..         MOV       ?V12,R4
   \   000019   8D..         MOV       ?V13,R5
   1703            uint8 *buf;
   1704            uint16 dataLen = 0;
   \   00001B   7E00         MOV       R6,#0x0
   \   00001D   7F00         MOV       R7,#0x0
   1705            ZStatus_t status;
   1706            uint8 i;
   1707          
   1708            // Find out the data length
   1709            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   \   00001F   75..00       MOV       ?V0,#0x0
   \   000022   741A         MOV       A,#0x1a
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V8,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F5..         MOV       ?V9,A
   \   00002E   8009         SJMP      ??zcl_SendReadReportCfgRspCmd_0
   1710            {
   1711              zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1712          
   1713              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1714          
   1715              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1716              {
   1717                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1718                {
   1719                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1720          
   1721                  // Find out the size of the Reportable Change field (for Analog data types)
   1722                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1723                  {
   1724                    dataLen += zclGetDataTypeLength( reportRspRec->dataType );
   1725                  }
   1726                }
   1727                else
   1728                {
   1729                  dataLen += 2; // Timeout Period
   \                     ??zcl_SendReadReportCfgRspCmd_1:
   \   000030   EE           MOV       A,R6
   \   000031   2402         ADD       A,#0x2
   \                     ??zcl_SendReadReportCfgRspCmd_2:
   \   000033   FE           MOV       R6,A
   \   000034   E4           CLR       A
   \   000035   3F           ADDC      A,R7
   \   000036   FF           MOV       R7,A
   1730                }
   \                     ??zcl_SendReadReportCfgRspCmd_3:
   \   000037   05..         INC       ?V0
   \                     ??zcl_SendReadReportCfgRspCmd_0:
   \   000039   85..82       MOV       DPL,?V8
   \   00003C   85..83       MOV       DPH,?V9
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F8           MOV       R0,A
   \   000041   E5..         MOV       A,?V0
   \   000043   C3           CLR       C
   \   000044   98           SUBB      A,R0
   \   000045   5052         JNC       ??zcl_SendReadReportCfgRspCmd_4
   \   000047   E5..         MOV       A,?V0
   \   000049   75F00D       MOV       B,#0xd
   \   00004C   A4           MUL       AB
   \   00004D   F8           MOV       R0,A
   \   00004E   A9F0         MOV       R1,B
   \   000050   E5..         MOV       A,?V8
   \   000052   28           ADD       A,R0
   \   000053   F582         MOV       DPL,A
   \   000055   E5..         MOV       A,?V9
   \   000057   39           ADDC      A,R1
   \   000058   F583         MOV       DPH,A
   \   00005A   A3           INC       DPTR
   \   00005B   A882         MOV       R0,DPL
   \   00005D   A983         MOV       R1,DPH
   \   00005F   EE           MOV       A,R6
   \   000060   2404         ADD       A,#0x4
   \   000062   FE           MOV       R6,A
   \   000063   E4           CLR       A
   \   000064   3F           ADDC      A,R7
   \   000065   FF           MOV       R7,A
   \   000066   E0           MOVX      A,@DPTR
   \   000067   70CE         JNZ       ??zcl_SendReadReportCfgRspCmd_3
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   70C3         JNZ       ??zcl_SendReadReportCfgRspCmd_1
   \   00006D   EE           MOV       A,R6
   \   00006E   2405         ADD       A,#0x5
   \   000070   FE           MOV       R6,A
   \   000071   E4           CLR       A
   \   000072   3F           ADDC      A,R7
   \   000073   FF           MOV       R7,A
   \   000074   E8           MOV       A,R0
   \   000075   2404         ADD       A,#0x4
   \   000077   F5..         MOV       ?V2,A
   \   000079   E4           CLR       A
   \   00007A   39           ADDC      A,R1
   \   00007B   F5..         MOV       ?V3,A
   \   00007D                ; Setup parameters for call to function zclAnalogDataType
   \   00007D   85..82       MOV       DPL,?V2
   \   000080   F583         MOV       DPH,A
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F9           MOV       R1,A
   \   000084   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000087   E9           MOV       A,R1
   \   000088   60AD         JZ        ??zcl_SendReadReportCfgRspCmd_3
   \   00008A                ; Setup parameters for call to function zclGetDataTypeLength
   \   00008A   85..82       MOV       DPL,?V2
   \   00008D   85..83       MOV       DPH,?V3
   \   000090   E0           MOVX      A,@DPTR
   \   000091   F9           MOV       R1,A
   \   000092   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000095   EE           MOV       A,R6
   \   000096   29           ADD       A,R1
   \   000097   809A         SJMP      ??zcl_SendReadReportCfgRspCmd_2
   1731              }
   1732            }
   1733          
   1734            buf = zcl_mem_alloc( dataLen );
   \                     ??zcl_SendReadReportCfgRspCmd_4:
   \   000099                ; Setup parameters for call to function osal_mem_alloc
   \   000099   EE           MOV       A,R6
   \   00009A   FA           MOV       R2,A
   \   00009B   EF           MOV       A,R7
   \   00009C   FB           MOV       R3,A
   \   00009D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A0   8A..         MOV       ?V2,R2
   \   0000A2   8B..         MOV       ?V3,R3
   1735            if ( buf != NULL )
   \   0000A4   EA           MOV       A,R2
   \   0000A5   4B           ORL       A,R3
   \   0000A6   7003         JNZ       $+5
   \   0000A8   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_5 & 0xFFFF
   1736            {
   1737              // Load the buffer - serially
   1738              uint8 *pBuf = buf;
   \   0000AB   8A..         MOV       ?V6,R2
   \   0000AD   8B..         MOV       ?V7,R3
   1739          
   1740              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   \   0000AF   75..00       MOV       ?V0,#0x0
   \   0000B2   8026         SJMP      ??zcl_SendReadReportCfgRspCmd_6
   1741              {
   1742                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1743          
   1744                *pBuf++ = reportRspRec->status;
   1745                *pBuf++ = reportRspRec->direction;
   1746                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1747                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1748          
   1749                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1750                {
   1751                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1752                  {
   1753                    *pBuf++ = reportRspRec->dataType;
   1754                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1755                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1756                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1757                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1758          
   1759                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1760                    {
   1761                      pBuf = zclSerializeData( reportRspRec->dataType,
   1762                                               reportRspRec->reportableChange, pBuf );
   1763                    }
   1764                  }
   1765                  else
   1766                  {
   1767                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   \                     ??zcl_SendReadReportCfgRspCmd_7:
   \   0000B4   E5..         MOV       A,?V4
   \   0000B6   2409         ADD       A,#0x9
   \   0000B8   FA           MOV       R2,A
   \   0000B9   E4           CLR       A
   \   0000BA   35..         ADDC      A,?V5
   \   0000BC   FB           MOV       R3,A
   \   0000BD   8A82         MOV       DPL,R2
   \   0000BF   F583         MOV       DPH,A
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   85..82       MOV       DPL,?V6
   \   0000C5   85..83       MOV       DPH,?V7
   \   0000C8   F0           MOVX      @DPTR,A
   1768                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   \   0000C9   8A82         MOV       DPL,R2
   \   0000CB   8B83         MOV       DPH,R3
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   8882         MOV       DPL,R0
   \   0000D1   8983         MOV       DPH,R1
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   8C..         MOV       ?V6,R4
   \   0000D6   8D..         MOV       ?V7,R5
   1769                  }
   \                     ??zcl_SendReadReportCfgRspCmd_8:
   \   0000D8   05..         INC       ?V0
   \                     ??zcl_SendReadReportCfgRspCmd_6:
   \   0000DA   85..82       MOV       DPL,?V8
   \   0000DD   85..83       MOV       DPH,?V9
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   F8           MOV       R0,A
   \   0000E2   E5..         MOV       A,?V0
   \   0000E4   C3           CLR       C
   \   0000E5   98           SUBB      A,R0
   \   0000E6   4003         JC        $+5
   \   0000E8   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_9 & 0xFFFF
   \   0000EB   E5..         MOV       A,?V0
   \   0000ED   75F00D       MOV       B,#0xd
   \   0000F0   A4           MUL       AB
   \   0000F1   F8           MOV       R0,A
   \   0000F2   A9F0         MOV       R1,B
   \   0000F4   E5..         MOV       A,?V8
   \   0000F6   28           ADD       A,R0
   \   0000F7   F582         MOV       DPL,A
   \   0000F9   E5..         MOV       A,?V9
   \   0000FB   39           ADDC      A,R1
   \   0000FC   F583         MOV       DPH,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   8582..       MOV       ?V4,DPL
   \   000102   8583..       MOV       ?V5,DPH
   \   000105   E0           MOVX      A,@DPTR
   \   000106   85..82       MOV       DPL,?V6
   \   000109   85..83       MOV       DPH,?V7
   \   00010C   F0           MOVX      @DPTR,A
   \   00010D   85..82       MOV       DPL,?V4
   \   000110   85..83       MOV       DPH,?V5
   \   000113   A3           INC       DPTR
   \   000114   AA82         MOV       R2,DPL
   \   000116   AB83         MOV       R3,DPH
   \   000118   E0           MOVX      A,@DPTR
   \   000119   85..82       MOV       DPL,?V6
   \   00011C   85..83       MOV       DPH,?V7
   \   00011F   A3           INC       DPTR
   \   000120   F0           MOVX      @DPTR,A
   \   000121   E5..         MOV       A,?V4
   \   000123   2402         ADD       A,#0x2
   \   000125   F8           MOV       R0,A
   \   000126   E4           CLR       A
   \   000127   35..         ADDC      A,?V5
   \   000129   F9           MOV       R1,A
   \   00012A   8882         MOV       DPL,R0
   \   00012C   F583         MOV       DPH,A
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   85..82       MOV       DPL,?V6
   \   000132   85..83       MOV       DPH,?V7
   \   000135   A3           INC       DPTR
   \   000136   A3           INC       DPTR
   \   000137   F0           MOVX      @DPTR,A
   \   000138   8882         MOV       DPL,R0
   \   00013A   8983         MOV       DPH,R1
   \   00013C   A3           INC       DPTR
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   85..82       MOV       DPL,?V6
   \   000141   85..83       MOV       DPH,?V7
   \   000144   A3           INC       DPTR
   \   000145   A3           INC       DPTR
   \   000146   A3           INC       DPTR
   \   000147   F0           MOVX      @DPTR,A
   \   000148   E5..         MOV       A,?V6
   \   00014A   2404         ADD       A,#0x4
   \   00014C   F5..         MOV       ?V6,A
   \   00014E   5002         JNC       ??zcl_SendReadReportCfgRspCmd_10
   \   000150   05..         INC       ?V7
   \                     ??zcl_SendReadReportCfgRspCmd_10:
   \   000152   85..82       MOV       DPL,?V4
   \   000155   85..83       MOV       DPH,?V5
   \   000158   E0           MOVX      A,@DPTR
   \   000159   6003         JZ        $+5
   \   00015B   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_8 & 0xFFFF
   \   00015E   E5..         MOV       A,?V6
   \   000160   2402         ADD       A,#0x2
   \   000162   FC           MOV       R4,A
   \   000163   E4           CLR       A
   \   000164   35..         ADDC      A,?V7
   \   000166   FD           MOV       R5,A
   \   000167   85..82       MOV       DPL,?V6
   \   00016A   85..83       MOV       DPH,?V7
   \   00016D   A3           INC       DPTR
   \   00016E   A882         MOV       R0,DPL
   \   000170   A983         MOV       R1,DPH
   \   000172   8A82         MOV       DPL,R2
   \   000174   8B83         MOV       DPH,R3
   \   000176   E0           MOVX      A,@DPTR
   \   000177   6003         JZ        $+5
   \   000179   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_7 & 0xFFFF
   \   00017C   E5..         MOV       A,?V4
   \   00017E   2404         ADD       A,#0x4
   \   000180   F5..         MOV       ?V10,A
   \   000182   E4           CLR       A
   \   000183   35..         ADDC      A,?V5
   \   000185   F5..         MOV       ?V11,A
   \   000187   85..82       MOV       DPL,?V10
   \   00018A   F583         MOV       DPH,A
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   85..82       MOV       DPL,?V6
   \   000190   85..83       MOV       DPH,?V7
   \   000193   F0           MOVX      @DPTR,A
   \   000194   E5..         MOV       A,?V4
   \   000196   2405         ADD       A,#0x5
   \   000198   F5..         MOV       ?V14,A
   \   00019A   E4           CLR       A
   \   00019B   35..         ADDC      A,?V5
   \   00019D   F5..         MOV       ?V15,A
   \   00019F   85..82       MOV       DPL,?V14
   \   0001A2   F583         MOV       DPH,A
   \   0001A4   E0           MOVX      A,@DPTR
   \   0001A5   8882         MOV       DPL,R0
   \   0001A7   8983         MOV       DPH,R1
   \   0001A9   F0           MOVX      @DPTR,A
   \   0001AA   85..82       MOV       DPL,?V14
   \   0001AD   85..83       MOV       DPH,?V15
   \   0001B0   A3           INC       DPTR
   \   0001B1   E0           MOVX      A,@DPTR
   \   0001B2   8C82         MOV       DPL,R4
   \   0001B4   8D83         MOV       DPH,R5
   \   0001B6   F0           MOVX      @DPTR,A
   \   0001B7   E5..         MOV       A,?V4
   \   0001B9   2407         ADD       A,#0x7
   \   0001BB   F8           MOV       R0,A
   \   0001BC   E4           CLR       A
   \   0001BD   35..         ADDC      A,?V5
   \   0001BF   F9           MOV       R1,A
   \   0001C0   8882         MOV       DPL,R0
   \   0001C2   F583         MOV       DPH,A
   \   0001C4   E0           MOVX      A,@DPTR
   \   0001C5   85..82       MOV       DPL,?V6
   \   0001C8   85..83       MOV       DPH,?V7
   \   0001CB   A3           INC       DPTR
   \   0001CC   A3           INC       DPTR
   \   0001CD   A3           INC       DPTR
   \   0001CE   F0           MOVX      @DPTR,A
   \   0001CF   8882         MOV       DPL,R0
   \   0001D1   8983         MOV       DPH,R1
   \   0001D3   A3           INC       DPTR
   \   0001D4   E0           MOVX      A,@DPTR
   \   0001D5   85..82       MOV       DPL,?V6
   \   0001D8   85..83       MOV       DPH,?V7
   \   0001DB   A3           INC       DPTR
   \   0001DC   A3           INC       DPTR
   \   0001DD   A3           INC       DPTR
   \   0001DE   A3           INC       DPTR
   \   0001DF   F0           MOVX      @DPTR,A
   \   0001E0   E5..         MOV       A,?V6
   \   0001E2   2405         ADD       A,#0x5
   \   0001E4   F5..         MOV       ?V6,A
   \   0001E6   5002         JNC       ??zcl_SendReadReportCfgRspCmd_11
   \   0001E8   05..         INC       ?V7
   \                     ??zcl_SendReadReportCfgRspCmd_11:
   \   0001EA                ; Setup parameters for call to function zclAnalogDataType
   \   0001EA   85..82       MOV       DPL,?V10
   \   0001ED   85..83       MOV       DPH,?V11
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   F9           MOV       R1,A
   \   0001F2   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   0001F5   E9           MOV       A,R1
   \   0001F6   7003         JNZ       $+5
   \   0001F8   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_8 & 0xFFFF
   \   0001FB                ; Setup parameters for call to function zclSerializeData
   \   0001FB   AC..         MOV       R4,?V6
   \   0001FD   AD..         MOV       R5,?V7
   \   0001FF   E5..         MOV       A,?V4
   \   000201   240B         ADD       A,#0xb
   \   000203   F582         MOV       DPL,A
   \   000205   E4           CLR       A
   \   000206   35..         ADDC      A,?V5
   \   000208   F583         MOV       DPH,A
   \   00020A   E0           MOVX      A,@DPTR
   \   00020B   FA           MOV       R2,A
   \   00020C   A3           INC       DPTR
   \   00020D   E0           MOVX      A,@DPTR
   \   00020E   FB           MOV       R3,A
   \   00020F   85..82       MOV       DPL,?V10
   \   000212   85..83       MOV       DPH,?V11
   \   000215   E0           MOVX      A,@DPTR
   \   000216   F9           MOV       R1,A
   \   000217   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   00021A   8A..         MOV       ?V6,R2
   \   00021C   8B..         MOV       ?V7,R3
   \   00021E   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_8 & 0xFFFF
   1770                }
   1771              }
   1772          
   1773              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1774                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1775                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendReadReportCfgRspCmd_9:
   \   000221                ; Setup parameters for call to function zcl_SendCommand
   \   000221   78..         MOV       R0,#?V2
   \   000223   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000226   8E..         MOV       ?V4,R6
   \   000228   8F..         MOV       ?V5,R7
   \   00022A   78..         MOV       R0,#?V4
   \   00022C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00022F   7422         MOV       A,#0x22
   \   000231   12....       LCALL     ?XSTACK_DISP0_8
   \   000234   E0           MOVX      A,@DPTR
   \   000235   F5..         MOV       ?V0,A
   \   000237   78..         MOV       R0,#?V0
   \   000239   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00023C   E4           CLR       A
   \   00023D   F5..         MOV       ?V4,A
   \   00023F   F5..         MOV       ?V5,A
   \   000241   78..         MOV       R0,#?V4
   \   000243   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000246   7424         MOV       A,#0x24
   \   000248   12....       LCALL     ?XSTACK_DISP0_8
   \   00024B   E0           MOVX      A,@DPTR
   \   00024C   F5..         MOV       ?V0,A
   \   00024E   78..         MOV       R0,#?V0
   \   000250   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000253   7424         MOV       A,#0x24
   \   000255   12....       LCALL     ?XSTACK_DISP0_8
   \   000258   E0           MOVX      A,@DPTR
   \   000259   F5..         MOV       ?V0,A
   \   00025B   78..         MOV       R0,#?V0
   \   00025D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000260   75..00       MOV       ?V0,#0x0
   \   000263   78..         MOV       R0,#?V0
   \   000265   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000268   75..09       MOV       ?V0,#0x9
   \   00026B   78..         MOV       R0,#?V0
   \   00026D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000270   AC..         MOV       R4,?V12
   \   000272   AD..         MOV       R5,?V13
   \   000274   740B         MOV       A,#0xb
   \   000276   12....       LCALL     ?XSTACK_DISP0_8
   \   000279   E0           MOVX      A,@DPTR
   \   00027A   FA           MOV       R2,A
   \   00027B   A3           INC       DPTR
   \   00027C   E0           MOVX      A,@DPTR
   \   00027D   FB           MOV       R3,A
   \   00027E   A9..         MOV       R1,?V1
   \   000280   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000283   740B         MOV       A,#0xb
   \   000285   12....       LCALL     ?DEALLOC_XSTACK8
   \   000288   E9           MOV       A,R1
   \   000289   FE           MOV       R6,A
   1776              zcl_mem_free( buf );
   \   00028A                ; Setup parameters for call to function osal_mem_free
   \   00028A   AA..         MOV       R2,?V2
   \   00028C   AB..         MOV       R3,?V3
   \   00028E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000291   8002         SJMP      ??zcl_SendReadReportCfgRspCmd_12
   1777            }
   1778            else
   1779            {
   1780              status = ZMemError;
   \                     ??zcl_SendReadReportCfgRspCmd_5:
   \   000293   7E10         MOV       R6,#0x10
   1781            }
   1782          
   1783            return ( status );
   \                     ??zcl_SendReadReportCfgRspCmd_12:
   \   000295   EE           MOV       A,R6
   \   000296   F9           MOV       R1,A
   \   000297   7402         MOV       A,#0x2
   \   000299   12....       LCALL     ?DEALLOC_XSTACK8
   \   00029C   7F10         MOV       R7,#0x10
   \   00029E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1784          }
   1785          
   1786          /*********************************************************************
   1787           * @fn      zcl_SendReportCmd
   1788           *
   1789           * @brief   Send a Report command
   1790           *
   1791           * @param   dstAddr - destination address
   1792           * @param   clusterID - cluster ID
   1793           * @param   reportCmd - report command to be sent
   1794           * @param   direction - direction of the command
   1795           * @param   seqNum - transaction sequence number
   1796           *
   1797           * @return  ZSuccess if OK
   1798           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1799          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReportCmd:
   1800                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1801                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1802          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   8C..         MOV       ?V6,R4
   \   00000D   8D..         MOV       ?V7,R5
   1803            uint16 dataLen = 0;
   \   00000F   7E00         MOV       R6,#0x0
   \   000011   7F00         MOV       R7,#0x0
   1804            uint8 *buf;
   1805            ZStatus_t status;
   1806            uint8 i;
   1807          
   1808            // calculate the size of the command
   1809            for ( i = 0; i < reportCmd->numAttr; i++ )
   \   000013   75..00       MOV       ?V2,#0x0
   \   000016   7416         MOV       A,#0x16
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V4,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V5,A
   \   000022   803D         SJMP      ??zcl_SendReportCmd_0
   1810            {
   1811              zclReport_t *reportRec = &(reportCmd->attrList[i]);
   \                     ??zcl_SendReportCmd_1:
   \   000024   E5..         MOV       A,?V2
   \   000026   75F005       MOV       B,#0x5
   \   000029   A4           MUL       AB
   \   00002A   F8           MOV       R0,A
   \   00002B   A9F0         MOV       R1,B
   \   00002D   E5..         MOV       A,?V4
   \   00002F   28           ADD       A,R0
   \   000030   F582         MOV       DPL,A
   \   000032   E5..         MOV       A,?V5
   \   000034   39           ADDC      A,R1
   \   000035   F583         MOV       DPH,A
   \   000037   A3           INC       DPTR
   \   000038   A882         MOV       R0,DPL
   \   00003A   A983         MOV       R1,DPH
   1812          
   1813              dataLen += 2 + 1; // Attribute ID + data type
   1814          
   1815              // Attribute Data
   1816              dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   \   00003C                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FA           MOV       R2,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FB           MOV       R3,A
   \   000044   8882         MOV       DPL,R0
   \   000046   8983         MOV       DPH,R1
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00004F   8B..         MOV       ?V1,R3
   \   000051   EA           MOV       A,R2
   \   000052   2403         ADD       A,#0x3
   \   000054   F8           MOV       R0,A
   \   000055   E4           CLR       A
   \   000056   35..         ADDC      A,?V1
   \   000058   F9           MOV       R1,A
   \   000059   EE           MOV       A,R6
   \   00005A   28           ADD       A,R0
   \   00005B   FE           MOV       R6,A
   \   00005C   EF           MOV       A,R7
   \   00005D   39           ADDC      A,R1
   \   00005E   FF           MOV       R7,A
   1817            }
   \   00005F   05..         INC       ?V2
   \                     ??zcl_SendReportCmd_0:
   \   000061   85..82       MOV       DPL,?V4
   \   000064   85..83       MOV       DPH,?V5
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F8           MOV       R0,A
   \   000069   E5..         MOV       A,?V2
   \   00006B   C3           CLR       C
   \   00006C   98           SUBB      A,R0
   \   00006D   40B5         JC        ??zcl_SendReportCmd_1
   1818          
   1819            buf = zcl_mem_alloc( dataLen );
   \   00006F                ; Setup parameters for call to function osal_mem_alloc
   \   00006F   EE           MOV       A,R6
   \   000070   FA           MOV       R2,A
   \   000071   EF           MOV       A,R7
   \   000072   FB           MOV       R3,A
   \   000073   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000076   8A..         MOV       ?V0,R2
   \   000078   8B..         MOV       ?V1,R3
   1820            if ( buf != NULL )
   \   00007A   EA           MOV       A,R2
   \   00007B   4B           ORL       A,R3
   \   00007C   7003         JNZ       $+5
   \   00007E   02....       LJMP      ??zcl_SendReportCmd_2 & 0xFFFF
   1821            {
   1822              // Load the buffer - serially
   1823              uint8 *pBuf = buf;
   \   000081   A8..         MOV       R0,?V0
   \   000083   A9..         MOV       R1,?V1
   1824          
   1825              for ( i = 0; i < reportCmd->numAttr; i++ )
   \   000085   75..00       MOV       ?V2,#0x0
   \   000088   8070         SJMP      ??zcl_SendReportCmd_3
   1826              {
   1827                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   \                     ??zcl_SendReportCmd_4:
   \   00008A   E5..         MOV       A,?V2
   \   00008C   75F005       MOV       B,#0x5
   \   00008F   A4           MUL       AB
   \   000090   FA           MOV       R2,A
   \   000091   ABF0         MOV       R3,B
   \   000093   E5..         MOV       A,?V4
   \   000095   2A           ADD       A,R2
   \   000096   F582         MOV       DPL,A
   \   000098   E5..         MOV       A,?V5
   \   00009A   3B           ADDC      A,R3
   \   00009B   F583         MOV       DPH,A
   \   00009D   A3           INC       DPTR
   \   00009E   8582..       MOV       ?V12,DPL
   \   0000A1   8583..       MOV       ?V13,DPH
   1828          
   1829                *pBuf++ = LO_UINT16( reportRec->attrID );
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   8882         MOV       DPL,R0
   \   0000A7   8983         MOV       DPH,R1
   \   0000A9   F0           MOVX      @DPTR,A
   1830                *pBuf++ = HI_UINT16( reportRec->attrID );
   \   0000AA   85..82       MOV       DPL,?V12
   \   0000AD   85..83       MOV       DPH,?V13
   \   0000B0   A3           INC       DPTR
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   8882         MOV       DPL,R0
   \   0000B4   8983         MOV       DPH,R1
   \   0000B6   A3           INC       DPTR
   \   0000B7   F0           MOVX      @DPTR,A
   1831                *pBuf++ = reportRec->dataType;
   \   0000B8   E5..         MOV       A,?V12
   \   0000BA   2402         ADD       A,#0x2
   \   0000BC   FA           MOV       R2,A
   \   0000BD   E4           CLR       A
   \   0000BE   35..         ADDC      A,?V13
   \   0000C0   8A..         MOV       ?V10,R2
   \   0000C2   F5..         MOV       ?V11,A
   \   0000C4   8A82         MOV       DPL,R2
   \   0000C6   F583         MOV       DPH,A
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   8882         MOV       DPL,R0
   \   0000CB   8983         MOV       DPH,R1
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   F0           MOVX      @DPTR,A
   1832          
   1833                pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   \   0000D0                ; Setup parameters for call to function zclSerializeData
   \   0000D0   E8           MOV       A,R0
   \   0000D1   2403         ADD       A,#0x3
   \   0000D3   FC           MOV       R4,A
   \   0000D4   E4           CLR       A
   \   0000D5   39           ADDC      A,R1
   \   0000D6   FD           MOV       R5,A
   \   0000D7   85..82       MOV       DPL,?V12
   \   0000DA   85..83       MOV       DPH,?V13
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   FA           MOV       R2,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   FB           MOV       R3,A
   \   0000E5   85..82       MOV       DPL,?V10
   \   0000E8   85..83       MOV       DPH,?V11
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   F9           MOV       R1,A
   \   0000ED   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   0000F0   8A..         MOV       ?V10,R2
   \   0000F2   8B..         MOV       ?V11,R3
   \   0000F4   A8..         MOV       R0,?V10
   \   0000F6   A9..         MOV       R1,?V11
   1834              }
   \   0000F8   05..         INC       ?V2
   \                     ??zcl_SendReportCmd_3:
   \   0000FA   85..82       MOV       DPL,?V4
   \   0000FD   85..83       MOV       DPH,?V5
   \   000100   E0           MOVX      A,@DPTR
   \   000101   FA           MOV       R2,A
   \   000102   E5..         MOV       A,?V2
   \   000104   C3           CLR       C
   \   000105   9A           SUBB      A,R2
   \   000106   4082         JC        ??zcl_SendReportCmd_4
   1835          
   1836              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
   1837                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000108                ; Setup parameters for call to function zcl_SendCommand
   \   000108   78..         MOV       R0,#?V0
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010D   8E..         MOV       ?V4,R6
   \   00010F   8F..         MOV       ?V5,R7
   \   000111   78..         MOV       R0,#?V4
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000116   741E         MOV       A,#0x1e
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F5..         MOV       ?V2,A
   \   00011E   78..         MOV       R0,#?V2
   \   000120   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000123   E4           CLR       A
   \   000124   F5..         MOV       ?V4,A
   \   000126   F5..         MOV       ?V5,A
   \   000128   78..         MOV       R0,#?V4
   \   00012A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012D   7420         MOV       A,#0x20
   \   00012F   12....       LCALL     ?XSTACK_DISP0_8
   \   000132   E0           MOVX      A,@DPTR
   \   000133   F5..         MOV       ?V2,A
   \   000135   78..         MOV       R0,#?V2
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013A   7420         MOV       A,#0x20
   \   00013C   12....       LCALL     ?XSTACK_DISP0_8
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   F5..         MOV       ?V2,A
   \   000142   78..         MOV       R0,#?V2
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000147   75..00       MOV       ?V2,#0x0
   \   00014A   78..         MOV       R0,#?V2
   \   00014C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00014F   75..0A       MOV       ?V2,#0xa
   \   000152   78..         MOV       R0,#?V2
   \   000154   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000157   AC..         MOV       R4,?V6
   \   000159   AD..         MOV       R5,?V7
   \   00015B   AA..         MOV       R2,?V8
   \   00015D   AB..         MOV       R3,?V9
   \   00015F   A9..         MOV       R1,?V3
   \   000161   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000164   740B         MOV       A,#0xb
   \   000166   12....       LCALL     ?DEALLOC_XSTACK8
   \   000169   E9           MOV       A,R1
   \   00016A   FE           MOV       R6,A
   1838              zcl_mem_free( buf );
   \   00016B                ; Setup parameters for call to function osal_mem_free
   \   00016B   AA..         MOV       R2,?V0
   \   00016D   AB..         MOV       R3,?V1
   \   00016F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000172   8002         SJMP      ??zcl_SendReportCmd_5
   1839            }
   1840            else
   1841            {
   1842              status = ZMemError;
   \                     ??zcl_SendReportCmd_2:
   \   000174   7E10         MOV       R6,#0x10
   1843            }
   1844          
   1845            return ( status );
   \                     ??zcl_SendReportCmd_5:
   \   000176   EE           MOV       A,R6
   \   000177   F9           MOV       R1,A
   \   000178   7F0E         MOV       R7,#0xe
   \   00017A   02....       LJMP      ?BANKED_LEAVE_XDATA
   1846          }
   1847          #endif
   1848          
   1849          /*********************************************************************
   1850           * @fn      zcl_SendDefaultRspCmd
   1851           *
   1852           * @brief   Send a Default Response command
   1853           *
   1854           *          Note: The manufacturer code field should be set if this
   1855           *          command is being sent in response to a manufacturer specific
   1856           *          command.
   1857           *
   1858           * @param   dstAddr - destination address
   1859           * @param   clusterID - cluster ID
   1860           * @param   defaultRspCmd - default response command to be sent
   1861           * @param   direction - direction of the command
   1862           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1863           * @param   seqNum - transaction sequence number
   1864           *
   1865           * @return  ZSuccess if OK
   1866           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1867          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1868                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1869                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1870          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740C         MOV       A,#0xc
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   1871            uint8 buf[2]; // Command ID and Status;
   1872          
   1873            // Load the buffer - serially
   1874            buf[0] = defaultRspCmd->commandID;
   \   000016   8882         MOV       DPL,R0
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   F0           MOVX      @DPTR,A
   1875            buf[1] = defaultRspCmd->statusCode;
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C0E0         PUSH      A
   \   00002A   7401         MOV       A,#0x1
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   F0           MOVX      @DPTR,A
   1876          
   1877            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1878                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
   \   000032                ; Setup parameters for call to function zcl_SendCommand
   \   000032   A8..         MOV       R0,?XSP + 0
   \   000034   A9..         MOV       R1,?XSP + 1
   \   000036   88..         MOV       ?V0,R0
   \   000038   89..         MOV       ?V1,R1
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   75..02       MOV       ?V0,#0x2
   \   000042   75..00       MOV       ?V1,#0x0
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7416         MOV       A,#0x16
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F5..         MOV       ?V0,A
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   7415         MOV       A,#0x15
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00005F   7416         MOV       A,#0x16
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F5..         MOV       ?V0,A
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   7416         MOV       A,#0x16
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F5..         MOV       ?V0,A
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   75..00       MOV       ?V0,#0x0
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000081   75..0B       MOV       ?V0,#0xb
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000089   EE           MOV       A,R6
   \   00008A   F9           MOV       R1,A
   \   00008B   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00008E   740B         MOV       A,#0xb
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   7F02         MOV       R7,#0x2
   \   00009A   02....       LJMP      ?BANKED_LEAVE_XDATA
   1879          }
   1880          
   1881          #ifdef ZCL_DISCOVER
   1882          /*********************************************************************
   1883           * @fn      zcl_SendDiscoverCmdsCmd
   1884           *
   1885           * @brief   Send a Discover Commands command
   1886           *
   1887           * @param   dstAddr - destination address
   1888           * @param   clusterID - cluster ID
   1889           * @param   cmdType - requesting command ID
   1890           * @param   pDiscoverCmd - discover command to be sent
   1891           * @param   direction - direction of the command
   1892           * @param   seqNum - transaction sequence number
   1893           *
   1894           * @return  ZSuccess if OK
   1895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1896          ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDiscoverCmdsCmd:
   1897                                            uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
   1898                                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1899          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740F         MOV       A,#0xf
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   1900            uint8 payload[2]; // size of startCmdID and maxCmdID
   1901            ZStatus_t status;
   1902          
   1903            payload[0] = pDiscoverCmd->startCmdID;
   \   000016   8882         MOV       DPL,R0
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   F0           MOVX      @DPTR,A
   1904            payload[1] = pDiscoverCmd->maxCmdID;
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C0E0         PUSH      A
   \   00002A   7401         MOV       A,#0x1
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   F0           MOVX      @DPTR,A
   \   000032   7411         MOV       A,#0x11
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FF           MOV       R7,A
   \   000039   7412         MOV       A,#0x12
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F5..         MOV       ?V0,A
   \   000041   7413         MOV       A,#0x13
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V1,A
   1905          
   1906            // Send message for either commands received or generated
   1907            if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   000049   740E         MOV       A,#0xe
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   6411         XRL       A,#0x11
   \   000051   A8..         MOV       R0,?XSP + 0
   \   000053   A9..         MOV       R1,?XSP + 1
   \   000055   88..         MOV       ?V2,R0
   \   000057   89..         MOV       ?V3,R1
   \   000059   78..         MOV       R0,#?V2
   \   00005B   7035         JNZ       ??zcl_SendDiscoverCmdsCmd_0
   1908            {
   1909              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
   1910                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \   00005D                ; Setup parameters for call to function zcl_SendCommand
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   75..02       MOV       ?V2,#0x2
   \   000063   75..00       MOV       ?V3,#0x0
   \   000066   78..         MOV       R0,#?V2
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   78..         MOV       R0,#?V1
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000070   E4           CLR       A
   \   000071   F5..         MOV       ?V2,A
   \   000073   78..         MOV       R0,#?V2
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007D   EF           MOV       A,R7
   \   00007E   F5..         MOV       ?V0,A
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000085   75..00       MOV       ?V0,#0x0
   \   000088   78..         MOV       R0,#?V0
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008D   75..11       MOV       ?V0,#0x11
   \   000090   8033         SJMP      ??zcl_SendDiscoverCmdsCmd_1
   1911            }
   1912            else  // generated
   1913            {
   1914              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
   1915                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \                     ??zcl_SendDiscoverCmdsCmd_0:
   \   000092                ; Setup parameters for call to function zcl_SendCommand
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   75..02       MOV       ?V2,#0x2
   \   000098   75..00       MOV       ?V3,#0x0
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A0   78..         MOV       R0,#?V1
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A5   E4           CLR       A
   \   0000A6   F5..         MOV       ?V2,A
   \   0000A8   78..         MOV       R0,#?V2
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   78..         MOV       R0,#?V0
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B2   EF           MOV       A,R7
   \   0000B3   F5..         MOV       ?V0,A
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BA   75..00       MOV       ?V0,#0x0
   \   0000BD   78..         MOV       R0,#?V0
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   75..13       MOV       ?V0,#0x13
   \                     ??zcl_SendDiscoverCmdsCmd_1:
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CA   EE           MOV       A,R6
   \   0000CB   F9           MOV       R1,A
   \   0000CC   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000CF   740B         MOV       A,#0xb
   \   0000D1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D4   E9           MOV       A,R1
   \   0000D5   F9           MOV       R1,A
   1916            }
   1917          
   1918            return ( status );
   \   0000D6   7402         MOV       A,#0x2
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DB   7F04         MOV       R7,#0x4
   \   0000DD   02....       LJMP      ?BANKED_LEAVE_XDATA
   1919          }
   1920          
   1921          /*********************************************************************
   1922           * @fn      zcl_SendDiscoverCmdsRspCmd
   1923           *
   1924           * @brief   Send a Discover Commands Response command
   1925           *
   1926           * @param   dstAddr - destination address
   1927           * @param   clusterID - cluster ID
   1928           * @param   pDiscoverRspCmd - response command to be sent
   1929           * @param   direction - direction of the command
   1930           * @param   seqNum - transaction sequence number
   1931           *
   1932           * @return  ZSuccess if OK
   1933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1934          ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverCmdsRspCmd:
   1935                                                uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
   1936                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1937          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V11,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V2,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V3,A
   1938            uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
   \   00001B   E5..         MOV       A,?V2
   \   00001D   2402         ADD       A,#0x2
   \   00001F   F5..         MOV       ?V4,A
   \   000021   E4           CLR       A
   \   000022   35..         ADDC      A,?V3
   \   000024   F5..         MOV       ?V5,A
   \   000026   85..82       MOV       DPL,?V4
   \   000029   F583         MOV       DPH,A
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   04           INC       A
   1939            uint8 *pCmdBuf;
   1940            uint8 i;
   1941            ZStatus_t status = ZSuccess;
   \   00002D   75..00       MOV       ?V10,#0x0
   1942          
   1943            // allocate memory
   1944            pCmdBuf = zcl_mem_alloc( payloadSize );
   \   000030   F5..         MOV       ?V6,A
   \   000032   75..00       MOV       ?V7,#0x0
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   FA           MOV       R2,A
   \   000036   AB..         MOV       R3,?V7
   \   000038   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV       ?V0,R2
   \   00003D   8B..         MOV       ?V1,R3
   1945            if ( pCmdBuf != NULL )
   \   00003F   EA           MOV       A,R2
   \   000040   4B           ORL       A,R3
   \   000041   7003         JNZ       $+5
   \   000043   02....       LJMP      ??zcl_SendDiscoverCmdsRspCmd_0 & 0xFFFF
   1946            {
   1947              uint8 *pBuf = pCmdBuf;
   1948          
   1949              // Load the buffer - serially
   1950              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   000046   85..82       MOV       DPL,?V2
   \   000049   85..83       MOV       DPH,?V3
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   A882         MOV       R0,DPL
   \   000055   A983         MOV       R1,DPH
   1951              for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
   \   000057   7A00         MOV       R2,#0x0
   \   000059   8022         SJMP      ??zcl_SendDiscoverCmdsRspCmd_1
   1952              {
   1953                *pBuf++ = pDiscoverRspCmd->pCmdID[i];
   \                     ??zcl_SendDiscoverCmdsRspCmd_2:
   \   00005B   EA           MOV       A,R2
   \   00005C   FC           MOV       R4,A
   \   00005D   85..82       MOV       DPL,?V2
   \   000060   85..83       MOV       DPH,?V3
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   2C           ADD       A,R4
   \   000068   FB           MOV       R3,A
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   3400         ADDC      A,#0x0
   \   00006D   8B82         MOV       DPL,R3
   \   00006F   F583         MOV       DPH,A
   \   000071   E0           MOVX      A,@DPTR
   \   000072   8882         MOV       DPL,R0
   \   000074   8983         MOV       DPH,R1
   \   000076   F0           MOVX      @DPTR,A
   \   000077   A3           INC       DPTR
   \   000078   A882         MOV       R0,DPL
   \   00007A   A983         MOV       R1,DPH
   1954              }
   \   00007C   0A           INC       R2
   \                     ??zcl_SendDiscoverCmdsRspCmd_1:
   \   00007D   85..82       MOV       DPL,?V4
   \   000080   85..83       MOV       DPH,?V5
   \   000083   E0           MOVX      A,@DPTR
   \   000084   FB           MOV       R3,A
   \   000085   EA           MOV       A,R2
   \   000086   C3           CLR       C
   \   000087   9B           SUBB      A,R3
   \   000088   40D1         JC        ??zcl_SendDiscoverCmdsRspCmd_2
   1955          
   1956              // Send response message for either commands received or generated
   1957              if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   00008A   85..82       MOV       DPL,?V2
   \   00008D   85..83       MOV       DPH,?V3
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F8           MOV       R0,A
   \   000093   7418         MOV       A,#0x18
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F9           MOV       R1,A
   \   00009A   7419         MOV       A,#0x19
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   FA           MOV       R2,A
   \   0000A1   741A         MOV       A,#0x1a
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   FB           MOV       R3,A
   \   0000A8   7411         MOV       A,#0x11
   \   0000AA   68           XRL       A,R0
   \   0000AB   7039         JNZ       ??zcl_SendDiscoverCmdsRspCmd_3
   1958              {
   1959                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
   1960                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   0000AD                ; Setup parameters for call to function zcl_SendCommand
   \   0000AD   78..         MOV       R0,#?V0
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B2   78..         MOV       R0,#?V6
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B7   EB           MOV       A,R3
   \   0000B8   F5..         MOV       ?V2,A
   \   0000BA   78..         MOV       R0,#?V2
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BF   E4           CLR       A
   \   0000C0   F5..         MOV       ?V2,A
   \   0000C2   F5..         MOV       ?V3,A
   \   0000C4   78..         MOV       R0,#?V2
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C9   EA           MOV       A,R2
   \   0000CA   F5..         MOV       ?V2,A
   \   0000CC   78..         MOV       R0,#?V2
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D1   E9           MOV       A,R1
   \   0000D2   F5..         MOV       ?V2,A
   \   0000D4   78..         MOV       R0,#?V2
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D9   75..00       MOV       ?V2,#0x0
   \   0000DC   78..         MOV       R0,#?V2
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E1   75..12       MOV       ?V2,#0x12
   \   0000E4   803C         SJMP      ??zcl_SendDiscoverCmdsRspCmd_4
   1961              }
   1962              else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zcl_SendDiscoverCmdsRspCmd_3:
   \   0000E6   7413         MOV       A,#0x13
   \   0000E8   68           XRL       A,R0
   \   0000E9   7051         JNZ       ??zcl_SendDiscoverCmdsRspCmd_5
   1963              {
   1964                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
   1965                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   0000EB                ; Setup parameters for call to function zcl_SendCommand
   \   0000EB   78..         MOV       R0,#?V0
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F0   78..         MOV       R0,#?V6
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   EB           MOV       A,R3
   \   0000F6   F5..         MOV       ?V2,A
   \   0000F8   78..         MOV       R0,#?V2
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FD   E4           CLR       A
   \   0000FE   F5..         MOV       ?V2,A
   \   000100   F5..         MOV       ?V3,A
   \   000102   78..         MOV       R0,#?V2
   \   000104   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000107   EA           MOV       A,R2
   \   000108   F5..         MOV       ?V2,A
   \   00010A   78..         MOV       R0,#?V2
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010F   E9           MOV       A,R1
   \   000110   F5..         MOV       ?V2,A
   \   000112   78..         MOV       R0,#?V2
   \   000114   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000117   75..00       MOV       ?V2,#0x0
   \   00011A   78..         MOV       R0,#?V2
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011F   75..14       MOV       ?V2,#0x14
   \                     ??zcl_SendDiscoverCmdsRspCmd_4:
   \   000122   78..         MOV       R0,#?V2
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000127   EE           MOV       A,R6
   \   000128   FC           MOV       R4,A
   \   000129   EF           MOV       A,R7
   \   00012A   FD           MOV       R5,A
   \   00012B   AA..         MOV       R2,?V8
   \   00012D   AB..         MOV       R3,?V9
   \   00012F   A9..         MOV       R1,?V11
   \   000131   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000134   740B         MOV       A,#0xb
   \   000136   12....       LCALL     ?DEALLOC_XSTACK8
   \   000139   E9           MOV       A,R1
   \   00013A   F5..         MOV       ?V10,A
   1966              }
   1967          
   1968              zcl_mem_free( pCmdBuf );
   \                     ??zcl_SendDiscoverCmdsRspCmd_5:
   \   00013C                ; Setup parameters for call to function osal_mem_free
   \   00013C   AA..         MOV       R2,?V0
   \   00013E   AB..         MOV       R3,?V1
   \   000140   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000143   8003         SJMP      ??zcl_SendDiscoverCmdsRspCmd_6
   1969            }
   1970            else
   1971            {
   1972              status = ZMemError;
   \                     ??zcl_SendDiscoverCmdsRspCmd_0:
   \   000145   75..10       MOV       ?V10,#0x10
   1973            }
   1974          
   1975            return ( status );
   \                     ??zcl_SendDiscoverCmdsRspCmd_6:
   \   000148   A9..         MOV       R1,?V10
   \   00014A   7F0E         MOV       R7,#0xe
   \   00014C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1976          }
   1977          
   1978          /*********************************************************************
   1979           * @fn      zcl_SendDiscoverAttrsCmd
   1980           *
   1981           * @brief   Send a Discover Attributes command
   1982           *
   1983           * @param   dstAddr - destination address
   1984           * @param   clusterID - cluster ID
   1985           * @param   pDiscoverCmd - discover command to be sent
   1986           * @param   direction - direction of the command
   1987           * @param   seqNum - transaction sequence number
   1988           *
   1989           * @return  ZSuccess if OK
   1990           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1991          ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsCmd:
   1992                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
   1993                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1994          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   1995            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   1996            uint8 *buf;
   1997            ZStatus_t status;
   1998          
   1999            buf = zcl_mem_alloc( dataLen );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A03         MOV       R2,#0x3
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V4,R2
   \   000018   8B..         MOV       ?V5,R3
   2000            if ( buf != NULL )
   \   00001A   EA           MOV       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   7003         JNZ       $+5
   \   00001E   02....       LJMP      ??zcl_SendDiscoverAttrsCmd_0 & 0xFFFF
   \   000021   7410         MOV       A,#0x10
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   2001            {
   2002              // Load the buffer - serially
   2003              uint8 *pBuf = buf;
   2004              *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
   \   00002B   8882         MOV       DPL,R0
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   F0           MOVX      @DPTR,A
   2005              *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
   \   000035   8882         MOV       DPL,R0
   \   000037   8983         MOV       DPH,R1
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   8A82         MOV       DPL,R2
   \   00003D   8B83         MOV       DPH,R3
   \   00003F   A3           INC       DPTR
   \   000040   F0           MOVX      @DPTR,A
   2006              *pBuf++ = pDiscoverCmd->maxAttrIDs;
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   8A82         MOV       DPL,R2
   \   00004A   8B83         MOV       DPH,R3
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   F0           MOVX      @DPTR,A
   2007          
   2008              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
   2009                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00004F                ; Setup parameters for call to function zcl_SendCommand
   \   00004F   78..         MOV       R0,#?V4
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   75..03       MOV       ?V6,#0x3
   \   000057   75..00       MOV       ?V7,#0x0
   \   00005A   78..         MOV       R0,#?V6
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   7418         MOV       A,#0x18
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F5..         MOV       ?V3,A
   \   000067   78..         MOV       R0,#?V3
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   E4           CLR       A
   \   00006D   F5..         MOV       ?V6,A
   \   00006F   78..         MOV       R0,#?V6
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   741A         MOV       A,#0x1a
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F5..         MOV       ?V3,A
   \   00007C   78..         MOV       R0,#?V3
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000081   741A         MOV       A,#0x1a
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F5..         MOV       ?V3,A
   \   000089   78..         MOV       R0,#?V3
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008E   75..00       MOV       ?V3,#0x0
   \   000091   78..         MOV       R0,#?V3
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000096   75..0C       MOV       ?V3,#0xc
   \   000099   78..         MOV       R0,#?V3
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009E   AC..         MOV       R4,?V0
   \   0000A0   AD..         MOV       R5,?V1
   \   0000A2   EE           MOV       A,R6
   \   0000A3   FA           MOV       R2,A
   \   0000A4   EF           MOV       A,R7
   \   0000A5   FB           MOV       R3,A
   \   0000A6   A9..         MOV       R1,?V2
   \   0000A8   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000AB   740B         MOV       A,#0xb
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B0   E9           MOV       A,R1
   \   0000B1   FE           MOV       R6,A
   2010              zcl_mem_free( buf );
   \   0000B2                ; Setup parameters for call to function osal_mem_free
   \   0000B2   AA..         MOV       R2,?V4
   \   0000B4   AB..         MOV       R3,?V5
   \   0000B6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000B9   8002         SJMP      ??zcl_SendDiscoverAttrsCmd_1
   2011            }
   2012            else
   2013            {
   2014              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsCmd_0:
   \   0000BB   7E10         MOV       R6,#0x10
   2015            }
   2016          
   2017            return ( status );
   \                     ??zcl_SendDiscoverAttrsCmd_1:
   \   0000BD   EE           MOV       A,R6
   \   0000BE   F9           MOV       R1,A
   \   0000BF   7F08         MOV       R7,#0x8
   \   0000C1   02....       LJMP      ?BANKED_LEAVE_XDATA
   2018          }
   2019          
   2020          /*********************************************************************
   2021           * @fn      zcl_SendDiscoverAttrsRspCmd
   2022           *
   2023           * @brief   Send a Discover Attributes Response command
   2024           *
   2025           * @param   dstAddr - destination address
   2026           * @param   clusterID - cluster ID
   2027           * @param   reportRspCmd - report response command to be sent
   2028           * @param   direction - direction of the command
   2029           * @param   seqNum - transaction sequence number
   2030           *
   2031           * @return  ZSuccess if OK
   2032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2033          ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsRspCmd:
   2034                                    uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
   2035                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2036          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V8,R1
   \   000007   8A..         MOV       ?V10,R2
   \   000009   8B..         MOV       ?V11,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V5,A
   2037            uint16 dataLen = 1; // Discovery complete
   2038            uint8 *buf;
   2039            ZStatus_t status;
   2040          
   2041            // calculate the size of the command
   2042            dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   \   00001B   85..82       MOV       DPL,?V4
   \   00001E   F583         MOV       DPH,A
   \   000020   A3           INC       DPTR
   \   000021   8582..       MOV       ?V2,DPL
   \   000024   8583..       MOV       ?V3,DPH
   \   000027   E0           MOVX      A,@DPTR
   \   000028   75F003       MOV       B,#0x3
   \   00002B   A4           MUL       AB
   \   00002C   A9F0         MOV       R1,B
   \   00002E   2401         ADD       A,#0x1
   \   000030   F5..         MOV       ?V6,A
   \   000032   E4           CLR       A
   \   000033   39           ADDC      A,R1
   \   000034   F5..         MOV       ?V7,A
   2043          
   2044            buf = zcl_mem_alloc( dataLen );
   \   000036                ; Setup parameters for call to function osal_mem_alloc
   \   000036   AA..         MOV       R2,?V6
   \   000038   FB           MOV       R3,A
   \   000039   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003C   8A..         MOV       ?V0,R2
   \   00003E   8B..         MOV       ?V1,R3
   2045            if ( buf != NULL )
   \   000040   EA           MOV       A,R2
   \   000041   4B           ORL       A,R3
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??zcl_SendDiscoverAttrsRspCmd_0 & 0xFFFF
   2046            {
   2047              // Load the buffer - serially
   2048              uint8 i;
   2049              uint8 *pBuf = buf;
   2050          
   2051              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   000047   85..82       MOV       DPL,?V4
   \   00004A   85..83       MOV       DPH,?V5
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   A882         MOV       R0,DPL
   \   000056   A983         MOV       R1,DPH
   2052          
   2053              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \   000058   7A00         MOV       R2,#0x0
   \   00005A   804A         SJMP      ??zcl_SendDiscoverAttrsRspCmd_1
   2054              {
   2055                *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   \                     ??zcl_SendDiscoverAttrsRspCmd_2:
   \   00005C   EA           MOV       A,R2
   \   00005D   75F003       MOV       B,#0x3
   \   000060   A4           MUL       AB
   \   000061   FC           MOV       R4,A
   \   000062   ADF0         MOV       R5,B
   \   000064   E5..         MOV       A,?V4
   \   000066   2C           ADD       A,R4
   \   000067   FC           MOV       R4,A
   \   000068   E5..         MOV       A,?V5
   \   00006A   3D           ADDC      A,R5
   \   00006B   FD           MOV       R5,A
   \   00006C   EC           MOV       A,R4
   \   00006D   2402         ADD       A,#0x2
   \   00006F   F5..         MOV       ?V12,A
   \   000071   E4           CLR       A
   \   000072   3D           ADDC      A,R5
   \   000073   F5..         MOV       ?V13,A
   \   000075   85..82       MOV       DPL,?V12
   \   000078   F583         MOV       DPH,A
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   8882         MOV       DPL,R0
   \   00007D   8983         MOV       DPH,R1
   \   00007F   F0           MOVX      @DPTR,A
   2056                *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   \   000080   85..82       MOV       DPL,?V12
   \   000083   85..83       MOV       DPH,?V13
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   8882         MOV       DPL,R0
   \   00008A   8983         MOV       DPH,R1
   \   00008C   A3           INC       DPTR
   \   00008D   F0           MOVX      @DPTR,A
   2057                *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
   \   00008E   8C82         MOV       DPL,R4
   \   000090   8D83         MOV       DPH,R5
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   8882         MOV       DPL,R0
   \   000099   8983         MOV       DPH,R1
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   E8           MOV       A,R0
   \   00009F   2403         ADD       A,#0x3
   \   0000A1   F8           MOV       R0,A
   \   0000A2   5001         JNC       ??zcl_SendDiscoverAttrsRspCmd_3
   \   0000A4   09           INC       R1
   2058              }
   \                     ??zcl_SendDiscoverAttrsRspCmd_3:
   \   0000A5   0A           INC       R2
   \                     ??zcl_SendDiscoverAttrsRspCmd_1:
   \   0000A6   85..82       MOV       DPL,?V2
   \   0000A9   85..83       MOV       DPH,?V3
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   FB           MOV       R3,A
   \   0000AE   EA           MOV       A,R2
   \   0000AF   C3           CLR       C
   \   0000B0   9B           SUBB      A,R3
   \   0000B1   40A9         JC        ??zcl_SendDiscoverAttrsRspCmd_2
   2059          
   2060              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
   2061                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   0000B3                ; Setup parameters for call to function zcl_SendCommand
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B8   78..         MOV       R0,#?V6
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BD   7420         MOV       A,#0x20
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F5..         MOV       ?V2,A
   \   0000C5   78..         MOV       R0,#?V2
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CA   E4           CLR       A
   \   0000CB   F5..         MOV       ?V2,A
   \   0000CD   F5..         MOV       ?V3,A
   \   0000CF   78..         MOV       R0,#?V2
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D4   7422         MOV       A,#0x22
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   F5..         MOV       ?V2,A
   \   0000DC   78..         MOV       R0,#?V2
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E1   7422         MOV       A,#0x22
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   F5..         MOV       ?V2,A
   \   0000E9   78..         MOV       R0,#?V2
   \   0000EB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EE   75..00       MOV       ?V2,#0x0
   \   0000F1   78..         MOV       R0,#?V2
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F6   75..0D       MOV       ?V2,#0xd
   \   0000F9   78..         MOV       R0,#?V2
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FE   EE           MOV       A,R6
   \   0000FF   FC           MOV       R4,A
   \   000100   EF           MOV       A,R7
   \   000101   FD           MOV       R5,A
   \   000102   AA..         MOV       R2,?V10
   \   000104   AB..         MOV       R3,?V11
   \   000106   A9..         MOV       R1,?V8
   \   000108   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00010B   740B         MOV       A,#0xb
   \   00010D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000110   E9           MOV       A,R1
   \   000111   FE           MOV       R6,A
   2062              zcl_mem_free( buf );
   \   000112                ; Setup parameters for call to function osal_mem_free
   \   000112   AA..         MOV       R2,?V0
   \   000114   AB..         MOV       R3,?V1
   \   000116   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000119   8002         SJMP      ??zcl_SendDiscoverAttrsRspCmd_4
   2063            }
   2064            else
   2065            {
   2066              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsRspCmd_0:
   \   00011B   7E10         MOV       R6,#0x10
   2067            }
   2068          
   2069            return ( status );
   \                     ??zcl_SendDiscoverAttrsRspCmd_4:
   \   00011D   EE           MOV       A,R6
   \   00011E   F9           MOV       R1,A
   \   00011F   7F10         MOV       R7,#0x10
   \   000121   02....       LJMP      ?BANKED_LEAVE_XDATA
   2070          }
   2071          
   2072          /*********************************************************************
   2073           * @fn      zcl_SendDiscoverAttrsExt
   2074           *
   2075           * @brief   Send a Discover Attributes Extended command
   2076           *
   2077           * @param   dstAddr - destination address
   2078           * @param   clusterID - cluster ID
   2079           * @param   pDiscoverAttrsExt:
   2080           *            - startAttrID: the first attribute to be selected
   2081           *            - maxAttrIDs: maximum number of returned attributes
   2082           * @param   direction - direction of the command
   2083           * @param   seqNum - transaction sequence number
   2084           *
   2085           * @return  ZSuccess if OK
   2086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2087          ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExt:
   2088                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
   2089                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2090          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   740F         MOV       A,#0xf
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   2091            uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
   2092            ZStatus_t status;
   2093          
   2094            // Load the buffer - serially
   2095            buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
   \   000016   8882         MOV       DPL,R0
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   F0           MOVX      @DPTR,A
   2096            buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C0E0         PUSH      A
   \   00002A   7401         MOV       A,#0x1
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   F0           MOVX      @DPTR,A
   2097            buf[2] = pDiscoverAttrsExt->maxAttrIDs;
   \   000032   8882         MOV       DPL,R0
   \   000034   8983         MOV       DPH,R1
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C0E0         PUSH      A
   \   00003B   7402         MOV       A,#0x2
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   D0E0         POP       A
   \   000042   F0           MOVX      @DPTR,A
   2098          
   2099            status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
   2100                                      direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
   2101          
   2102            return ( status );
   \   000043                ; Setup parameters for call to function zcl_SendCommand
   \   000043   A8..         MOV       R0,?XSP + 0
   \   000045   A9..         MOV       R1,?XSP + 1
   \   000047   88..         MOV       ?V2,R0
   \   000049   89..         MOV       ?V3,R1
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   75..03       MOV       ?V2,#0x3
   \   000053   75..00       MOV       ?V3,#0x0
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   7417         MOV       A,#0x17
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F5..         MOV       ?V1,A
   \   000063   78..         MOV       R0,#?V1
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000068   E4           CLR       A
   \   000069   F5..         MOV       ?V2,A
   \   00006B   78..         MOV       R0,#?V2
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7419         MOV       A,#0x19
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F5..         MOV       ?V1,A
   \   000078   78..         MOV       R0,#?V1
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007D   7419         MOV       A,#0x19
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F5..         MOV       ?V1,A
   \   000085   78..         MOV       R0,#?V1
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008A   75..00       MOV       ?V1,#0x0
   \   00008D   78..         MOV       R0,#?V1
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000092   75..15       MOV       ?V1,#0x15
   \   000095   78..         MOV       R0,#?V1
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009A   A9..         MOV       R1,?V0
   \   00009C   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00009F   740B         MOV       A,#0xb
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A4   7403         MOV       A,#0x3
   \   0000A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A9   7F04         MOV       R7,#0x4
   \   0000AB   02....       LJMP      ?BANKED_LEAVE_XDATA
   2103          }
   2104          
   2105          /*********************************************************************
   2106           * @fn      zcl_SendDiscoverAttrsExtRsp
   2107           *
   2108           * @brief   Send a Discover Attributes Extended Response command
   2109           *
   2110           * @param   dstAddr - destination address
   2111           * @param   clusterID - cluster ID
   2112           * @param   pDiscoverRspCmd:
   2113           *            - discComplete: indicates whether all requested attributes returned
   2114           *            - attrID: attribute ID
   2115           *            - attrDataType: data type of the given attribute
   2116           *            - attrAccessControl: access control of the given attribute
   2117           * @param   direction - direction of the command
   2118           * @param   seqNum - transaction sequence number
   2119           *
   2120           * @return  ZSuccess if OK
   2121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2122          ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExtRsp:
   2123                                                uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
   2124                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2125          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V10,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V5,A
   2126            uint8 *buf;
   2127            uint8 i;
   2128            uint16 dataLen = 1; // Discovery complete
   2129            ZStatus_t status;
   2130          
   2131            // calculate the size of the command
   2132            dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
   \   00001B   85..82       MOV       DPL,?V4
   \   00001E   F583         MOV       DPH,A
   \   000020   A3           INC       DPTR
   \   000021   8582..       MOV       ?V2,DPL
   \   000024   8583..       MOV       ?V3,DPH
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V0,A
   \   00002A   75..00       MOV       ?V1,#0x0
   \   00002D   7402         MOV       A,#0x2
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?S_SHL
   \   000034   E5..         MOV       A,?V0
   \   000036   2401         ADD       A,#0x1
   \   000038   F5..         MOV       ?V6,A
   \   00003A   E4           CLR       A
   \   00003B   35..         ADDC      A,?V1
   \   00003D   F5..         MOV       ?V7,A
   2133          
   2134            buf = zcl_mem_alloc( dataLen );
   \   00003F                ; Setup parameters for call to function osal_mem_alloc
   \   00003F   AA..         MOV       R2,?V6
   \   000041   FB           MOV       R3,A
   \   000042   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000045   8A..         MOV       ?V0,R2
   \   000047   8B..         MOV       ?V1,R3
   2135            if ( buf != NULL )
   \   000049   EA           MOV       A,R2
   \   00004A   4B           ORL       A,R3
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??zcl_SendDiscoverAttrsExtRsp_0 & 0xFFFF
   2136            {
   2137              // Load the buffer - serially
   2138              uint8 *pBuf = buf;
   2139              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   000050   85..82       MOV       DPL,?V4
   \   000053   85..83       MOV       DPH,?V5
   \   000056   E0           MOVX      A,@DPTR
   \   000057   8A82         MOV       DPL,R2
   \   000059   8B83         MOV       DPH,R3
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   AA82         MOV       R2,DPL
   \   00005F   AB83         MOV       R3,DPH
   2140              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \   000061   7900         MOV       R1,#0x0
   \   000063   8063         SJMP      ??zcl_SendDiscoverAttrsExtRsp_1
   2141              {
   2142                *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   \                     ??zcl_SendDiscoverAttrsExtRsp_2:
   \   000065   E9           MOV       A,R1
   \   000066   F5..         MOV       ?V12,A
   \   000068   75..00       MOV       ?V13,#0x0
   \   00006B   7402         MOV       A,#0x2
   \   00006D   78..         MOV       R0,#?V12
   \   00006F   12....       LCALL     ?S_SHL
   \   000072   E5..         MOV       A,?V4
   \   000074   25..         ADD       A,?V12
   \   000076   FC           MOV       R4,A
   \   000077   E5..         MOV       A,?V5
   \   000079   35..         ADDC      A,?V13
   \   00007B   FD           MOV       R5,A
   \   00007C   EC           MOV       A,R4
   \   00007D   2402         ADD       A,#0x2
   \   00007F   F5..         MOV       ?V12,A
   \   000081   E4           CLR       A
   \   000082   3D           ADDC      A,R5
   \   000083   F5..         MOV       ?V13,A
   \   000085   85..82       MOV       DPL,?V12
   \   000088   F583         MOV       DPH,A
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   8A82         MOV       DPL,R2
   \   00008D   8B83         MOV       DPH,R3
   \   00008F   F0           MOVX      @DPTR,A
   2143                *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   \   000090   85..82       MOV       DPL,?V12
   \   000093   85..83       MOV       DPH,?V13
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   8A82         MOV       DPL,R2
   \   00009A   8B83         MOV       DPH,R3
   \   00009C   A3           INC       DPTR
   \   00009D   F0           MOVX      @DPTR,A
   2144                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
   \   00009E   8C82         MOV       DPL,R4
   \   0000A0   8D83         MOV       DPH,R5
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   8A82         MOV       DPL,R2
   \   0000A9   8B83         MOV       DPH,R3
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   F0           MOVX      @DPTR,A
   2145                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
   \   0000AE   8C82         MOV       DPL,R4
   \   0000B0   8D83         MOV       DPH,R5
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   8A82         MOV       DPL,R2
   \   0000BA   8B83         MOV       DPH,R3
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   EA           MOV       A,R2
   \   0000C1   2404         ADD       A,#0x4
   \   0000C3   FA           MOV       R2,A
   \   0000C4   5001         JNC       ??zcl_SendDiscoverAttrsExtRsp_3
   \   0000C6   0B           INC       R3
   2146              }
   \                     ??zcl_SendDiscoverAttrsExtRsp_3:
   \   0000C7   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsExtRsp_1:
   \   0000C8   85..82       MOV       DPL,?V2
   \   0000CB   85..83       MOV       DPH,?V3
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F8           MOV       R0,A
   \   0000D0   E9           MOV       A,R1
   \   0000D1   C3           CLR       C
   \   0000D2   98           SUBB      A,R0
   \   0000D3   4090         JC        ??zcl_SendDiscoverAttrsExtRsp_2
   2147          
   2148              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
   2149                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   0000D5                ; Setup parameters for call to function zcl_SendCommand
   \   0000D5   78..         MOV       R0,#?V0
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DA   78..         MOV       R0,#?V6
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DF   7420         MOV       A,#0x20
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   F5..         MOV       ?V2,A
   \   0000E7   78..         MOV       R0,#?V2
   \   0000E9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EC   E4           CLR       A
   \   0000ED   F5..         MOV       ?V2,A
   \   0000EF   F5..         MOV       ?V3,A
   \   0000F1   78..         MOV       R0,#?V2
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F6   7422         MOV       A,#0x22
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   F5..         MOV       ?V2,A
   \   0000FE   78..         MOV       R0,#?V2
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000103   7422         MOV       A,#0x22
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F5..         MOV       ?V2,A
   \   00010B   78..         MOV       R0,#?V2
   \   00010D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000110   75..00       MOV       ?V2,#0x0
   \   000113   78..         MOV       R0,#?V2
   \   000115   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000118   75..16       MOV       ?V2,#0x16
   \   00011B   78..         MOV       R0,#?V2
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000120   EE           MOV       A,R6
   \   000121   FC           MOV       R4,A
   \   000122   EF           MOV       A,R7
   \   000123   FD           MOV       R5,A
   \   000124   AA..         MOV       R2,?V8
   \   000126   AB..         MOV       R3,?V9
   \   000128   A9..         MOV       R1,?V10
   \   00012A   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00012D   740B         MOV       A,#0xb
   \   00012F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000132   E9           MOV       A,R1
   \   000133   FE           MOV       R6,A
   2150              zcl_mem_free( buf );
   \   000134                ; Setup parameters for call to function osal_mem_free
   \   000134   AA..         MOV       R2,?V0
   \   000136   AB..         MOV       R3,?V1
   \   000138   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00013B   8002         SJMP      ??zcl_SendDiscoverAttrsExtRsp_4
   2151            }
   2152            else
   2153            {
   2154              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsExtRsp_0:
   \   00013D   7E10         MOV       R6,#0x10
   2155            }
   2156          
   2157            return ( status );
   \                     ??zcl_SendDiscoverAttrsExtRsp_4:
   \   00013F   EE           MOV       A,R6
   \   000140   F9           MOV       R1,A
   \   000141   7F10         MOV       R7,#0x10
   \   000143   02....       LJMP      ?BANKED_LEAVE_XDATA
   2158          }
   2159          #endif // ZCL_DISCOVER
   2160          
   2161          /*********************************************************************
   2162           * @fn      zcl_ProcessMessageMSG
   2163           *
   2164           * @brief   Data message processor callback.  This function processes
   2165           *          any incoming data - probably from other devices.  So, based
   2166           *          on cluster ID, perform the intended action.
   2167           *
   2168           * @param   pkt - incoming message
   2169           *
   2170           * @return  zclProcMsgStatus_t
   2171           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2172          zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zcl_ProcessMessageMSG:
   2173          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   2174            endPointDesc_t *epDesc;
   2175            zclIncoming_t inMsg;
   2176            zclLibPlugin_t *pInPlugin;
   2177            zclDefaultRspCmd_t defautlRspCmd;
   2178            uint8 options;
   2179            uint8 securityEnable;
   2180            uint8 interPanMsg;
   2181            ZStatus_t status = ZFailure;
   \   00000E   7E01         MOV       R6,#0x1
   2182            uint8 defaultResponseSent = FALSE;
   \   000010   7F00         MOV       R7,#0x0
   2183          
   2184            if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
   \   000012   EA           MOV       A,R2
   \   000013   2420         ADD       A,#0x20
   \   000015   F5..         MOV       ?V4,A
   \   000017   E4           CLR       A
   \   000018   35..         ADDC      A,?V1
   \   00001A   F5..         MOV       ?V5,A
   \   00001C   85..82       MOV       DPL,?V4
   \   00001F   F583         MOV       DPH,A
   \   000021   C3           CLR       C
   \   000022   E0           MOVX      A,@DPTR
   \   000023   9403         SUBB      A,#0x3
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   9400         SUBB      A,#0x0
   \   000029   5005         JNC       ??zcl_ProcessMessageMSG_0
   2185            {
   2186              return ( ZCL_PROC_INVALID );   // Error, ignore the message
   \   00002B   7901         MOV       R1,#0x1
   \   00002D   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2187            }
   2188          
   2189            // Initialize
   2190            rawAFMsg = (afIncomingMSGPacket_t *)pkt;
   \                     ??zcl_ProcessMessageMSG_0:
   \   000030   90....       MOV       DPTR,#rawAFMsg
   \   000033   EA           MOV       A,R2
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   EB           MOV       A,R3
   \   000037   F0           MOVX      @DPTR,A
   2191            inMsg.msg = pkt;
   \   000038   7402         MOV       A,#0x2
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   EA           MOV       A,R2
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   EB           MOV       A,R3
   \   000041   F0           MOVX      @DPTR,A
   2192            inMsg.attrCmd = NULL;
   \   000042   740E         MOV       A,#0xe
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E4           CLR       A
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   F0           MOVX      @DPTR,A
   2193            inMsg.pData = NULL;
   \   00004B   740A         MOV       A,#0xa
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   E4           CLR       A
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   F0           MOVX      @DPTR,A
   2194            inMsg.pDataLen = 0;
   \   000054   740C         MOV       A,#0xc
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   E4           CLR       A
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   F0           MOVX      @DPTR,A
   2195          
   2196            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   00005D   EA           MOV       A,R2
   \   00005E   2422         ADD       A,#0x22
   \   000060   F5..         MOV       ?V2,A
   \   000062   E4           CLR       A
   \   000063   35..         ADDC      A,?V1
   \   000065   F5..         MOV       ?V3,A
   \   000067                ; Setup parameters for call to function zclParseHdr
   \   000067   85..82       MOV       DPL,?V2
   \   00006A   F583         MOV       DPH,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FC           MOV       R4,A
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   FD           MOV       R5,A
   \   000071   7404         MOV       A,#0x4
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   AA82         MOV       R2,DPL
   \   000078   AB83         MOV       R3,DPH
   \   00007A   12....       LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
   \   00007D   8A..         MOV       ?V6,R2
   \   00007F   8B..         MOV       ?V7,R3
   \   000081   A8..         MOV       R0,?V6
   \   000083   A9..         MOV       R1,?V7
   \   000085   740A         MOV       A,#0xa
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   EA           MOV       A,R2
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   A3           INC       DPTR
   \   00008D   EB           MOV       A,R3
   \   00008E   F0           MOVX      @DPTR,A
   2197            inMsg.pDataLen = pkt->cmd.DataLength;
   \   00008F   85..82       MOV       DPL,?V4
   \   000092   85..83       MOV       DPH,?V5
   \   000095   E0           MOVX      A,@DPTR
   \   000096   FA           MOV       R2,A
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   FB           MOV       R3,A
   \   00009A   740C         MOV       A,#0xc
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   EA           MOV       A,R2
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   EB           MOV       A,R3
   \   0000A3   F0           MOVX      @DPTR,A
   2198            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \   0000A4   EA           MOV       A,R2
   \   0000A5   C3           CLR       C
   \   0000A6   98           SUBB      A,R0
   \   0000A7   F8           MOV       R0,A
   \   0000A8   EB           MOV       A,R3
   \   0000A9   99           SUBB      A,R1
   \   0000AA   F9           MOV       R1,A
   \   0000AB   85..82       MOV       DPL,?V2
   \   0000AE   85..83       MOV       DPH,?V3
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   28           ADD       A,R0
   \   0000B3   F8           MOV       R0,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   39           ADDC      A,R1
   \   0000B7   F9           MOV       R1,A
   \   0000B8   740C         MOV       A,#0xc
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   E8           MOV       A,R0
   \   0000BE   F0           MOVX      @DPTR,A
   \   0000BF   A3           INC       DPTR
   \   0000C0   E9           MOV       A,R1
   \   0000C1   F0           MOVX      @DPTR,A
   2199          
   2200            // Temporary workaround to allow callback functions access to the
   2201            // transaction sequence number.  Callback functions will call
   2202            // zcl_getParsedTransSeqNum() to retrieve this number.
   2203            savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
   \   0000C2   7408         MOV       A,#0x8
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   0000CB   F0           MOVX      @DPTR,A
   2204          
   2205            // Find the wanted endpoint
   2206            epDesc = afFindEndPointDesc( pkt->endPoint );
   \   0000CC   E5..         MOV       A,?V0
   \   0000CE   2414         ADD       A,#0x14
   \   0000D0   F5..         MOV       ?V2,A
   \   0000D2   E4           CLR       A
   \   0000D3   35..         ADDC      A,?V1
   \   0000D5   F5..         MOV       ?V3,A
   \   0000D7                ; Setup parameters for call to function afFindEndPointDesc
   \   0000D7   85..82       MOV       DPL,?V2
   \   0000DA   F583         MOV       DPH,A
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   F9           MOV       R1,A
   \   0000DE   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000E1   8B..         MOV       ?V5,R3
   \   0000E3   A9..         MOV       R1,?V5
   2207            if ( epDesc == NULL )
   \   0000E5   EA           MOV       A,R2
   \   0000E6   49           ORL       A,R1
   \   0000E7   700C         JNZ       ??zcl_ProcessMessageMSG_2
   2208            {
   2209              rawAFMsg = NULL;
   \   0000E9   90....       MOV       DPTR,#rawAFMsg
   \   0000EC   E4           CLR       A
   \   0000ED   F0           MOVX      @DPTR,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   F0           MOVX      @DPTR,A
   2210              return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
   \   0000F0   7902         MOV       R1,#0x2
   \   0000F2   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2211            }
   2212          
   2213            if ( ( epDesc->simpleDesc == NULL ) ||
   2214                 ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
   2215                                          inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??zcl_ProcessMessageMSG_2:
   \   0000F5   EA           MOV       A,R2
   \   0000F6   2404         ADD       A,#0x4
   \   0000F8   F5..         MOV       ?V6,A
   \   0000FA   E4           CLR       A
   \   0000FB   39           ADDC      A,R1
   \   0000FC   F5..         MOV       ?V7,A
   \   0000FE   85..82       MOV       DPL,?V6
   \   000101   F583         MOV       DPH,A
   \   000103   E0           MOVX      A,@DPTR
   \   000104   F8           MOV       R0,A
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   8882         MOV       DPL,R0
   \   000109   F583         MOV       DPH,A
   \   00010B   E582         MOV       A,DPL
   \   00010D   4583         ORL       A,DPH
   \   00010F   603D         JZ        ??zcl_ProcessMessageMSG_3
   \   000111   E5..         MOV       A,?V0
   \   000113   2404         ADD       A,#0x4
   \   000115   F5..         MOV       ?V4,A
   \   000117   E4           CLR       A
   \   000118   35..         ADDC      A,?V1
   \   00011A   F5..         MOV       ?V5,A
   \   00011C                ; Setup parameters for call to function zcl_DeviceOperational
   \   00011C   A3           INC       DPTR
   \   00011D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000120   740B         MOV       A,#0xb
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   E0           MOVX      A,@DPTR
   \   000126   FD           MOV       R5,A
   \   000127   7406         MOV       A,#0x6
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   5403         ANL       A,#0x3
   \   00012F   FC           MOV       R4,A
   \   000130   85..82       MOV       DPL,?V4
   \   000133   85..83       MOV       DPH,?V5
   \   000136   E0           MOVX      A,@DPTR
   \   000137   FA           MOV       R2,A
   \   000138   A3           INC       DPTR
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   FB           MOV       R3,A
   \   00013B   85..82       MOV       DPL,?V2
   \   00013E   85..83       MOV       DPH,?V3
   \   000141   E0           MOVX      A,@DPTR
   \   000142   F9           MOV       R1,A
   \   000143   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   000146   7402         MOV       A,#0x2
   \   000148   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014B   E9           MOV       A,R1
   \   00014C   700C         JNZ       ??zcl_ProcessMessageMSG_4
   2216            {
   2217              rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_3:
   \   00014E   90....       MOV       DPTR,#rawAFMsg
   \   000151   E4           CLR       A
   \   000152   F0           MOVX      @DPTR,A
   \   000153   A3           INC       DPTR
   \   000154   F0           MOVX      @DPTR,A
   2218              return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
   \   000155   7903         MOV       R1,#0x3
   \   000157   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2219            }
   2220          
   2221          #if defined ( INTER_PAN )
   2222            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   2223            {
   2224              // No foundation command is supported thru Inter-PAN communication.
   2225              // But the Light Link cluster uses a different Frame Control format
   2226              // for it's Inter-PAN messages, where the messages could be confused
   2227              // with the foundation commands.
   2228              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   2229              {
   2230                rawAFMsg = NULL;
   2231                return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
   2232              }
   2233          
   2234              interPanMsg = TRUE;
   2235              options = AF_TX_OPTIONS_NONE;
   2236            }
   2237            else
   2238          #endif
   2239            {
   2240              interPanMsg = FALSE;
   2241              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \                     ??zcl_ProcessMessageMSG_4:
   \   00015A                ; Setup parameters for call to function zclGetClusterOption
   \   00015A   85..82       MOV       DPL,?V4
   \   00015D   85..83       MOV       DPH,?V5
   \   000160   E0           MOVX      A,@DPTR
   \   000161   FA           MOV       R2,A
   \   000162   A3           INC       DPTR
   \   000163   E0           MOVX      A,@DPTR
   \   000164   FB           MOV       R3,A
   \   000165   85..82       MOV       DPL,?V2
   \   000168   85..83       MOV       DPH,?V3
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   F9           MOV       R1,A
   \   00016D   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   000170   E9           MOV       A,R1
   \   000171   F5..         MOV       ?V8,A
   2242            }
   2243          
   2244            // Find the appropriate plugin
   2245            pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \   000173                ; Setup parameters for call to function zclFindPlugin
   \   000173   85..82       MOV       DPL,?V6
   \   000176   85..83       MOV       DPH,?V7
   \   000179   E0           MOVX      A,@DPTR
   \   00017A   F8           MOV       R0,A
   \   00017B   A3           INC       DPTR
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   F583         MOV       DPH,A
   \   00017F   8882         MOV       DPL,R0
   \   000181   A3           INC       DPTR
   \   000182   E0           MOVX      A,@DPTR
   \   000183   FC           MOV       R4,A
   \   000184   A3           INC       DPTR
   \   000185   E0           MOVX      A,@DPTR
   \   000186   FD           MOV       R5,A
   \   000187   85..82       MOV       DPL,?V4
   \   00018A   85..83       MOV       DPH,?V5
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   FA           MOV       R2,A
   \   00018F   A3           INC       DPTR
   \   000190   E0           MOVX      A,@DPTR
   \   000191   FB           MOV       R3,A
   \   000192   12....       LCALL     `??zclFindPlugin::?relay`; Banked call to: zclFindPlugin
   2246          
   2247            // Local and remote Security options must match except for Default Response command
   2248            if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
   \   000195   7404         MOV       A,#0x4
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   E0           MOVX      A,@DPTR
   \   00019B   F8           MOV       R0,A
   \   00019C   EA           MOV       A,R2
   \   00019D   4B           ORL       A,R3
   \   00019E   7003         JNZ       $+5
   \   0001A0   02....       LJMP      ??zcl_ProcessMessageMSG_5 & 0xFFFF
   \   0001A3   E8           MOV       A,R0
   \   0001A4   5407         ANL       A,#0x7
   \   0001A6   700D         JNZ       ??zcl_ProcessMessageMSG_6
   \   0001A8   7409         MOV       A,#0x9
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   640B         XRL       A,#0xb
   \   0001B0   7003         JNZ       $+5
   \   0001B2   02....       LJMP      ??zcl_ProcessMessageMSG_5 & 0xFFFF
   2249            {
   2250              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   2251          
   2252              // Make sure that Clusters specifically defined to use security are received secure,
   2253              // any other cluster that wants to use APS security will be allowed
   2254              if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
   \                     ??zcl_ProcessMessageMSG_6:
   \   0001B5   E5..         MOV       A,?V8
   \   0001B7   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001B9   4003         JC        $+5
   \   0001BB   02....       LJMP      ??zcl_ProcessMessageMSG_5 & 0xFFFF
   \   0001BE   E5..         MOV       A,?V0
   \   0001C0   2419         ADD       A,#0x19
   \   0001C2   F582         MOV       DPL,A
   \   0001C4   E4           CLR       A
   \   0001C5   35..         ADDC      A,?V1
   \   0001C7   F583         MOV       DPH,A
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   6003         JZ        $+5
   \   0001CC   02....       LJMP      ??zcl_ProcessMessageMSG_5 & 0xFFFF
   2255              {
   2256                if ( UNICAST_MSG( inMsg.msg ) )
   \   0001CF   7402         MOV       A,#0x2
   \   0001D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D4   E0           MOVX      A,@DPTR
   \   0001D5   F8           MOV       R0,A
   \   0001D6   A3           INC       DPTR
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   C8           XCH       A,R0
   \   0001D9   2415         ADD       A,#0x15
   \   0001DB   F582         MOV       DPL,A
   \   0001DD   E4           CLR       A
   \   0001DE   38           ADDC      A,R0
   \   0001DF   F583         MOV       DPH,A
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   6003         JZ        $+5
   \   0001E4   02....       LJMP      ??zcl_ProcessMessageMSG_7 & 0xFFFF
   \   0001E7   7402         MOV       A,#0x2
   \   0001E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EC   E0           MOVX      A,@DPTR
   \   0001ED   F8           MOV       R0,A
   \   0001EE   A3           INC       DPTR
   \   0001EF   E0           MOVX      A,@DPTR
   \   0001F0   F583         MOV       DPH,A
   \   0001F2   8882         MOV       DPL,R0
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   E0           MOVX      A,@DPTR
   \   0001F7   F8           MOV       R0,A
   \   0001F8   A3           INC       DPTR
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   F9           MOV       R1,A
   \   0001FB   E8           MOV       A,R0
   \   0001FC   49           ORL       A,R1
   \   0001FD   6003         JZ        $+5
   \   0001FF   02....       LJMP      ??zcl_ProcessMessageMSG_7 & 0xFFFF
   2257                {
   2258                  // Send a Default Response command back with no Application Link Key security
   2259                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   000202                ; Setup parameters for call to function zclSetSecurityOption
   \   000202   7C00         MOV       R4,#0x0
   \   000204   85..82       MOV       DPL,?V4
   \   000207   85..83       MOV       DPH,?V5
   \   00020A   E0           MOVX      A,@DPTR
   \   00020B   FA           MOV       R2,A
   \   00020C   A3           INC       DPTR
   \   00020D   E0           MOVX      A,@DPTR
   \   00020E   FB           MOV       R3,A
   \   00020F   85..82       MOV       DPL,?V2
   \   000212   85..83       MOV       DPH,?V3
   \   000215   E0           MOVX      A,@DPTR
   \   000216   F9           MOV       R1,A
   \   000217   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2260          
   2261                  defautlRspCmd.statusCode = status;
   \   00021A   EE           MOV       A,R6
   \   00021B   12....       LCALL     ?XSTACK_DISP0_8
   \   00021E   EE           MOV       A,R6
   \   00021F   F0           MOVX      @DPTR,A
   2262                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   000220   7409         MOV       A,#0x9
   \   000222   12....       LCALL     ?XSTACK_DISP0_8
   \   000225   E0           MOVX      A,@DPTR
   \   000226   85..82       MOV       DPL,?XSP + 0
   \   000229   85..83       MOV       DPH,?XSP + 1
   \   00022C   F0           MOVX      @DPTR,A
   2263                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2264                                         inMsg.msg->clusterId, &defautlRspCmd,
   2265                                         !inMsg.hdr.fc.direction, true,
   2266                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \   00022D                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   00022D   7408         MOV       A,#0x8
   \   00022F   12....       LCALL     ?XSTACK_DISP0_8
   \   000232   E0           MOVX      A,@DPTR
   \   000233   F5..         MOV       ?V0,A
   \   000235   78..         MOV       R0,#?V0
   \   000237   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00023A   7407         MOV       A,#0x7
   \   00023C   12....       LCALL     ?XSTACK_DISP0_8
   \   00023F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000242   8E..         MOV       ?V0,R6
   \   000244   78..         MOV       R0,#?V0
   \   000246   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000249   7408         MOV       A,#0x8
   \   00024B   12....       LCALL     ?XSTACK_DISP0_8
   \   00024E   E0           MOVX      A,@DPTR
   \   00024F   13           RRC       A
   \   000250   13           RRC       A
   \   000251   13           RRC       A
   \   000252   541F         ANL       A,#0x1f
   \   000254   6401         XRL       A,#0x1
   \   000256   5401         ANL       A,#0x1
   \   000258   F5..         MOV       ?V0,A
   \   00025A   78..         MOV       R0,#?V0
   \   00025C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00025F   7405         MOV       A,#0x5
   \   000261   12....       LCALL     ?XSTACK_DISP100_8
   \   000264   88..         MOV       ?V0,R0
   \   000266   89..         MOV       ?V1,R1
   \   000268   78..         MOV       R0,#?V0
   \   00026A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00026D   7409         MOV       A,#0x9
   \   00026F   12....       LCALL     ?XSTACK_DISP0_8
   \   000272   E0           MOVX      A,@DPTR
   \   000273   F8           MOV       R0,A
   \   000274   A3           INC       DPTR
   \   000275   E0           MOVX      A,@DPTR
   \   000276   F583         MOV       DPH,A
   \   000278   8882         MOV       DPL,R0
   \   00027A   A3           INC       DPTR
   \   00027B   A3           INC       DPTR
   \   00027C   A3           INC       DPTR
   \   00027D   A3           INC       DPTR
   \   00027E   E0           MOVX      A,@DPTR
   \   00027F   FC           MOV       R4,A
   \   000280   A3           INC       DPTR
   \   000281   E0           MOVX      A,@DPTR
   \   000282   FD           MOV       R5,A
   \   000283   7409         MOV       A,#0x9
   \   000285   12....       LCALL     ?XSTACK_DISP0_8
   \   000288   E0           MOVX      A,@DPTR
   \   000289   2406         ADD       A,#0x6
   \   00028B   FA           MOV       R2,A
   \   00028C   A3           INC       DPTR
   \   00028D   E0           MOVX      A,@DPTR
   \   00028E   3400         ADDC      A,#0x0
   \   000290   FB           MOV       R3,A
   \   000291   7409         MOV       A,#0x9
   \   000293   12....       LCALL     ?XSTACK_DISP0_8
   \   000296   E0           MOVX      A,@DPTR
   \   000297   F8           MOV       R0,A
   \   000298   A3           INC       DPTR
   \   000299   E0           MOVX      A,@DPTR
   \   00029A   C8           XCH       A,R0
   \   00029B   2414         ADD       A,#0x14
   \   00029D   F582         MOV       DPL,A
   \   00029F   E4           CLR       A
   \   0002A0   38           ADDC      A,R0
   \   0002A1   F583         MOV       DPH,A
   \   0002A3   E0           MOVX      A,@DPTR
   \   0002A4   F9           MOV       R1,A
   \   0002A5   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   0002A8   7407         MOV       A,#0x7
   \   0002AA   12....       LCALL     ?DEALLOC_XSTACK8
   2267          
   2268                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
   \   0002AD                ; Setup parameters for call to function zclSetSecurityOption
   \   0002AD   7C01         MOV       R4,#0x1
   \   0002AF   85..82       MOV       DPL,?V4
   \   0002B2   85..83       MOV       DPH,?V5
   \   0002B5   E0           MOVX      A,@DPTR
   \   0002B6   FA           MOV       R2,A
   \   0002B7   A3           INC       DPTR
   \   0002B8   E0           MOVX      A,@DPTR
   \   0002B9   FB           MOV       R3,A
   \   0002BA   85..82       MOV       DPL,?V2
   \   0002BD   85..83       MOV       DPH,?V3
   \   0002C0   E0           MOVX      A,@DPTR
   \   0002C1   F9           MOV       R1,A
   \   0002C2   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2269                }
   2270          
   2271                rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_7:
   \   0002C5   90....       MOV       DPTR,#rawAFMsg
   \   0002C8   E4           CLR       A
   \   0002C9   F0           MOVX      @DPTR,A
   \   0002CA   A3           INC       DPTR
   \   0002CB   F0           MOVX      @DPTR,A
   2272                return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
   \   0002CC   7905         MOV       R1,#0x5
   \   0002CE   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2273              }
   2274            }
   2275          
   2276            // Is this a foundation type message
   2277            if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zcl_ProcessMessageMSG_5:
   \   0002D1   E8           MOV       A,R0
   \   0002D2   5403         ANL       A,#0x3
   \   0002D4   6003         JZ        $+5
   \   0002D6   02....       LJMP      ??zcl_ProcessMessageMSG_8 & 0xFFFF
   2278            {
   2279              if ( inMsg.hdr.fc.manuSpecific )
   \   0002D9   E8           MOV       A,R0
   \   0002DA   5404         ANL       A,#0x4
   \   0002DC   6005         JZ        ??zcl_ProcessMessageMSG_9
   2280              {
   2281                // We don't support any manufacturer specific command
   2282                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   0002DE   7E84         MOV       R6,#-0x7c
   \   0002E0   02....       LJMP      ??zcl_ProcessMessageMSG_10 & 0xFFFF
   2283              }
   2284              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
   2285                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zcl_ProcessMessageMSG_9:
   \   0002E3   7409         MOV       A,#0x9
   \   0002E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E8   E0           MOVX      A,@DPTR
   \   0002E9   F8           MOV       R0,A
   \   0002EA   C3           CLR       C
   \   0002EB   9417         SUBB      A,#0x17
   \   0002ED   4003         JC        $+5
   \   0002EF   02....       LJMP      ??zcl_ProcessMessageMSG_11 & 0xFFFF
   \   0002F2   E8           MOV       A,R0
   \   0002F3   F5..         MOV       ?V0,A
   \   0002F5   8F..         MOV       ?V1,R7
   \   0002F7   7402         MOV       A,#0x2
   \   0002F9   78..         MOV       R0,#?V0
   \   0002FB   12....       LCALL     ?S_SHL
   \   0002FE   74..         MOV       A,#zclCmdTable & 0xff
   \   000300   25..         ADD       A,?V0
   \   000302   F582         MOV       DPL,A
   \   000304   74..         MOV       A,#(zclCmdTable >> 8) & 0xff
   \   000306   35..         ADDC      A,?V1
   \   000308   F583         MOV       DPH,A
   \   00030A   E4           CLR       A
   \   00030B   93           MOVC      A,@A+DPTR
   \   00030C   F8           MOV       R0,A
   \   00030D   EE           MOV       A,R6
   \   00030E   93           MOVC      A,@A+DPTR
   \   00030F   F9           MOV       R1,A
   \   000310   E8           MOV       A,R0
   \   000311   49           ORL       A,R1
   \   000312   7003         JNZ       $+5
   \   000314   02....       LJMP      ??zcl_ProcessMessageMSG_11 & 0xFFFF
   2286              {
   2287                zclParseCmd_t parseCmd;
   2288          
   2289                parseCmd.endpoint = pkt->endPoint;
   \   000317   85..82       MOV       DPL,?V2
   \   00031A   85..83       MOV       DPH,?V3
   \   00031D   E0           MOVX      A,@DPTR
   \   00031E   C0E0         PUSH      A
   \   000320   7410         MOV       A,#0x10
   \   000322   12....       LCALL     ?XSTACK_DISP0_8
   \   000325   D0E0         POP       A
   \   000327   F0           MOVX      @DPTR,A
   2290                parseCmd.dataLen = inMsg.pDataLen;
   \   000328   740C         MOV       A,#0xc
   \   00032A   12....       LCALL     ?XSTACK_DISP0_8
   \   00032D   E0           MOVX      A,@DPTR
   \   00032E   FA           MOV       R2,A
   \   00032F   A3           INC       DPTR
   \   000330   E0           MOVX      A,@DPTR
   \   000331   FB           MOV       R3,A
   \   000332   7411         MOV       A,#0x11
   \   000334   12....       LCALL     ?XSTACK_DISP0_8
   \   000337   EA           MOV       A,R2
   \   000338   F0           MOVX      @DPTR,A
   \   000339   A3           INC       DPTR
   \   00033A   EB           MOV       A,R3
   \   00033B   F0           MOVX      @DPTR,A
   2291                parseCmd.pData = inMsg.pData;
   \   00033C   740A         MOV       A,#0xa
   \   00033E   12....       LCALL     ?XSTACK_DISP0_8
   \   000341   E0           MOVX      A,@DPTR
   \   000342   FA           MOV       R2,A
   \   000343   A3           INC       DPTR
   \   000344   E0           MOVX      A,@DPTR
   \   000345   FB           MOV       R3,A
   \   000346   7413         MOV       A,#0x13
   \   000348   12....       LCALL     ?XSTACK_DISP0_8
   \   00034B   EA           MOV       A,R2
   \   00034C   F0           MOVX      @DPTR,A
   \   00034D   A3           INC       DPTR
   \   00034E   EB           MOV       A,R3
   \   00034F   F0           MOVX      @DPTR,A
   2292          
   2293                // Parse the command, remember that the return value is a pointer to allocated memory
   2294                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \   000350                ; Setup parameters for indirect call
   \   000350   7410         MOV       A,#0x10
   \   000352   12....       LCALL     ?XSTACK_DISP101_8
   \   000355   8882         MOV       DPL,R0
   \   000357   8983         MOV       DPH,R1
   \   000359   12....       LCALL     ?CALL_IND
   \   00035C   8B..         MOV       ?V1,R3
   \   00035E   A9..         MOV       R1,?V1
   \   000360   740E         MOV       A,#0xe
   \   000362   12....       LCALL     ?XSTACK_DISP0_8
   \   000365   EA           MOV       A,R2
   \   000366   F0           MOVX      @DPTR,A
   \   000367   A3           INC       DPTR
   \   000368   EB           MOV       A,R3
   \   000369   F0           MOVX      @DPTR,A
   2295                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \   00036A   EA           MOV       A,R2
   \   00036B   49           ORL       A,R1
   \   00036C   6034         JZ        ??zcl_ProcessMessageMSG_12
   \   00036E   7409         MOV       A,#0x9
   \   000370   12....       LCALL     ?XSTACK_DISP0_8
   \   000373   E0           MOVX      A,@DPTR
   \   000374   F5..         MOV       ?V0,A
   \   000376   8F..         MOV       ?V1,R7
   \   000378   7402         MOV       A,#0x2
   \   00037A   78..         MOV       R0,#?V0
   \   00037C   12....       LCALL     ?S_SHL
   \   00037F   74..         MOV       A,#(zclCmdTable + 2) & 0xff
   \   000381   25..         ADD       A,?V0
   \   000383   F582         MOV       DPL,A
   \   000385   74..         MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
   \   000387   35..         ADDC      A,?V1
   \   000389   F583         MOV       DPH,A
   \   00038B   E4           CLR       A
   \   00038C   93           MOVC      A,@A+DPTR
   \   00038D   F8           MOV       R0,A
   \   00038E   EE           MOV       A,R6
   \   00038F   93           MOVC      A,@A+DPTR
   \   000390   8882         MOV       DPL,R0
   \   000392   F583         MOV       DPH,A
   \   000394   E582         MOV       A,DPL
   \   000396   4583         ORL       A,DPH
   \   000398   6008         JZ        ??zcl_ProcessMessageMSG_12
   2296                {
   2297                  // Process the command
   2298                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   00039A                ; Setup parameters for indirect call
   \   00039A   7402         MOV       A,#0x2
   \   00039C   12....       LCALL     ?XSTACK_DISP101_8
   \   00039F   12....       LCALL     ?CALL_IND
   2299                  {
   2300                    // Couldn't find attribute in the table.
   2301                  }
   2302                }
   2303          
   2304                // Free the buffer
   2305                if ( inMsg.attrCmd )
   \                     ??zcl_ProcessMessageMSG_12:
   \   0003A2   740E         MOV       A,#0xe
   \   0003A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A7   E0           MOVX      A,@DPTR
   \   0003A8   FA           MOV       R2,A
   \   0003A9   A3           INC       DPTR
   \   0003AA   E0           MOVX      A,@DPTR
   \   0003AB   FB           MOV       R3,A
   \   0003AC   EA           MOV       A,R2
   \   0003AD   4B           ORL       A,R3
   \   0003AE   6003         JZ        ??zcl_ProcessMessageMSG_13
   2306                {
   2307                  zcl_mem_free( inMsg.attrCmd );
   \   0003B0                ; Setup parameters for call to function osal_mem_free
   \   0003B0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2308                }
   2309          
   2310                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??zcl_ProcessMessageMSG_13:
   \   0003B3   7409         MOV       A,#0x9
   \   0003B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B8   E0           MOVX      A,@DPTR
   \   0003B9   F8           MOV       R0,A
   \   0003BA   6065         JZ        ??zcl_ProcessMessageMSG_14
   \   0003BC   7402         MOV       A,#0x2
   \   0003BE   68           XRL       A,R0
   \   0003BF   6060         JZ        ??zcl_ProcessMessageMSG_14
   \   0003C1   7403         MOV       A,#0x3
   \   0003C3   68           XRL       A,R0
   \   0003C4   605B         JZ        ??zcl_ProcessMessageMSG_14
   \   0003C6   7405         MOV       A,#0x5
   \   0003C8   68           XRL       A,R0
   \   0003C9   6056         JZ        ??zcl_ProcessMessageMSG_14
   \   0003CB   7406         MOV       A,#0x6
   \   0003CD   68           XRL       A,R0
   \   0003CE   6051         JZ        ??zcl_ProcessMessageMSG_14
   \   0003D0   7408         MOV       A,#0x8
   \   0003D2   68           XRL       A,R0
   \   0003D3   604C         JZ        ??zcl_ProcessMessageMSG_14
   \   0003D5   740C         MOV       A,#0xc
   \   0003D7   68           XRL       A,R0
   \   0003D8   6047         JZ        ??zcl_ProcessMessageMSG_14
   \   0003DA   7411         MOV       A,#0x11
   \   0003DC   68           XRL       A,R0
   \   0003DD   6042         JZ        ??zcl_ProcessMessageMSG_14
   \   0003DF   7413         MOV       A,#0x13
   \   0003E1   68           XRL       A,R0
   \   0003E2   603D         JZ        ??zcl_ProcessMessageMSG_14
   \   0003E4   7415         MOV       A,#0x15
   \   0003E6   68           XRL       A,R0
   \   0003E7   6038         JZ        ??zcl_ProcessMessageMSG_14
   \   0003E9   740B         MOV       A,#0xb
   \   0003EB   68           XRL       A,R0
   \   0003EC   6033         JZ        ??zcl_ProcessMessageMSG_14
   2311                {
   2312                  rawAFMsg = NULL;
   2313                  return ( ZCL_PROC_SUCCESS ); // We're done
   2314                }
   2315          
   2316                status = ZSuccess;
   \   0003EE   7E00         MOV       R6,#0x0
   \   0003F0   804F         SJMP      ??zcl_ProcessMessageMSG_10
   2317              }
   2318              else
   2319              {
   2320                // Unsupported message
   2321                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zcl_ProcessMessageMSG_11:
   \   0003F2   7E82         MOV       R6,#-0x7e
   \   0003F4   804B         SJMP      ??zcl_ProcessMessageMSG_10
   2322              }
   2323            }
   2324            else  // Not a foundation type message, so it must be specific to the cluster ID.
   2325            {
   2326              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zcl_ProcessMessageMSG_8:
   \   0003F6   EA           MOV       A,R2
   \   0003F7   4B           ORL       A,R3
   \   0003F8   6032         JZ        ??zcl_ProcessMessageMSG_15
   \   0003FA   8A82         MOV       DPL,R2
   \   0003FC   8B83         MOV       DPH,R3
   \   0003FE   A3           INC       DPTR
   \   0003FF   A3           INC       DPTR
   \   000400   A3           INC       DPTR
   \   000401   A3           INC       DPTR
   \   000402   A3           INC       DPTR
   \   000403   A3           INC       DPTR
   \   000404   E0           MOVX      A,@DPTR
   \   000405   F8           MOV       R0,A
   \   000406   A3           INC       DPTR
   \   000407   E0           MOVX      A,@DPTR
   \   000408   8882         MOV       DPL,R0
   \   00040A   F583         MOV       DPH,A
   \   00040C   E582         MOV       A,DPL
   \   00040E   4583         ORL       A,DPH
   \   000410   601A         JZ        ??zcl_ProcessMessageMSG_15
   2327              {
   2328                // The return value of the plugin function will be
   2329                //  ZSuccess - Supported and need default response
   2330                //  ZFailure - Unsupported
   2331                //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   2332                //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   2333                //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   2334                //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   2335                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   000412                ; Setup parameters for indirect call
   \   000412   7402         MOV       A,#0x2
   \   000414   12....       LCALL     ?XSTACK_DISP101_8
   \   000417   12....       LCALL     ?CALL_IND
   \   00041A   E9           MOV       A,R1
   \   00041B   FE           MOV       R6,A
   2336                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   00041C   74FF         MOV       A,#-0x1
   \   00041E   6E           XRL       A,R6
   \   00041F   700B         JNZ       ??zcl_ProcessMessageMSG_15
   2337                {
   2338                  rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_14:
   \   000421   90....       MOV       DPTR,#rawAFMsg
   \   000424   E4           CLR       A
   \   000425   F0           MOVX      @DPTR,A
   \   000426   A3           INC       DPTR
   \   000427   F0           MOVX      @DPTR,A
   2339                  return ( ZCL_PROC_SUCCESS ); // We're done
   \   000428   F9           MOV       R1,A
   \   000429   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2340                }
   2341              }
   2342          
   2343              if ( status == ZFailure )
   \                     ??zcl_ProcessMessageMSG_15:
   \   00042C   7401         MOV       A,#0x1
   \   00042E   6E           XRL       A,R6
   \   00042F   7010         JNZ       ??zcl_ProcessMessageMSG_10
   2344              {
   2345                // Unsupported message
   2346                if ( inMsg.hdr.fc.manuSpecific )
   \   000431   7404         MOV       A,#0x4
   \   000433   12....       LCALL     ?XSTACK_DISP0_8
   \   000436   E0           MOVX      A,@DPTR
   \   000437   5404         ANL       A,#0x4
   \   000439   6004         JZ        ??zcl_ProcessMessageMSG_16
   2347                {
   2348                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   00043B   7E83         MOV       R6,#-0x7d
   \   00043D   8002         SJMP      ??zcl_ProcessMessageMSG_10
   2349                }
   2350                else
   2351                {
   2352                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zcl_ProcessMessageMSG_16:
   \   00043F   7E81         MOV       R6,#-0x7f
   2353                }
   2354              }
   2355            }
   2356          
   2357            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zcl_ProcessMessageMSG_10:
   \   000441   7402         MOV       A,#0x2
   \   000443   12....       LCALL     ?XSTACK_DISP0_8
   \   000446   E0           MOVX      A,@DPTR
   \   000447   F8           MOV       R0,A
   \   000448   A3           INC       DPTR
   \   000449   E0           MOVX      A,@DPTR
   \   00044A   C8           XCH       A,R0
   \   00044B   2415         ADD       A,#0x15
   \   00044D   F582         MOV       DPL,A
   \   00044F   E4           CLR       A
   \   000450   38           ADDC      A,R0
   \   000451   F583         MOV       DPH,A
   \   000453   E0           MOVX      A,@DPTR
   \   000454   6003         JZ        $+5
   \   000456   02....       LJMP      ??zcl_ProcessMessageMSG_17 & 0xFFFF
   \   000459   7402         MOV       A,#0x2
   \   00045B   12....       LCALL     ?XSTACK_DISP0_8
   \   00045E   E0           MOVX      A,@DPTR
   \   00045F   F8           MOV       R0,A
   \   000460   A3           INC       DPTR
   \   000461   E0           MOVX      A,@DPTR
   \   000462   F583         MOV       DPH,A
   \   000464   8882         MOV       DPL,R0
   \   000466   A3           INC       DPTR
   \   000467   A3           INC       DPTR
   \   000468   E0           MOVX      A,@DPTR
   \   000469   F8           MOV       R0,A
   \   00046A   A3           INC       DPTR
   \   00046B   E0           MOVX      A,@DPTR
   \   00046C   F9           MOV       R1,A
   \   00046D   E8           MOV       A,R0
   \   00046E   49           ORL       A,R1
   \   00046F   6003         JZ        $+5
   \   000471   02....       LJMP      ??zcl_ProcessMessageMSG_17 & 0xFFFF
   \   000474   7404         MOV       A,#0x4
   \   000476   12....       LCALL     ?XSTACK_DISP0_8
   \   000479   E0           MOVX      A,@DPTR
   \   00047A   FA           MOV       R2,A
   \   00047B   5410         ANL       A,#0x10
   \   00047D   6003         JZ        $+5
   \   00047F   02....       LJMP      ??zcl_ProcessMessageMSG_17 & 0xFFFF
   2358            {
   2359              // Send a Default Response command back
   2360              defautlRspCmd.statusCode = status;
   \   000482   EE           MOV       A,R6
   \   000483   C0E0         PUSH      A
   \   000485   7401         MOV       A,#0x1
   \   000487   12....       LCALL     ?XSTACK_DISP0_8
   \   00048A   D0E0         POP       A
   \   00048C   F0           MOVX      @DPTR,A
   2361              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   00048D   7409         MOV       A,#0x9
   \   00048F   12....       LCALL     ?XSTACK_DISP0_8
   \   000492   E0           MOVX      A,@DPTR
   \   000493   85..82       MOV       DPL,?XSP + 0
   \   000496   85..83       MOV       DPH,?XSP + 1
   \   000499   F0           MOVX      @DPTR,A
   2362              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2363                                     inMsg.msg->clusterId, &defautlRspCmd,
   2364                                     !inMsg.hdr.fc.direction, true,
   2365                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \   00049A                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   00049A   7408         MOV       A,#0x8
   \   00049C   12....       LCALL     ?XSTACK_DISP0_8
   \   00049F   E0           MOVX      A,@DPTR
   \   0004A0   F5..         MOV       ?V0,A
   \   0004A2   78..         MOV       R0,#?V0
   \   0004A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004A7   7407         MOV       A,#0x7
   \   0004A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0004AC   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0004AF   75..01       MOV       ?V0,#0x1
   \   0004B2   78..         MOV       R0,#?V0
   \   0004B4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004B7   EA           MOV       A,R2
   \   0004B8   13           RRC       A
   \   0004B9   13           RRC       A
   \   0004BA   13           RRC       A
   \   0004BB   541F         ANL       A,#0x1f
   \   0004BD   6401         XRL       A,#0x1
   \   0004BF   5401         ANL       A,#0x1
   \   0004C1   F5..         MOV       ?V0,A
   \   0004C3   78..         MOV       R0,#?V0
   \   0004C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004C8   7405         MOV       A,#0x5
   \   0004CA   12....       LCALL     ?XSTACK_DISP100_8
   \   0004CD   88..         MOV       ?V0,R0
   \   0004CF   89..         MOV       ?V1,R1
   \   0004D1   78..         MOV       R0,#?V0
   \   0004D3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004D6   7409         MOV       A,#0x9
   \   0004D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0004DB   E0           MOVX      A,@DPTR
   \   0004DC   F8           MOV       R0,A
   \   0004DD   A3           INC       DPTR
   \   0004DE   E0           MOVX      A,@DPTR
   \   0004DF   F583         MOV       DPH,A
   \   0004E1   8882         MOV       DPL,R0
   \   0004E3   A3           INC       DPTR
   \   0004E4   A3           INC       DPTR
   \   0004E5   A3           INC       DPTR
   \   0004E6   A3           INC       DPTR
   \   0004E7   E0           MOVX      A,@DPTR
   \   0004E8   FC           MOV       R4,A
   \   0004E9   A3           INC       DPTR
   \   0004EA   E0           MOVX      A,@DPTR
   \   0004EB   FD           MOV       R5,A
   \   0004EC   7409         MOV       A,#0x9
   \   0004EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0004F1   E0           MOVX      A,@DPTR
   \   0004F2   2406         ADD       A,#0x6
   \   0004F4   FA           MOV       R2,A
   \   0004F5   A3           INC       DPTR
   \   0004F6   E0           MOVX      A,@DPTR
   \   0004F7   3400         ADDC      A,#0x0
   \   0004F9   FB           MOV       R3,A
   \   0004FA   7409         MOV       A,#0x9
   \   0004FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0004FF   E0           MOVX      A,@DPTR
   \   000500   F8           MOV       R0,A
   \   000501   A3           INC       DPTR
   \   000502   E0           MOVX      A,@DPTR
   \   000503   C8           XCH       A,R0
   \   000504   2414         ADD       A,#0x14
   \   000506   F582         MOV       DPL,A
   \   000508   E4           CLR       A
   \   000509   38           ADDC      A,R0
   \   00050A   F583         MOV       DPH,A
   \   00050C   E0           MOVX      A,@DPTR
   \   00050D   F9           MOV       R1,A
   \   00050E   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   000511   7407         MOV       A,#0x7
   \   000513   12....       LCALL     ?DEALLOC_XSTACK8
   2366              defaultResponseSent = TRUE;
   \   000516   7F01         MOV       R7,#0x1
   2367            }
   2368          
   2369            rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_17:
   \   000518   90....       MOV       DPTR,#rawAFMsg
   \   00051B   E4           CLR       A
   \   00051C   F0           MOVX      @DPTR,A
   \   00051D   A3           INC       DPTR
   \   00051E   F0           MOVX      @DPTR,A
   2370            if ( status == ZSuccess )
   \   00051F   EE           MOV       A,R6
   \   000520   7004         JNZ       ??zcl_ProcessMessageMSG_18
   2371            {
   2372              return ( ZCL_PROC_SUCCESS );
   \   000522   7900         MOV       R1,#0x0
   \   000524   8019         SJMP      ??zcl_ProcessMessageMSG_1
   2373            }
   2374            else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
   \                     ??zcl_ProcessMessageMSG_18:
   \   000526   7484         MOV       A,#-0x7c
   \   000528   6E           XRL       A,R6
   \   000529   700B         JNZ       ??zcl_ProcessMessageMSG_19
   2375            {
   2376              if ( defaultResponseSent )
   \   00052B   EF           MOV       A,R7
   \   00052C   6004         JZ        ??zcl_ProcessMessageMSG_20
   2377              {
   2378                return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
   \   00052E   7907         MOV       R1,#0x7
   \   000530   800D         SJMP      ??zcl_ProcessMessageMSG_1
   2379              }
   2380              else
   2381              {
   2382                return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
   \                     ??zcl_ProcessMessageMSG_20:
   \   000532   7906         MOV       R1,#0x6
   \   000534   8009         SJMP      ??zcl_ProcessMessageMSG_1
   2383              }
   2384            }
   2385            else
   2386            {
   2387              if ( defaultResponseSent )
   \                     ??zcl_ProcessMessageMSG_19:
   \   000536   EF           MOV       A,R7
   \   000537   6004         JZ        ??zcl_ProcessMessageMSG_21
   2388              {
   2389                return ( ZCL_PROC_NOT_HANDLED_DR );
   \   000539   7909         MOV       R1,#0x9
   \   00053B   8002         SJMP      ??zcl_ProcessMessageMSG_1
   2390              }
   2391              else
   2392              {
   2393                return ( ZCL_PROC_NOT_HANDLED );
   \                     ??zcl_ProcessMessageMSG_21:
   \   00053D   7908         MOV       R1,#0x8
   \                     ??zcl_ProcessMessageMSG_1:
   \   00053F   7415         MOV       A,#0x15
   \   000541   12....       LCALL     ?DEALLOC_XSTACK8
   \   000544   7F09         MOV       R7,#0x9
   \   000546   02....       LJMP      ?BANKED_LEAVE_XDATA
   2394              }
   2395            }
   2396          }
   2397          
   2398          /*********************************************************************
   2399           * PRIVATE FUNCTIONS
   2400           *********************************************************************/
   2401          
   2402          /*********************************************************************
   2403           * @fn      zclParseHdr
   2404           *
   2405           * @brief   Parse header of the ZCL format
   2406           *
   2407           * @param   hdr - place to put the frame control information
   2408           * @param   pData - incoming buffer to parse
   2409           *
   2410           * @return  pointer past the header
   2411           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2412          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   2413          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2414            // Clear the header
   2415            zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV       R4,#0x6
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2416          
   2417            // Parse the Frame Control
   2418            hdr->fc.type = zcl_FCType( *pData );
   \   000016   8E82         MOV       DPL,R6
   \   000018   8F83         MOV       DPH,R7
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   5403         ANL       A,#0x3
   \   00001D   F8           MOV       R0,A
   \   00001E   85..82       MOV       DPL,?V0
   \   000021   85..83       MOV       DPH,?V1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   54FC         ANL       A,#0xfc
   \   000027   F0           MOVX      @DPTR,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   48           ORL       A,R0
   \   00002A   F0           MOVX      @DPTR,A
   2419            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \   00002B   8E82         MOV       DPL,R6
   \   00002D   8F83         MOV       DPH,R7
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   A2E2         MOV       C,0xE0 /* A   */.2
   \   000032   5004         JNC       ??zclParseHdr_0
   \   000034   D2F0         SETB      B.0
   \   000036   8002         SJMP      ??zclParseHdr_1
   \                     ??zclParseHdr_0:
   \   000038   C2F0         CLR       B.0
   \                     ??zclParseHdr_1:
   \   00003A   85..82       MOV       DPL,?V0
   \   00003D   85..83       MOV       DPH,?V1
   \   000040   E0           MOVX      A,@DPTR
   \   000041   54FB         ANL       A,#0xfb
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A2F0         MOV       C,B.0
   \   000046   E4           CLR       A
   \   000047   33           RLC       A
   \   000048   F5..         MOV       ?V2,A
   \   00004A   75..00       MOV       ?V3,#0x0
   \   00004D   7402         MOV       A,#0x2
   \   00004F   78..         MOV       R0,#?V2
   \   000051   12....       LCALL     ?S_SHL
   \   000054   E0           MOVX      A,@DPTR
   \   000055   45..         ORL       A,?V2
   \   000057   F0           MOVX      @DPTR,A
   2420            if ( zcl_FCDirection( *pData ) )
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   A2E3         MOV       C,0xE0 /* A   */.3
   \   00005F   85..82       MOV       DPL,?V0
   \   000062   85..83       MOV       DPH,?V1
   \   000065   E0           MOVX      A,@DPTR
   \   000066   5004         JNC       ??zclParseHdr_2
   2421            {
   2422              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000068   4408         ORL       A,#0x8
   \   00006A   8002         SJMP      ??zclParseHdr_3
   2423            }
   2424            else
   2425            {
   2426              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_2:
   \   00006C   54F7         ANL       A,#0xf7
   \                     ??zclParseHdr_3:
   \   00006E   F0           MOVX      @DPTR,A
   2427            }
   2428          
   2429            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \   00006F   8E82         MOV       DPL,R6
   \   000071   8F83         MOV       DPH,R7
   \   000073   E0           MOVX      A,@DPTR
   \   000074   A2E4         MOV       C,0xE0 /* A   */.4
   \   000076   5004         JNC       ??zclParseHdr_4
   \   000078   D2F0         SETB      B.0
   \   00007A   8002         SJMP      ??zclParseHdr_5
   \                     ??zclParseHdr_4:
   \   00007C   C2F0         CLR       B.0
   \                     ??zclParseHdr_5:
   \   00007E   85..82       MOV       DPL,?V0
   \   000081   85..83       MOV       DPH,?V1
   \   000084   E0           MOVX      A,@DPTR
   \   000085   54EF         ANL       A,#0xef
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A2F0         MOV       C,B.0
   \   00008A   E4           CLR       A
   \   00008B   33           RLC       A
   \   00008C   F5..         MOV       ?V2,A
   \   00008E   7404         MOV       A,#0x4
   \   000090   78..         MOV       R0,#?V2
   \   000092   12....       LCALL     ?S_SHL
   \   000095   E0           MOVX      A,@DPTR
   \   000096   45..         ORL       A,?V2
   \   000098   F0           MOVX      @DPTR,A
   2430            pData++;  // move past the frame control field
   \   000099   8E82         MOV       DPL,R6
   \   00009B   8F83         MOV       DPH,R7
   \   00009D   A3           INC       DPTR
   \   00009E   AE82         MOV       R6,DPL
   \   0000A0   AF83         MOV       R7,DPH
   2431          
   2432            // parse the manfacturer code
   2433            if ( hdr->fc.manuSpecific )
   \   0000A2   85..82       MOV       DPL,?V0
   \   0000A5   85..83       MOV       DPH,?V1
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   5404         ANL       A,#0x4
   \   0000AB   601D         JZ        ??zclParseHdr_6
   2434            {
   2435              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000AD   8E82         MOV       DPL,R6
   \   0000AF   8F83         MOV       DPH,R7
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   FA           MOV       R2,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F9           MOV       R1,A
   \   0000B6   EA           MOV       A,R2
   \   0000B7   85..82       MOV       DPL,?V0
   \   0000BA   85..83       MOV       DPH,?V1
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E9           MOV       A,R1
   \   0000C2   F0           MOVX      @DPTR,A
   2436              pData += 2;
   \   0000C3   EE           MOV       A,R6
   \   0000C4   2402         ADD       A,#0x2
   \   0000C6   FE           MOV       R6,A
   \   0000C7   5001         JNC       ??zclParseHdr_6
   \   0000C9   0F           INC       R7
   2437            }
   2438          
   2439            // parse the Transaction Sequence Number
   2440            hdr->transSeqNum = *pData++;
   \                     ??zclParseHdr_6:
   \   0000CA   8E82         MOV       DPL,R6
   \   0000CC   8F83         MOV       DPH,R7
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   85..82       MOV       DPL,?V0
   \   0000D2   85..83       MOV       DPH,?V1
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   F0           MOVX      @DPTR,A
   2441          
   2442            // parse the Cluster's command ID
   2443            hdr->commandID = *pData++;
   \   0000DA   8E82         MOV       DPL,R6
   \   0000DC   8F83         MOV       DPH,R7
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   85..82       MOV       DPL,?V0
   \   0000E3   85..83       MOV       DPH,?V1
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   F0           MOVX      @DPTR,A
   2444          
   2445            // Should point to the frame payload
   2446            return ( pData );
   \   0000EC   EE           MOV       A,R6
   \   0000ED   2402         ADD       A,#0x2
   \   0000EF   FA           MOV       R2,A
   \   0000F0   E4           CLR       A
   \   0000F1   3F           ADDC      A,R7
   \   0000F2   FB           MOV       R3,A
   \   0000F3   7F04         MOV       R7,#0x4
   \   0000F5   02....       LJMP      ?BANKED_LEAVE_XDATA
   2447          }
   2448          
   2449          /*********************************************************************
   2450           * @fn      zclBuildHdr
   2451           *
   2452           * @brief   Build header of the ZCL format
   2453           *
   2454           * @param   hdr - outgoing header information
   2455           * @param   pData - outgoing header space
   2456           *
   2457           * @return  pointer past the header
   2458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2459          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   2460          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2461            // Build the Frame Control byte
   2462            *pData = hdr->fc.type;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   5403         ANL       A,#0x3
   \   00000C   8C82         MOV       DPL,R4
   \   00000E   8D83         MOV       DPH,R5
   \   000010   F0           MOVX      @DPTR,A
   2463            *pData |= hdr->fc.manuSpecific << 2;
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   5404         ANL       A,#0x4
   \   000018   F8           MOV       R0,A
   \   000019   8C82         MOV       DPL,R4
   \   00001B   8D83         MOV       DPH,R5
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   48           ORL       A,R0
   \   00001F   F0           MOVX      @DPTR,A
   2464            *pData |= hdr->fc.direction << 3;
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   E0           MOVX      A,@DPTR
   \   000025   5408         ANL       A,#0x8
   \   000027   F8           MOV       R0,A
   \   000028   8C82         MOV       DPL,R4
   \   00002A   8D83         MOV       DPH,R5
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   48           ORL       A,R0
   \   00002E   F0           MOVX      @DPTR,A
   2465            *pData |= hdr->fc.disableDefaultRsp << 4;
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   E0           MOVX      A,@DPTR
   \   000034   5410         ANL       A,#0x10
   \   000036   F8           MOV       R0,A
   \   000037   8C82         MOV       DPL,R4
   \   000039   8D83         MOV       DPH,R5
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   48           ORL       A,R0
   \   00003D   F0           MOVX      @DPTR,A
   2466            pData++;  // move past the frame control field
   \   00003E   A3           INC       DPTR
   \   00003F   AC82         MOV       R4,DPL
   \   000041   AD83         MOV       R5,DPH
   2467          
   2468            // Add the manfacturer code
   2469            if ( hdr->fc.manuSpecific )
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   E0           MOVX      A,@DPTR
   \   000048   5404         ANL       A,#0x4
   \   00004A   6024         JZ        ??zclBuildHdr_0
   2470            {
   2471              *pData++ = LO_UINT16( hdr->manuCode );
   \   00004C   EA           MOV       A,R2
   \   00004D   2402         ADD       A,#0x2
   \   00004F   F8           MOV       R0,A
   \   000050   E4           CLR       A
   \   000051   3B           ADDC      A,R3
   \   000052   F9           MOV       R1,A
   \   000053   8882         MOV       DPL,R0
   \   000055   F583         MOV       DPH,A
   \   000057   E0           MOVX      A,@DPTR
   \   000058   8C82         MOV       DPL,R4
   \   00005A   8D83         MOV       DPH,R5
   \   00005C   F0           MOVX      @DPTR,A
   2472              *pData++ = HI_UINT16( hdr->manuCode );
   \   00005D   8882         MOV       DPL,R0
   \   00005F   8983         MOV       DPH,R1
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   8C82         MOV       DPL,R4
   \   000065   8D83         MOV       DPH,R5
   \   000067   A3           INC       DPTR
   \   000068   F0           MOVX      @DPTR,A
   \   000069   EC           MOV       A,R4
   \   00006A   2402         ADD       A,#0x2
   \   00006C   FC           MOV       R4,A
   \   00006D   5001         JNC       ??zclBuildHdr_0
   \   00006F   0D           INC       R5
   2473            }
   2474          
   2475            // Add the Transaction Sequence Number
   2476            *pData++ = hdr->transSeqNum;
   \                     ??zclBuildHdr_0:
   \   000070   8A82         MOV       DPL,R2
   \   000072   8B83         MOV       DPH,R3
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   8C82         MOV       DPL,R4
   \   00007B   8D83         MOV       DPH,R5
   \   00007D   F0           MOVX      @DPTR,A
   2477          
   2478            // Add the Cluster's command ID
   2479            *pData++ = hdr->commandID;
   \   00007E   8A82         MOV       DPL,R2
   \   000080   8B83         MOV       DPH,R3
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   8C82         MOV       DPL,R4
   \   00008A   8D83         MOV       DPH,R5
   \   00008C   A3           INC       DPTR
   \   00008D   F0           MOVX      @DPTR,A
   2480          
   2481            // Should point to the frame payload
   2482            return ( pData );
   \   00008E   EC           MOV       A,R4
   \   00008F   2402         ADD       A,#0x2
   \   000091   FA           MOV       R2,A
   \   000092   E4           CLR       A
   \   000093   3D           ADDC      A,R5
   \   000094   FB           MOV       R3,A
   \   000095   7F01         MOV       R7,#0x1
   \   000097   02....       LJMP      ?BANKED_LEAVE_XDATA
   2483          }
   2484          
   2485          /*********************************************************************
   2486           * @fn      zclCalcHdrSize
   2487           *
   2488           * @brief   Calculate the number of bytes needed for an outgoing
   2489           *          ZCL header.
   2490           *
   2491           * @param   hdr - outgoing header information
   2492           *
   2493           * @return  returns the number of bytes needed
   2494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2495          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   \                     zclCalcHdrSize:
   2496          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2497            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   \   000004   7903         MOV       R1,#0x3
   2498          
   2499            // Add the manfacturer code
   2500            if ( hdr->fc.manuSpecific )
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   5404         ANL       A,#0x4
   \   00000D   6002         JZ        ??zclCalcHdrSize_0
   2501            {
   2502              needed += 2;
   \   00000F   7905         MOV       R1,#0x5
   2503            }
   2504          
   2505            return ( needed );
   \                     ??zclCalcHdrSize_0:
   \   000011   D083         POP       DPH
   \   000013   D082         POP       DPL
   \   000015   02....       LJMP      ?BRET
   2506          }
   2507          
   2508          /*********************************************************************
   2509           * @fn      zclFindPlugin
   2510           *
   2511           * @brief   Find the right plugin for a cluster ID
   2512           *
   2513           * @param   clusterID - cluster ID to look for
   2514           * @param   profileID - profile ID
   2515           *
   2516           * @return  pointer to plugin, NULL if not found
   2517           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2518          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   \                     zclFindPlugin:
   2519          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2520            zclLibPlugin_t *pLoop = plugins;
   \   000004   90....       MOV       DPTR,#plugins
   \   000007   8004         SJMP      ??zclFindPlugin_0
   2521          
   2522            (void)profileID;  // Intentionally unreferenced parameter
   2523          
   2524            while ( pLoop != NULL )
   2525            {
   2526              if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
   2527              {
   2528                return ( pLoop );
   2529              }
   2530          
   2531              pLoop = pLoop->next;
   \                     ??zclFindPlugin_1:
   \   000009   8882         MOV       DPL,R0
   \   00000B   8983         MOV       DPH,R1
   \                     ??zclFindPlugin_0:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   6028         JZ        ??zclFindPlugin_2
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FC           MOV       R4,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FD           MOV       R5,A
   \   000021   C3           CLR       C
   \   000022   EA           MOV       A,R2
   \   000023   9C           SUBB      A,R4
   \   000024   EB           MOV       A,R3
   \   000025   9D           SUBB      A,R5
   \   000026   40E1         JC        ??zclFindPlugin_1
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   C3           CLR       C
   \   000031   E0           MOVX      A,@DPTR
   \   000032   9A           SUBB      A,R2
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   9B           SUBB      A,R3
   \   000036   40D1         JC        ??zclFindPlugin_1
   \   000038   E8           MOV       A,R0
   \   000039   FA           MOV       R2,A
   \   00003A   E9           MOV       A,R1
   \   00003B   FB           MOV       R3,A
   \   00003C   8004         SJMP      ??zclFindPlugin_3
   2532            }
   2533          
   2534            return ( (zclLibPlugin_t *)NULL );
   \                     ??zclFindPlugin_2:
   \   00003E   7A00         MOV       R2,#0x0
   \   000040   7B00         MOV       R3,#0x0
   \                     ??zclFindPlugin_3:
   \   000042   D083         POP       DPH
   \   000044   D082         POP       DPL
   \   000046   02....       LJMP      ?BRET
   2535          }
   2536          
   2537          #ifdef ZCL_DISCOVER
   2538          /*********************************************************************
   2539           * @fn      zclFindCmdRecsList
   2540           *
   2541           * @brief   Find the right command record list for an endpoint
   2542           *
   2543           * @param   endpoint - endpoint to look for
   2544           *
   2545           * @return  pointer to record list, NULL if not found
   2546           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2547          static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
   \                     zclFindCmdRecsList:
   2548          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2549            zclCmdRecsList_t *pLoop = gpCmdList;
   \   000004   90....       MOV       DPTR,#gpCmdList
   \   000007   8004         SJMP      ??zclFindCmdRecsList_0
   2550          
   2551            while ( pLoop != NULL )
   2552            {
   2553              if ( pLoop->endpoint == endpoint )
   2554              {
   2555                return ( pLoop );
   2556              }
   2557          
   2558              pLoop = pLoop->pNext;
   \                     ??zclFindCmdRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindCmdRecsList_0:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FB           MOV       R3,A
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   600C         JZ        ??zclFindCmdRecsList_2
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   69           XRL       A,R1
   \   00001E   70E9         JNZ       ??zclFindCmdRecsList_1
   \   000020   8004         SJMP      ??zclFindCmdRecsList_3
   2559            }
   2560          
   2561            return ( NULL );
   \                     ??zclFindCmdRecsList_2:
   \   000022   7A00         MOV       R2,#0x0
   \   000024   7B00         MOV       R3,#0x0
   \                     ??zclFindCmdRecsList_3:
   \   000026   D083         POP       DPH
   \   000028   D082         POP       DPL
   \   00002A   02....       LJMP      ?BRET
   2562          }
   2563          
   2564          /*********************************************************************
   2565           * @fn      zclFindCmdRec
   2566           *
   2567           * @brief   Find the command record that matchs the parameters
   2568           *
   2569           * @param   endpoint - Application's endpoint
   2570           * @param   clusterID - cluster ID
   2571           * @param   attrId - attribute looking for
   2572           * @param   pAttr - attribute record to be returned
   2573           *
   2574           * @return  TRUE if record found. FALSE, otherwise.
   2575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2576          uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
   \                     zclFindCmdRec:
   2577          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   2578            uint8 i;
   2579            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000B   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   2580          
   2581            if ( pRec != NULL )
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   606F         JZ        ??zclFindCmdRec_0
   2582            {
   2583              for ( i = 0; i < pRec->numCommands; i++ )
   \   000016   7C00         MOV       R4,#0x0
   \   000018   8001         SJMP      ??zclFindCmdRec_1
   \                     ??zclFindCmdRec_2:
   \   00001A   0C           INC       R4
   \                     ??zclFindCmdRec_1:
   \   00001B   85..82       MOV       DPL,?V2
   \   00001E   85..83       MOV       DPH,?V3
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   EC           MOV       A,R4
   \   000027   C3           CLR       C
   \   000028   98           SUBB      A,R0
   \   000029   505A         JNC       ??zclFindCmdRec_0
   2584              {
   2585                if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
   \   00002B   EC           MOV       A,R4
   \   00002C   F5..         MOV       ?V4,A
   \   00002E   75..00       MOV       ?V5,#0x0
   \   000031   7402         MOV       A,#0x2
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?S_SHL
   \   000038   85..82       MOV       DPL,?V2
   \   00003B   85..83       MOV       DPH,?V3
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   25..         ADD       A,?V4
   \   000045   F8           MOV       R0,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   35..         ADDC      A,?V5
   \   00004A   F9           MOV       R1,A
   \   00004B   8882         MOV       DPL,R0
   \   00004D   F583         MOV       DPH,A
   \   00004F   E4           CLR       A
   \   000050   93           MOVC      A,@A+DPTR
   \   000051   FA           MOV       R2,A
   \   000052   7401         MOV       A,#0x1
   \   000054   93           MOVC      A,@A+DPTR
   \   000055   FB           MOV       R3,A
   \   000056   EE           MOV       A,R6
   \   000057   6A           XRL       A,R2
   \   000058   7002         JNZ       ??zclFindCmdRec_3
   \   00005A   EF           MOV       A,R7
   \   00005B   6B           XRL       A,R3
   \                     ??zclFindCmdRec_3:
   \   00005C   70BC         JNZ       ??zclFindCmdRec_2
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   E4           CLR       A
   \   000061   93           MOVC      A,@A+DPTR
   \   000062   65..         XRL       A,?V1
   \   000064   70B4         JNZ       ??zclFindCmdRec_2
   2586                {
   2587                  *pCmd = pRec->pCmdRecs[i];
   \   000066   8882         MOV       DPL,R0
   \   000068   8983         MOV       DPH,R1
   \   00006A   C082         PUSH      DPL
   \   00006C   C083         PUSH      DPH
   \   00006E   740E         MOV       A,#0xe
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   E0           MOVX      A,@DPTR
   \   000074   FC           MOV       R4,A
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   FD           MOV       R5,A
   \   000078   D083         POP       DPH
   \   00007A   D082         POP       DPL
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2588          
   2589                  return ( TRUE ); // EMBEDDED RETURN
   \   000081   7901         MOV       R1,#0x1
   \   000083   8002         SJMP      ??zclFindCmdRec_4
   2590                }
   2591              }
   2592            }
   2593          
   2594            return ( FALSE );
   \                     ??zclFindCmdRec_0:
   \   000085   7900         MOV       R1,#0x0
   \                     ??zclFindCmdRec_4:
   \   000087   7F06         MOV       R7,#0x6
   \   000089   02....       LJMP      ?BANKED_LEAVE_XDATA
   2595          }
   2596          #endif // ZCL_DISCOVER
   2597          
   2598          /*********************************************************************
   2599           * @fn      zclFindAttrRecsList
   2600           *
   2601           * @brief   Find the right attribute record list for an endpoint
   2602           *
   2603           * @param   clusterID - endpointto look for
   2604           *
   2605           * @return  pointer to record list, NULL if not found
   2606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2607          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
   \                     zclFindAttrRecsList:
   2608          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2609            zclAttrRecsList *pLoop = attrList;
   \   000004   90....       MOV       DPTR,#attrList
   \   000007   8004         SJMP      ??zclFindAttrRecsList_0
   2610          
   2611            while ( pLoop != NULL )
   2612            {
   2613              if ( pLoop->endpoint == endpoint )
   2614              {
   2615                return ( pLoop );
   2616              }
   2617          
   2618              pLoop = pLoop->next;
   \                     ??zclFindAttrRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindAttrRecsList_0:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FB           MOV       R3,A
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   600C         JZ        ??zclFindAttrRecsList_2
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   69           XRL       A,R1
   \   00001E   70E9         JNZ       ??zclFindAttrRecsList_1
   \   000020   8004         SJMP      ??zclFindAttrRecsList_3
   2619            }
   2620          
   2621            return ( NULL );
   \                     ??zclFindAttrRecsList_2:
   \   000022   7A00         MOV       R2,#0x0
   \   000024   7B00         MOV       R3,#0x0
   \                     ??zclFindAttrRecsList_3:
   \   000026   D083         POP       DPH
   \   000028   D082         POP       DPL
   \   00002A   02....       LJMP      ?BRET
   2622          }
   2623          
   2624          /*********************************************************************
   2625           * @fn      zclFindAttrRec
   2626           *
   2627           * @brief   Find the attribute record that matchs the parameters
   2628           *
   2629           * @param   endpoint - Application's endpoint
   2630           * @param   clusterID - cluster ID
   2631           * @param   attrId - attribute looking for
   2632           * @param   pAttr - attribute record to be returned
   2633           *
   2634           * @return  TRUE if record found. FALSE, otherwise.
   2635           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2636          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   2637          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2638            uint8 x;
   2639            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   2640          
   2641            if ( pRec != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??zclFindAttrRec_0 & 0xFFFF
   2642            {
   2643              for ( x = 0; x < pRec->numAttributes; x++ )
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   8001         SJMP      ??zclFindAttrRec_1
   \                     ??zclFindAttrRec_2:
   \   00001F   0C           INC       R4
   \                     ??zclFindAttrRec_1:
   \   000020   85..82       MOV       DPL,?V4
   \   000023   85..83       MOV       DPH,?V5
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F8           MOV       R0,A
   \   00002F   EC           MOV       A,R4
   \   000030   C3           CLR       C
   \   000031   98           SUBB      A,R0
   \   000032   5069         JNC       ??zclFindAttrRec_0
   2644              {
   2645                if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
   \   000034   EC           MOV       A,R4
   \   000035   F5..         MOV       ?V6,A
   \   000037   75..00       MOV       ?V7,#0x0
   \   00003A   7403         MOV       A,#0x3
   \   00003C   78..         MOV       R0,#?V6
   \   00003E   12....       LCALL     ?S_SHL
   \   000041   85..82       MOV       DPL,?V4
   \   000044   85..83       MOV       DPH,?V5
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   25..         ADD       A,?V6
   \   000052   F8           MOV       R0,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   35..         ADDC      A,?V7
   \   000057   F9           MOV       R1,A
   \   000058   8882         MOV       DPL,R0
   \   00005A   F583         MOV       DPH,A
   \   00005C   E4           CLR       A
   \   00005D   93           MOVC      A,@A+DPTR
   \   00005E   FA           MOV       R2,A
   \   00005F   7401         MOV       A,#0x1
   \   000061   93           MOVC      A,@A+DPTR
   \   000062   FB           MOV       R3,A
   \   000063   E5..         MOV       A,?V0
   \   000065   6A           XRL       A,R2
   \   000066   7003         JNZ       ??zclFindAttrRec_3
   \   000068   E5..         MOV       A,?V1
   \   00006A   6B           XRL       A,R3
   \                     ??zclFindAttrRec_3:
   \   00006B   70B2         JNZ       ??zclFindAttrRec_2
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E4           CLR       A
   \   000070   93           MOVC      A,@A+DPTR
   \   000071   FA           MOV       R2,A
   \   000072   7401         MOV       A,#0x1
   \   000074   93           MOVC      A,@A+DPTR
   \   000075   FB           MOV       R3,A
   \   000076   EE           MOV       A,R6
   \   000077   6A           XRL       A,R2
   \   000078   7002         JNZ       ??zclFindAttrRec_4
   \   00007A   EF           MOV       A,R7
   \   00007B   6B           XRL       A,R3
   \                     ??zclFindAttrRec_4:
   \   00007C   70A1         JNZ       ??zclFindAttrRec_2
   2646                {
   2647                  *pAttr = pRec->attrs[x];
   \   00007E   8882         MOV       DPL,R0
   \   000080   8983         MOV       DPH,R1
   \   000082   C082         PUSH      DPL
   \   000084   C083         PUSH      DPH
   \   000086   7410         MOV       A,#0x10
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   FC           MOV       R4,A
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   FD           MOV       R5,A
   \   000090   D083         POP       DPH
   \   000092   D082         POP       DPL
   \   000094   7408         MOV       A,#0x8
   \   000096   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2648          
   2649                  return ( TRUE ); // EMBEDDED RETURN
   \   000099   7901         MOV       R1,#0x1
   \   00009B   8002         SJMP      ??zclFindAttrRec_5
   2650                }
   2651              }
   2652            }
   2653          
   2654            return ( FALSE );
   \                     ??zclFindAttrRec_0:
   \   00009D   7900         MOV       R1,#0x0
   \                     ??zclFindAttrRec_5:
   \   00009F   7F08         MOV       R7,#0x8
   \   0000A1   02....       LJMP      ?BANKED_LEAVE_XDATA
   2655          }
   2656          
   2657          #if defined ( ZCL_STANDALONE )
   2658          /*********************************************************************
   2659           * @fn      zclSetAttrRecList
   2660           *
   2661           * @brief   Set attribute record list for end point
   2662           *
   2663           * @param   endpoint - endpoint the attribute list belongs to
   2664           * @param   numAttr - number of attributes in list
   2665           * @param   attrList - array of attribute records.
   2666           *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
   2667           *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
   2668           *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
   2669           *                     ATTRIBUTE INFO
   2670           *
   2671           * @return  TRUE if successful, FALSE otherwise.
   2672           */
   2673          uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
   2674          {
   2675            zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
   2676          
   2677            if ( pRecsList != NULL )
   2678            {
   2679              pRecsList->numAttributes = numAttr;
   2680              pRecsList->attrs = attrList;
   2681              return ( TRUE );
   2682            }
   2683          
   2684            return ( FALSE );
   2685          }
   2686          
   2687          #endif // ZCL_STANDALONE
   2688          
   2689          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
   2690          /*********************************************************************
   2691           * @fn      zclGetReadWriteCB
   2692           *
   2693           * @brief   Get the Read/Write callback function pointer for a given endpoint.
   2694           *
   2695           * @param   endpoint - Application's endpoint
   2696           *
   2697           * @return  Read/Write CB, NULL if not found
   2698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2699          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
   \                     zclGetReadWriteCB:
   2700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2701            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2702          
   2703            if ( pRec != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   600A         JZ        ??zclGetReadWriteCB_0
   2704            {
   2705              return ( pRec->pfnReadWriteCB );
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FA           MOV       R2,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   FB           MOV       R3,A
   \   00001A   8004         SJMP      ??zclGetReadWriteCB_1
   2706            }
   2707          
   2708            return ( NULL );
   \                     ??zclGetReadWriteCB_0:
   \   00001C   7A00         MOV       R2,#0x0
   \   00001E   7B00         MOV       R3,#0x0
   \                     ??zclGetReadWriteCB_1:
   \   000020   7F02         MOV       R7,#0x2
   \   000022   02....       LJMP      ?BANKED_LEAVE_XDATA
   2709          }
   2710          
   2711          /*********************************************************************
   2712           * @fn      zclGetAuthorizeCB
   2713           *
   2714           * @brief   Get the Read/Write Authorization callback function pointer
   2715           *          for a given endpoint.
   2716           *
   2717           * @param   endpoint - Application's endpoint
   2718           *
   2719           * @return  Authorization CB, NULL if not found
   2720           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2721          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
   \                     zclGetAuthorizeCB:
   2722          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2723            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2724          
   2725            if ( pRec != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   600C         JZ        ??zclGetAuthorizeCB_0
   2726            {
   2727              return ( pRec->pfnAuthorizeCB );
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FA           MOV       R2,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FB           MOV       R3,A
   \   00001C   8004         SJMP      ??zclGetAuthorizeCB_1
   2728            }
   2729          
   2730            return ( NULL );
   \                     ??zclGetAuthorizeCB_0:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclGetAuthorizeCB_1:
   \   000022   7F02         MOV       R7,#0x2
   \   000024   02....       LJMP      ?BANKED_LEAVE_XDATA
   2731          }
   2732          #endif // ZCL_READ || ZCL_WRITE
   2733          
   2734          /*********************************************************************
   2735           * @fn      zclFindClusterOption
   2736           *
   2737           * @brief   Find the option record that matchs the cluster id
   2738           *
   2739           * @param   endpoint - Application's endpoint
   2740           * @param   clusterID - cluster ID looking for
   2741           *
   2742           * @return  pointer to clutser option, NULL if not found
   2743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2744          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   2745          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
   2746            zclClusterOptionList *pLoop;
   2747          
   2748            pLoop = clusterOptionList;
   \   00000B   90....       MOV       DPTR,#clusterOptionList
   \   00000E   8004         SJMP      ??zclFindClusterOption_0
   2749            while ( pLoop != NULL )
   2750            {
   2751              if ( pLoop->endpoint == endpoint )
   2752              {
   2753                uint8 x;
   2754                for ( x = 0; x < pLoop->numOptions; x++ )
   2755                {
   2756                  if ( pLoop->options[x].clusterID == clusterID )
   2757                  {
   2758                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   2759                  }
   2760                }
   2761              }
   2762          
   2763              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   E8           MOV       A,R0
   \   00001A   49           ORL       A,R1
   \   00001B   6046         JZ        ??zclFindClusterOption_2
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6F           XRL       A,R7
   \   000025   70E9         JNZ       ??zclFindClusterOption_1
   \   000027   7E00         MOV       R6,#0x0
   \   000029   8001         SJMP      ??zclFindClusterOption_3
   \                     ??zclFindClusterOption_4:
   \   00002B   0E           INC       R6
   \                     ??zclFindClusterOption_3:
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FA           MOV       R2,A
   \   000035   EE           MOV       A,R6
   \   000036   C3           CLR       C
   \   000037   9A           SUBB      A,R2
   \   000038   50D6         JNC       ??zclFindClusterOption_1
   \   00003A   EE           MOV       A,R6
   \   00003B   75F003       MOV       B,#0x3
   \   00003E   A4           MUL       AB
   \   00003F   FA           MOV       R2,A
   \   000040   85F0..       MOV       ?V0,B
   \   000043   AB..         MOV       R3,?V0
   \   000045   8882         MOV       DPL,R0
   \   000047   8983         MOV       DPH,R1
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   2A           ADD       A,R2
   \   00004F   FA           MOV       R2,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   3B           ADDC      A,R3
   \   000053   FB           MOV       R3,A
   \   000054   8A82         MOV       DPL,R2
   \   000056   F583         MOV       DPH,A
   \   000058   E0           MOVX      A,@DPTR
   \   000059   6C           XRL       A,R4
   \   00005A   7003         JNZ       ??zclFindClusterOption_5
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   6D           XRL       A,R5
   \                     ??zclFindClusterOption_5:
   \   00005F   70CA         JNZ       ??zclFindClusterOption_4
   \   000061   8004         SJMP      ??zclFindClusterOption_6
   2764            }
   2765          
   2766            return ( NULL );
   \                     ??zclFindClusterOption_2:
   \   000063   7A00         MOV       R2,#0x0
   \   000065   7B00         MOV       R3,#0x0
   \                     ??zclFindClusterOption_6:
   \   000067   7F01         MOV       R7,#0x1
   \   000069   02....       LJMP      ?BANKED_LEAVE_XDATA
   2767          }
   2768          
   2769          /*********************************************************************
   2770           * @fn      zclGetClusterOption
   2771           *
   2772           * @brief   Get the option record that matchs the cluster id
   2773           *
   2774           * @param   endpoint - Application's endpoint
   2775           * @param   clusterID - cluster ID looking for
   2776           *
   2777           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   2778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2779          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   2780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2781            uint8 option;
   2782            zclOptionRec_t *pOption;
   2783          
   2784            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2785            if ( pOption != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6006         JZ        ??zclGetClusterOption_0
   2786            {
   2787              option = pOption->option;
   2788              if ( !ZG_SECURE_ENABLED )
   2789              {
   2790                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   2791              }
   2792          
   2793              return ( option ); // EMBEDDED RETURN
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   8002         SJMP      ??zclGetClusterOption_1
   2794            }
   2795          
   2796            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_0:
   \   000018   7900         MOV       R1,#0x0
   \                     ??zclGetClusterOption_1:
   \   00001A   7F02         MOV       R7,#0x2
   \   00001C   02....       LJMP      ?BANKED_LEAVE_XDATA
   2797          }
   2798          
   2799          /*********************************************************************
   2800           * @fn      zclSetSecurityOption
   2801           *
   2802           * @brief   Set the security option for the cluster id
   2803           *
   2804           * @param   endpoint - Application's endpoint
   2805           * @param   clusterID - cluster ID looking for
   2806           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   2807           *
   2808           * @return  none
   2809           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2810          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   2811          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FF           MOV       R7,A
   2812            zclOptionRec_t *pOption;
   2813          
   2814            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   A9..         MOV       R1,?V1
   2815            if ( pOption != NULL )
   \   00000E   EA           MOV       A,R2
   \   00000F   49           ORL       A,R1
   \   000010   6015         JZ        ??zclSetSecurityOption_0
   2816            {
   2817              if ( enable )
   \   000012   EA           MOV       A,R2
   \   000013   2402         ADD       A,#0x2
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   39           ADDC      A,R1
   \   000019   F583         MOV       DPH,A
   \   00001B   EF           MOV       A,R7
   \   00001C   6005         JZ        ??zclSetSecurityOption_1
   2818              {
   2819                pOption->option |= AF_EN_SECURITY;
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   D2E6         SETB      0xE0 /* A   */.6
   \   000021   8003         SJMP      ??zclSetSecurityOption_2
   2820              }
   2821              else
   2822              {
   2823                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_1:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C2E6         CLR       0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_2:
   \   000026   F0           MOVX      @DPTR,A
   2824              }
   2825            }
   2826          }
   \                     ??zclSetSecurityOption_0:
   \   000027   7F02         MOV       R7,#0x2
   \   000029   02....       LJMP      ?BANKED_LEAVE_XDATA
   2827          
   2828          #ifdef ZCL_DISCOVER
   2829          /*********************************************************************
   2830           * @fn      zclFindNextCmdRec
   2831           *
   2832           * @brief   Find the command (or next) record that matchs the parameters
   2833           *
   2834           * @param   endpoint - Application's endpoint
   2835           * @param   clusterID - cluster ID
   2836           * @param   commandID - command ID from requesting command
   2837           * @param   direction- direction of received command
   2838           * @param   pCmdID - command looking for
   2839           * @param   pCmd - command information within command record list
   2840           *
   2841           * @return  pointer to command record, NULL no more records of this cluster
   2842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2843          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
   \                     zclFindNextCmdRec:
   2844                                          uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
   2845          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   \   00000B   8D..         MOV       ?V2,R5
   2846            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000D   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   2847            uint8 i;
   2848          
   2849            if ( pRec != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   2850            {
   2851              for ( i = 0; i < pRec->numCommands; i++ )
   \   00001B   75..00       MOV       ?V3,#0x0
   \   00001E   7410         MOV       A,#0x10
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F8           MOV       R0,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   E8           MOV       A,R0
   \   000029   FA           MOV       R2,A
   \   00002A   E9           MOV       A,R1
   \   00002B   FB           MOV       R3,A
   \   00002C   802C         SJMP      ??zclFindNextCmdRec_1
   2852              {
   2853                if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
   2854                    ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
   2855                {
   2856                  if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   2857                  {
   2858                    if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
   \                     ??zclFindNextCmdRec_2:
   \   00002E   7401         MOV       A,#0x1
   \   000030   65..         XRL       A,?V2
   \   000032   7010         JNZ       ??zclFindNextCmdRec_3
   \   000034   8C82         MOV       DPL,R4
   \   000036   8D83         MOV       DPH,R5
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E4           CLR       A
   \   00003C   93           MOVC      A,@A+DPTR
   \   00003D   A2E3         MOV       C,0xE0 /* A   */.3
   \   00003F   5003         JNC       $+5
   \   000041   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   2859                    {
   2860                      *pCmd = pRec->pCmdRecs[i];
   2861          
   2862                      // Update command ID
   2863                      *pCmdID = pCmd->cmdID;
   2864          
   2865                      return ( TRUE ); // EMBEDDED RETURN
   2866                    }
   2867                    else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
   \                     ??zclFindNextCmdRec_3:
   \   000044   E5..         MOV       A,?V2
   \   000046   7010         JNZ       ??zclFindNextCmdRec_5
   \   000048   8C82         MOV       DPL,R4
   \   00004A   8D83         MOV       DPH,R5
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E4           CLR       A
   \   000050   93           MOVC      A,@A+DPTR
   \   000051   A2E2         MOV       C,0xE0 /* A   */.2
   \   000053   5003         JNC       $+5
   \   000055   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   2868                    {
   2869                      *pCmd = pRec->pCmdRecs[i];
   2870          
   2871                      // Update command ID
   2872                      *pCmdID = pCmd->cmdID;
   2873          
   2874                      return ( TRUE ); // EMBEDDED RETURN
   2875                    }
   2876                  }
   \                     ??zclFindNextCmdRec_5:
   \   000058   05..         INC       ?V3
   \                     ??zclFindNextCmdRec_1:
   \   00005A   85..82       MOV       DPL,?V4
   \   00005D   85..83       MOV       DPH,?V5
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F8           MOV       R0,A
   \   000065   E5..         MOV       A,?V3
   \   000067   C3           CLR       C
   \   000068   98           SUBB      A,R0
   \   000069   4003         JC        $+5
   \   00006B   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   \   00006E   E5..         MOV       A,?V3
   \   000070   F5..         MOV       ?V6,A
   \   000072   75..00       MOV       ?V7,#0x0
   \   000075   7402         MOV       A,#0x2
   \   000077   78..         MOV       R0,#?V6
   \   000079   12....       LCALL     ?S_SHL
   \   00007C   85..82       MOV       DPL,?V4
   \   00007F   85..83       MOV       DPH,?V5
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   25..         ADD       A,?V6
   \   000089   F8           MOV       R0,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   35..         ADDC      A,?V7
   \   00008E   F9           MOV       R1,A
   \   00008F   E8           MOV       A,R0
   \   000090   FC           MOV       R4,A
   \   000091   E9           MOV       A,R1
   \   000092   FD           MOV       R5,A
   \   000093   8882         MOV       DPL,R0
   \   000095   F583         MOV       DPH,A
   \   000097   E4           CLR       A
   \   000098   93           MOVC      A,@A+DPTR
   \   000099   F8           MOV       R0,A
   \   00009A   7401         MOV       A,#0x1
   \   00009C   93           MOVC      A,@A+DPTR
   \   00009D   F9           MOV       R1,A
   \   00009E   EE           MOV       A,R6
   \   00009F   68           XRL       A,R0
   \   0000A0   7002         JNZ       ??zclFindNextCmdRec_6
   \   0000A2   EF           MOV       A,R7
   \   0000A3   69           XRL       A,R1
   \                     ??zclFindNextCmdRec_6:
   \   0000A4   70B2         JNZ       ??zclFindNextCmdRec_5
   \   0000A6   8A82         MOV       DPL,R2
   \   0000A8   8B83         MOV       DPH,R3
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F8           MOV       R0,A
   \   0000AC   8C82         MOV       DPL,R4
   \   0000AE   8D83         MOV       DPH,R5
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   E4           CLR       A
   \   0000B3   93           MOVC      A,@A+DPTR
   \   0000B4   C3           CLR       C
   \   0000B5   98           SUBB      A,R0
   \   0000B6   40A0         JC        ??zclFindNextCmdRec_5
   \   0000B8   7411         MOV       A,#0x11
   \   0000BA   65..         XRL       A,?V1
   \   0000BC   7003         JNZ       $+5
   \   0000BE   02....       LJMP      ??zclFindNextCmdRec_2 & 0xFFFF
   2877                  else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
   \   0000C1   7413         MOV       A,#0x13
   \   0000C3   65..         XRL       A,?V1
   \   0000C5   7051         JNZ       ??zclFindNextCmdRec_0
   2878                  {
   2879                    if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
   \   0000C7   E5..         MOV       A,?V2
   \   0000C9   700D         JNZ       ??zclFindNextCmdRec_7
   \   0000CB   8C82         MOV       DPL,R4
   \   0000CD   8D83         MOV       DPH,R5
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   E4           CLR       A
   \   0000D3   93           MOVC      A,@A+DPTR
   \   0000D4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000D6   4019         JC        ??zclFindNextCmdRec_4
   2880                    {
   2881                      *pCmd = pRec->pCmdRecs[i];
   2882          
   2883                      // Update command ID
   2884                      *pCmdID = pCmd->cmdID;
   2885          
   2886                      return ( TRUE ); // EMBEDDED RETURN
   2887                    }
   2888                    else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
   \                     ??zclFindNextCmdRec_7:
   \   0000D8   7401         MOV       A,#0x1
   \   0000DA   65..         XRL       A,?V2
   \   0000DC   6003         JZ        $+5
   \   0000DE   02....       LJMP      ??zclFindNextCmdRec_5 & 0xFFFF
   \   0000E1   8C82         MOV       DPL,R4
   \   0000E3   8D83         MOV       DPH,R5
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   E4           CLR       A
   \   0000E9   93           MOVC      A,@A+DPTR
   \   0000EA   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000EC   4003         JC        $+5
   \   0000EE   02....       LJMP      ??zclFindNextCmdRec_5 & 0xFFFF
   \                     ??zclFindNextCmdRec_4:
   \   0000F1   7412         MOV       A,#0x12
   \   0000F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   F8           MOV       R0,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   F9           MOV       R1,A
   2889                    {
   2890                      *pCmd = pRec->pCmdRecs[i];
   \   0000FB   8C82         MOV       DPL,R4
   \   0000FD   8D83         MOV       DPH,R5
   \   0000FF   E8           MOV       A,R0
   \   000100   FC           MOV       R4,A
   \   000101   E9           MOV       A,R1
   \   000102   FD           MOV       R5,A
   \   000103   7404         MOV       A,#0x4
   \   000105   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2891          
   2892                      // Update command ID
   2893                      *pCmdID = pCmd->cmdID;
   \   000108   8882         MOV       DPL,R0
   \   00010A   8983         MOV       DPH,R1
   \   00010C   A3           INC       DPTR
   \   00010D   A3           INC       DPTR
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   8A82         MOV       DPL,R2
   \   000111   8B83         MOV       DPH,R3
   \   000113   F0           MOVX      @DPTR,A
   2894          
   2895                      return ( TRUE ); // EMBEDDED RETURN
   \   000114   7901         MOV       R1,#0x1
   \   000116   8002         SJMP      ??zclFindNextCmdRec_8
   2896                    }
   2897                  }
   2898                  else
   2899                  {
   2900                    return ( FALSE ); // Incorrect Command ID
   2901                  }
   2902                }
   2903              }
   2904            }
   2905          
   2906            return ( FALSE );
   \                     ??zclFindNextCmdRec_0:
   \   000118   7900         MOV       R1,#0x0
   \                     ??zclFindNextCmdRec_8:
   \   00011A   7F08         MOV       R7,#0x8
   \   00011C   02....       LJMP      ?BANKED_LEAVE_XDATA
   2907          }
   2908          
   2909          /*********************************************************************
   2910           * @fn      zclFindNextAttrRec
   2911           *
   2912           * @brief   Find the attribute (or next) record that matchs the parameters
   2913           *
   2914           * @param   endpoint - Application's endpoint
   2915           * @param   clusterID - cluster ID
   2916           * @param   attr - attribute looking for
   2917           *
   2918           * @return  pointer to attribute record, NULL if not found
   2919           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2920          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
   \                     zclFindNextAttrRec:
   2921                                           uint16 *attrId, zclAttrRec_t *pAttr )
   2922          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   2923            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000B   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   00000E   8A..         MOV       ?V6,R2
   \   000010   8B..         MOV       ?V7,R3
   2924            uint8 attrDir;
   2925          
   2926            if ( pRec != NULL )
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   7003         JNZ       $+5
   \   000016   02....       LJMP      ??zclFindNextAttrRec_0 & 0xFFFF
   2927            {
   2928              uint16 x;
   2929          
   2930              for ( x = 0; x < pRec->numAttributes; x++ )
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   7410         MOV       A,#0x10
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F8           MOV       R0,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   88..         MOV       ?V2,R0
   \   000028   F5..         MOV       ?V3,A
   \   00002A   8005         SJMP      ??zclFindNextAttrRec_1
   \                     ??zclFindNextAttrRec_2:
   \   00002C   0A           INC       R2
   \   00002D   EA           MOV       A,R2
   \   00002E   7001         JNZ       ??zclFindNextAttrRec_1
   \   000030   0B           INC       R3
   \                     ??zclFindNextAttrRec_1:
   \   000031   85..82       MOV       DPL,?V6
   \   000034   85..83       MOV       DPH,?V7
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F8           MOV       R0,A
   \   000040   C3           CLR       C
   \   000041   EA           MOV       A,R2
   \   000042   98           SUBB      A,R0
   \   000043   EB           MOV       A,R3
   \   000044   9400         SUBB      A,#0x0
   \   000046   4003         JC        $+5
   \   000048   02....       LJMP      ??zclFindNextAttrRec_0 & 0xFFFF
   2931              {
   2932                if ( ( pRec->attrs[x].clusterID == clusterID ) &&
   2933                     ( pRec->attrs[x].attr.attrId >= *attrId ) )
   \   00004B   8A..         MOV       ?V4,R2
   \   00004D   8B..         MOV       ?V5,R3
   \   00004F   7403         MOV       A,#0x3
   \   000051   78..         MOV       R0,#?V4
   \   000053   12....       LCALL     ?S_SHL
   \   000056   85..82       MOV       DPL,?V6
   \   000059   85..83       MOV       DPH,?V7
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   25..         ADD       A,?V4
   \   000067   F8           MOV       R0,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   35..         ADDC      A,?V5
   \   00006C   F9           MOV       R1,A
   \   00006D   E8           MOV       A,R0
   \   00006E   FC           MOV       R4,A
   \   00006F   E9           MOV       A,R1
   \   000070   FD           MOV       R5,A
   \   000071   8882         MOV       DPL,R0
   \   000073   F583         MOV       DPH,A
   \   000075   E4           CLR       A
   \   000076   93           MOVC      A,@A+DPTR
   \   000077   F8           MOV       R0,A
   \   000078   7401         MOV       A,#0x1
   \   00007A   93           MOVC      A,@A+DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   EE           MOV       A,R6
   \   00007D   68           XRL       A,R0
   \   00007E   7002         JNZ       ??zclFindNextAttrRec_3
   \   000080   EF           MOV       A,R7
   \   000081   69           XRL       A,R1
   \                     ??zclFindNextAttrRec_3:
   \   000082   70A8         JNZ       ??zclFindNextAttrRec_2
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   E4           CLR       A
   \   000087   93           MOVC      A,@A+DPTR
   \   000088   F5..         MOV       ?V4,A
   \   00008A   7401         MOV       A,#0x1
   \   00008C   93           MOVC      A,@A+DPTR
   \   00008D   F5..         MOV       ?V5,A
   \   00008F   85..82       MOV       DPL,?V2
   \   000092   85..83       MOV       DPH,?V3
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F8           MOV       R0,A
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F9           MOV       R1,A
   \   00009A   C3           CLR       C
   \   00009B   E5..         MOV       A,?V4
   \   00009D   98           SUBB      A,R0
   \   00009E   E5..         MOV       A,?V5
   \   0000A0   99           SUBB      A,R1
   \   0000A1   4089         JC        ??zclFindNextAttrRec_2
   2934                {
   2935                  // also make sure direction is right
   2936                  attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
   2937                  if ( (attrDir == direction) || (pRec->attrs[x].attr.accessControl & ACCESS_GLOBAL))
   \   0000A3   EC           MOV       A,R4
   \   0000A4   2405         ADD       A,#0x5
   \   0000A6   F582         MOV       DPL,A
   \   0000A8   E4           CLR       A
   \   0000A9   3D           ADDC      A,R5
   \   0000AA   F583         MOV       DPH,A
   \   0000AC   E4           CLR       A
   \   0000AD   93           MOVC      A,@A+DPTR
   \   0000AE   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000B0   E4           CLR       A
   \   0000B1   33           RLC       A
   \   0000B2   65..         XRL       A,?V1
   \   0000B4   6009         JZ        ??zclFindNextAttrRec_4
   \   0000B6   E4           CLR       A
   \   0000B7   93           MOVC      A,@A+DPTR
   \   0000B8   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000BA   4003         JC        $+5
   \   0000BC   02....       LJMP      ??zclFindNextAttrRec_2 & 0xFFFF
   \                     ??zclFindNextAttrRec_4:
   \   0000BF   7412         MOV       A,#0x12
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F8           MOV       R0,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   F9           MOV       R1,A
   2938                  {
   2939                    // return attribute and found attribute ID
   2940                    *pAttr = pRec->attrs[x];
   \   0000C9   8C82         MOV       DPL,R4
   \   0000CB   8D83         MOV       DPH,R5
   \   0000CD   E8           MOV       A,R0
   \   0000CE   FC           MOV       R4,A
   \   0000CF   E9           MOV       A,R1
   \   0000D0   FD           MOV       R5,A
   \   0000D1   7408         MOV       A,#0x8
   \   0000D3   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2941                    *attrId = pAttr->attr.attrId;
   \   0000D6   8882         MOV       DPL,R0
   \   0000D8   8983         MOV       DPH,R1
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   F8           MOV       R0,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F9           MOV       R1,A
   \   0000E1   85..82       MOV       DPL,?V2
   \   0000E4   85..83       MOV       DPH,?V3
   \   0000E7   E8           MOV       A,R0
   \   0000E8   F0           MOVX      @DPTR,A
   \   0000E9   A3           INC       DPTR
   \   0000EA   E9           MOV       A,R1
   \   0000EB   F0           MOVX      @DPTR,A
   2942          
   2943                    return ( TRUE ); // EMBEDDED RETURN
   \   0000EC   7901         MOV       R1,#0x1
   \   0000EE   8002         SJMP      ??zclFindNextAttrRec_5
   2944                  }
   2945                }
   2946              }
   2947            }
   2948          
   2949            return ( FALSE );
   \                     ??zclFindNextAttrRec_0:
   \   0000F0   7900         MOV       R1,#0x0
   \                     ??zclFindNextAttrRec_5:
   \   0000F2   7F08         MOV       R7,#0x8
   \   0000F4   02....       LJMP      ?BANKED_LEAVE_XDATA
   2950          }
   2951          #endif // ZCL_DISCOVER
   2952          
   2953          /*********************************************************************
   2954           * @fn      zclSerializeData
   2955           *
   2956           * @brief   Builds a buffer from the attribute data to sent out over
   2957           *          the air.
   2958           *          NOTE - Not compatible with application's attributes callbacks.
   2959           *
   2960           * @param   dataType - data types defined in zcl.h
   2961           * @param   attrData - pointer to the attribute data
   2962           * @param   buf - where to put the serialized data
   2963           *
   2964           * @return  pointer to end of destination buffer
   2965           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2966          uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   2967          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   EC           MOV       A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FB           MOV       R3,A
   2968            uint8 *pStr;
   2969            uint16 len;
   2970          
   2971            if ( attrData == NULL )
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   7003         JNZ       $+5
   \   000011   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2972            {
   2973              return ( buf );
   2974            }
   2975          
   2976            switch ( dataType )
   \   000014   E9           MOV       A,R1
   \   000015   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000018   04           DB        4
   \   000019   41           DB        65
   \   00001A   42           DB        66
   \   00001B   ....         DW        ??zclSerializeData_1
   \   00001D   43           DB        67
   \   00001E   44           DB        68
   \   00001F   ....         DW        ??zclSerializeData_2
   \   000021   E0           DB        224
   \   000022   E2           DB        226
   \   000023   ....         DW        ??zclSerializeData_3
   \   000025   E8           DB        232
   \   000026   E9           DB        233
   \   000027   ....         DW        ??zclSerializeData_4
   \   000029   25           DB        37
   \   00002A   08           DB        8
   \   00002B   ....         DW        ??zclSerializeData_5
   \   00002D   09           DB        9
   \   00002E   ....         DW        ??zclSerializeData_4
   \   000030   0A           DB        10
   \   000031   ....         DW        ??zclSerializeData_6
   \   000033   0B           DB        11
   \   000034   ....         DW        ??zclSerializeData_3
   \   000036   10           DB        16
   \   000037   ....         DW        ??zclSerializeData_5
   \   000039   18           DB        24
   \   00003A   ....         DW        ??zclSerializeData_5
   \   00003C   19           DB        25
   \   00003D   ....         DW        ??zclSerializeData_4
   \   00003F   1A           DB        26
   \   000040   ....         DW        ??zclSerializeData_6
   \   000042   1B           DB        27
   \   000043   ....         DW        ??zclSerializeData_3
   \   000045   1C           DB        28
   \   000046   ....         DW        ??zclSerializeData_7
   \   000048   1D           DB        29
   \   000049   ....         DW        ??zclSerializeData_8
   \   00004B   1E           DB        30
   \   00004C   ....         DW        ??zclSerializeData_9
   \   00004E   1F           DB        31
   \   00004F   ....         DW        ??zclSerializeData_10
   \   000051   20           DB        32
   \   000052   ....         DW        ??zclSerializeData_5
   \   000054   21           DB        33
   \   000055   ....         DW        ??zclSerializeData_4
   \   000057   22           DB        34
   \   000058   ....         DW        ??zclSerializeData_6
   \   00005A   23           DB        35
   \   00005B   ....         DW        ??zclSerializeData_3
   \   00005D   24           DB        36
   \   00005E   ....         DW        ??zclSerializeData_7
   \   000060   25           DB        37
   \   000061   ....         DW        ??zclSerializeData_8
   \   000063   26           DB        38
   \   000064   ....         DW        ??zclSerializeData_9
   \   000066   27           DB        39
   \   000067   ....         DW        ??zclSerializeData_10
   \   000069   28           DB        40
   \   00006A   ....         DW        ??zclSerializeData_5
   \   00006C   29           DB        41
   \   00006D   ....         DW        ??zclSerializeData_4
   \   00006F   2A           DB        42
   \   000070   ....         DW        ??zclSerializeData_6
   \   000072   2B           DB        43
   \   000073   ....         DW        ??zclSerializeData_3
   \   000075   2C           DB        44
   \   000076   ....         DW        ??zclSerializeData_7
   \   000078   2D           DB        45
   \   000079   ....         DW        ??zclSerializeData_8
   \   00007B   2E           DB        46
   \   00007C   ....         DW        ??zclSerializeData_9
   \   00007E   2F           DB        47
   \   00007F   ....         DW        ??zclSerializeData_10
   \   000081   30           DB        48
   \   000082   ....         DW        ??zclSerializeData_5
   \   000084   31           DB        49
   \   000085   ....         DW        ??zclSerializeData_4
   \   000087   38           DB        56
   \   000088   ....         DW        ??zclSerializeData_4
   \   00008A   39           DB        57
   \   00008B   ....         DW        ??zclSerializeData_3
   \   00008D   3A           DB        58
   \   00008E   ....         DW        ??zclSerializeData_10
   \   000090   EA           DB        234
   \   000091   ....         DW        ??zclSerializeData_3
   \   000093   F0           DB        240
   \   000094   ....         DW        ??zclSerializeData_10
   \   000096   F1           DB        241
   \   000097   ....         DW        ??zclSerializeData_11
   \   000099   ....         DW        ??zclSerializeData_0
   2977            {
   2978              case ZCL_DATATYPE_DATA8:
   2979              case ZCL_DATATYPE_BOOLEAN:
   2980              case ZCL_DATATYPE_BITMAP8:
   2981              case ZCL_DATATYPE_INT8:
   2982              case ZCL_DATATYPE_UINT8:
   2983              case ZCL_DATATYPE_ENUM8:
   2984                *buf++ = *((uint8 *)attrData);
   \                     ??zclSerializeData_5:
   \   00009B   8E82         MOV       DPL,R6
   \   00009D   8F83         MOV       DPH,R7
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   8C82         MOV       DPL,R4
   \   0000A2   8D83         MOV       DPH,R5
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   A3           INC       DPTR
   \   0000A6   AA82         MOV       R2,DPL
   \   0000A8   AB83         MOV       R3,DPH
   2985                 break;
   \   0000AA   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2986          
   2987              case ZCL_DATATYPE_DATA16:
   2988              case ZCL_DATATYPE_BITMAP16:
   2989              case ZCL_DATATYPE_UINT16:
   2990              case ZCL_DATATYPE_INT16:
   2991              case ZCL_DATATYPE_ENUM16:
   2992              case ZCL_DATATYPE_SEMI_PREC:
   2993              case ZCL_DATATYPE_CLUSTER_ID:
   2994              case ZCL_DATATYPE_ATTR_ID:
   2995                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_4:
   \   0000AD   8E82         MOV       DPL,R6
   \   0000AF   8F83         MOV       DPH,R7
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   8C82         MOV       DPL,R4
   \   0000B4   8D83         MOV       DPH,R5
   \   0000B6   F0           MOVX      @DPTR,A
   2996                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \   0000B7   8E82         MOV       DPL,R6
   \   0000B9   8F83         MOV       DPH,R7
   \   0000BB   A3           INC       DPTR
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   8C82         MOV       DPL,R4
   \   0000BF   8D83         MOV       DPH,R5
   \   0000C1   A3           INC       DPTR
   \   0000C2   F0           MOVX      @DPTR,A
   \   0000C3   EC           MOV       A,R4
   \   0000C4   2402         ADD       A,#0x2
   \   0000C6   FA           MOV       R2,A
   \   0000C7   5001         JNC       ??zclSerializeData_12
   \   0000C9   0B           INC       R3
   2997                break;
   \                     ??zclSerializeData_12:
   \   0000CA   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2998          
   2999              case ZCL_DATATYPE_DATA24:
   3000              case ZCL_DATATYPE_BITMAP24:
   3001              case ZCL_DATATYPE_UINT24:
   3002              case ZCL_DATATYPE_INT24:
   3003                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_6:
   \   0000CD   8E82         MOV       DPL,R6
   \   0000CF   8F83         MOV       DPH,R7
   \   0000D1   78..         MOV       R0,#?V4
   \   0000D3   12....       LCALL     ?L_MOV_X
   \   0000D6   8C82         MOV       DPL,R4
   \   0000D8   8D83         MOV       DPH,R5
   \   0000DA   E5..         MOV       A,?V4
   \   0000DC   F0           MOVX      @DPTR,A
   3004                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \   0000DD   8E82         MOV       DPL,R6
   \   0000DF   8F83         MOV       DPH,R7
   \   0000E1   78..         MOV       R0,#?V4
   \   0000E3   12....       LCALL     ?L_MOV_X
   \   0000E6   E5..         MOV       A,?V5
   \   0000E8   8C82         MOV       DPL,R4
   \   0000EA   8D83         MOV       DPH,R5
   \   0000EC   A3           INC       DPTR
   \   0000ED   F0           MOVX      @DPTR,A
   3005                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \   0000EE   8E82         MOV       DPL,R6
   \   0000F0   8F83         MOV       DPH,R7
   \   0000F2   78..         MOV       R0,#?V4
   \   0000F4   12....       LCALL     ?L_MOV_X
   \   0000F7   7410         MOV       A,#0x10
   \   0000F9   78..         MOV       R0,#?V4
   \   0000FB   12....       LCALL     ?UL_SHR
   \   0000FE   8C82         MOV       DPL,R4
   \   000100   8D83         MOV       DPH,R5
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   E5..         MOV       A,?V4
   \   000106   F0           MOVX      @DPTR,A
   \   000107   EC           MOV       A,R4
   \   000108   2403         ADD       A,#0x3
   \   00010A   FA           MOV       R2,A
   \   00010B   5001         JNC       ??zclSerializeData_13
   \   00010D   0B           INC       R3
   3006                break;
   \                     ??zclSerializeData_13:
   \   00010E   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   3007          
   3008              case ZCL_DATATYPE_DATA32:
   3009              case ZCL_DATATYPE_BITMAP32:
   3010              case ZCL_DATATYPE_UINT32:
   3011              case ZCL_DATATYPE_INT32:
   3012              case ZCL_DATATYPE_SINGLE_PREC:
   3013              case ZCL_DATATYPE_TOD:
   3014              case ZCL_DATATYPE_DATE:
   3015              case ZCL_DATATYPE_UTC:
   3016              case ZCL_DATATYPE_BAC_OID:
   3017                buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_3:
   \   000111                ; Setup parameters for call to function osal_buffer_uint32
   \   000111   8E82         MOV       DPL,R6
   \   000113   8F83         MOV       DPH,R7
   \   000115   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000118   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00011B   7404         MOV       A,#0x4
   \   00011D   12....       LCALL     ?DEALLOC_XSTACK8
   3018                break;
   \   000120   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   3019          
   3020              case ZCL_DATATYPE_BITMAP40:
   3021              case ZCL_DATATYPE_UINT40:
   3022              case ZCL_DATATYPE_INT40:
   3023                pStr = (uint8*)attrData;
   3024                buf = zcl_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_7:
   \   000123                ; Setup parameters for call to function osal_memcpy
   \   000123   8E..         MOV       ?V4,R6
   \   000125   8F..         MOV       ?V5,R7
   \   000127   75..00       MOV       ?V6,#0x0
   \   00012A   78..         MOV       R0,#?V4
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012F   7C05         MOV       R4,#0x5
   \   000131   8075         SJMP      ??zclSerializeData_14
   3025                break;
   3026          
   3027              case ZCL_DATATYPE_BITMAP48:
   3028              case ZCL_DATATYPE_UINT48:
   3029              case ZCL_DATATYPE_INT48:
   3030                pStr = (uint8*)attrData;
   3031                buf = zcl_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_8:
   \   000133                ; Setup parameters for call to function osal_memcpy
   \   000133   8E..         MOV       ?V4,R6
   \   000135   8F..         MOV       ?V5,R7
   \   000137   75..00       MOV       ?V6,#0x0
   \   00013A   78..         MOV       R0,#?V4
   \   00013C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013F   7C06         MOV       R4,#0x6
   \   000141   8065         SJMP      ??zclSerializeData_14
   3032                break;
   3033          
   3034              case ZCL_DATATYPE_BITMAP56:
   3035              case ZCL_DATATYPE_UINT56:
   3036              case ZCL_DATATYPE_INT56:
   3037                pStr = (uint8*)attrData;
   3038                buf = zcl_memcpy( buf, pStr, 7 );
   \                     ??zclSerializeData_9:
   \   000143                ; Setup parameters for call to function osal_memcpy
   \   000143   8E..         MOV       ?V4,R6
   \   000145   8F..         MOV       ?V5,R7
   \   000147   75..00       MOV       ?V6,#0x0
   \   00014A   78..         MOV       R0,#?V4
   \   00014C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00014F   7C07         MOV       R4,#0x7
   \   000151   8055         SJMP      ??zclSerializeData_14
   3039                break;
   3040          
   3041              case ZCL_DATATYPE_BITMAP64:
   3042              case ZCL_DATATYPE_DOUBLE_PREC:
   3043              case ZCL_DATATYPE_IEEE_ADDR:
   3044              case ZCL_DATATYPE_UINT64:
   3045              case ZCL_DATATYPE_INT64:
   3046                pStr = (uint8*)attrData;
   3047                buf = zcl_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_10:
   \   000153                ; Setup parameters for call to function osal_memcpy
   \   000153   8E..         MOV       ?V4,R6
   \   000155   8F..         MOV       ?V5,R7
   \   000157   75..00       MOV       ?V6,#0x0
   \   00015A   78..         MOV       R0,#?V4
   \   00015C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00015F   7C08         MOV       R4,#0x8
   \   000161   8045         SJMP      ??zclSerializeData_14
   3048                break;
   3049          
   3050              case ZCL_DATATYPE_CHAR_STR:
   3051              case ZCL_DATATYPE_OCTET_STR:
   3052                pStr = (uint8*)attrData;
   3053                len = *pStr;
   3054                buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
   \                     ??zclSerializeData_1:
   \   000163                ; Setup parameters for call to function osal_memcpy
   \   000163   8E..         MOV       ?V4,R6
   \   000165   8F..         MOV       ?V5,R7
   \   000167   75..00       MOV       ?V6,#0x0
   \   00016A   78..         MOV       R0,#?V4
   \   00016C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016F   8E82         MOV       DPL,R6
   \   000171   8F83         MOV       DPH,R7
   \   000173   E0           MOVX      A,@DPTR
   \   000174   2401         ADD       A,#0x1
   \   000176   FC           MOV       R4,A
   \   000177   E4           CLR       A
   \   000178   3400         ADDC      A,#0x0
   \   00017A   801B         SJMP      ??zclSerializeData_15
   3055                break;
   3056          
   3057              case ZCL_DATATYPE_LONG_CHAR_STR:
   3058              case ZCL_DATATYPE_LONG_OCTET_STR:
   3059                pStr = (uint8*)attrData;
   3060                len = BUILD_UINT16( pStr[0], pStr[1] );
   3061                buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
   \                     ??zclSerializeData_2:
   \   00017C                ; Setup parameters for call to function osal_memcpy
   \   00017C   8E..         MOV       ?V4,R6
   \   00017E   8F..         MOV       ?V5,R7
   \   000180   75..00       MOV       ?V6,#0x0
   \   000183   78..         MOV       R0,#?V4
   \   000185   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000188   8E82         MOV       DPL,R6
   \   00018A   8F83         MOV       DPH,R7
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   FC           MOV       R4,A
   \   00018E   A3           INC       DPTR
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   F9           MOV       R1,A
   \   000191   EC           MOV       A,R4
   \   000192   2402         ADD       A,#0x2
   \   000194   FC           MOV       R4,A
   \   000195   E4           CLR       A
   \   000196   39           ADDC      A,R1
   \                     ??zclSerializeData_15:
   \   000197   FD           MOV       R5,A
   \   000198   8010         SJMP      ??zclSerializeData_16
   3062                break;
   3063          
   3064              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3065                pStr = (uint8*)attrData;
   3066                buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
   \                     ??zclSerializeData_11:
   \   00019A                ; Setup parameters for call to function osal_memcpy
   \   00019A   8E..         MOV       ?V4,R6
   \   00019C   8F..         MOV       ?V5,R7
   \   00019E   75..00       MOV       ?V6,#0x0
   \   0001A1   78..         MOV       R0,#?V4
   \   0001A3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001A6   7C10         MOV       R4,#0x10
   \                     ??zclSerializeData_14:
   \   0001A8   7D00         MOV       R5,#0x0
   \                     ??zclSerializeData_16:
   \   0001AA   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001AD   7403         MOV       A,#0x3
   \   0001AF   12....       LCALL     ?DEALLOC_XSTACK8
   3067                break;
   3068          
   3069              case ZCL_DATATYPE_NO_DATA:
   3070              case ZCL_DATATYPE_UNKNOWN:
   3071                // Fall through
   3072          
   3073              default:
   3074                break;
   3075            }
   3076          
   3077            return ( buf );
   \                     ??zclSerializeData_0:
   \   0001B2   7F08         MOV       R7,#0x8
   \   0001B4   02....       LJMP      ?BANKED_LEAVE_XDATA
   3078          }
   3079          
   3080          #if defined ZCL_REPORTING_DEVICE || defined ZCL_REPORT_CONFIGURING_DEVICE
   3081          /*********************************************************************
   3082           * @fn      zclAnalogDataType
   3083           *
   3084           * @brief   Checks to see if Data Type is Analog
   3085           *
   3086           * @param   dataType - data type
   3087           *
   3088           * @return  TRUE if data type is analog
   3089           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3090          uint8 zclAnalogDataType( uint8 dataType )
   \                     zclAnalogDataType:
   3091          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3092            uint8 analog;
   3093          
   3094            switch ( dataType )
   \   000005   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclAnalogDataType>_0`:
   \   000008   03           DB        3
   \   000009   20           DB        32
   \   00000A   2F           DB        47
   \   00000B   ....         DW        ??zclAnalogDataType_0
   \   00000D   38           DB        56
   \   00000E   3A           DB        58
   \   00000F   ....         DW        ??zclAnalogDataType_0
   \   000011   E0           DB        224
   \   000012   E2           DB        226
   \   000013   ....         DW        ??zclAnalogDataType_0
   \   000015   00           DB        0
   \   000016   ....         DW        ??zclAnalogDataType_1
   3095            {
   3096              case ZCL_DATATYPE_UINT8:
   3097              case ZCL_DATATYPE_UINT16:
   3098              case ZCL_DATATYPE_UINT24:
   3099              case ZCL_DATATYPE_UINT32:
   3100              case ZCL_DATATYPE_UINT40:
   3101              case ZCL_DATATYPE_UINT48:
   3102              case ZCL_DATATYPE_UINT56:
   3103              case ZCL_DATATYPE_UINT64:
   3104              case ZCL_DATATYPE_INT8:
   3105              case ZCL_DATATYPE_INT16:
   3106              case ZCL_DATATYPE_INT24:
   3107              case ZCL_DATATYPE_INT32:
   3108              case ZCL_DATATYPE_INT40:
   3109              case ZCL_DATATYPE_INT48:
   3110              case ZCL_DATATYPE_INT56:
   3111              case ZCL_DATATYPE_INT64:
   3112              case ZCL_DATATYPE_SEMI_PREC:
   3113              case ZCL_DATATYPE_SINGLE_PREC:
   3114              case ZCL_DATATYPE_DOUBLE_PREC:
   3115              case ZCL_DATATYPE_TOD:
   3116              case ZCL_DATATYPE_DATE:
   3117              case ZCL_DATATYPE_UTC:
   3118                analog = TRUE;
   \                     ??zclAnalogDataType_0:
   \   000018   7901         MOV       R1,#0x1
   3119                break;
   \   00001A   8002         SJMP      ??zclAnalogDataType_2
   3120          
   3121              default:
   3122                analog = FALSE;
   \                     ??zclAnalogDataType_1:
   \   00001C   7900         MOV       R1,#0x0
   3123                break;
   3124            }
   3125          
   3126            return ( analog );
   \                     ??zclAnalogDataType_2:
   \   00001E   D083         POP       DPH
   \   000020   D082         POP       DPL
   \   000022   02....       LJMP      ?BRET
   3127          }
   3128          
   3129          /*********************************************************************
   3130           * @fn      zclIsLittleEndianMachine
   3131           *
   3132           * @brief   Verifies endianness in system.
   3133           *
   3134           * @param   none
   3135           *
   3136           * @return  MSB-00 or LSB-01 depending on endianness in the system
   3137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3138          static int zclIsLittleEndianMachine(void)
   \                     zclIsLittleEndianMachine:
   3139          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   3140            uint16 test = 0x0001;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   7401         MOV       A,#0x1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   3141          
   3142            return (*((uint8 *)(&test)));
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FA           MOV       R2,A
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   D083         POP       DPH
   \   000026   D082         POP       DPL
   \   000028   02....       LJMP      ?BRET
   3143          }
   3144          
   3145          /*********************************************************************
   3146           * @fn      zcl_BuildAnalogData
   3147           *
   3148           * @brief   Build an analog arribute out of sequential bytes.
   3149           *
   3150           * @param   dataType - type of data
   3151           * @param   pData - pointer to data
   3152           * @param   pBuf - where to put the data
   3153           *
   3154           * @return  none
   3155           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3156          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
   \                     zcl_BuildAnalogData:
   3157          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   3158            int current_byte_index;
   3159            int remaining_bytes;
   3160            int step;
   3161          
   3162            remaining_bytes = zclGetAttrDataLength(dataType, pData);
   \   00000D                ; Setup parameters for call to function zclGetAttrDataLength
   \   00000D   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   3163          
   3164            // decide if move forward or backwards to copy data
   3165            if ( zclIsLittleEndianMachine() )
   \   000014                ; Setup parameters for call to function zclIsLittleEndianMachine
   \   000014   12....       LCALL     `??zclIsLittleEndianMachine::?relay`; Banked call to: zclIsLittleEndianMachine
   \   000017   EA           MOV       A,R2
   \   000018   4B           ORL       A,R3
   \   000019   600A         JZ        ??zcl_BuildAnalogData_0
   3166            {
   3167              step = 1;
   \   00001B   7C01         MOV       R4,#0x1
   \   00001D   7D00         MOV       R5,#0x0
   3168              current_byte_index = 0;
   \   00001F   7800         MOV       R0,#0x0
   \   000021   7900         MOV       R1,#0x0
   \   000023   8035         SJMP      ??zcl_BuildAnalogData_1
   3169            }
   3170            else
   3171            {
   3172              step = -1;
   \                     ??zcl_BuildAnalogData_0:
   \   000025   7CFF         MOV       R4,#-0x1
   \   000027   7DFF         MOV       R5,#-0x1
   3173              current_byte_index = remaining_bytes - 1;
   \   000029   E5..         MOV       A,?V2
   \   00002B   2C           ADD       A,R4
   \   00002C   F8           MOV       R0,A
   \   00002D   E5..         MOV       A,?V3
   \   00002F   34FF         ADDC      A,#-0x1
   \   000031   8026         SJMP      ??zcl_BuildAnalogData_2
   3174            }
   3175          
   3176            while ( remaining_bytes-- )
   3177            {
   3178              pData[current_byte_index] = *(pBuf++);
   \                     ??zcl_BuildAnalogData_3:
   \   000033   85..82       MOV       DPL,?V0
   \   000036   85..83       MOV       DPH,?V1
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   C0E0         PUSH      A
   \   00003C   EE           MOV       A,R6
   \   00003D   28           ADD       A,R0
   \   00003E   F582         MOV       DPL,A
   \   000040   EF           MOV       A,R7
   \   000041   39           ADDC      A,R1
   \   000042   F583         MOV       DPH,A
   \   000044   D0E0         POP       A
   \   000046   F0           MOVX      @DPTR,A
   \   000047   85..82       MOV       DPL,?V0
   \   00004A   85..83       MOV       DPH,?V1
   \   00004D   A3           INC       DPTR
   \   00004E   8582..       MOV       ?V0,DPL
   \   000051   8583..       MOV       ?V1,DPH
   3179              current_byte_index += step;
   \   000054   E8           MOV       A,R0
   \   000055   2C           ADD       A,R4
   \   000056   F8           MOV       R0,A
   \   000057   E9           MOV       A,R1
   \   000058   3D           ADDC      A,R5
   \                     ??zcl_BuildAnalogData_2:
   \   000059   F9           MOV       R1,A
   3180            }
   \                     ??zcl_BuildAnalogData_1:
   \   00005A   AA..         MOV       R2,?V2
   \   00005C   AB..         MOV       R3,?V3
   \   00005E   EA           MOV       A,R2
   \   00005F   24FF         ADD       A,#-0x1
   \   000061   F5..         MOV       ?V2,A
   \   000063   EB           MOV       A,R3
   \   000064   34FF         ADDC      A,#-0x1
   \   000066   F5..         MOV       ?V3,A
   \   000068   EA           MOV       A,R2
   \   000069   4B           ORL       A,R3
   \   00006A   70C7         JNZ       ??zcl_BuildAnalogData_3
   3181          }
   \   00006C   7F08         MOV       R7,#0x8
   \   00006E   02....       LJMP      ?BANKED_LEAVE_XDATA
   3182          #endif
   3183          
   3184          /*********************************************************************
   3185           * @fn      zclGetDataTypeLength
   3186           *
   3187           * @brief   Return the length of the datatype in octet.
   3188           *
   3189           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
   3190           *                ZCL_DATATYPE_CHAR_STR data types.
   3191           *
   3192           * @param   dataType - data type
   3193           *
   3194           * @return  length of data
   3195           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3196          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   3197          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   3198            uint8 len;
   3199          
   3200            switch ( dataType )
   \   000001   24F8         ADD       A,#-0x8
   \   000003   6078         JZ        ??zclGetDataTypeLength_0
   \   000005   14           DEC       A
   \   000006   6079         JZ        ??zclGetDataTypeLength_1
   \   000008   14           DEC       A
   \   000009   607A         JZ        ??zclGetDataTypeLength_2
   \   00000B   14           DEC       A
   \   00000C   607B         JZ        ??zclGetDataTypeLength_3
   \   00000E   24FB         ADD       A,#-0x5
   \   000010   606B         JZ        ??zclGetDataTypeLength_0
   \   000012   24F8         ADD       A,#-0x8
   \   000014   6067         JZ        ??zclGetDataTypeLength_0
   \   000016   14           DEC       A
   \   000017   6068         JZ        ??zclGetDataTypeLength_1
   \   000019   14           DEC       A
   \   00001A   6069         JZ        ??zclGetDataTypeLength_2
   \   00001C   14           DEC       A
   \   00001D   606A         JZ        ??zclGetDataTypeLength_3
   \   00001F   24FB         ADD       A,#-0x5
   \   000021   605A         JZ        ??zclGetDataTypeLength_0
   \   000023   14           DEC       A
   \   000024   605B         JZ        ??zclGetDataTypeLength_1
   \   000026   14           DEC       A
   \   000027   605C         JZ        ??zclGetDataTypeLength_2
   \   000029   14           DEC       A
   \   00002A   605D         JZ        ??zclGetDataTypeLength_3
   \   00002C   14           DEC       A
   \   00002D   605E         JZ        ??zclGetDataTypeLength_4
   \   00002F   14           DEC       A
   \   000030   605F         JZ        ??zclGetDataTypeLength_5
   \   000032   14           DEC       A
   \   000033   6060         JZ        ??zclGetDataTypeLength_6
   \   000035   14           DEC       A
   \   000036   6061         JZ        ??zclGetDataTypeLength_7
   \   000038   14           DEC       A
   \   000039   6042         JZ        ??zclGetDataTypeLength_0
   \   00003B   14           DEC       A
   \   00003C   6043         JZ        ??zclGetDataTypeLength_1
   \   00003E   14           DEC       A
   \   00003F   6044         JZ        ??zclGetDataTypeLength_2
   \   000041   14           DEC       A
   \   000042   6045         JZ        ??zclGetDataTypeLength_3
   \   000044   14           DEC       A
   \   000045   6046         JZ        ??zclGetDataTypeLength_4
   \   000047   14           DEC       A
   \   000048   6047         JZ        ??zclGetDataTypeLength_5
   \   00004A   14           DEC       A
   \   00004B   6048         JZ        ??zclGetDataTypeLength_6
   \   00004D   14           DEC       A
   \   00004E   6049         JZ        ??zclGetDataTypeLength_7
   \   000050   14           DEC       A
   \   000051   602A         JZ        ??zclGetDataTypeLength_0
   \   000053   14           DEC       A
   \   000054   602B         JZ        ??zclGetDataTypeLength_1
   \   000056   24F9         ADD       A,#-0x7
   \   000058   6027         JZ        ??zclGetDataTypeLength_1
   \   00005A   14           DEC       A
   \   00005B   602C         JZ        ??zclGetDataTypeLength_3
   \   00005D   14           DEC       A
   \   00005E   6039         JZ        ??zclGetDataTypeLength_7
   \   000060   245A         ADD       A,#0x5a
   \   000062   6025         JZ        ??zclGetDataTypeLength_3
   \   000064   14           DEC       A
   \   000065   6022         JZ        ??zclGetDataTypeLength_3
   \   000067   14           DEC       A
   \   000068   601F         JZ        ??zclGetDataTypeLength_3
   \   00006A   24FA         ADD       A,#-0x6
   \   00006C   6013         JZ        ??zclGetDataTypeLength_1
   \   00006E   14           DEC       A
   \   00006F   6010         JZ        ??zclGetDataTypeLength_1
   \   000071   14           DEC       A
   \   000072   6015         JZ        ??zclGetDataTypeLength_3
   \   000074   24FA         ADD       A,#-0x6
   \   000076   6021         JZ        ??zclGetDataTypeLength_7
   \   000078   14           DEC       A
   \   000079   6022         JZ        ??zclGetDataTypeLength_8
   \   00007B   8024         SJMP      ??zclGetDataTypeLength_9
   3201            {
   3202              case ZCL_DATATYPE_DATA8:
   3203              case ZCL_DATATYPE_BOOLEAN:
   3204              case ZCL_DATATYPE_BITMAP8:
   3205              case ZCL_DATATYPE_INT8:
   3206              case ZCL_DATATYPE_UINT8:
   3207              case ZCL_DATATYPE_ENUM8:
   3208                len = 1;
   \                     ??zclGetDataTypeLength_0:
   \   00007D   7901         MOV       R1,#0x1
   3209                break;
   \   00007F   8022         SJMP      ??zclGetDataTypeLength_10
   3210          
   3211              case ZCL_DATATYPE_DATA16:
   3212              case ZCL_DATATYPE_BITMAP16:
   3213              case ZCL_DATATYPE_UINT16:
   3214              case ZCL_DATATYPE_INT16:
   3215              case ZCL_DATATYPE_ENUM16:
   3216              case ZCL_DATATYPE_SEMI_PREC:
   3217              case ZCL_DATATYPE_CLUSTER_ID:
   3218              case ZCL_DATATYPE_ATTR_ID:
   3219                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000081   7902         MOV       R1,#0x2
   3220                break;
   \   000083   801E         SJMP      ??zclGetDataTypeLength_10
   3221          
   3222              case ZCL_DATATYPE_DATA24:
   3223              case ZCL_DATATYPE_BITMAP24:
   3224              case ZCL_DATATYPE_UINT24:
   3225              case ZCL_DATATYPE_INT24:
   3226                len = 3;
   \                     ??zclGetDataTypeLength_2:
   \   000085   7903         MOV       R1,#0x3
   3227                break;
   \   000087   801A         SJMP      ??zclGetDataTypeLength_10
   3228          
   3229              case ZCL_DATATYPE_DATA32:
   3230              case ZCL_DATATYPE_BITMAP32:
   3231              case ZCL_DATATYPE_UINT32:
   3232              case ZCL_DATATYPE_INT32:
   3233              case ZCL_DATATYPE_SINGLE_PREC:
   3234              case ZCL_DATATYPE_TOD:
   3235              case ZCL_DATATYPE_DATE:
   3236              case ZCL_DATATYPE_UTC:
   3237              case ZCL_DATATYPE_BAC_OID:
   3238                len = 4;
   \                     ??zclGetDataTypeLength_3:
   \   000089   7904         MOV       R1,#0x4
   3239                break;
   \   00008B   8016         SJMP      ??zclGetDataTypeLength_10
   3240          
   3241             case ZCL_DATATYPE_UINT40:
   3242             case ZCL_DATATYPE_INT40:
   3243                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   00008D   7905         MOV       R1,#0x5
   3244                 break;
   \   00008F   8012         SJMP      ??zclGetDataTypeLength_10
   3245          
   3246             case ZCL_DATATYPE_UINT48:
   3247             case ZCL_DATATYPE_INT48:
   3248                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000091   7906         MOV       R1,#0x6
   3249                 break;
   \   000093   800E         SJMP      ??zclGetDataTypeLength_10
   3250          
   3251             case ZCL_DATATYPE_UINT56:
   3252             case ZCL_DATATYPE_INT56:
   3253                 len = 7;
   \                     ??zclGetDataTypeLength_6:
   \   000095   7907         MOV       R1,#0x7
   3254                 break;
   \   000097   800A         SJMP      ??zclGetDataTypeLength_10
   3255          
   3256             case ZCL_DATATYPE_DOUBLE_PREC:
   3257             case ZCL_DATATYPE_IEEE_ADDR:
   3258             case ZCL_DATATYPE_UINT64:
   3259             case ZCL_DATATYPE_INT64:
   3260               len = 8;
   \                     ??zclGetDataTypeLength_7:
   \   000099   7908         MOV       R1,#0x8
   3261               break;
   \   00009B   8006         SJMP      ??zclGetDataTypeLength_10
   3262          
   3263              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3264               len = SEC_KEY_LEN;
   \                     ??zclGetDataTypeLength_8:
   \   00009D   7910         MOV       R1,#0x10
   3265               break;
   \   00009F   8002         SJMP      ??zclGetDataTypeLength_10
   3266          
   3267              case ZCL_DATATYPE_NO_DATA:
   3268              case ZCL_DATATYPE_UNKNOWN:
   3269                // Fall through
   3270          
   3271              default:
   3272                len = 0;
   \                     ??zclGetDataTypeLength_9:
   \   0000A1   7900         MOV       R1,#0x0
   3273                break;
   3274            }
   3275          
   3276            return ( len );
   \                     ??zclGetDataTypeLength_10:
   \   0000A3   02....       LJMP      ?BRET
   3277          }
   3278          
   3279          /*********************************************************************
   3280           * @fn      zclGetAttrDataLength
   3281           *
   3282           * @brief   Return the length of the attribute.
   3283           *
   3284           * @param   dataType - data type
   3285           * @param   pData - pointer to data
   3286           *
   3287           * @return  returns atrribute length
   3288           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3289          uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
   \                     zclGetAttrDataLength:
   3290          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3291            uint16 dataLen = 0;
   3292          
   3293            if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
   \   000007   7444         MOV       A,#0x44
   \   000009   6E           XRL       A,R6
   \   00000A   6005         JZ        ??zclGetAttrDataLength_0
   \   00000C   7443         MOV       A,#0x43
   \   00000E   6E           XRL       A,R6
   \   00000F   7011         JNZ       ??zclGetAttrDataLength_1
   3294            {
   3295              dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
   \                     ??zclGetAttrDataLength_0:
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FC           MOV       R4,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   EC           MOV       A,R4
   \   00001B   2402         ADD       A,#0x2
   \   00001D   FA           MOV       R2,A
   \   00001E   E4           CLR       A
   \   00001F   39           ADDC      A,R1
   \   000020   8015         SJMP      ??zclGetAttrDataLength_2
   3296            }
   3297            else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \                     ??zclGetAttrDataLength_1:
   \   000022   7442         MOV       A,#0x42
   \   000024   6E           XRL       A,R6
   \   000025   6005         JZ        ??zclGetAttrDataLength_3
   \   000027   7441         MOV       A,#0x41
   \   000029   6E           XRL       A,R6
   \   00002A   700E         JNZ       ??zclGetAttrDataLength_4
   3298            {
   3299              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_3:
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   2401         ADD       A,#0x1
   \   000033   FA           MOV       R2,A
   \   000034   E4           CLR       A
   \   000035   3400         ADDC      A,#0x0
   \                     ??zclGetAttrDataLength_2:
   \   000037   FB           MOV       R3,A
   \   000038   8007         SJMP      ??zclGetAttrDataLength_5
   3300            }
   3301            else
   3302            {
   3303              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_4:
   \   00003A                ; Setup parameters for call to function zclGetDataTypeLength
   \   00003A   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   00003D   E9           MOV       A,R1
   \   00003E   FA           MOV       R2,A
   \   00003F   7B00         MOV       R3,#0x0
   3304            }
   3305          
   3306            return ( dataLen );
   \                     ??zclGetAttrDataLength_5:
   \   000041   7F01         MOV       R7,#0x1
   \   000043   02....       LJMP      ?BANKED_LEAVE_XDATA
   3307          }
   3308          
   3309          #ifdef ZCL_READ
   3310          /*********************************************************************
   3311           * @fn      zclReadAttrData
   3312           *
   3313           * @brief   Read the attribute's current value into pAttrData.
   3314           *          NOTE - Not compatible with application's attributes callbacks.
   3315           *
   3316           * @param   pAttrData - where to put attribute data
   3317           * @param   pAttr - pointer to attribute
   3318           * @param   pDataLen - where to put attribute data length
   3319           *
   3320           * @return Success
   3321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3322          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
   \                     zclReadAttrData:
   3323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3324            uint16 dataLen;
   3325          
   3326            if ( pAttr->attr.dataPtr == NULL )
   \   000009   EC           MOV       A,R4
   \   00000A   2406         ADD       A,#0x6
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   88..         MOV       ?V0,R0
   \   000011   F5..         MOV       ?V1,A
   \   000013   8882         MOV       DPL,R0
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FA           MOV       R2,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FB           MOV       R3,A
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   7004         JNZ       ??zclReadAttrData_0
   3327            {
   3328              return ( ZCL_STATUS_FAILURE );
   \   000020   7901         MOV       R1,#0x1
   \   000022   8055         SJMP      ??zclReadAttrData_1
   3329            }
   3330          
   3331            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \                     ??zclReadAttrData_0:
   \   000024                ; Setup parameters for call to function zclGetAttrDataLength
   \   000024   8C82         MOV       DPL,R4
   \   000026   8D83         MOV       DPH,R5
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F9           MOV       R1,A
   \   00002E   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000031   8A..         MOV       ?V2,R2
   \   000033   8B..         MOV       ?V3,R3
   3332            zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \   000035                ; Setup parameters for call to function osal_memcpy
   \   000035   85..82       MOV       DPL,?V0
   \   000038   85..83       MOV       DPH,?V1
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F5..         MOV       ?V0,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   85....       MOV       ?V4,?V0
   \   000043   F5..         MOV       ?V5,A
   \   000045   75..00       MOV       ?V6,#0x0
   \   000048   78..         MOV       R0,#?V4
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004D   AC..         MOV       R4,?V2
   \   00004F   AD..         MOV       R5,?V3
   \   000051   EE           MOV       A,R6
   \   000052   FA           MOV       R2,A
   \   000053   EF           MOV       A,R7
   \   000054   FB           MOV       R3,A
   \   000055   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000058   7403         MOV       A,#0x3
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   740F         MOV       A,#0xf
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F8           MOV       R0,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   8882         MOV       DPL,R0
   \   000068   F583         MOV       DPH,A
   3333          
   3334            if ( pDataLen != NULL )
   \   00006A   E582         MOV       A,DPL
   \   00006C   4583         ORL       A,DPH
   \   00006E   6007         JZ        ??zclReadAttrData_2
   3335            {
   3336              *pDataLen = dataLen;
   \   000070   E5..         MOV       A,?V2
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   E5..         MOV       A,?V3
   \   000076   F0           MOVX      @DPTR,A
   3337            }
   3338          
   3339            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclReadAttrData_2:
   \   000077   7900         MOV       R1,#0x0
   \                     ??zclReadAttrData_1:
   \   000079   7F07         MOV       R7,#0x7
   \   00007B   02....       LJMP      ?BANKED_LEAVE_XDATA
   3340          }
   3341          
   3342          /*********************************************************************
   3343           * @fn      zcl_ReadAttrData
   3344           *
   3345           * @brief   Read the attribute's current value into pAttrData.
   3346           *          Use application's callback function if assigned to this attribute.
   3347           *
   3348           * @param   endpoint - application's endpoint
   3349           * @param   clusterId - cluster that attribute belongs to
   3350           * @param   attrId - attribute id
   3351           * @param   pAttrData - where to put attribute data
   3352           * @param   pDataLen - where to put attribute data length
   3353           *
   3354           * @return  Successful if data was read
   3355           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3356          ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zcl_ReadAttrData:
   3357                                                   uint8 *pAttrData, uint16 *pDataLen )
   3358          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   3359            zclAttrRec_t attrRec;
   3360          
   3361            if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
   \   000014                ; Setup parameters for call to function zclFindAttrRec
   \   000014   A8..         MOV       R0,?XSP + 0
   \   000016   A9..         MOV       R1,?XSP + 1
   \   000018   88..         MOV       ?V4,R0
   \   00001A   89..         MOV       ?V5,R1
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   A9..         MOV       R1,?V2
   \   000023   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002B   E9           MOV       A,R1
   \   00002C   7004         JNZ       ??zcl_ReadAttrData_0
   3362            {
   3363              return ( ZCL_STATUS_FAILURE );
   \   00002E   7901         MOV       R1,#0x1
   \   000030   8058         SJMP      ??zcl_ReadAttrData_1
   3364            }
   \                     ??zcl_ReadAttrData_0:
   \   000032   7418         MOV       A,#0x18
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F5..         MOV       ?V6,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F5..         MOV       ?V7,A
   \   00003E   741A         MOV       A,#0x1a
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F5..         MOV       ?V4,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V5,A
   3365          
   3366            if ( attrRec.attr.dataPtr != NULL )
   \   00004A   7406         MOV       A,#0x6
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F8           MOV       R0,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   E8           MOV       A,R0
   \   000055   49           ORL       A,R1
   \   000056   78..         MOV       R0,#?V4
   \   000058   6016         JZ        ??zcl_ReadAttrData_2
   3367            {
   3368              return zclReadAttrData( pAttrData, &attrRec, pDataLen );
   \   00005A                ; Setup parameters for call to function zclReadAttrData
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7402         MOV       A,#0x2
   \   00005F   12....       LCALL     ?XSTACK_DISP102_8
   \   000062   AA..         MOV       R2,?V6
   \   000064   AB..         MOV       R3,?V7
   \   000066   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000069   7402         MOV       A,#0x2
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   801A         SJMP      ??zcl_ReadAttrData_1
   3369            }
   3370            else
   3371            {
   3372              return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
   \                     ??zcl_ReadAttrData_2:
   \   000070                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000073   78..         MOV       R0,#?V6
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   EE           MOV       A,R6
   \   000079   FC           MOV       R4,A
   \   00007A   EF           MOV       A,R7
   \   00007B   FD           MOV       R5,A
   \   00007C   AA..         MOV       R2,?V0
   \   00007E   AB..         MOV       R3,?V1
   \   000080   A9..         MOV       R1,?V2
   \   000082   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   000085   7404         MOV       A,#0x4
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zcl_ReadAttrData_1:
   \   00008A   7408         MOV       A,#0x8
   \   00008C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008F   7F08         MOV       R7,#0x8
   \   000091   02....       LJMP      ?BANKED_LEAVE_XDATA
   3373            }
   3374          }
   3375          
   3376          /*********************************************************************
   3377           * @fn      zclGetAttrDataLengthUsingCB
   3378           *
   3379           * @brief   Use application's callback to get the length of the attribute's
   3380           *          current value stored in the database.
   3381           *
   3382           * @param   endpoint - application's endpoint
   3383           * @param   clusterId - cluster that attribute belongs to
   3384           * @param   attrId - attribute id
   3385           *
   3386           * @return  returns attribute length
   3387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3388          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
   \                     zclGetAttrDataLengthUsingCB:
   3389          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   3390            uint16 dataLen = 0;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   3391            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00001C                ; Setup parameters for call to function zclGetReadWriteCB
   \   00001C   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   00001F   8A..         MOV       ?V0,R2
   \   000021   8B..         MOV       ?V1,R3
   3392          
   3393            if ( pfnReadWriteCB != NULL )
   \   000023   EA           MOV       A,R2
   \   000024   4B           ORL       A,R3
   \   000025   602F         JZ        ??zclGetAttrDataLengthUsingCB_0
   3394            {
   3395              // Only get the attribute length
   3396              (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
   \   000027                ; Setup parameters for indirect call
   \   000027   A8..         MOV       R0,?XSP + 0
   \   000029   A9..         MOV       R1,?XSP + 1
   \   00002B   88..         MOV       ?V6,R0
   \   00002D   89..         MOV       ?V7,R1
   \   00002F   78..         MOV       R0,#?V6
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   E4           CLR       A
   \   000035   F5..         MOV       ?V6,A
   \   000037   F5..         MOV       ?V7,A
   \   000039   78..         MOV       R0,#?V6
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7900         MOV       R1,#0x0
   \   000040   EE           MOV       A,R6
   \   000041   FC           MOV       R4,A
   \   000042   EF           MOV       A,R7
   \   000043   FD           MOV       R5,A
   \   000044   AA..         MOV       R2,?V4
   \   000046   AB..         MOV       R3,?V5
   \   000048   85..82       MOV       DPL,?V0
   \   00004B   85..83       MOV       DPH,?V1
   \   00004E   12....       LCALL     ?CALL_IND
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   3397            }
   3398          
   3399            return ( dataLen );
   \                     ??zclGetAttrDataLengthUsingCB_0:
   \   000056   85..82       MOV       DPL,?XSP + 0
   \   000059   85..83       MOV       DPH,?XSP + 1
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FA           MOV       R2,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   FB           MOV       R3,A
   \   000061   7402         MOV       A,#0x2
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   \   000066   7F08         MOV       R7,#0x8
   \   000068   02....       LJMP      ?BANKED_LEAVE_XDATA
   3400          }
   3401          
   3402          /*********************************************************************
   3403           * @fn      zclReadAttrDataUsingCB
   3404           *
   3405           * @brief   Use application's callback to read the attribute's current
   3406           *          value stored in the database.
   3407           *
   3408           * @param   endpoint - application's endpoint
   3409           * @param   clusterId - cluster that attribute belongs to
   3410           * @param   attrId - attribute id
   3411           * @param   pAttrData - where to put attribute data
   3412           * @param   pDataLen - where to put attribute data length
   3413           *
   3414           * @return  Successful if data was read
   3415           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3416          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zclReadAttrDataUsingCB:
   3417                                                   uint8 *pAttrData, uint16 *pDataLen )
   3418          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3419            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00000D                ; Setup parameters for call to function zclGetReadWriteCB
   \   00000D   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   7412         MOV       A,#0x12
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V6,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V7,A
   3420          
   3421            if ( pDataLen != NULL )
   \   000020   E5..         MOV       A,?V6
   \   000022   45..         ORL       A,?V7
   \   000024   600A         JZ        ??zclReadAttrDataUsingCB_0
   3422            {
   3423              *pDataLen = 0; // Always initialize it to 0
   \   000026   85..82       MOV       DPL,?V6
   \   000029   85..83       MOV       DPH,?V7
   \   00002C   E4           CLR       A
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
   3424            }
   3425          
   3426            if ( pfnReadWriteCB != NULL )
   \                     ??zclReadAttrDataUsingCB_0:
   \   000030   EA           MOV       A,R2
   \   000031   4B           ORL       A,R3
   \   000032   6027         JZ        ??zclReadAttrDataUsingCB_1
   3427            {
   3428              // Read the attribute value and its length
   3429              return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
   \   000034                ; Setup parameters for indirect call
   \   000034   78..         MOV       R0,#?V6
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   7412         MOV       A,#0x12
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000041   7901         MOV       R1,#0x1
   \   000043   EE           MOV       A,R6
   \   000044   FC           MOV       R4,A
   \   000045   EF           MOV       A,R7
   \   000046   FD           MOV       R5,A
   \   000047   AA..         MOV       R2,?V0
   \   000049   AB..         MOV       R3,?V1
   \   00004B   85..82       MOV       DPL,?V2
   \   00004E   85..83       MOV       DPH,?V3
   \   000051   12....       LCALL     ?CALL_IND
   \   000054   7404         MOV       A,#0x4
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
   \   000059   8002         SJMP      ??zclReadAttrDataUsingCB_2
   3430            }
   3431          
   3432            return ( ZCL_STATUS_SOFTWARE_FAILURE );
   \                     ??zclReadAttrDataUsingCB_1:
   \   00005B   79C1         MOV       R1,#-0x3f
   \                     ??zclReadAttrDataUsingCB_2:
   \   00005D   7F08         MOV       R7,#0x8
   \   00005F   02....       LJMP      ?BANKED_LEAVE_XDATA
   3433          }
   3434          
   3435          /*********************************************************************
   3436           * @fn      zclAuthorizeRead
   3437           *
   3438           * @brief   Use application's callback to authorize a Read operation
   3439           *          on a given attribute.
   3440           *
   3441           * @param   endpoint - application's endpoint
   3442           * @param   srcAddr - source Address
   3443           * @param   pAttr - pointer to attribute
   3444           *
   3445           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3446           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3448          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   \                     zclAuthorizeRead:
   3449          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   3450            if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   8D83         MOV       DPH,R5
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   A2E4         MOV       C,0xE0 /* A   */.4
   \   000019   501C         JNC       ??zclAuthorizeRead_0
   3451            {
   3452              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   \   00001B                ; Setup parameters for call to function zclGetAuthorizeCB
   \   00001B   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   3453          
   3454              if ( pfnAuthorizeCB != NULL )
   \   000022   E582         MOV       A,DPL
   \   000024   4583         ORL       A,DPH
   \   000026   600F         JZ        ??zclAuthorizeRead_0
   3455              {
   3456                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
   \   000028                ; Setup parameters for indirect call
   \   000028   7901         MOV       R1,#0x1
   \   00002A   AC..         MOV       R4,?V0
   \   00002C   AD..         MOV       R5,?V1
   \   00002E   EE           MOV       A,R6
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     ?CALL_IND
   \   000035   8002         SJMP      ??zclAuthorizeRead_1
   3457              }
   3458            }
   3459          
   3460            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclAuthorizeRead_0:
   \   000037   7900         MOV       R1,#0x0
   \                     ??zclAuthorizeRead_1:
   \   000039   7F06         MOV       R7,#0x6
   \   00003B   02....       LJMP      ?BANKED_LEAVE_XDATA
   3461          }
   3462          #endif // ZCL_READ
   3463          
   3464          #ifdef ZCL_WRITE
   3465          /*********************************************************************
   3466           * @fn      zclWriteAttrData
   3467           *
   3468           * @brief   Write the received data.
   3469           *
   3470           * @param   endpoint - application's endpoint
   3471           * @param   pAttr - where to write data to
   3472           * @param   pWriteRec - data to be written
   3473           *
   3474           * @return  Successful if data was written
   3475           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3476          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrData:
   3477                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   3478          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   3479            uint8 status;
   3480          
   3481            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   000009   8C82         MOV       DPL,R4
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   4003         JC        $+5
   \   000017   02....       LJMP      ??zclWriteAttrData_0 & 0xFFFF
   3482            {
   3483              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   00001A                ; Setup parameters for call to function zclAuthorizeWrite
   \   00001A   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001D   E9           MOV       A,R1
   \   00001E   F5..         MOV       ?V2,A
   3484              if ( status == ZCL_STATUS_SUCCESS )
   \   000020   6003         JZ        $+5
   \   000022   02....       LJMP      ??zclWriteAttrData_1 & 0xFFFF
   \   000025   740F         MOV       A,#0xf
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V1,A
   3485              {
   3486                if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \   000031   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F8           MOV       R0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F9           MOV       R1,A
   \   000039   E8           MOV       A,R0
   \   00003A   49           ORL       A,R1
   \   00003B   6019         JZ        ??zclWriteAttrData_2
   \   00003D                ; Setup parameters for indirect call
   \   00003D   AC..         MOV       R4,?V0
   \   00003F   AD..         MOV       R5,?V1
   \   000041   EE           MOV       A,R6
   \   000042   FA           MOV       R2,A
   \   000043   EF           MOV       A,R7
   \   000044   FB           MOV       R3,A
   \   000045   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F8           MOV       R0,A
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F583         MOV       DPH,A
   \   00004E   8882         MOV       DPL,R0
   \   000050   12....       LCALL     ?CALL_IND
   \   000053   E9           MOV       A,R1
   \   000054   6058         JZ        ??zclWriteAttrData_3
   3487                {
   3488                  // Write the attribute value
   3489                  uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000056   E5..         MOV       A,?V0
   \   000058   2403         ADD       A,#0x3
   \   00005A   F8           MOV       R0,A
   \   00005B   E4           CLR       A
   \   00005C   35..         ADDC      A,?V1
   \   00005E   88..         MOV       ?V0,R0
   \   000060   F5..         MOV       ?V1,A
   \   000062                ; Setup parameters for call to function zclGetAttrDataLength
   \   000062   8882         MOV       DPL,R0
   \   000064   F583         MOV       DPH,A
   \   000066   E0           MOVX      A,@DPTR
   \   000067   FA           MOV       R2,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FB           MOV       R3,A
   \   00006B   8E82         MOV       DPL,R6
   \   00006D   8F83         MOV       DPH,R7
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000078   8A..         MOV       ?V4,R2
   \   00007A   8B..         MOV       ?V5,R3
   \   00007C   AC..         MOV       R4,?V4
   \   00007E   AD..         MOV       R5,?V5
   3490                  zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \   000080                ; Setup parameters for call to function osal_memcpy
   \   000080   85..82       MOV       DPL,?V0
   \   000083   85..83       MOV       DPH,?V1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F5..         MOV       ?V4,A
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   F5..         MOV       ?V5,A
   \   00008D   75..00       MOV       ?V6,#0x0
   \   000090   78..         MOV       R0,#?V4
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000095   8E82         MOV       DPL,R6
   \   000097   8F83         MOV       DPH,R7
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   FA           MOV       R2,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   FB           MOV       R3,A
   \   0000A4   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A7   7403         MOV       A,#0x3
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   3491          
   3492                  status = ZCL_STATUS_SUCCESS;
   \   0000AC   8008         SJMP      ??zclWriteAttrData_1
   3493                }
   3494                else
   3495                {
   3496                  status = ZCL_STATUS_INVALID_VALUE;
   \                     ??zclWriteAttrData_3:
   \   0000AE   75..87       MOV       ?V2,#-0x79
   \   0000B1   8003         SJMP      ??zclWriteAttrData_1
   3497                }
   3498              }
   3499            }
   3500            else
   3501            {
   3502              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrData_0:
   \   0000B3   75..88       MOV       ?V2,#-0x78
   3503            }
   3504          
   3505            return ( status );
   \                     ??zclWriteAttrData_1:
   \   0000B6   A9..         MOV       R1,?V2
   \   0000B8   7F07         MOV       R7,#0x7
   \   0000BA   02....       LJMP      ?BANKED_LEAVE_XDATA
   3506          }
   3507          
   3508          /*********************************************************************
   3509           * @fn      zclWriteAttrDataUsingCB
   3510           *
   3511           * @brief   Use application's callback to write the attribute's current
   3512           *          value stored in the database.
   3513           *
   3514           * @param   endpoint - application's endpoint
   3515           * @param   pAttr - where to write data to
   3516           * @param   pAttrData - data to be written
   3517           *
   3518           * @return  Successful if data was written
   3519           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3520          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrDataUsingCB:
   3521                                                    zclAttrRec_t *pAttr, uint8 *pAttrData )
   3522          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
   3523            uint8 status;
   3524          
   3525            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   F583         MOV       DPH,A
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   A2E1         MOV       C,0xE0 /* A   */.1
   \   000017   5052         JNC       ??zclWriteAttrDataUsingCB_0
   3526            {
   3527              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000019                ; Setup parameters for call to function zclAuthorizeWrite
   \   000019   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001C   E9           MOV       A,R1
   \   00001D   F9           MOV       R1,A
   3528              if ( status == ZCL_STATUS_SUCCESS )
   \   00001E   704D         JNZ       ??zclWriteAttrDataUsingCB_1
   3529              {
   3530                zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   000020                ; Setup parameters for call to function zclGetReadWriteCB
   \   000020   A9..         MOV       R1,?V0
   \   000022   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000025   8A..         MOV       ?V2,R2
   \   000027   8B..         MOV       ?V3,R3
   3531                if ( pfnReadWriteCB != NULL )
   \   000029   EA           MOV       A,R2
   \   00002A   4B           ORL       A,R3
   \   00002B   603A         JZ        ??zclWriteAttrDataUsingCB_2
   3532                {
   3533                  // Write the attribute value
   3534                  status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
   3535                                              ZCL_OPER_WRITE, pAttrData, NULL );
   \   00002D                ; Setup parameters for indirect call
   \   00002D   E4           CLR       A
   \   00002E   F5..         MOV       ?V4,A
   \   000030   F5..         MOV       ?V5,A
   \   000032   78..         MOV       R0,#?V4
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   7410         MOV       A,#0x10
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003F   7902         MOV       R1,#0x2
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   FC           MOV       R4,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   FD           MOV       R5,A
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   E0           MOVX      A,@DPTR
   \   000051   FA           MOV       R2,A
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   FB           MOV       R3,A
   \   000055   85..82       MOV       DPL,?V2
   \   000058   85..83       MOV       DPH,?V3
   \   00005B   12....       LCALL     ?CALL_IND
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   \   000063   E9           MOV       A,R1
   \   000064   F9           MOV       R1,A
   \   000065   8006         SJMP      ??zclWriteAttrDataUsingCB_1
   3536                }
   3537                else
   3538                {
   3539                  status = ZCL_STATUS_SOFTWARE_FAILURE;
   \                     ??zclWriteAttrDataUsingCB_2:
   \   000067   79C1         MOV       R1,#-0x3f
   \   000069   8002         SJMP      ??zclWriteAttrDataUsingCB_1
   3540                }
   3541              }
   3542            }
   3543            else
   3544            {
   3545              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrDataUsingCB_0:
   \   00006B   7988         MOV       R1,#-0x78
   3546            }
   3547          
   3548            return ( status );
   \                     ??zclWriteAttrDataUsingCB_1:
   \   00006D   7F06         MOV       R7,#0x6
   \   00006F   02....       LJMP      ?BANKED_LEAVE_XDATA
   3549          }
   3550          
   3551          /*********************************************************************
   3552           * @fn      zclAuthorizeWrite
   3553           *
   3554           * @brief   Use application's callback to authorize a Write operation
   3555           *          on a given attribute.
   3556           *
   3557           * @param   endpoint - application's endpoint
   3558           * @param   srcAddr - source Address
   3559           * @param   pAttr - pointer to attribute
   3560           *
   3561           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3562           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3563           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3564          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   \                     zclAuthorizeWrite:
   3565          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   3566            if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   8D83         MOV       DPH,R5
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   A2E5         MOV       C,0xE0 /* A   */.5
   \   000019   501C         JNC       ??zclAuthorizeWrite_0
   3567            {
   3568              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   \   00001B                ; Setup parameters for call to function zclGetAuthorizeCB
   \   00001B   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   3569          
   3570              if ( pfnAuthorizeCB != NULL )
   \   000022   E582         MOV       A,DPL
   \   000024   4583         ORL       A,DPH
   \   000026   600F         JZ        ??zclAuthorizeWrite_0
   3571              {
   3572                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
   \   000028                ; Setup parameters for indirect call
   \   000028   7902         MOV       R1,#0x2
   \   00002A   AC..         MOV       R4,?V0
   \   00002C   AD..         MOV       R5,?V1
   \   00002E   EE           MOV       A,R6
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     ?CALL_IND
   \   000035   8002         SJMP      ??zclAuthorizeWrite_1
   3573              }
   3574            }
   3575          
   3576            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclAuthorizeWrite_0:
   \   000037   7900         MOV       R1,#0x0
   \                     ??zclAuthorizeWrite_1:
   \   000039   7F06         MOV       R7,#0x6
   \   00003B   02....       LJMP      ?BANKED_LEAVE_XDATA
   3577          }
   3578          #endif // ZCL_WRITE
   3579          
   3580          #ifdef ZCL_READ
   3581          /*********************************************************************
   3582           * @fn      zclParseInReadCmd
   3583           *
   3584           * @brief   Parse the "Profile" Read Commands
   3585           *
   3586           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3587           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3588           *
   3589           * @param   pCmd - pointer to incoming data to parse
   3590           *
   3591           * @return  pointer to the parsed command structure
   3592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3593          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   3594          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3595            zclReadCmd_t *readCmd;
   3596            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   E8           MOV       A,R0
   \   000012   FE           MOV       R6,A
   \   000013   E9           MOV       A,R1
   \   000014   FF           MOV       R7,A
   3597          
   3598            readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   8582..       MOV       ?V0,DPL
   \   00001D   8583..       MOV       ?V1,DPH
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   E0           MOVX      A,@DPTR
   \   000021   2401         ADD       A,#0x1
   \   000023   FA           MOV       R2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   3400         ADDC      A,#0x0
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3599            if ( readCmd != NULL )
   \   00002C   EA           MOV       A,R2
   \   00002D   4B           ORL       A,R3
   \   00002E   6055         JZ        ??zclParseInReadCmd_0
   3600            {
   3601              uint8 i;
   3602              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000030   85..82       MOV       DPL,?V0
   \   000033   85..83       MOV       DPH,?V1
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   C3           CLR       C
   \   00003B   13           RRC       A
   \   00003C   E8           MOV       A,R0
   \   00003D   13           RRC       A
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   F0           MOVX      @DPTR,A
   3603              for ( i = 0; i < readCmd->numAttr; i++ )
   \   000043   7C00         MOV       R4,#0x0
   \   000045   8033         SJMP      ??zclParseInReadCmd_1
   3604              {
   3605                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_2:
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F5..         MOV       ?V0,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F8           MOV       R0,A
   \   000051   E4           CLR       A
   \   000052   C8           XCH       A,R0
   \   000053   F9           MOV       R1,A
   \   000054   E5..         MOV       A,?V0
   \   000056   28           ADD       A,R0
   \   000057   E4           CLR       A
   \   000058   39           ADDC      A,R1
   \   000059   F5..         MOV       ?V1,A
   \   00005B   EC           MOV       A,R4
   \   00005C   25E0         ADD       A,0xE0 /* A   */
   \   00005E   F8           MOV       R0,A
   \   00005F   E4           CLR       A
   \   000060   33           RLC       A
   \   000061   F9           MOV       R1,A
   \   000062   EA           MOV       A,R2
   \   000063   28           ADD       A,R0
   \   000064   F582         MOV       DPL,A
   \   000066   EB           MOV       A,R3
   \   000067   39           ADDC      A,R1
   \   000068   F583         MOV       DPH,A
   \   00006A   A3           INC       DPTR
   \   00006B   E5..         MOV       A,?V0
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   A3           INC       DPTR
   \   00006F   E5..         MOV       A,?V1
   \   000071   F0           MOVX      @DPTR,A
   3606                pBuf += 2;
   \   000072   EE           MOV       A,R6
   \   000073   2402         ADD       A,#0x2
   \   000075   FE           MOV       R6,A
   \   000076   5001         JNC       ??zclParseInReadCmd_3
   \   000078   0F           INC       R7
   3607              }
   \                     ??zclParseInReadCmd_3:
   \   000079   0C           INC       R4
   \                     ??zclParseInReadCmd_1:
   \   00007A   8A82         MOV       DPL,R2
   \   00007C   8B83         MOV       DPH,R3
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F8           MOV       R0,A
   \   000080   EC           MOV       A,R4
   \   000081   C3           CLR       C
   \   000082   98           SUBB      A,R0
   \   000083   40C2         JC        ??zclParseInReadCmd_2
   3608            }
   3609          
   3610            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_0:
   \   000085   7F04         MOV       R7,#0x4
   \   000087   02....       LJMP      ?BANKED_LEAVE_XDATA
   3611          }
   3612          
   3613          /*********************************************************************
   3614           * @fn      zclParseInReadRspCmd
   3615           *
   3616           * @brief   Parse the "Profile" Read Response Commands
   3617           *
   3618           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3619           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3620           *
   3621           * @param   pCmd - pointer to incoming data to parse
   3622           *
   3623           * @return  pointer to the parsed command structure
   3624           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3625          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   3626          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   3627            zclReadRspCmd_t *readRspCmd;
   3628            uint8 *pBuf = pCmd->pData;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V4,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V9
   \   000011   F5..         MOV       ?V5,A
   \   000013   85..82       MOV       DPL,?V4
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   FE           MOV       R6,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FF           MOV       R7,A
   3629            uint8 *dataPtr;
   3630            uint8 numAttr = 0;
   \   00001D   75..00       MOV       ?V2,#0x0
   3631            uint8 hdrLen;
   3632            uint16 dataLen = 0;
   \   000020   75..00       MOV       ?V6,#0x0
   \   000023   75..00       MOV       ?V7,#0x0
   \   000026   8049         SJMP      ??zclParseInReadRspCmd_0
   3633            uint16 attrDataLen;
   3634          
   3635            // find out the number of attributes and the length of attribute data
   3636            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3637            {
   3638              uint8 status;
   3639          
   3640              numAttr++;
   \                     ??zclParseInReadRspCmd_1:
   \   000028   05..         INC       ?V2
   3641              pBuf += 2; // move pass attribute id
   3642          
   3643              status = *pBuf++;
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   EE           MOV       A,R6
   \   000033   2403         ADD       A,#0x3
   \   000035   FE           MOV       R6,A
   \   000036   5001         JNC       ??zclParseInReadRspCmd_2
   \   000038   0F           INC       R7
   3644              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_2:
   \   000039   E8           MOV       A,R0
   \   00003A   7035         JNZ       ??zclParseInReadRspCmd_0
   3645              {
   3646                uint8 dataType = *pBuf++;
   \   00003C   8E82         MOV       DPL,R6
   \   00003E   8F83         MOV       DPH,R7
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F9           MOV       R1,A
   \   000042   A3           INC       DPTR
   \   000043   AE82         MOV       R6,DPL
   \   000045   AF83         MOV       R7,DPH
   3647          
   3648                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \   000047                ; Setup parameters for call to function zclGetAttrDataLength
   \   000047   EE           MOV       A,R6
   \   000048   FA           MOV       R2,A
   \   000049   EF           MOV       A,R7
   \   00004A   FB           MOV       R3,A
   \   00004B   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00004E   8A..         MOV       ?V0,R2
   \   000050   8B..         MOV       ?V1,R3
   3649                pBuf += attrDataLen; // move pass attribute data
   \   000052   EE           MOV       A,R6
   \   000053   2A           ADD       A,R2
   \   000054   FE           MOV       R6,A
   \   000055   EF           MOV       A,R7
   \   000056   35..         ADDC      A,?V1
   \   000058   FF           MOV       R7,A
   3650          
   3651                // add padding if needed
   3652                if ( PADDING_NEEDED( attrDataLen ) )
   \   000059   EA           MOV       A,R2
   \   00005A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005C   5007         JNC       ??zclParseInReadRspCmd_3
   3653                {
   3654                  attrDataLen++;
   \   00005E   05..         INC       ?V0
   \   000060   04           INC       A
   \   000061   7002         JNZ       ??zclParseInReadRspCmd_3
   \   000063   05..         INC       ?V1
   3655                }
   3656          
   3657                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_3:
   \   000065   E5..         MOV       A,?V6
   \   000067   25..         ADD       A,?V0
   \   000069   F5..         MOV       ?V6,A
   \   00006B   E5..         MOV       A,?V7
   \   00006D   35..         ADDC      A,?V1
   \   00006F   F5..         MOV       ?V7,A
   3658              }
   3659            }
   \                     ??zclParseInReadRspCmd_0:
   \   000071   85..82       MOV       DPL,?V8
   \   000074   85..83       MOV       DPH,?V9
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F8           MOV       R0,A
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F9           MOV       R1,A
   \   00007D   85..82       MOV       DPL,?V4
   \   000080   85..83       MOV       DPH,?V5
   \   000083   E0           MOVX      A,@DPTR
   \   000084   28           ADD       A,R0
   \   000085   F8           MOV       R0,A
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   39           ADDC      A,R1
   \   000089   F9           MOV       R1,A
   \   00008A   C3           CLR       C
   \   00008B   EE           MOV       A,R6
   \   00008C   98           SUBB      A,R0
   \   00008D   EF           MOV       A,R7
   \   00008E   99           SUBB      A,R1
   \   00008F   4097         JC        ??zclParseInReadRspCmd_1
   3660          
   3661            // calculate the length of the response header
   3662            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
   \   000091   75F006       MOV       B,#0x6
   \   000094   E5..         MOV       A,?V2
   \   000096   A4           MUL       AB
   \   000097   04           INC       A
   \   000098   F5..         MOV       ?V0,A
   3663          
   3664            readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   00009A                ; Setup parameters for call to function osal_mem_alloc
   \   00009A   25..         ADD       A,?V6
   \   00009C   FA           MOV       R2,A
   \   00009D   E4           CLR       A
   \   00009E   35..         ADDC      A,?V7
   \   0000A0   FB           MOV       R3,A
   \   0000A1   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A4   8A..         MOV       ?V10,R2
   \   0000A6   8B..         MOV       ?V11,R3
   3665            if ( readRspCmd != NULL )
   \   0000A8   EA           MOV       A,R2
   \   0000A9   4B           ORL       A,R3
   \   0000AA   7003         JNZ       $+5
   \   0000AC   02....       LJMP      ??zclParseInReadRspCmd_4 & 0xFFFF
   3666            {
   3667              uint8 i;
   3668              pBuf = pCmd->pData;
   \   0000AF   85..82       MOV       DPL,?V4
   \   0000B2   85..83       MOV       DPH,?V5
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   FE           MOV       R6,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   FF           MOV       R7,A
   3669              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   \   0000BA   A8..         MOV       R0,?V0
   \   0000BC   EA           MOV       A,R2
   \   0000BD   28           ADD       A,R0
   \   0000BE   F5..         MOV       ?V8,A
   \   0000C0   E4           CLR       A
   \   0000C1   3B           ADDC      A,R3
   \   0000C2   F5..         MOV       ?V9,A
   3670          
   3671              readRspCmd->numAttr = numAttr;
   \   0000C4   8A82         MOV       DPL,R2
   \   0000C6   8B83         MOV       DPH,R3
   \   0000C8   E5..         MOV       A,?V2
   \   0000CA   F0           MOVX      @DPTR,A
   3672              for ( i = 0; i < numAttr; i++ )
   \   0000CB   75..00       MOV       ?V3,#0x0
   \   0000CE   02....       LJMP      ??zclParseInReadRspCmd_5 & 0xFFFF
   3673              {
   3674                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_6:
   \   0000D1   E5..         MOV       A,?V3
   \   0000D3   75F006       MOV       B,#0x6
   \   0000D6   A4           MUL       AB
   \   0000D7   F8           MOV       R0,A
   \   0000D8   A9F0         MOV       R1,B
   \   0000DA   E5..         MOV       A,?V10
   \   0000DC   28           ADD       A,R0
   \   0000DD   F582         MOV       DPL,A
   \   0000DF   E5..         MOV       A,?V11
   \   0000E1   39           ADDC      A,R1
   \   0000E2   F583         MOV       DPH,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   8582..       MOV       ?V12,DPL
   \   0000E8   8583..       MOV       ?V13,DPH
   3675          
   3676                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   0000EB   8E82         MOV       DPL,R6
   \   0000ED   8F83         MOV       DPH,R7
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   FA           MOV       R2,A
   \   0000F1   A3           INC       DPTR
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   F9           MOV       R1,A
   \   0000F4   EA           MOV       A,R2
   \   0000F5   85..82       MOV       DPL,?V12
   \   0000F8   85..83       MOV       DPH,?V13
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   E9           MOV       A,R1
   \   0000FE   F0           MOVX      @DPTR,A
   3677                pBuf += 2;
   3678          
   3679                statusRec->status = *pBuf++;
   \   0000FF   8E82         MOV       DPL,R6
   \   000101   8F83         MOV       DPH,R7
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F8           MOV       R0,A
   \   000107   85..82       MOV       DPL,?V12
   \   00010A   85..83       MOV       DPH,?V13
   \   00010D   A3           INC       DPTR
   \   00010E   A3           INC       DPTR
   \   00010F   F0           MOVX      @DPTR,A
   \   000110   EE           MOV       A,R6
   \   000111   2403         ADD       A,#0x3
   \   000113   FE           MOV       R6,A
   \   000114   5001         JNC       ??zclParseInReadRspCmd_7
   \   000116   0F           INC       R7
   3680                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_7:
   \   000117   E8           MOV       A,R0
   \   000118   7072         JNZ       ??zclParseInReadRspCmd_8
   3681                {
   3682                  statusRec->dataType = *pBuf++;
   \   00011A   8E82         MOV       DPL,R6
   \   00011C   8F83         MOV       DPH,R7
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F9           MOV       R1,A
   \   000120   85..82       MOV       DPL,?V12
   \   000123   85..83       MOV       DPH,?V13
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   F0           MOVX      @DPTR,A
   \   00012A   8E82         MOV       DPL,R6
   \   00012C   8F83         MOV       DPH,R7
   \   00012E   A3           INC       DPTR
   \   00012F   AE82         MOV       R6,DPL
   \   000131   AF83         MOV       R7,DPH
   3683          
   3684                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \   000133                ; Setup parameters for call to function zclGetAttrDataLength
   \   000133   EE           MOV       A,R6
   \   000134   FA           MOV       R2,A
   \   000135   EF           MOV       A,R7
   \   000136   FB           MOV       R3,A
   \   000137   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00013A   8A..         MOV       ?V0,R2
   \   00013C   8B..         MOV       ?V1,R3
   3685                  zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   00013E                ; Setup parameters for call to function osal_memcpy
   \   00013E   8E..         MOV       ?V4,R6
   \   000140   8F..         MOV       ?V5,R7
   \   000142   75..00       MOV       ?V6,#0x0
   \   000145   78..         MOV       R0,#?V4
   \   000147   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00014A   AC..         MOV       R4,?V0
   \   00014C   AD..         MOV       R5,?V1
   \   00014E   AA..         MOV       R2,?V8
   \   000150   AB..         MOV       R3,?V9
   \   000152   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000155   7403         MOV       A,#0x3
   \   000157   12....       LCALL     ?DEALLOC_XSTACK8
   3686                  statusRec->data = dataPtr;
   \   00015A   85..82       MOV       DPL,?V12
   \   00015D   85..83       MOV       DPH,?V13
   \   000160   A3           INC       DPTR
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   A3           INC       DPTR
   \   000164   E5..         MOV       A,?V8
   \   000166   F0           MOVX      @DPTR,A
   \   000167   A3           INC       DPTR
   \   000168   E5..         MOV       A,?V9
   \   00016A   F0           MOVX      @DPTR,A
   3687          
   3688                  pBuf += attrDataLen; // move pass attribute data
   \   00016B   EE           MOV       A,R6
   \   00016C   25..         ADD       A,?V0
   \   00016E   FE           MOV       R6,A
   \   00016F   EF           MOV       A,R7
   \   000170   35..         ADDC      A,?V1
   \   000172   FF           MOV       R7,A
   3689          
   3690                  // advance attribute data pointer
   3691                  if ( PADDING_NEEDED( attrDataLen ) )
   \   000173   E5..         MOV       A,?V0
   \   000175   A2E0         MOV       C,0xE0 /* A   */.0
   \   000177   5007         JNC       ??zclParseInReadRspCmd_9
   3692                  {
   3693                    attrDataLen++;
   \   000179   05..         INC       ?V0
   \   00017B   04           INC       A
   \   00017C   7002         JNZ       ??zclParseInReadRspCmd_9
   \   00017E   05..         INC       ?V1
   3694                  }
   3695          
   3696                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_9:
   \   000180   E5..         MOV       A,?V8
   \   000182   25..         ADD       A,?V0
   \   000184   F5..         MOV       ?V8,A
   \   000186   E5..         MOV       A,?V9
   \   000188   35..         ADDC      A,?V1
   \   00018A   F5..         MOV       ?V9,A
   3697                }
   3698              }
   \                     ??zclParseInReadRspCmd_8:
   \   00018C   05..         INC       ?V3
   \                     ??zclParseInReadRspCmd_5:
   \   00018E   E5..         MOV       A,?V3
   \   000190   C3           CLR       C
   \   000191   95..         SUBB      A,?V2
   \   000193   5003         JNC       $+5
   \   000195   02....       LJMP      ??zclParseInReadRspCmd_6 & 0xFFFF
   3699            }
   3700          
   3701            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_4:
   \   000198   AA..         MOV       R2,?V10
   \   00019A   AB..         MOV       R3,?V11
   \   00019C   7F0E         MOV       R7,#0xe
   \   00019E   02....       LJMP      ?BANKED_LEAVE_XDATA
   3702          }
   3703          #endif // ZCL_READ
   3704          
   3705          #ifdef ZCL_WRITE
   3706          /*********************************************************************
   3707           * @fn      zclParseInWriteCmd
   3708           *
   3709           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   3710           *          Response Commands
   3711           *
   3712           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3713           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3714           *
   3715           * @param   pCmd - pointer to incoming data to parse
   3716           *
   3717           * @return  pointer to the parsed command structure
   3718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3719          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   3720          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   3721            zclWriteCmd_t *writeCmd;
   3722            uint8 *pBuf = pCmd->pData;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V2,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V9
   \   000011   F5..         MOV       ?V3,A
   \   000013   85..82       MOV       DPL,?V2
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V1,A
   3723            uint16 attrDataLen;
   3724            uint8 *dataPtr;
   3725            uint8 numAttr = 0;
   \   00001F   75..00       MOV       ?V7,#0x0
   3726            uint8 hdrLen;
   3727            uint16 dataLen = 0;
   \   000022   75..00       MOV       ?V4,#0x0
   \   000025   75..00       MOV       ?V5,#0x0
   \   000028   8042         SJMP      ??zclParseInWriteCmd_0
   3728          
   3729            // find out the number of attributes and the length of attribute data
   3730            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3731            {
   3732              uint8 dataType;
   3733          
   3734              numAttr++;
   \                     ??zclParseInWriteCmd_1:
   \   00002A   05..         INC       ?V7
   3735              pBuf += 2; // move pass attribute id
   3736          
   3737              dataType = *pBuf++;
   \   00002C   85..82       MOV       DPL,?V0
   \   00002F   85..83       MOV       DPH,?V1
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   E5..         MOV       A,?V0
   \   000038   2403         ADD       A,#0x3
   \   00003A   F5..         MOV       ?V0,A
   \   00003C   5002         JNC       ??zclParseInWriteCmd_2
   \   00003E   05..         INC       ?V1
   3738          
   3739              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \                     ??zclParseInWriteCmd_2:
   \   000040                ; Setup parameters for call to function zclGetAttrDataLength
   \   000040   FA           MOV       R2,A
   \   000041   AB..         MOV       R3,?V1
   \   000043   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000046   8A..         MOV       ?V10,R2
   \   000048   8B..         MOV       ?V11,R3
   \   00004A   AE..         MOV       R6,?V10
   \   00004C   AF..         MOV       R7,?V11
   3740              pBuf += attrDataLen; // move pass attribute data
   \   00004E   E5..         MOV       A,?V0
   \   000050   2A           ADD       A,R2
   \   000051   F5..         MOV       ?V0,A
   \   000053   E5..         MOV       A,?V1
   \   000055   3F           ADDC      A,R7
   \   000056   F5..         MOV       ?V1,A
   3741          
   3742              // add padding if needed
   3743              if ( PADDING_NEEDED( attrDataLen ) )
   \   000058   EA           MOV       A,R2
   \   000059   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005B   5005         JNC       ??zclParseInWriteCmd_3
   3744              {
   3745                attrDataLen++;
   \   00005D   0E           INC       R6
   \   00005E   04           INC       A
   \   00005F   7001         JNZ       ??zclParseInWriteCmd_3
   \   000061   0F           INC       R7
   3746              }
   3747          
   3748              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_3:
   \   000062   E5..         MOV       A,?V4
   \   000064   2E           ADD       A,R6
   \   000065   F5..         MOV       ?V4,A
   \   000067   E5..         MOV       A,?V5
   \   000069   3F           ADDC      A,R7
   \   00006A   F5..         MOV       ?V5,A
   3749            }
   \                     ??zclParseInWriteCmd_0:
   \   00006C   85..82       MOV       DPL,?V8
   \   00006F   85..83       MOV       DPH,?V9
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F8           MOV       R0,A
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F9           MOV       R1,A
   \   000078   85..82       MOV       DPL,?V2
   \   00007B   85..83       MOV       DPH,?V3
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   28           ADD       A,R0
   \   000080   F8           MOV       R0,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   39           ADDC      A,R1
   \   000084   F9           MOV       R1,A
   \   000085   C3           CLR       C
   \   000086   E5..         MOV       A,?V0
   \   000088   98           SUBB      A,R0
   \   000089   E5..         MOV       A,?V1
   \   00008B   99           SUBB      A,R1
   \   00008C   409C         JC        ??zclParseInWriteCmd_1
   3750          
   3751            // calculate the length of the response header
   3752            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
   \   00008E   75F005       MOV       B,#0x5
   \   000091   E5..         MOV       A,?V7
   \   000093   A4           MUL       AB
   \   000094   04           INC       A
   \   000095   FE           MOV       R6,A
   3753          
   3754            writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   000096                ; Setup parameters for call to function osal_mem_alloc
   \   000096   25..         ADD       A,?V4
   \   000098   FA           MOV       R2,A
   \   000099   E4           CLR       A
   \   00009A   35..         ADDC      A,?V5
   \   00009C   FB           MOV       R3,A
   \   00009D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A0   8A..         MOV       ?V10,R2
   \   0000A2   8B..         MOV       ?V11,R3
   3755            if ( writeCmd != NULL )
   \   0000A4   EA           MOV       A,R2
   \   0000A5   4B           ORL       A,R3
   \   0000A6   7003         JNZ       $+5
   \   0000A8   02....       LJMP      ??zclParseInWriteCmd_4 & 0xFFFF
   3756            {
   3757              uint8 i;
   3758              pBuf = pCmd->pData;
   \   0000AB   85..82       MOV       DPL,?V2
   \   0000AE   85..83       MOV       DPH,?V3
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F5..         MOV       ?V0,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F5..         MOV       ?V1,A
   3759              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   \   0000B8   EA           MOV       A,R2
   \   0000B9   2E           ADD       A,R6
   \   0000BA   F5..         MOV       ?V2,A
   \   0000BC   E4           CLR       A
   \   0000BD   3B           ADDC      A,R3
   \   0000BE   F5..         MOV       ?V3,A
   3760          
   3761              writeCmd->numAttr = numAttr;
   \   0000C0   8A82         MOV       DPL,R2
   \   0000C2   8B83         MOV       DPH,R3
   \   0000C4   E5..         MOV       A,?V7
   \   0000C6   F0           MOVX      @DPTR,A
   3762              for ( i = 0; i < numAttr; i++ )
   \   0000C7   75..00       MOV       ?V8,#0x0
   \   0000CA   02....       LJMP      ??zclParseInWriteCmd_5 & 0xFFFF
   3763              {
   3764                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_6:
   \   0000CD   E5..         MOV       A,?V8
   \   0000CF   75F005       MOV       B,#0x5
   \   0000D2   A4           MUL       AB
   \   0000D3   F8           MOV       R0,A
   \   0000D4   A9F0         MOV       R1,B
   \   0000D6   E5..         MOV       A,?V10
   \   0000D8   28           ADD       A,R0
   \   0000D9   F582         MOV       DPL,A
   \   0000DB   E5..         MOV       A,?V11
   \   0000DD   39           ADDC      A,R1
   \   0000DE   F583         MOV       DPH,A
   \   0000E0   A3           INC       DPTR
   \   0000E1   8582..       MOV       ?V12,DPL
   \   0000E4   8583..       MOV       ?V13,DPH
   3765          
   3766                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   0000E7   85..82       MOV       DPL,?V0
   \   0000EA   85..83       MOV       DPH,?V1
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   FA           MOV       R2,A
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F9           MOV       R1,A
   \   0000F2   EA           MOV       A,R2
   \   0000F3   85..82       MOV       DPL,?V12
   \   0000F6   85..83       MOV       DPH,?V13
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   E9           MOV       A,R1
   \   0000FC   F0           MOVX      @DPTR,A
   3767                pBuf += 2;
   3768                statusRec->dataType = *pBuf++;
   \   0000FD   85..82       MOV       DPL,?V0
   \   000100   85..83       MOV       DPH,?V1
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F9           MOV       R1,A
   \   000107   85..82       MOV       DPL,?V12
   \   00010A   85..83       MOV       DPH,?V13
   \   00010D   A3           INC       DPTR
   \   00010E   A3           INC       DPTR
   \   00010F   F0           MOVX      @DPTR,A
   \   000110   E5..         MOV       A,?V0
   \   000112   2403         ADD       A,#0x3
   \   000114   F5..         MOV       ?V0,A
   \   000116   5002         JNC       ??zclParseInWriteCmd_7
   \   000118   05..         INC       ?V1
   3769          
   3770                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??zclParseInWriteCmd_7:
   \   00011A                ; Setup parameters for call to function zclGetAttrDataLength
   \   00011A   FA           MOV       R2,A
   \   00011B   AB..         MOV       R3,?V1
   \   00011D   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000120   8A..         MOV       ?V4,R2
   \   000122   8B..         MOV       ?V5,R3
   \   000124   AE..         MOV       R6,?V4
   \   000126   AF..         MOV       R7,?V5
   3771                zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   000128                ; Setup parameters for call to function osal_memcpy
   \   000128   85....       MOV       ?V4,?V0
   \   00012B   85....       MOV       ?V5,?V1
   \   00012E   75..00       MOV       ?V6,#0x0
   \   000131   78..         MOV       R0,#?V4
   \   000133   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000136   EA           MOV       A,R2
   \   000137   FC           MOV       R4,A
   \   000138   EB           MOV       A,R3
   \   000139   FD           MOV       R5,A
   \   00013A   AA..         MOV       R2,?V2
   \   00013C   AB..         MOV       R3,?V3
   \   00013E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000141   7403         MOV       A,#0x3
   \   000143   12....       LCALL     ?DEALLOC_XSTACK8
   3772                statusRec->attrData = dataPtr;
   \   000146   85..82       MOV       DPL,?V12
   \   000149   85..83       MOV       DPH,?V13
   \   00014C   A3           INC       DPTR
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   E5..         MOV       A,?V2
   \   000151   F0           MOVX      @DPTR,A
   \   000152   A3           INC       DPTR
   \   000153   E5..         MOV       A,?V3
   \   000155   F0           MOVX      @DPTR,A
   3773          
   3774                pBuf += attrDataLen; // move pass attribute data
   \   000156   E5..         MOV       A,?V0
   \   000158   2E           ADD       A,R6
   \   000159   F5..         MOV       ?V0,A
   \   00015B   E5..         MOV       A,?V1
   \   00015D   3F           ADDC      A,R7
   \   00015E   F5..         MOV       ?V1,A
   3775          
   3776                // advance attribute data pointer
   3777                if ( PADDING_NEEDED( attrDataLen ) )
   \   000160   EE           MOV       A,R6
   \   000161   A2E0         MOV       C,0xE0 /* A   */.0
   \   000163   5005         JNC       ??zclParseInWriteCmd_8
   3778                {
   3779                  attrDataLen++;
   \   000165   0E           INC       R6
   \   000166   04           INC       A
   \   000167   7001         JNZ       ??zclParseInWriteCmd_8
   \   000169   0F           INC       R7
   3780                }
   3781          
   3782                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_8:
   \   00016A   E5..         MOV       A,?V2
   \   00016C   2E           ADD       A,R6
   \   00016D   F5..         MOV       ?V2,A
   \   00016F   E5..         MOV       A,?V3
   \   000171   3F           ADDC      A,R7
   \   000172   F5..         MOV       ?V3,A
   3783              }
   \   000174   05..         INC       ?V8
   \                     ??zclParseInWriteCmd_5:
   \   000176   E5..         MOV       A,?V8
   \   000178   C3           CLR       C
   \   000179   95..         SUBB      A,?V7
   \   00017B   5003         JNC       $+5
   \   00017D   02....       LJMP      ??zclParseInWriteCmd_6 & 0xFFFF
   3784            }
   3785          
   3786            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_4:
   \   000180   AA..         MOV       R2,?V10
   \   000182   AB..         MOV       R3,?V11
   \   000184   7F0E         MOV       R7,#0xe
   \   000186   02....       LJMP      ?BANKED_LEAVE_XDATA
   3787          }
   3788          
   3789          /*********************************************************************
   3790           * @fn      zclParseInWriteRspCmd
   3791           *
   3792           * @brief   Parse the "Profile" Write Response Commands
   3793           *
   3794           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3795           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3796           *
   3797           * @param   pCmd - pointer to incoming data to parse
   3798           *
   3799           * @return  pointer to the parsed command structure
   3800           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3801          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   3802          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3803            zclWriteRspCmd_t *writeRspCmd;
   3804            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV       A,R2
   \   000006   2403         ADD       A,#0x3
   \   000008   F5..         MOV       ?V2,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F5..         MOV       ?V3,A
   \   00000E   85..82       MOV       DPL,?V2
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FE           MOV       R6,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FF           MOV       R7,A
   3805            uint8 i = 0;
   \   000018   75..00       MOV       ?V4,#0x0
   3806          
   3807            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   8582..       MOV       ?V0,DPL
   \   000023   8583..       MOV       ?V1,DPH
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   E0           MOVX      A,@DPTR
   \   000027   2401         ADD       A,#0x1
   \   000029   FA           MOV       R2,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   3400         ADDC      A,#0x0
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3808            if ( writeRspCmd != NULL )
   \   000032   EA           MOV       A,R2
   \   000033   4B           ORL       A,R3
   \   000034   7003         JNZ       $+5
   \   000036   02....       LJMP      ??zclParseInWriteRspCmd_0 & 0xFFFF
   3809            {
   3810              if ( pCmd->dataLen == 1 )
   \   000039   85..82       MOV       DPL,?V0
   \   00003C   85..83       MOV       DPH,?V1
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   6401         XRL       A,#0x1
   \   000042   7002         JNZ       ??zclParseInWriteRspCmd_1
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \                     ??zclParseInWriteRspCmd_1:
   \   000046   704E         JNZ       ??zclParseInWriteRspCmd_2
   3811              {
   3812                // special case when all writes were successfull
   3813                writeRspCmd->attrList[i++].status = *pBuf;
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   A3           INC       DPTR
   \   000052   F0           MOVX      @DPTR,A
   \   000053   75..01       MOV       ?V4,#0x1
   \   000056   805D         SJMP      ??zclParseInWriteRspCmd_3
   3814              }
   3815              else
   3816              {
   3817                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3818                {
   3819                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   000058   E5..         MOV       A,?V4
   \   00005A   75F003       MOV       B,#0x3
   \   00005D   A4           MUL       AB
   \   00005E   F8           MOV       R0,A
   \   00005F   A9F0         MOV       R1,B
   \   000061   EA           MOV       A,R2
   \   000062   28           ADD       A,R0
   \   000063   F8           MOV       R0,A
   \   000064   EB           MOV       A,R3
   \   000065   39           ADDC      A,R1
   \   000066   F9           MOV       R1,A
   \   000067   8E82         MOV       DPL,R6
   \   000069   8F83         MOV       DPH,R7
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   8882         MOV       DPL,R0
   \   00006E   8983         MOV       DPH,R1
   \   000070   A3           INC       DPTR
   \   000071   F0           MOVX      @DPTR,A
   \   000072   8E82         MOV       DPL,R6
   \   000074   8F83         MOV       DPH,R7
   \   000076   A3           INC       DPTR
   \   000077   AE82         MOV       R6,DPL
   \   000079   AF83         MOV       R7,DPH
   3820                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F5..         MOV       ?V6,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FD           MOV       R5,A
   \   000081   E5..         MOV       A,?V6
   \   000083   8882         MOV       DPL,R0
   \   000085   8983         MOV       DPH,R1
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   A3           INC       DPTR
   \   00008B   ED           MOV       A,R5
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   05..         INC       ?V4
   3821                  pBuf += 2;
   \   00008F   EE           MOV       A,R6
   \   000090   2402         ADD       A,#0x2
   \   000092   FE           MOV       R6,A
   \   000093   5001         JNC       ??zclParseInWriteRspCmd_2
   \   000095   0F           INC       R7
   3822                }
   \                     ??zclParseInWriteRspCmd_2:
   \   000096   85..82       MOV       DPL,?V0
   \   000099   85..83       MOV       DPH,?V1
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F8           MOV       R0,A
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F9           MOV       R1,A
   \   0000A1   85..82       MOV       DPL,?V2
   \   0000A4   85..83       MOV       DPH,?V3
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   28           ADD       A,R0
   \   0000A9   F8           MOV       R0,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   39           ADDC      A,R1
   \   0000AD   F9           MOV       R1,A
   \   0000AE   C3           CLR       C
   \   0000AF   EE           MOV       A,R6
   \   0000B0   98           SUBB      A,R0
   \   0000B1   EF           MOV       A,R7
   \   0000B2   99           SUBB      A,R1
   \   0000B3   40A3         JC        ??zclParseInWriteRspCmd_4
   3823              }
   3824          
   3825              writeRspCmd->numAttr = i;
   \                     ??zclParseInWriteRspCmd_3:
   \   0000B5   8A82         MOV       DPL,R2
   \   0000B7   8B83         MOV       DPH,R3
   \   0000B9   E5..         MOV       A,?V4
   \   0000BB   F0           MOVX      @DPTR,A
   3826            }
   3827          
   3828            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_0:
   \   0000BC   7F08         MOV       R7,#0x8
   \   0000BE   02....       LJMP      ?BANKED_LEAVE_XDATA
   3829          }
   3830          #endif // ZCL_WRITE
   3831          
   3832          #ifdef ZCL_REPORTING_DEVICE
   3833          /*********************************************************************
   3834           * @fn      zclParseInConfigReportCmd
   3835           *
   3836           * @brief   Parse the "Profile" Configure Reporting Command
   3837           *
   3838           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3839           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3840           *
   3841           * @param   pCmd - pointer to incoming data to parse
   3842           *
   3843           * @return  pointer to the parsed command structure
   3844           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3845          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   \                     zclParseInConfigReportCmd:
   3846          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   3847            zclCfgReportCmd_t *cfgReportCmd;
   3848            uint8 *pBuf = pCmd->pData;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V5
   \   000011   F5..         MOV       ?V1,A
   \   000013   85..82       MOV       DPL,?V0
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   FE           MOV       R6,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FF           MOV       R7,A
   3849            uint8 *dataPtr;
   3850            uint8 numAttr = 0;
   \   00001D   75..00       MOV       ?V2,#0x0
   3851            uint8 dataType;
   3852            uint8 hdrLen;
   3853            uint16 dataLen = 0;
   \   000020   75..00       MOV       ?V6,#0x0
   \   000023   75..00       MOV       ?V7,#0x0
   \   000026   8007         SJMP      ??zclParseInConfigReportCmd_0
   3854            uint8 reportChangeLen; // length of Reportable Change field
   3855          
   3856            // Calculate the length of the Request command
   3857            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3858            {
   3859              uint8 direction;
   3860          
   3861              numAttr++;
   3862              direction = *pBuf++;
   3863              pBuf += 2; // move pass the attribute ID
   3864          
   3865              // Is there a Reportable Change field?
   3866              if ( direction == ZCL_SEND_ATTR_REPORTS )
   3867              {
   3868                dataType = *pBuf++;
   3869                pBuf += 4; // move pass the Min and Max Reporting Intervals
   3870          
   3871                // For attributes of 'discrete' data types this field is omitted
   3872                if ( zclAnalogDataType( dataType ) )
   3873                {
   3874                  reportChangeLen = zclGetDataTypeLength( dataType );
   3875                  pBuf += reportChangeLen;
   3876          
   3877                  // add padding if needed
   3878                  if ( PADDING_NEEDED( reportChangeLen ) )
   3879                  {
   3880                    reportChangeLen++;
   3881                  }
   3882          
   3883                  dataLen += reportChangeLen;
   3884                }
   3885                else
   3886                {
   3887                  pBuf++; // move past reportable change field
   3888                }
   3889              }
   3890              else
   3891              {
   3892                pBuf += 2; // move pass the Timeout Period
   \                     ??zclParseInConfigReportCmd_1:
   \   000028   EE           MOV       A,R6
   \   000029   2405         ADD       A,#0x5
   \   00002B   FE           MOV       R6,A
   \   00002C   5001         JNC       ??zclParseInConfigReportCmd_0
   \   00002E   0F           INC       R7
   3893              }
   \                     ??zclParseInConfigReportCmd_0:
   \   00002F   85..82       MOV       DPL,?V4
   \   000032   85..83       MOV       DPH,?V5
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   85..82       MOV       DPL,?V0
   \   00003E   85..83       MOV       DPH,?V1
   \   000041   E0           MOVX      A,@DPTR
   \   000042   28           ADD       A,R0
   \   000043   F8           MOV       R0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   39           ADDC      A,R1
   \   000047   F9           MOV       R1,A
   \   000048   C3           CLR       C
   \   000049   EE           MOV       A,R6
   \   00004A   98           SUBB      A,R0
   \   00004B   EF           MOV       A,R7
   \   00004C   99           SUBB      A,R1
   \   00004D   5048         JNC       ??zclParseInConfigReportCmd_2
   \   00004F   05..         INC       ?V2
   \   000051   8E82         MOV       DPL,R6
   \   000053   8F83         MOV       DPH,R7
   \   000055   E0           MOVX      A,@DPTR
   \   000056   70D0         JNZ       ??zclParseInConfigReportCmd_1
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F5..         MOV       ?V3,A
   \   00005E   EE           MOV       A,R6
   \   00005F   2408         ADD       A,#0x8
   \   000061   FE           MOV       R6,A
   \   000062   5001         JNC       ??zclParseInConfigReportCmd_3
   \   000064   0F           INC       R7
   \                     ??zclParseInConfigReportCmd_3:
   \   000065                ; Setup parameters for call to function zclAnalogDataType
   \   000065   A9..         MOV       R1,?V3
   \   000067   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   00006A   E9           MOV       A,R1
   \   00006B   601F         JZ        ??zclParseInConfigReportCmd_4
   \   00006D                ; Setup parameters for call to function zclGetDataTypeLength
   \   00006D   A9..         MOV       R1,?V3
   \   00006F   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000072   E9           MOV       A,R1
   \   000073   F8           MOV       R0,A
   \   000074   EE           MOV       A,R6
   \   000075   29           ADD       A,R1
   \   000076   FE           MOV       R6,A
   \   000077   E4           CLR       A
   \   000078   3F           ADDC      A,R7
   \   000079   FF           MOV       R7,A
   \   00007A   E9           MOV       A,R1
   \   00007B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00007D   5001         JNC       ??zclParseInConfigReportCmd_5
   \   00007F   08           INC       R0
   \                     ??zclParseInConfigReportCmd_5:
   \   000080   E5..         MOV       A,?V6
   \   000082   28           ADD       A,R0
   \   000083   F5..         MOV       ?V6,A
   \   000085   E4           CLR       A
   \   000086   35..         ADDC      A,?V7
   \   000088   F5..         MOV       ?V7,A
   \   00008A   80A3         SJMP      ??zclParseInConfigReportCmd_0
   \                     ??zclParseInConfigReportCmd_4:
   \   00008C   8E82         MOV       DPL,R6
   \   00008E   8F83         MOV       DPH,R7
   \   000090   A3           INC       DPTR
   \   000091   AE82         MOV       R6,DPL
   \   000093   AF83         MOV       R7,DPH
   \   000095   8098         SJMP      ??zclParseInConfigReportCmd_0
   3894            } // while loop
   3895          
   3896            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   \                     ??zclParseInConfigReportCmd_2:
   \   000097   75F00C       MOV       B,#0xc
   \   00009A   E5..         MOV       A,?V2
   \   00009C   A4           MUL       AB
   \   00009D   04           INC       A
   \   00009E   F5..         MOV       ?V3,A
   3897          
   3898            cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   0000A0                ; Setup parameters for call to function osal_mem_alloc
   \   0000A0   25..         ADD       A,?V6
   \   0000A2   FA           MOV       R2,A
   \   0000A3   E4           CLR       A
   \   0000A4   35..         ADDC      A,?V7
   \   0000A6   FB           MOV       R3,A
   \   0000A7   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000AA   8A..         MOV       ?V8,R2
   \   0000AC   8B..         MOV       ?V9,R3
   3899            if ( cfgReportCmd != NULL )
   \   0000AE   EA           MOV       A,R2
   \   0000AF   4B           ORL       A,R3
   \   0000B0   7003         JNZ       $+5
   \   0000B2   02....       LJMP      ??zclParseInConfigReportCmd_6 & 0xFFFF
   3900            {
   3901              uint8 i;
   3902              pBuf = pCmd->pData;
   \   0000B5   85..82       MOV       DPL,?V0
   \   0000B8   85..83       MOV       DPH,?V1
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   FE           MOV       R6,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   FF           MOV       R7,A
   3903              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   \   0000C0   A8..         MOV       R0,?V3
   \   0000C2   EA           MOV       A,R2
   \   0000C3   28           ADD       A,R0
   \   0000C4   F5..         MOV       ?V4,A
   \   0000C6   E4           CLR       A
   \   0000C7   3B           ADDC      A,R3
   \   0000C8   F5..         MOV       ?V5,A
   3904          
   3905              cfgReportCmd->numAttr = numAttr;
   \   0000CA   8A82         MOV       DPL,R2
   \   0000CC   8B83         MOV       DPH,R3
   \   0000CE   E5..         MOV       A,?V2
   \   0000D0   F0           MOVX      @DPTR,A
   3906              for ( i = 0; i < numAttr; i++ )
   \   0000D1   75..00       MOV       ?V3,#0x0
   \   0000D4   801F         SJMP      ??zclParseInConfigReportCmd_7
   3907              {
   3908                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   3909          
   3910                zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   3911          
   3912                reportRec->direction = *pBuf++;
   3913                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3914                pBuf += 2;
   3915                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   3916                {
   3917                  // Attribute to be reported
   3918                  reportRec->dataType = *pBuf++;
   3919                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3920                  pBuf += 2;
   3921                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3922                  pBuf += 2;
   3923          
   3924                  // For attributes of 'discrete' data types this field is omitted
   3925                  if ( zclAnalogDataType( reportRec->dataType ) )
   3926                  {
   3927                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   3928                    reportRec->reportableChange = dataPtr;
   3929          
   3930                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   3931                    pBuf += reportChangeLen;
   3932          
   3933                    // advance attribute data pointer
   3934                    if ( PADDING_NEEDED( reportChangeLen ) )
   3935                    {
   3936                      reportChangeLen++;
   3937                    }
   3938          
   3939                    dataPtr += reportChangeLen;
   3940                  }
   3941                }
   3942                else
   3943                {
   3944                  // Attribute reports to be received
   3945                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInConfigReportCmd_8:
   \   0000D6   8882         MOV       DPL,R0
   \   0000D8   8983         MOV       DPH,R1
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F9           MOV       R1,A
   \   0000DC   EC           MOV       A,R4
   \   0000DD   85..82       MOV       DPL,?V0
   \   0000E0   85..83       MOV       DPH,?V1
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   F0           MOVX      @DPTR,A
   \   0000EC   A3           INC       DPTR
   \   0000ED   E9           MOV       A,R1
   \   0000EE   F0           MOVX      @DPTR,A
   3946                  pBuf += 2;
   \   0000EF   0E           INC       R6
   \   0000F0   0E           INC       R6
   \   0000F1   EB           MOV       A,R3
   \   0000F2   FF           MOV       R7,A
   3947                }
   \                     ??zclParseInConfigReportCmd_9:
   \   0000F3   05..         INC       ?V3
   \                     ??zclParseInConfigReportCmd_7:
   \   0000F5   E5..         MOV       A,?V3
   \   0000F7   C3           CLR       C
   \   0000F8   95..         SUBB      A,?V2
   \   0000FA   4003         JC        $+5
   \   0000FC   02....       LJMP      ??zclParseInConfigReportCmd_6 & 0xFFFF
   \   0000FF   E5..         MOV       A,?V3
   \   000101   75F00C       MOV       B,#0xc
   \   000104   A4           MUL       AB
   \   000105   F8           MOV       R0,A
   \   000106   A9F0         MOV       R1,B
   \   000108   E5..         MOV       A,?V8
   \   00010A   28           ADD       A,R0
   \   00010B   F582         MOV       DPL,A
   \   00010D   E5..         MOV       A,?V9
   \   00010F   39           ADDC      A,R1
   \   000110   F583         MOV       DPH,A
   \   000112   A3           INC       DPTR
   \   000113   8582..       MOV       ?V0,DPL
   \   000116   8583..       MOV       ?V1,DPH
   \   000119                ; Setup parameters for call to function osal_memset
   \   000119   7C0C         MOV       R4,#0xc
   \   00011B   7D00         MOV       R5,#0x0
   \   00011D   7900         MOV       R1,#0x0
   \   00011F   AA..         MOV       R2,?V0
   \   000121   AB..         MOV       R3,?V1
   \   000123   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000126   8E82         MOV       DPL,R6
   \   000128   8F83         MOV       DPH,R7
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   85..82       MOV       DPL,?V0
   \   00012E   85..83       MOV       DPH,?V1
   \   000131   F0           MOVX      @DPTR,A
   \   000132   8E82         MOV       DPL,R6
   \   000134   8F83         MOV       DPH,R7
   \   000136   A3           INC       DPTR
   \   000137   AE82         MOV       R6,DPL
   \   000139   AF83         MOV       R7,DPH
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   FA           MOV       R2,A
   \   00013D   A3           INC       DPTR
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   F9           MOV       R1,A
   \   000140   EA           MOV       A,R2
   \   000141   85..82       MOV       DPL,?V0
   \   000144   85..83       MOV       DPH,?V1
   \   000147   A3           INC       DPTR
   \   000148   F0           MOVX      @DPTR,A
   \   000149   A3           INC       DPTR
   \   00014A   E9           MOV       A,R1
   \   00014B   F0           MOVX      @DPTR,A
   \   00014C   EE           MOV       A,R6
   \   00014D   2402         ADD       A,#0x2
   \   00014F   FE           MOV       R6,A
   \   000150   5001         JNC       ??zclParseInConfigReportCmd_10
   \   000152   0F           INC       R7
   \                     ??zclParseInConfigReportCmd_10:
   \   000153   2402         ADD       A,#0x2
   \   000155   FA           MOV       R2,A
   \   000156   E4           CLR       A
   \   000157   3F           ADDC      A,R7
   \   000158   FB           MOV       R3,A
   \   000159   8E82         MOV       DPL,R6
   \   00015B   8F83         MOV       DPH,R7
   \   00015D   A3           INC       DPTR
   \   00015E   A882         MOV       R0,DPL
   \   000160   A983         MOV       R1,DPH
   \   000162   8E82         MOV       DPL,R6
   \   000164   8F83         MOV       DPH,R7
   \   000166   E0           MOVX      A,@DPTR
   \   000167   FC           MOV       R4,A
   \   000168   85..82       MOV       DPL,?V0
   \   00016B   85..83       MOV       DPH,?V1
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   6003         JZ        $+5
   \   000171   02....       LJMP      ??zclParseInConfigReportCmd_8 & 0xFFFF
   \   000174   E5..         MOV       A,?V0
   \   000176   2403         ADD       A,#0x3
   \   000178   F5..         MOV       ?V6,A
   \   00017A   E4           CLR       A
   \   00017B   35..         ADDC      A,?V1
   \   00017D   F5..         MOV       ?V7,A
   \   00017F   EC           MOV       A,R4
   \   000180   85..82       MOV       DPL,?V6
   \   000183   85..83       MOV       DPH,?V7
   \   000186   F0           MOVX      @DPTR,A
   \   000187   E9           MOV       A,R1
   \   000188   FF           MOV       R7,A
   \   000189   8882         MOV       DPL,R0
   \   00018B   F583         MOV       DPH,A
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   FC           MOV       R4,A
   \   00018F   8A82         MOV       DPL,R2
   \   000191   8B83         MOV       DPH,R3
   \   000193   E0           MOVX      A,@DPTR
   \   000194   F9           MOV       R1,A
   \   000195   EC           MOV       A,R4
   \   000196   85..82       MOV       DPL,?V0
   \   000199   85..83       MOV       DPH,?V1
   \   00019C   A3           INC       DPTR
   \   00019D   A3           INC       DPTR
   \   00019E   A3           INC       DPTR
   \   00019F   A3           INC       DPTR
   \   0001A0   F0           MOVX      @DPTR,A
   \   0001A1   A3           INC       DPTR
   \   0001A2   E9           MOV       A,R1
   \   0001A3   F0           MOVX      @DPTR,A
   \   0001A4   E8           MOV       A,R0
   \   0001A5   2402         ADD       A,#0x2
   \   0001A7   FE           MOV       R6,A
   \   0001A8   5001         JNC       ??zclParseInConfigReportCmd_11
   \   0001AA   0F           INC       R7
   \                     ??zclParseInConfigReportCmd_11:
   \   0001AB   F582         MOV       DPL,A
   \   0001AD   8F83         MOV       DPH,R7
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   FA           MOV       R2,A
   \   0001B1   A3           INC       DPTR
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   F9           MOV       R1,A
   \   0001B4   EA           MOV       A,R2
   \   0001B5   85..82       MOV       DPL,?V0
   \   0001B8   85..83       MOV       DPH,?V1
   \   0001BB   A3           INC       DPTR
   \   0001BC   A3           INC       DPTR
   \   0001BD   A3           INC       DPTR
   \   0001BE   A3           INC       DPTR
   \   0001BF   A3           INC       DPTR
   \   0001C0   A3           INC       DPTR
   \   0001C1   F0           MOVX      @DPTR,A
   \   0001C2   A3           INC       DPTR
   \   0001C3   E9           MOV       A,R1
   \   0001C4   F0           MOVX      @DPTR,A
   \   0001C5   EE           MOV       A,R6
   \   0001C6   2402         ADD       A,#0x2
   \   0001C8   FE           MOV       R6,A
   \   0001C9   5001         JNC       ??zclParseInConfigReportCmd_12
   \   0001CB   0F           INC       R7
   \                     ??zclParseInConfigReportCmd_12:
   \   0001CC                ; Setup parameters for call to function zclAnalogDataType
   \   0001CC   85..82       MOV       DPL,?V6
   \   0001CF   85..83       MOV       DPH,?V7
   \   0001D2   E0           MOVX      A,@DPTR
   \   0001D3   F9           MOV       R1,A
   \   0001D4   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   0001D7   E9           MOV       A,R1
   \   0001D8   7003         JNZ       $+5
   \   0001DA   02....       LJMP      ??zclParseInConfigReportCmd_9 & 0xFFFF
   \   0001DD                ; Setup parameters for call to function zcl_BuildAnalogData
   \   0001DD   EE           MOV       A,R6
   \   0001DE   FC           MOV       R4,A
   \   0001DF   EF           MOV       A,R7
   \   0001E0   FD           MOV       R5,A
   \   0001E1   AA..         MOV       R2,?V4
   \   0001E3   AB..         MOV       R3,?V5
   \   0001E5   85..82       MOV       DPL,?V6
   \   0001E8   85..83       MOV       DPH,?V7
   \   0001EB   E0           MOVX      A,@DPTR
   \   0001EC   F9           MOV       R1,A
   \   0001ED   12....       LCALL     `??zcl_BuildAnalogData::?relay`; Banked call to: zcl_BuildAnalogData
   \   0001F0   85..82       MOV       DPL,?V0
   \   0001F3   85..83       MOV       DPH,?V1
   \   0001F6   A3           INC       DPTR
   \   0001F7   A3           INC       DPTR
   \   0001F8   A3           INC       DPTR
   \   0001F9   A3           INC       DPTR
   \   0001FA   A3           INC       DPTR
   \   0001FB   A3           INC       DPTR
   \   0001FC   A3           INC       DPTR
   \   0001FD   A3           INC       DPTR
   \   0001FE   A3           INC       DPTR
   \   0001FF   A3           INC       DPTR
   \   000200   E5..         MOV       A,?V4
   \   000202   F0           MOVX      @DPTR,A
   \   000203   A3           INC       DPTR
   \   000204   E5..         MOV       A,?V5
   \   000206   F0           MOVX      @DPTR,A
   \   000207                ; Setup parameters for call to function zclGetDataTypeLength
   \   000207   85..82       MOV       DPL,?V6
   \   00020A   85..83       MOV       DPH,?V7
   \   00020D   E0           MOVX      A,@DPTR
   \   00020E   F9           MOV       R1,A
   \   00020F   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000212   E9           MOV       A,R1
   \   000213   F8           MOV       R0,A
   \   000214   EE           MOV       A,R6
   \   000215   29           ADD       A,R1
   \   000216   FE           MOV       R6,A
   \   000217   E4           CLR       A
   \   000218   3F           ADDC      A,R7
   \   000219   FF           MOV       R7,A
   \   00021A   E9           MOV       A,R1
   \   00021B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00021D   5001         JNC       ??zclParseInConfigReportCmd_13
   \   00021F   08           INC       R0
   \                     ??zclParseInConfigReportCmd_13:
   \   000220   E5..         MOV       A,?V4
   \   000222   28           ADD       A,R0
   \   000223   F5..         MOV       ?V4,A
   \   000225   E4           CLR       A
   \   000226   35..         ADDC      A,?V5
   \   000228   F5..         MOV       ?V5,A
   \   00022A   02....       LJMP      ??zclParseInConfigReportCmd_9 & 0xFFFF
   3948              } // while loop
   3949            }
   3950          
   3951            return ( (void *)cfgReportCmd );
   \                     ??zclParseInConfigReportCmd_6:
   \   00022D   AA..         MOV       R2,?V8
   \   00022F   AB..         MOV       R3,?V9
   \   000231   7F0A         MOV       R7,#0xa
   \   000233   02....       LJMP      ?BANKED_LEAVE_XDATA
   3952          }
   3953          #endif
   3954          
   3955          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   3956          /*********************************************************************
   3957           * @fn      zclParseInConfigReportRspCmd
   3958           *
   3959           * @brief   Parse the "Profile" Configure Reporting Response Command
   3960           *
   3961           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3962           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3963           *
   3964           * @param   pCmd - pointer to incoming data to parse
   3965           *
   3966           * @return  pointer to the parsed command structure
   3967           */
   3968          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   3969          {
   3970            zclCfgReportRspCmd_t *cfgReportRspCmd;
   3971            uint8 *pBuf = pCmd->pData;
   3972            uint8 numAttr;
   3973          
   3974            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   3975          
   3976            cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
   3977                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   3978            if ( cfgReportRspCmd != NULL )
   3979            {
   3980              uint8 i;
   3981              cfgReportRspCmd->numAttr = numAttr;
   3982              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   3983              {
   3984                cfgReportRspCmd->attrList[i].status = *pBuf++;
   3985                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   3986                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3987                pBuf += 2;
   3988              }
   3989            }
   3990          
   3991            return ( (void *)cfgReportRspCmd );
   3992          }
   3993          #endif
   3994          
   3995          #ifdef ZCL_REPORTING_DEVICE
   3996          /*********************************************************************
   3997           * @fn      zclParseInReadReportCfgCmd
   3998           *
   3999           * @brief   Parse the "Profile" Read Reporting Configuration Command
   4000           *
   4001           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4002           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4003           *
   4004           * @param   pCmd - pointer to incoming data to parse
   4005           *
   4006           * @return  pointer to the parsed command structure
   4007           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4008          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadReportCfgCmd:
   4009          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4010            zclReadReportCfgCmd_t *readReportCfgCmd;
   4011            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FE           MOV       R6,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FF           MOV       R7,A
   4012            uint8 numAttr;
   4013          
   4014            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F8           MOV       R0,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   7A03         MOV       R2,#0x3
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   12....       LCALL     ?US_DIV_MOD
   \   000022   E8           MOV       A,R0
   \   000023   F5..         MOV       ?V0,A
   4015          
   4016            readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
   4017                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025   75F003       MOV       B,#0x3
   \   000028   A4           MUL       AB
   \   000029   A9F0         MOV       R1,B
   \   00002B   2401         ADD       A,#0x1
   \   00002D   FA           MOV       R2,A
   \   00002E   E4           CLR       A
   \   00002F   39           ADDC      A,R1
   \   000030   FB           MOV       R3,A
   \   000031   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4018            if ( readReportCfgCmd != NULL )
   \   000034   EA           MOV       A,R2
   \   000035   4B           ORL       A,R3
   \   000036   6056         JZ        ??zclParseInReadReportCfgCmd_0
   4019            {
   4020              uint8 i;
   4021              readReportCfgCmd->numAttr = numAttr;
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   E5..         MOV       A,?V0
   \   00003E   F0           MOVX      @DPTR,A
   4022              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   \   00003F   75..00       MOV       ?V0,#0x0
   \   000042   803E         SJMP      ??zclParseInReadReportCfgCmd_1
   4023              {
   4024                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   \                     ??zclParseInReadReportCfgCmd_2:
   \   000044   E5..         MOV       A,?V0
   \   000046   75F003       MOV       B,#0x3
   \   000049   A4           MUL       AB
   \   00004A   F8           MOV       R0,A
   \   00004B   A9F0         MOV       R1,B
   \   00004D   EA           MOV       A,R2
   \   00004E   28           ADD       A,R0
   \   00004F   F8           MOV       R0,A
   \   000050   EB           MOV       A,R3
   \   000051   39           ADDC      A,R1
   \   000052   F9           MOV       R1,A
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   E0           MOVX      A,@DPTR
   \   000058   8882         MOV       DPL,R0
   \   00005A   8983         MOV       DPH,R1
   \   00005C   A3           INC       DPTR
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   8E82         MOV       DPL,R6
   \   000060   8F83         MOV       DPH,R7
   \   000062   A3           INC       DPTR
   \   000063   AE82         MOV       R6,DPL
   \   000065   AF83         MOV       R7,DPH
   4025                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F5..         MOV       ?V2,A
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   FD           MOV       R5,A
   \   00006D   E5..         MOV       A,?V2
   \   00006F   8882         MOV       DPL,R0
   \   000071   8983         MOV       DPH,R1
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   ED           MOV       A,R5
   \   000078   F0           MOVX      @DPTR,A
   4026                pBuf += 2;
   \   000079   EE           MOV       A,R6
   \   00007A   2402         ADD       A,#0x2
   \   00007C   FE           MOV       R6,A
   \   00007D   5001         JNC       ??zclParseInReadReportCfgCmd_3
   \   00007F   0F           INC       R7
   4027              }
   \                     ??zclParseInReadReportCfgCmd_3:
   \   000080   05..         INC       ?V0
   \                     ??zclParseInReadReportCfgCmd_1:
   \   000082   8A82         MOV       DPL,R2
   \   000084   8B83         MOV       DPH,R3
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F8           MOV       R0,A
   \   000088   E5..         MOV       A,?V0
   \   00008A   C3           CLR       C
   \   00008B   98           SUBB      A,R0
   \   00008C   40B6         JC        ??zclParseInReadReportCfgCmd_2
   4028            }
   4029          
   4030            return ( (void *)readReportCfgCmd );
   \                     ??zclParseInReadReportCfgCmd_0:
   \   00008E   7F04         MOV       R7,#0x4
   \   000090   02....       LJMP      ?BANKED_LEAVE_XDATA
   4031          }
   4032          #endif
   4033          
   4034          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   4035          /*********************************************************************
   4036           * @fn      zclParseInReadReportCfgRspCmd
   4037           *
   4038           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   4039           *
   4040           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4041           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4042           *
   4043           * @param   pCmd - pointer to incoming data to parse
   4044           *
   4045           * @return  pointer to the parsed command structure
   4046           */
   4047          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   4048          {
   4049            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   4050            uint8 reportChangeLen;
   4051            uint8 *pBuf = pCmd->pData;
   4052            uint8 *dataPtr;
   4053            uint8 numAttr = 0;
   4054            uint8 hdrLen;
   4055            uint16 dataLen = 0;
   4056          
   4057            // Calculate the length of the response command
   4058            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4059            {
   4060              uint8 status;
   4061              uint8 direction;
   4062          
   4063              numAttr++;
   4064              status = *pBuf++;
   4065              direction = *pBuf++;
   4066              pBuf += 2; // move pass the attribute ID
   4067          
   4068              if ( status == ZCL_STATUS_SUCCESS )
   4069              {
   4070                if ( direction == ZCL_SEND_ATTR_REPORTS )
   4071                {
   4072                  uint8 dataType = *pBuf++;
   4073                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   4074          
   4075                  // For attributes of 'discrete' data types this field is omitted
   4076                  if ( zclAnalogDataType( dataType ) )
   4077                  {
   4078                    reportChangeLen = zclGetDataTypeLength( dataType );
   4079                    pBuf += reportChangeLen;
   4080          
   4081                    // add padding if needed
   4082                    if ( PADDING_NEEDED( reportChangeLen ) )
   4083                    {
   4084                      reportChangeLen++;
   4085                    }
   4086          
   4087                    dataLen += reportChangeLen;
   4088                  }
   4089                }
   4090                else
   4091                {
   4092                  pBuf += 2; // move pass the Timeout field
   4093                }
   4094              }
   4095            } // while loop
   4096          
   4097            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   4098          
   4099            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4100            if ( readReportCfgRspCmd != NULL )
   4101            {
   4102              uint8 i;
   4103              pBuf = pCmd->pData;
   4104              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   4105          
   4106              readReportCfgRspCmd->numAttr = numAttr;
   4107              for ( i = 0; i < numAttr; i++ )
   4108              {
   4109                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   4110          
   4111                reportRspRec->status = *pBuf++;
   4112                reportRspRec->direction = *pBuf++;
   4113                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4114                pBuf += 2;
   4115          
   4116                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   4117                {
   4118                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   4119                  {
   4120                    reportRspRec->dataType = *pBuf++;
   4121                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4122                    pBuf += 2;
   4123                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4124                    pBuf += 2;
   4125          
   4126                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   4127                    {
   4128                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   4129                      reportRspRec->reportableChange = dataPtr;
   4130          
   4131                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   4132                      pBuf += reportChangeLen;
   4133          
   4134                      // advance attribute data pointer
   4135                      if ( PADDING_NEEDED( reportChangeLen ) )
   4136                      {
   4137                        reportChangeLen++;
   4138                      }
   4139          
   4140                      dataPtr += reportChangeLen;
   4141                    }
   4142                  }
   4143                  else
   4144                  {
   4145                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   4146                    pBuf += 2;
   4147                  }
   4148                }
   4149              }
   4150            }
   4151          
   4152            return ( (void *)readReportCfgRspCmd );
   4153          }
   4154          #endif
   4155          
   4156          #ifdef ZCL_REPORT_DESTINATION_DEVICE
   4157          /*********************************************************************
   4158           * @fn      zclParseInReportCmd
   4159           *
   4160           * @brief   Parse the "Profile" Report Command
   4161           *
   4162           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4163           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4164           *
   4165           * @param   pCmd - pointer to incoming data to parse
   4166           *
   4167           * @return  pointer to the parsed command structure
   4168           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4169          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReportCmd:
   4170          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   4171            zclReportCmd_t *reportCmd;
   4172            uint8 *pBuf = pCmd->pData;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V2,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V9
   \   000011   F5..         MOV       ?V3,A
   \   000013   85..82       MOV       DPL,?V2
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V1,A
   4173            uint16 attrDataLen;
   4174            uint8 *dataPtr;
   4175            uint8 numAttr = 0;
   \   00001F   75..00       MOV       ?V7,#0x0
   4176            uint8 hdrLen;
   4177            uint16 dataLen = 0;
   \   000022   75..00       MOV       ?V4,#0x0
   \   000025   75..00       MOV       ?V5,#0x0
   \   000028   8042         SJMP      ??zclParseInReportCmd_0
   4178          
   4179            // find out the number of attributes and the length of attribute data
   4180            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4181            {
   4182              uint8 dataType;
   4183          
   4184              numAttr++;
   \                     ??zclParseInReportCmd_1:
   \   00002A   05..         INC       ?V7
   4185              pBuf += 2; // move pass attribute id
   4186          
   4187              dataType = *pBuf++;
   \   00002C   85..82       MOV       DPL,?V0
   \   00002F   85..83       MOV       DPH,?V1
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   E5..         MOV       A,?V0
   \   000038   2403         ADD       A,#0x3
   \   00003A   F5..         MOV       ?V0,A
   \   00003C   5002         JNC       ??zclParseInReportCmd_2
   \   00003E   05..         INC       ?V1
   4188          
   4189              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \                     ??zclParseInReportCmd_2:
   \   000040                ; Setup parameters for call to function zclGetAttrDataLength
   \   000040   FA           MOV       R2,A
   \   000041   AB..         MOV       R3,?V1
   \   000043   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000046   8A..         MOV       ?V10,R2
   \   000048   8B..         MOV       ?V11,R3
   \   00004A   AE..         MOV       R6,?V10
   \   00004C   AF..         MOV       R7,?V11
   4190              pBuf += attrDataLen; // move pass attribute data
   \   00004E   E5..         MOV       A,?V0
   \   000050   2A           ADD       A,R2
   \   000051   F5..         MOV       ?V0,A
   \   000053   E5..         MOV       A,?V1
   \   000055   3F           ADDC      A,R7
   \   000056   F5..         MOV       ?V1,A
   4191          
   4192              // add padding if needed
   4193              if ( PADDING_NEEDED( attrDataLen ) )
   \   000058   EA           MOV       A,R2
   \   000059   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005B   5005         JNC       ??zclParseInReportCmd_3
   4194              {
   4195                attrDataLen++;
   \   00005D   0E           INC       R6
   \   00005E   04           INC       A
   \   00005F   7001         JNZ       ??zclParseInReportCmd_3
   \   000061   0F           INC       R7
   4196              }
   4197          
   4198              dataLen += attrDataLen;
   \                     ??zclParseInReportCmd_3:
   \   000062   E5..         MOV       A,?V4
   \   000064   2E           ADD       A,R6
   \   000065   F5..         MOV       ?V4,A
   \   000067   E5..         MOV       A,?V5
   \   000069   3F           ADDC      A,R7
   \   00006A   F5..         MOV       ?V5,A
   4199            }
   \                     ??zclParseInReportCmd_0:
   \   00006C   85..82       MOV       DPL,?V8
   \   00006F   85..83       MOV       DPH,?V9
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F8           MOV       R0,A
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F9           MOV       R1,A
   \   000078   85..82       MOV       DPL,?V2
   \   00007B   85..83       MOV       DPH,?V3
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   28           ADD       A,R0
   \   000080   F8           MOV       R0,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   39           ADDC      A,R1
   \   000084   F9           MOV       R1,A
   \   000085   C3           CLR       C
   \   000086   E5..         MOV       A,?V0
   \   000088   98           SUBB      A,R0
   \   000089   E5..         MOV       A,?V1
   \   00008B   99           SUBB      A,R1
   \   00008C   409C         JC        ??zclParseInReportCmd_1
   4200          
   4201            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   \   00008E   75F005       MOV       B,#0x5
   \   000091   E5..         MOV       A,?V7
   \   000093   A4           MUL       AB
   \   000094   04           INC       A
   \   000095   FE           MOV       R6,A
   4202          
   4203            reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   000096                ; Setup parameters for call to function osal_mem_alloc
   \   000096   25..         ADD       A,?V4
   \   000098   FA           MOV       R2,A
   \   000099   E4           CLR       A
   \   00009A   35..         ADDC      A,?V5
   \   00009C   FB           MOV       R3,A
   \   00009D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A0   8A..         MOV       ?V10,R2
   \   0000A2   8B..         MOV       ?V11,R3
   4204            if (reportCmd != NULL )
   \   0000A4   EA           MOV       A,R2
   \   0000A5   4B           ORL       A,R3
   \   0000A6   7003         JNZ       $+5
   \   0000A8   02....       LJMP      ??zclParseInReportCmd_4 & 0xFFFF
   4205            {
   4206              uint8 i;
   4207              pBuf = pCmd->pData;
   \   0000AB   85..82       MOV       DPL,?V2
   \   0000AE   85..83       MOV       DPH,?V3
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F5..         MOV       ?V0,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F5..         MOV       ?V1,A
   4208              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   \   0000B8   EA           MOV       A,R2
   \   0000B9   2E           ADD       A,R6
   \   0000BA   F5..         MOV       ?V2,A
   \   0000BC   E4           CLR       A
   \   0000BD   3B           ADDC      A,R3
   \   0000BE   F5..         MOV       ?V3,A
   4209          
   4210              reportCmd->numAttr = numAttr;
   \   0000C0   8A82         MOV       DPL,R2
   \   0000C2   8B83         MOV       DPH,R3
   \   0000C4   E5..         MOV       A,?V7
   \   0000C6   F0           MOVX      @DPTR,A
   4211              for ( i = 0; i < numAttr; i++ )
   \   0000C7   75..00       MOV       ?V8,#0x0
   \   0000CA   02....       LJMP      ??zclParseInReportCmd_5 & 0xFFFF
   4212              {
   4213                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   \                     ??zclParseInReportCmd_6:
   \   0000CD   E5..         MOV       A,?V8
   \   0000CF   75F005       MOV       B,#0x5
   \   0000D2   A4           MUL       AB
   \   0000D3   F8           MOV       R0,A
   \   0000D4   A9F0         MOV       R1,B
   \   0000D6   E5..         MOV       A,?V10
   \   0000D8   28           ADD       A,R0
   \   0000D9   F582         MOV       DPL,A
   \   0000DB   E5..         MOV       A,?V11
   \   0000DD   39           ADDC      A,R1
   \   0000DE   F583         MOV       DPH,A
   \   0000E0   A3           INC       DPTR
   \   0000E1   8582..       MOV       ?V12,DPL
   \   0000E4   8583..       MOV       ?V13,DPH
   4214          
   4215                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   0000E7   85..82       MOV       DPL,?V0
   \   0000EA   85..83       MOV       DPH,?V1
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   FA           MOV       R2,A
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F9           MOV       R1,A
   \   0000F2   EA           MOV       A,R2
   \   0000F3   85..82       MOV       DPL,?V12
   \   0000F6   85..83       MOV       DPH,?V13
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   E9           MOV       A,R1
   \   0000FC   F0           MOVX      @DPTR,A
   4216                pBuf += 2;
   4217                reportRec->dataType = *pBuf++;
   \   0000FD   85..82       MOV       DPL,?V0
   \   000100   85..83       MOV       DPH,?V1
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F9           MOV       R1,A
   \   000107   85..82       MOV       DPL,?V12
   \   00010A   85..83       MOV       DPH,?V13
   \   00010D   A3           INC       DPTR
   \   00010E   A3           INC       DPTR
   \   00010F   F0           MOVX      @DPTR,A
   \   000110   E5..         MOV       A,?V0
   \   000112   2403         ADD       A,#0x3
   \   000114   F5..         MOV       ?V0,A
   \   000116   5002         JNC       ??zclParseInReportCmd_7
   \   000118   05..         INC       ?V1
   4218          
   4219                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
   \                     ??zclParseInReportCmd_7:
   \   00011A                ; Setup parameters for call to function zclGetAttrDataLength
   \   00011A   FA           MOV       R2,A
   \   00011B   AB..         MOV       R3,?V1
   \   00011D   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000120   8A..         MOV       ?V4,R2
   \   000122   8B..         MOV       ?V5,R3
   \   000124   AE..         MOV       R6,?V4
   \   000126   AF..         MOV       R7,?V5
   4220                zcl_memcpy( dataPtr, pBuf, attrDataLen );
   \   000128                ; Setup parameters for call to function osal_memcpy
   \   000128   85....       MOV       ?V4,?V0
   \   00012B   85....       MOV       ?V5,?V1
   \   00012E   75..00       MOV       ?V6,#0x0
   \   000131   78..         MOV       R0,#?V4
   \   000133   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000136   EA           MOV       A,R2
   \   000137   FC           MOV       R4,A
   \   000138   EB           MOV       A,R3
   \   000139   FD           MOV       R5,A
   \   00013A   AA..         MOV       R2,?V2
   \   00013C   AB..         MOV       R3,?V3
   \   00013E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000141   7403         MOV       A,#0x3
   \   000143   12....       LCALL     ?DEALLOC_XSTACK8
   4221                reportRec->attrData = dataPtr;
   \   000146   85..82       MOV       DPL,?V12
   \   000149   85..83       MOV       DPH,?V13
   \   00014C   A3           INC       DPTR
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   E5..         MOV       A,?V2
   \   000151   F0           MOVX      @DPTR,A
   \   000152   A3           INC       DPTR
   \   000153   E5..         MOV       A,?V3
   \   000155   F0           MOVX      @DPTR,A
   4222          
   4223                pBuf += attrDataLen; // move pass attribute data
   \   000156   E5..         MOV       A,?V0
   \   000158   2E           ADD       A,R6
   \   000159   F5..         MOV       ?V0,A
   \   00015B   E5..         MOV       A,?V1
   \   00015D   3F           ADDC      A,R7
   \   00015E   F5..         MOV       ?V1,A
   4224          
   4225                // advance attribute data pointer
   4226                if ( PADDING_NEEDED( attrDataLen ) )
   \   000160   EE           MOV       A,R6
   \   000161   A2E0         MOV       C,0xE0 /* A   */.0
   \   000163   5005         JNC       ??zclParseInReportCmd_8
   4227                {
   4228                  attrDataLen++;
   \   000165   0E           INC       R6
   \   000166   04           INC       A
   \   000167   7001         JNZ       ??zclParseInReportCmd_8
   \   000169   0F           INC       R7
   4229                }
   4230          
   4231                dataPtr += attrDataLen;
   \                     ??zclParseInReportCmd_8:
   \   00016A   E5..         MOV       A,?V2
   \   00016C   2E           ADD       A,R6
   \   00016D   F5..         MOV       ?V2,A
   \   00016F   E5..         MOV       A,?V3
   \   000171   3F           ADDC      A,R7
   \   000172   F5..         MOV       ?V3,A
   4232              }
   \   000174   05..         INC       ?V8
   \                     ??zclParseInReportCmd_5:
   \   000176   E5..         MOV       A,?V8
   \   000178   C3           CLR       C
   \   000179   95..         SUBB      A,?V7
   \   00017B   5003         JNC       $+5
   \   00017D   02....       LJMP      ??zclParseInReportCmd_6 & 0xFFFF
   4233            }
   4234          
   4235            return ( (void *)reportCmd );
   \                     ??zclParseInReportCmd_4:
   \   000180   AA..         MOV       R2,?V10
   \   000182   AB..         MOV       R3,?V11
   \   000184   7F0E         MOV       R7,#0xe
   \   000186   02....       LJMP      ?BANKED_LEAVE_XDATA
   4236          }
   4237          #endif
   4238          
   4239          /*********************************************************************
   4240           * @fn      zclParseInDefaultRspCmd
   4241           *
   4242           * @brief   Parse the "Profile" Default Response Command
   4243           *
   4244           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4245           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4246           *
   4247           * @param   pCmd - pointer to incoming data to parse
   4248           *
   4249           * @return  pointer to the parsed command structure
   4250           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4251          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   4252          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4253            zclDefaultRspCmd_t *defaultRspCmd;
   4254            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   E8           MOV       A,R0
   \   000012   FE           MOV       R6,A
   \   000013   E9           MOV       A,R1
   \   000014   FF           MOV       R7,A
   4255          
   4256            defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   7A02         MOV       R2,#0x2
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4257            if ( defaultRspCmd != NULL )
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6016         JZ        ??zclParseInDefaultRspCmd_0
   4258            {
   4259              defaultRspCmd->commandID = *pBuf++;
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   E0           MOVX      A,@DPTR
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   F0           MOVX      @DPTR,A
   4260              defaultRspCmd->statusCode = *pBuf;
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   A3           INC       DPTR
   \   000035   F0           MOVX      @DPTR,A
   4261            }
   4262          
   4263            return ( (void *)defaultRspCmd );
   \                     ??zclParseInDefaultRspCmd_0:
   \   000036   7F02         MOV       R7,#0x2
   \   000038   02....       LJMP      ?BANKED_LEAVE_XDATA
   4264          }
   4265          
   4266          #ifdef ZCL_DISCOVER
   4267          /*********************************************************************
   4268           * @fn      zclParseInDiscAttrsCmd
   4269           *
   4270           * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
   4271           *
   4272           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4273           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4274           *
   4275           * @param   pCmd - pointer to incoming data to parse
   4276           *
   4277           * @return  pointer to the parsed command structure
   4278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4279          void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsCmd:
   4280          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4281            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4282            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   E8           MOV       A,R0
   \   000012   FE           MOV       R6,A
   \   000013   E9           MOV       A,R1
   \   000014   FF           MOV       R7,A
   4283          
   4284            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   7A03         MOV       R2,#0x3
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4285            if ( pDiscoverCmd != NULL )
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6020         JZ        ??zclParseInDiscAttrsCmd_0
   4286            {
   4287              pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   E0           MOVX      A,@DPTR
   \   000025   FC           MOV       R4,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
   \   000029   EC           MOV       A,R4
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   E9           MOV       A,R1
   \   000031   F0           MOVX      @DPTR,A
   4288              pBuf += 2;
   4289              pDiscoverCmd->maxAttrIDs = *pBuf;
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
   4290            }
   4291          
   4292            return ( (void *)pDiscoverCmd );
   \                     ??zclParseInDiscAttrsCmd_0:
   \   000040   7F02         MOV       R7,#0x2
   \   000042   02....       LJMP      ?BANKED_LEAVE_XDATA
   4293          }
   4294          
   4295          /*********************************************************************
   4296           * @fn      zclParseInDiscAttrsRspCmd
   4297           *
   4298           * @brief   Parse the "Profile" Discovery Response Commands
   4299           *
   4300           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4301           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4302           *
   4303           * @param   pCmd - pointer to incoming data to parse
   4304           *
   4305           * @return  pointer to the parsed command structure
   4306           */
   4307          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4308          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsRspCmd:
   4309          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4310            zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
   4311            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FE           MOV       R6,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FF           MOV       R7,A
   4312            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   24FF         ADD       A,#-0x1
   \   000019   F8           MOV       R0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   34FF         ADDC      A,#-0x1
   \   00001E   F9           MOV       R1,A
   \   00001F   7A03         MOV       R2,#0x3
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     ?US_DIV_MOD
   \   000026   E8           MOV       A,R0
   \   000027   F5..         MOV       ?V1,A
   4313          
   4314            pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
   4315                              ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   75F003       MOV       B,#0x3
   \   00002C   A4           MUL       AB
   \   00002D   A9F0         MOV       R1,B
   \   00002F   2402         ADD       A,#0x2
   \   000031   FA           MOV       R2,A
   \   000032   E4           CLR       A
   \   000033   39           ADDC      A,R1
   \   000034   FB           MOV       R3,A
   \   000035   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4316          
   4317            if ( pDiscoverRspCmd != NULL )
   \   000038   EA           MOV       A,R2
   \   000039   4B           ORL       A,R3
   \   00003A   6065         JZ        ??zclParseInDiscAttrsRspCmd_0
   4318            {
   4319              uint8 i;
   4320          
   4321              pDiscoverRspCmd->discComplete = *pBuf++;
   \   00003C   8E82         MOV       DPL,R6
   \   00003E   8F83         MOV       DPH,R7
   \   000040   E0           MOVX      A,@DPTR
   \   000041   8A82         MOV       DPL,R2
   \   000043   8B83         MOV       DPH,R3
   \   000045   F0           MOVX      @DPTR,A
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   AE82         MOV       R6,DPL
   \   00004D   AF83         MOV       R7,DPH
   4322              pDiscoverRspCmd->numAttr = numAttr;
   \   00004F   8A82         MOV       DPL,R2
   \   000051   8B83         MOV       DPH,R3
   \   000053   A3           INC       DPTR
   \   000054   E5..         MOV       A,?V1
   \   000056   F0           MOVX      @DPTR,A
   4323          
   4324              for ( i = 0; i < numAttr; i++ )
   \   000057   75..00       MOV       ?V0,#0x0
   \   00005A   803E         SJMP      ??zclParseInDiscAttrsRspCmd_1
   4325              {
   4326                pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsRspCmd_2:
   \   00005C   E5..         MOV       A,?V0
   \   00005E   75F003       MOV       B,#0x3
   \   000061   A4           MUL       AB
   \   000062   F8           MOV       R0,A
   \   000063   A9F0         MOV       R1,B
   \   000065   EA           MOV       A,R2
   \   000066   28           ADD       A,R0
   \   000067   F8           MOV       R0,A
   \   000068   EB           MOV       A,R3
   \   000069   39           ADDC      A,R1
   \   00006A   F9           MOV       R1,A
   \   00006B   8E82         MOV       DPL,R6
   \   00006D   8F83         MOV       DPH,R7
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F5..         MOV       ?V2,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   FD           MOV       R5,A
   \   000075   E5..         MOV       A,?V2
   \   000077   8882         MOV       DPL,R0
   \   000079   8983         MOV       DPH,R1
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   A3           INC       DPTR
   \   00007F   ED           MOV       A,R5
   \   000080   F0           MOVX      @DPTR,A
   4327                pBuf += 2;
   4328                pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   8882         MOV       DPL,R0
   \   00008A   8983         MOV       DPH,R1
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   F0           MOVX      @DPTR,A
   \   000091   EE           MOV       A,R6
   \   000092   2403         ADD       A,#0x3
   \   000094   FE           MOV       R6,A
   \   000095   5001         JNC       ??zclParseInDiscAttrsRspCmd_3
   \   000097   0F           INC       R7
   4329              }
   \                     ??zclParseInDiscAttrsRspCmd_3:
   \   000098   05..         INC       ?V0
   \                     ??zclParseInDiscAttrsRspCmd_1:
   \   00009A   E5..         MOV       A,?V0
   \   00009C   C3           CLR       C
   \   00009D   95..         SUBB      A,?V1
   \   00009F   40BB         JC        ??zclParseInDiscAttrsRspCmd_2
   4330            }
   4331          
   4332            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsRspCmd_0:
   \   0000A1   7F04         MOV       R7,#0x4
   \   0000A3   02....       LJMP      ?BANKED_LEAVE_XDATA
   4333          }
   4334          
   4335          /*********************************************************************
   4336           * @fn      zclParseInDiscCmdsCmd
   4337           *
   4338           * @brief   Parse the "Profile" Discovery Commands
   4339           *
   4340           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4341           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4342           *
   4343           * @param   pCmd - pointer to incoming data to parse
   4344           *
   4345           * @return  pointer to the parsed command structure
   4346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4347          void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsCmd:
   4348          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4349            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   4350            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   E8           MOV       A,R0
   \   000012   FE           MOV       R6,A
   \   000013   E9           MOV       A,R1
   \   000014   FF           MOV       R7,A
   4351          
   4352            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   7A02         MOV       R2,#0x2
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4353            if ( pDiscoverCmd != NULL )
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6016         JZ        ??zclParseInDiscCmdsCmd_0
   4354            {
   4355              pDiscoverCmd->startCmdID = *pBuf++;
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   E0           MOVX      A,@DPTR
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   F0           MOVX      @DPTR,A
   4356              pDiscoverCmd->maxCmdID = *pBuf++;
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   A3           INC       DPTR
   \   000035   F0           MOVX      @DPTR,A
   4357            }
   4358          
   4359            return ( (void *)pDiscoverCmd );
   \                     ??zclParseInDiscCmdsCmd_0:
   \   000036   7F02         MOV       R7,#0x2
   \   000038   02....       LJMP      ?BANKED_LEAVE_XDATA
   4360          }
   4361          
   4362          /*********************************************************************
   4363           * @fn      zclParseInDiscCmdsRspCmd
   4364           *
   4365           * @brief   Parse the Discover Commands Response Command
   4366           *
   4367           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4368           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4369           *
   4370           * @param   pCmd - pointer to incoming data to parse
   4371           *
   4372           * @return  pointer to the parsed command structure
   4373           */
   4374          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4375          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsRspCmd:
   4376          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4377            zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
   4378            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FE           MOV       R6,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FF           MOV       R7,A
   4379            uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   14           DEC       A
   \   000018   F5..         MOV       ?V0,A
   4380          
   4381              // allocate memory for size of structure plus variable array
   4382            pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
   4383                              ( numCmds * sizeof(uint8) ) );
   \   00001A                ; Setup parameters for call to function osal_mem_alloc
   \   00001A   2405         ADD       A,#0x5
   \   00001C   FA           MOV       R2,A
   \   00001D   E4           CLR       A
   \   00001E   3400         ADDC      A,#0x0
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4384            if ( pDiscoverRspCmd != NULL )
   \   000024   EA           MOV       A,R2
   \   000025   4B           ORL       A,R3
   \   000026   604E         JZ        ??zclParseInDiscCmdsRspCmd_0
   4385            {
   4386              uint8 i;
   4387              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   F0           MOVX      @DPTR,A
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   A3           INC       DPTR
   \   000037   AE82         MOV       R6,DPL
   \   000039   AF83         MOV       R7,DPH
   4388              pDiscoverRspCmd->numCmd = numCmds;
   \   00003B   8A82         MOV       DPL,R2
   \   00003D   8B83         MOV       DPH,R3
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   E5..         MOV       A,?V0
   \   000043   F0           MOVX      @DPTR,A
   4389          
   4390              for ( i = 0; i < numCmds; i++ )
   \   000044   7800         MOV       R0,#0x0
   \   000046   8028         SJMP      ??zclParseInDiscCmdsRspCmd_1
   4391              {
   4392                pDiscoverRspCmd->pCmdID[i] = *pBuf++;
   \                     ??zclParseInDiscCmdsRspCmd_2:
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   C0E0         PUSH      A
   \   00004F   E8           MOV       A,R0
   \   000050   FC           MOV       R4,A
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   2C           ADD       A,R4
   \   00005A   F9           MOV       R1,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   3400         ADDC      A,#0x0
   \   00005F   8982         MOV       DPL,R1
   \   000061   F583         MOV       DPH,A
   \   000063   D0E0         POP       A
   \   000065   F0           MOVX      @DPTR,A
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   A3           INC       DPTR
   \   00006B   AE82         MOV       R6,DPL
   \   00006D   AF83         MOV       R7,DPH
   4393              }
   \   00006F   08           INC       R0
   \                     ??zclParseInDiscCmdsRspCmd_1:
   \   000070   E8           MOV       A,R0
   \   000071   C3           CLR       C
   \   000072   95..         SUBB      A,?V0
   \   000074   40D2         JC        ??zclParseInDiscCmdsRspCmd_2
   4394            }
   4395          
   4396            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscCmdsRspCmd_0:
   \   000076   7F04         MOV       R7,#0x4
   \   000078   02....       LJMP      ?BANKED_LEAVE_XDATA
   4397          }
   4398          
   4399          /*********************************************************************
   4400           * @fn      zclParseInDiscAttrsExtRspCmd
   4401           *
   4402           * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
   4403           *
   4404           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4405           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4406           *
   4407           * @param   pCmd - pointer to incoming data to parse
   4408           *
   4409           * @return  pointer to the parsed command structure
   4410           */
   4411          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4412          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsExtRspCmd:
   4413          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   4414            zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
   4415            uint8 i;
   4416            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FE           MOV       R6,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FF           MOV       R7,A
   4417            uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   24FF         ADD       A,#-0x1
   \   000019   F5..         MOV       ?V0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   34FF         ADDC      A,#-0x1
   \   00001F   F5..         MOV       ?V1,A
   \   000021   7402         MOV       A,#0x2
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?US_SHR
   \   000028   E5..         MOV       A,?V0
   \   00002A   F5..         MOV       ?V0,A
   4418          
   4419            pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
   4420                              ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   F5..         MOV       ?V2,A
   \   00002E   75..00       MOV       ?V3,#0x0
   \   000031   7402         MOV       A,#0x2
   \   000033   78..         MOV       R0,#?V2
   \   000035   12....       LCALL     ?S_SHL
   \   000038   E5..         MOV       A,?V2
   \   00003A   2402         ADD       A,#0x2
   \   00003C   FA           MOV       R2,A
   \   00003D   E4           CLR       A
   \   00003E   35..         ADDC      A,?V3
   \   000040   FB           MOV       R3,A
   \   000041   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4421          
   4422            if ( pDiscoverRspCmd != NULL )
   \   000044   EA           MOV       A,R2
   \   000045   4B           ORL       A,R3
   \   000046   607C         JZ        ??zclParseInDiscAttrsExtRspCmd_0
   4423            {
   4424              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   F0           MOVX      @DPTR,A
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   A3           INC       DPTR
   \   000057   AE82         MOV       R6,DPL
   \   000059   AF83         MOV       R7,DPH
   4425              pDiscoverRspCmd->numAttr = numAttrs;
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   A3           INC       DPTR
   \   000060   E5..         MOV       A,?V0
   \   000062   F0           MOVX      @DPTR,A
   4426          
   4427              for ( i = 0; i < numAttrs; i++ )
   \   000063   7C00         MOV       R4,#0x0
   \   000065   8057         SJMP      ??zclParseInDiscAttrsExtRspCmd_1
   4428              {
   4429                pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsExtRspCmd_2:
   \   000067   EC           MOV       A,R4
   \   000068   F5..         MOV       ?V2,A
   \   00006A   75..00       MOV       ?V3,#0x0
   \   00006D   7402         MOV       A,#0x2
   \   00006F   78..         MOV       R0,#?V2
   \   000071   12....       LCALL     ?S_SHL
   \   000074   EA           MOV       A,R2
   \   000075   25..         ADD       A,?V2
   \   000077   F8           MOV       R0,A
   \   000078   EB           MOV       A,R3
   \   000079   35..         ADDC      A,?V3
   \   00007B   F9           MOV       R1,A
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F5..         MOV       ?V4,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F5..         MOV       ?V3,A
   \   000087   E5..         MOV       A,?V4
   \   000089   8882         MOV       DPL,R0
   \   00008B   8983         MOV       DPH,R1
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   E5..         MOV       A,?V3
   \   000093   F0           MOVX      @DPTR,A
   4430                pBuf += 2;
   4431                pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
   \   000094   8E82         MOV       DPL,R6
   \   000096   8F83         MOV       DPH,R7
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   8882         MOV       DPL,R0
   \   00009D   8983         MOV       DPH,R1
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   F0           MOVX      @DPTR,A
   4432                pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
   \   0000A4   8E82         MOV       DPL,R6
   \   0000A6   8F83         MOV       DPH,R7
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   8882         MOV       DPL,R0
   \   0000AE   8983         MOV       DPH,R1
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   EE           MOV       A,R6
   \   0000B7   2404         ADD       A,#0x4
   \   0000B9   FE           MOV       R6,A
   \   0000BA   5001         JNC       ??zclParseInDiscAttrsExtRspCmd_3
   \   0000BC   0F           INC       R7
   4433              }
   \                     ??zclParseInDiscAttrsExtRspCmd_3:
   \   0000BD   0C           INC       R4
   \                     ??zclParseInDiscAttrsExtRspCmd_1:
   \   0000BE   EC           MOV       A,R4
   \   0000BF   C3           CLR       C
   \   0000C0   95..         SUBB      A,?V0
   \   0000C2   40A3         JC        ??zclParseInDiscAttrsExtRspCmd_2
   4434            }
   4435          
   4436            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsExtRspCmd_0:
   \   0000C4   7F06         MOV       R7,#0x6
   \   0000C6   02....       LJMP      ?BANKED_LEAVE_XDATA
   4437          }
   4438          #endif // ZCL_DISCOVER
   4439          
   4440          #ifdef ZCL_READ
   4441          /*********************************************************************
   4442           * @fn      zclProcessInReadCmd
   4443           *
   4444           * @brief   Process the "Profile" Read Command
   4445           *
   4446           * @param   pInMsg - incoming message to process
   4447           *
   4448           * @return  TRUE if command processed. FALSE, otherwise.
   4449           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4450          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   4451          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   4452            zclReadCmd_t *readCmd;
   4453            zclReadRspCmd_t *readRspCmd;
   4454            zclAttrRec_t attrRec;
   4455            uint16 len;
   4456            uint8 i;
   4457            uint8 attrFound;
   4458          
   4459            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V6,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V7,A
   4460          
   4461            // calculate the length of the response status record
   4462            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   4463          
   4464            readRspCmd = zcl_mem_alloc( len );
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   85..82       MOV       DPL,?V6
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   75F006       MOV       B,#0x6
   \   000027   A4           MUL       AB
   \   000028   A9F0         MOV       R1,B
   \   00002A   2401         ADD       A,#0x1
   \   00002C   FA           MOV       R2,A
   \   00002D   E4           CLR       A
   \   00002E   39           ADDC      A,R1
   \   00002F   FB           MOV       R3,A
   \   000030   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV       ?V4,R2
   \   000035   8B..         MOV       ?V5,R3
   4465            if ( readRspCmd == NULL )
   \   000037   EA           MOV       A,R2
   \   000038   4B           ORL       A,R3
   \   000039   7005         JNZ       ??zclProcessInReadCmd_0
   4466            {
   4467              return FALSE; // EMBEDDED RETURN
   \   00003B   7900         MOV       R1,#0x0
   \   00003D   02....       LJMP      ??zclProcessInReadCmd_1 & 0xFFFF
   4468            }
   4469          
   4470            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_0:
   \   000040   85..82       MOV       DPL,?V6
   \   000043   85..83       MOV       DPH,?V7
   \   000046   E0           MOVX      A,@DPTR
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   F0           MOVX      @DPTR,A
   4471            for ( i = 0; i < readCmd->numAttr; i++ )
   \   00004C   75..00       MOV       ?V0,#0x0
   \   00004F   800D         SJMP      ??zclProcessInReadCmd_2
   4472            {
   4473              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   4474          
   4475              statusRec->attrID = readCmd->attrID[i];
   4476              
   4477              attrFound = zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec );
   4478              
   4479              //Validate the attribute is found and the access control
   4480              if ( ( attrFound == TRUE ) && 
   4481                   (  (attrRec.attr.accessControl & ACCESS_GLOBAL) || 
   4482                      (GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROL_MASK ) == pInMsg->hdr.fc.direction ) ) )
   4483              {
   4484                if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
   4485                {
   4486                  statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
   4487                                                        &(pInMsg->msg->srcAddr), &attrRec );
   4488                  if ( statusRec->status == ZCL_STATUS_SUCCESS )
   4489                  {
   4490                    statusRec->data = attrRec.attr.dataPtr;
   4491                    statusRec->dataType = attrRec.attr.dataType;
   4492                  }
   4493                }
   4494                else
   4495                {
   4496                  statusRec->status = ZCL_STATUS_WRITE_ONLY;
   4497                }
   4498              }
   4499              else
   4500              {
   4501                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_3:
   \   000051   85..82       MOV       DPL,?V2
   \   000054   85..83       MOV       DPH,?V3
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   7486         MOV       A,#-0x7a
   \                     ??zclProcessInReadCmd_4:
   \   00005B   F0           MOVX      @DPTR,A
   4502              }
   \                     ??zclProcessInReadCmd_5:
   \   00005C   05..         INC       ?V0
   \                     ??zclProcessInReadCmd_2:
   \   00005E   85..82       MOV       DPL,?V6
   \   000061   85..83       MOV       DPH,?V7
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F8           MOV       R0,A
   \   000066   E5..         MOV       A,?V0
   \   000068   C3           CLR       C
   \   000069   98           SUBB      A,R0
   \   00006A   4003         JC        $+5
   \   00006C   02....       LJMP      ??zclProcessInReadCmd_6 & 0xFFFF
   \   00006F   A8..         MOV       R0,?V0
   \   000071   E8           MOV       A,R0
   \   000072   75F006       MOV       B,#0x6
   \   000075   A4           MUL       AB
   \   000076   FA           MOV       R2,A
   \   000077   ABF0         MOV       R3,B
   \   000079   E5..         MOV       A,?V4
   \   00007B   2A           ADD       A,R2
   \   00007C   F582         MOV       DPL,A
   \   00007E   E5..         MOV       A,?V5
   \   000080   3B           ADDC      A,R3
   \   000081   F583         MOV       DPH,A
   \   000083   A3           INC       DPTR
   \   000084   8582..       MOV       ?V2,DPL
   \   000087   8583..       MOV       ?V3,DPH
   \   00008A   E8           MOV       A,R0
   \   00008B   28           ADD       A,R0
   \   00008C   F8           MOV       R0,A
   \   00008D   E4           CLR       A
   \   00008E   33           RLC       A
   \   00008F   F9           MOV       R1,A
   \   000090   E5..         MOV       A,?V6
   \   000092   28           ADD       A,R0
   \   000093   F582         MOV       DPL,A
   \   000095   E5..         MOV       A,?V7
   \   000097   39           ADDC      A,R1
   \   000098   F583         MOV       DPH,A
   \   00009A   A3           INC       DPTR
   \   00009B   AA82         MOV       R2,DPL
   \   00009D   AB83         MOV       R3,DPH
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F8           MOV       R0,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F9           MOV       R1,A
   \   0000A4   85..82       MOV       DPL,?V2
   \   0000A7   85..83       MOV       DPH,?V3
   \   0000AA   E8           MOV       A,R0
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E9           MOV       A,R1
   \   0000AE   F0           MOVX      @DPTR,A
   \   0000AF   8E82         MOV       DPL,R6
   \   0000B1   8F83         MOV       DPH,R7
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F8           MOV       R0,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   88..         MOV       ?V8,R0
   \   0000B9   F5..         MOV       ?V9,A
   \   0000BB                ; Setup parameters for call to function zclFindAttrRec
   \   0000BB   A8..         MOV       R0,?XSP + 0
   \   0000BD   A9..         MOV       R1,?XSP + 1
   \   0000BF   88..         MOV       ?V10,R0
   \   0000C1   89..         MOV       ?V11,R1
   \   0000C3   78..         MOV       R0,#?V10
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C8   8A82         MOV       DPL,R2
   \   0000CA   8B83         MOV       DPH,R3
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   FC           MOV       R4,A
   \   0000CE   A3           INC       DPTR
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   FD           MOV       R5,A
   \   0000D1   85..82       MOV       DPL,?V8
   \   0000D4   85..83       MOV       DPH,?V9
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   FA           MOV       R2,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   FB           MOV       R3,A
   \   0000E0   E5..         MOV       A,?V8
   \   0000E2   2414         ADD       A,#0x14
   \   0000E4   F582         MOV       DPL,A
   \   0000E6   E4           CLR       A
   \   0000E7   35..         ADDC      A,?V9
   \   0000E9   F583         MOV       DPH,A
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   F9           MOV       R1,A
   \   0000ED   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000F0   7402         MOV       A,#0x2
   \   0000F2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F5   E9           MOV       A,R1
   \   0000F6   6401         XRL       A,#0x1
   \   0000F8   6003         JZ        $+5
   \   0000FA   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \   0000FD   7405         MOV       A,#0x5
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   E0           MOVX      A,@DPTR
   \   000103   A2E6         MOV       C,0xE0 /* A   */.6
   \   000105   4021         JC        ??zclProcessInReadCmd_7
   \   000107   8E82         MOV       DPL,R6
   \   000109   8F83         MOV       DPH,R7
   \   00010B   A3           INC       DPTR
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   13           RRC       A
   \   00010F   13           RRC       A
   \   000110   13           RRC       A
   \   000111   541F         ANL       A,#0x1f
   \   000113   A2E0         MOV       C,0xE0 /* A   */.0
   \   000115   92F0         MOV       B.0,C
   \   000117   7405         MOV       A,#0x5
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   A2E7         MOV       C,0xE0 /* A   */.7
   \   00011F   20F001       JB        B.0,??zclProcessInReadCmd_8
   \   000122   B3           CPL       C
   \                     ??zclProcessInReadCmd_8:
   \   000123   4003         JC        $+5
   \   000125   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \                     ??zclProcessInReadCmd_7:
   \   000128   E5..         MOV       A,?V2
   \   00012A   2402         ADD       A,#0x2
   \   00012C   F5..         MOV       ?V8,A
   \   00012E   E4           CLR       A
   \   00012F   35..         ADDC      A,?V3
   \   000131   F5..         MOV       ?V9,A
   \   000133   E0           MOVX      A,@DPTR
   \   000134   A2E0         MOV       C,0xE0 /* A   */.0
   \   000136   505B         JNC       ??zclProcessInReadCmd_9
   \   000138   8E82         MOV       DPL,R6
   \   00013A   8F83         MOV       DPH,R7
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   F8           MOV       R0,A
   \   00013E   A3           INC       DPTR
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   F9           MOV       R1,A
   \   000141                ; Setup parameters for call to function zclAuthorizeRead
   \   000141   AC..         MOV       R4,?XSP + 0
   \   000143   AD..         MOV       R5,?XSP + 1
   \   000145   E8           MOV       A,R0
   \   000146   2406         ADD       A,#0x6
   \   000148   FA           MOV       R2,A
   \   000149   E4           CLR       A
   \   00014A   39           ADDC      A,R1
   \   00014B   FB           MOV       R3,A
   \   00014C   E8           MOV       A,R0
   \   00014D   2414         ADD       A,#0x14
   \   00014F   F582         MOV       DPL,A
   \   000151   E4           CLR       A
   \   000152   39           ADDC      A,R1
   \   000153   F583         MOV       DPH,A
   \   000155   E0           MOVX      A,@DPTR
   \   000156   F9           MOV       R1,A
   \   000157   12....       LCALL     `??zclAuthorizeRead::?relay`; Banked call to: zclAuthorizeRead
   \   00015A   E9           MOV       A,R1
   \   00015B   F8           MOV       R0,A
   \   00015C   85..82       MOV       DPL,?V8
   \   00015F   85..83       MOV       DPH,?V9
   \   000162   F0           MOVX      @DPTR,A
   \   000163   6003         JZ        $+5
   \   000165   02....       LJMP      ??zclProcessInReadCmd_5 & 0xFFFF
   \   000168   7406         MOV       A,#0x6
   \   00016A   12....       LCALL     ?XSTACK_DISP0_8
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   F8           MOV       R0,A
   \   00016F   A3           INC       DPTR
   \   000170   E0           MOVX      A,@DPTR
   \   000171   F9           MOV       R1,A
   \   000172   85..82       MOV       DPL,?V2
   \   000175   85..83       MOV       DPH,?V3
   \   000178   A3           INC       DPTR
   \   000179   A3           INC       DPTR
   \   00017A   A3           INC       DPTR
   \   00017B   A3           INC       DPTR
   \   00017C   E8           MOV       A,R0
   \   00017D   F0           MOVX      @DPTR,A
   \   00017E   A3           INC       DPTR
   \   00017F   E9           MOV       A,R1
   \   000180   F0           MOVX      @DPTR,A
   \   000181   7404         MOV       A,#0x4
   \   000183   12....       LCALL     ?XSTACK_DISP0_8
   \   000186   E0           MOVX      A,@DPTR
   \   000187   85..82       MOV       DPL,?V2
   \   00018A   85..83       MOV       DPH,?V3
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   \                     ??zclProcessInReadCmd_9:
   \   000193   85..82       MOV       DPL,?V8
   \   000196   85..83       MOV       DPH,?V9
   \   000199   748F         MOV       A,#-0x71
   \   00019B   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   4503            }
   4504          
   4505            // Build and send Read Response command
   4506            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   4507                             readRspCmd, !pInMsg->hdr.fc.direction,
   4508                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   00019E   8E82         MOV       DPL,R6
   \   0001A0   8F83         MOV       DPH,R7
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   F5..         MOV       ?V0,A
   \   0001A5   A3           INC       DPTR
   \   0001A6   E0           MOVX      A,@DPTR
   \   0001A7   F5..         MOV       ?V1,A
   \   0001A9                ; Setup parameters for call to function zcl_SendReadRsp
   \   0001A9   8E82         MOV       DPL,R6
   \   0001AB   8F83         MOV       DPH,R7
   \   0001AD   A3           INC       DPTR
   \   0001AE   A3           INC       DPTR
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   A3           INC       DPTR
   \   0001B2   A3           INC       DPTR
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   F5..         MOV       ?V2,A
   \   0001B6   78..         MOV       R0,#?V2
   \   0001B8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001BB   75..01       MOV       ?V2,#0x1
   \   0001BE   78..         MOV       R0,#?V2
   \   0001C0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C3   8E82         MOV       DPL,R6
   \   0001C5   8F83         MOV       DPH,R7
   \   0001C7   A3           INC       DPTR
   \   0001C8   A3           INC       DPTR
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   13           RRC       A
   \   0001CB   13           RRC       A
   \   0001CC   13           RRC       A
   \   0001CD   541F         ANL       A,#0x1f
   \   0001CF   6401         XRL       A,#0x1
   \   0001D1   5401         ANL       A,#0x1
   \   0001D3   F5..         MOV       ?V2,A
   \   0001D5   78..         MOV       R0,#?V2
   \   0001D7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001DA   78..         MOV       R0,#?V4
   \   0001DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DF   85..82       MOV       DPL,?V0
   \   0001E2   85..83       MOV       DPH,?V1
   \   0001E5   A3           INC       DPTR
   \   0001E6   A3           INC       DPTR
   \   0001E7   A3           INC       DPTR
   \   0001E8   A3           INC       DPTR
   \   0001E9   E0           MOVX      A,@DPTR
   \   0001EA   FC           MOV       R4,A
   \   0001EB   A3           INC       DPTR
   \   0001EC   E0           MOVX      A,@DPTR
   \   0001ED   FD           MOV       R5,A
   \   0001EE   E5..         MOV       A,?V0
   \   0001F0   2406         ADD       A,#0x6
   \   0001F2   FA           MOV       R2,A
   \   0001F3   E4           CLR       A
   \   0001F4   35..         ADDC      A,?V1
   \   0001F6   FB           MOV       R3,A
   \   0001F7   E5..         MOV       A,?V0
   \   0001F9   2414         ADD       A,#0x14
   \   0001FB   F582         MOV       DPL,A
   \   0001FD   E4           CLR       A
   \   0001FE   35..         ADDC      A,?V1
   \   000200   F583         MOV       DPH,A
   \   000202   E0           MOVX      A,@DPTR
   \   000203   F9           MOV       R1,A
   \   000204   12....       LCALL     `??zcl_SendReadRsp::?relay`; Banked call to: zcl_SendReadRsp
   \   000207   7405         MOV       A,#0x5
   \   000209   12....       LCALL     ?DEALLOC_XSTACK8
   4509            zcl_mem_free( readRspCmd );
   \   00020C                ; Setup parameters for call to function osal_mem_free
   \   00020C   AA..         MOV       R2,?V4
   \   00020E   AB..         MOV       R3,?V5
   \   000210   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4510          
   4511            return TRUE;
   \   000213   7901         MOV       R1,#0x1
   \                     ??zclProcessInReadCmd_1:
   \   000215   7408         MOV       A,#0x8
   \   000217   12....       LCALL     ?DEALLOC_XSTACK8
   \   00021A   7F0C         MOV       R7,#0xc
   \   00021C   02....       LJMP      ?BANKED_LEAVE_XDATA
   4512          }
   4513          #endif // ZCL_READ
   4514          
   4515          #ifdef ZCL_WRITE
   4516          /*********************************************************************
   4517           * @fn      processInWriteCmd
   4518           *
   4519           * @brief   Process the "Profile" Write and Write No Response Commands
   4520           *
   4521           * @param   pInMsg - incoming message to process
   4522           *
   4523           * @return  TRUE if command processed. FALSE, otherwise.
   4524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4525          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   4526          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   4527            zclWriteCmd_t *writeCmd;
   4528            zclWriteRspCmd_t *writeRspCmd;
   4529            uint8 sendRsp = FALSE;
   \   00000E   7F00         MOV       R7,#0x0
   4530            uint8 j = 0;
   \   000010   7E00         MOV       R6,#0x0
   4531            uint8 i;
   4532          
   4533            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000012   EA           MOV       A,R2
   \   000013   240C         ADD       A,#0xc
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   35..         ADDC      A,?V9
   \   00001A   F583         MOV       DPH,A
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V12,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V13,A
   4534            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6402         XRL       A,#0x2
   \   000031   7025         JNZ       ??zclProcessInWriteCmd_0
   4535            {
   4536              // We need to send a response back - allocate space for it
   4537              writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4538                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   85..82       MOV       DPL,?V12
   \   000036   85..83       MOV       DPH,?V13
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   75F003       MOV       B,#0x3
   \   00003D   A4           MUL       AB
   \   00003E   A9F0         MOV       R1,B
   \   000040   2401         ADD       A,#0x1
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   39           ADDC      A,R1
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV       ?V0,R2
   \   00004B   8B..         MOV       ?V1,R3
   4539              if ( writeRspCmd == NULL )
   \   00004D   EA           MOV       A,R2
   \   00004E   4B           ORL       A,R3
   \   00004F   7005         JNZ       ??zclProcessInWriteCmd_1
   4540              {
   4541                return FALSE; // EMBEDDED RETURN
   \   000051   7900         MOV       R1,#0x0
   \   000053   02....       LJMP      ??zclProcessInWriteCmd_2 & 0xFFFF
   4542              }
   4543          
   4544              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_1:
   \   000056   7F01         MOV       R7,#0x1
   4545            }
   4546          
   4547            for ( i = 0; i < writeCmd->numAttr; i++ )
   \                     ??zclProcessInWriteCmd_0:
   \   000058   75..00       MOV       ?V7,#0x0
   \   00005B   8034         SJMP      ??zclProcessInWriteCmd_3
   4548            {
   4549              zclAttrRec_t attrRec;
   4550              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4551          
   4552              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4553                                   statusRec->attrID, &attrRec ) )
   4554              {
   4555                if ( GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROLEXT_MASK ) != pInMsg->hdr.fc.direction )
   4556                {
   4557                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4558                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4559                  break;
   4560                }
   4561                if ( statusRec->dataType == attrRec.attr.dataType )
   4562                {
   4563                  uint8 status;
   4564          
   4565                  // Write the new attribute value
   4566                  if ( attrRec.attr.dataPtr != NULL )
   4567                  {
   4568                    //Handle special case for Identify
   4569                    if((pInMsg->msg->clusterId == ZCL_CLUSTER_ID_GEN_IDENTIFY) && (statusRec->attrID == ATTRID_IDENTIFY_TIME))
   4570                    {
   4571                      uint16 identifyTime; 
   4572                            
   4573                      osal_memcpy((uint8*)&identifyTime,statusRec->attrData,sizeof(uint16));
   4574                                  
   4575                      bdb_ZclIdentifyCmdInd(identifyTime, pInMsg->msg->endPoint);
   4576                      
   4577                      status = ZCL_STATUS_SUCCESS;
   4578                    }          
   4579                    else
   4580                    {                
   4581                      status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4582                                                 &attrRec, statusRec );
   4583                    }
   4584                  }
   4585                  else // Use CB
   4586                  {
   4587                    status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4588                                                      &attrRec, statusRec->attrData );
   4589                  }
   4590          
   4591                  // If successful, a write attribute status record shall NOT be generated
   4592                  if ( sendRsp && status != ZCL_STATUS_SUCCESS )
   4593                  {
   4594                    // Attribute is read only - move on to the next write attribute record
   4595                    writeRspCmd->attrList[j].status = status;
   4596                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4597                  }
   4598                }
   4599                else
   4600                {
   4601                  // Attribute data type is incorrect - move on to the next write attribute record
   4602                  if ( sendRsp )
   4603                  {
   4604                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4605                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4606                  }
   4607                }
   4608              }
   4609              else
   4610              {
   4611                // Attribute is not supported - move on to the next write attribute record
   4612                if ( sendRsp )
   \                     ??zclProcessInWriteCmd_4:
   \   00005D   EF           MOV       A,R7
   \   00005E   602F         JZ        ??zclProcessInWriteCmd_5
   4613                {
   4614                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000060   EE           MOV       A,R6
   \   000061   75F003       MOV       B,#0x3
   \   000064   A4           MUL       AB
   \   000065   F8           MOV       R0,A
   \   000066   A9F0         MOV       R1,B
   \   000068   E5..         MOV       A,?V0
   \   00006A   28           ADD       A,R0
   \   00006B   F8           MOV       R0,A
   \   00006C   E5..         MOV       A,?V1
   \   00006E   39           ADDC      A,R1
   \   00006F   F9           MOV       R1,A
   \   000070   8882         MOV       DPL,R0
   \   000072   F583         MOV       DPH,A
   \   000074   A3           INC       DPTR
   \   000075   7486         MOV       A,#-0x7a
   \                     ??zclProcessInWriteCmd_6:
   \   000077   F0           MOVX      @DPTR,A
   4615                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   \   000078   85..82       MOV       DPL,?V2
   \   00007B   85..83       MOV       DPH,?V3
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   FA           MOV       R2,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FB           MOV       R3,A
   \   000083   8882         MOV       DPL,R0
   \   000085   8983         MOV       DPH,R1
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   EA           MOV       A,R2
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   EB           MOV       A,R3
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   0E           INC       R6
   4616                }
   4617              }
   \                     ??zclProcessInWriteCmd_5:
   \   00008F   05..         INC       ?V7
   \                     ??zclProcessInWriteCmd_3:
   \   000091   85..82       MOV       DPL,?V12
   \   000094   85..83       MOV       DPH,?V13
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F8           MOV       R0,A
   \   000099   E5..         MOV       A,?V7
   \   00009B   C3           CLR       C
   \   00009C   98           SUBB      A,R0
   \   00009D   4003         JC        $+5
   \   00009F   02....       LJMP      ??zclProcessInWriteCmd_7 & 0xFFFF
   \   0000A2   E5..         MOV       A,?V7
   \   0000A4   75F005       MOV       B,#0x5
   \   0000A7   A4           MUL       AB
   \   0000A8   F8           MOV       R0,A
   \   0000A9   A9F0         MOV       R1,B
   \   0000AB   E5..         MOV       A,?V12
   \   0000AD   28           ADD       A,R0
   \   0000AE   F582         MOV       DPL,A
   \   0000B0   E5..         MOV       A,?V13
   \   0000B2   39           ADDC      A,R1
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   8582..       MOV       ?V2,DPL
   \   0000B9   8583..       MOV       ?V3,DPH
   \   0000BC   85..82       MOV       DPL,?V8
   \   0000BF   85..83       MOV       DPH,?V9
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F5..         MOV       ?V4,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   F5..         MOV       ?V5,A
   \   0000C9                ; Setup parameters for call to function zclFindAttrRec
   \   0000C9   7402         MOV       A,#0x2
   \   0000CB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000CE   88..         MOV       ?V10,R0
   \   0000D0   89..         MOV       ?V11,R1
   \   0000D2   78..         MOV       R0,#?V10
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D7   85..82       MOV       DPL,?V2
   \   0000DA   85..83       MOV       DPH,?V3
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   FC           MOV       R4,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   FD           MOV       R5,A
   \   0000E2   85..82       MOV       DPL,?V4
   \   0000E5   85..83       MOV       DPH,?V5
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   FA           MOV       R2,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   FB           MOV       R3,A
   \   0000F1   E5..         MOV       A,?V4
   \   0000F3   2414         ADD       A,#0x14
   \   0000F5   F582         MOV       DPL,A
   \   0000F7   E4           CLR       A
   \   0000F8   35..         ADDC      A,?V5
   \   0000FA   F583         MOV       DPH,A
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F9           MOV       R1,A
   \   0000FE   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000101   7402         MOV       A,#0x2
   \   000103   12....       LCALL     ?DEALLOC_XSTACK8
   \   000106   E9           MOV       A,R1
   \   000107   7003         JNZ       $+5
   \   000109   02....       LJMP      ??zclProcessInWriteCmd_4 & 0xFFFF
   \   00010C   85..82       MOV       DPL,?V8
   \   00010F   85..83       MOV       DPH,?V9
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   E0           MOVX      A,@DPTR
   \   000115   13           RRC       A
   \   000116   13           RRC       A
   \   000117   13           RRC       A
   \   000118   541F         ANL       A,#0x1f
   \   00011A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00011C   92F0         MOV       B.0,C
   \   00011E   7407         MOV       A,#0x7
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   E0           MOVX      A,@DPTR
   \   000124   A2E7         MOV       C,0xE0 /* A   */.7
   \   000126   20F001       JB        B.0,??zclProcessInWriteCmd_8
   \   000129   B3           CPL       C
   \                     ??zclProcessInWriteCmd_8:
   \   00012A   5003         JNC       $+5
   \   00012C   02....       LJMP      ??zclProcessInWriteCmd_9 & 0xFFFF
   \   00012F   EE           MOV       A,R6
   \   000130   75F003       MOV       B,#0x3
   \   000133   A4           MUL       AB
   \   000134   F8           MOV       R0,A
   \   000135   A9F0         MOV       R1,B
   \   000137   E5..         MOV       A,?V0
   \   000139   28           ADD       A,R0
   \   00013A   F8           MOV       R0,A
   \   00013B   E5..         MOV       A,?V1
   \   00013D   39           ADDC      A,R1
   \   00013E   F9           MOV       R1,A
   \   00013F   8882         MOV       DPL,R0
   \   000141   F583         MOV       DPH,A
   \   000143   A3           INC       DPTR
   \   000144   7486         MOV       A,#-0x7a
   \   000146   F0           MOVX      @DPTR,A
   \   000147   85..82       MOV       DPL,?V2
   \   00014A   85..83       MOV       DPH,?V3
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   FA           MOV       R2,A
   \   00014F   A3           INC       DPTR
   \   000150   E0           MOVX      A,@DPTR
   \   000151   FB           MOV       R3,A
   \   000152   8882         MOV       DPL,R0
   \   000154   8983         MOV       DPH,R1
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   EA           MOV       A,R2
   \   000159   F0           MOVX      @DPTR,A
   \   00015A   A3           INC       DPTR
   \   00015B   EB           MOV       A,R3
   \   00015C   F0           MOVX      @DPTR,A
   \   00015D   0E           INC       R6
   4618            } // for loop
   4619          
   4620            if ( sendRsp )
   \                     ??zclProcessInWriteCmd_7:
   \   00015E   EF           MOV       A,R7
   \   00015F   7003         JNZ       $+5
   \   000161   02....       LJMP      ??zclProcessInWriteCmd_10 & 0xFFFF
   4621            {
   4622              writeRspCmd->numAttr = j;
   \   000164   EE           MOV       A,R6
   \   000165   85..82       MOV       DPL,?V0
   \   000168   85..83       MOV       DPH,?V1
   \   00016B   F0           MOVX      @DPTR,A
   4623              if ( writeRspCmd->numAttr == 0 )
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   700B         JNZ       ??zclProcessInWriteCmd_11
   4624              {
   4625                // Since all records were written successful, include a single status record
   4626                // in the resonse command with the status field set to SUCCESS and the
   4627                // attribute ID field omitted.
   4628                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   00016F   A3           INC       DPTR
   \   000170   E4           CLR       A
   \   000171   F0           MOVX      @DPTR,A
   4629                writeRspCmd->numAttr = 1;
   \   000172   85..82       MOV       DPL,?V0
   \   000175   85..83       MOV       DPH,?V1
   \   000178   04           INC       A
   \   000179   F0           MOVX      @DPTR,A
   4630              }
   4631          
   4632              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4633                                pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4634                                true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteCmd_11:
   \   00017A   85..82       MOV       DPL,?V8
   \   00017D   85..83       MOV       DPH,?V9
   \   000180   E0           MOVX      A,@DPTR
   \   000181   FE           MOV       R6,A
   \   000182   A3           INC       DPTR
   \   000183   E0           MOVX      A,@DPTR
   \   000184   FF           MOV       R7,A
   \   000185                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000185   85..82       MOV       DPL,?V8
   \   000188   85..83       MOV       DPH,?V9
   \   00018B   A3           INC       DPTR
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   E0           MOVX      A,@DPTR
   \   000192   F5..         MOV       ?V2,A
   \   000194   78..         MOV       R0,#?V2
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000199   75..01       MOV       ?V2,#0x1
   \   00019C   78..         MOV       R0,#?V2
   \   00019E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A1   85..82       MOV       DPL,?V8
   \   0001A4   85..83       MOV       DPH,?V9
   \   0001A7   A3           INC       DPTR
   \   0001A8   A3           INC       DPTR
   \   0001A9   E0           MOVX      A,@DPTR
   \   0001AA   13           RRC       A
   \   0001AB   13           RRC       A
   \   0001AC   13           RRC       A
   \   0001AD   541F         ANL       A,#0x1f
   \   0001AF   6401         XRL       A,#0x1
   \   0001B1   5401         ANL       A,#0x1
   \   0001B3   F5..         MOV       ?V2,A
   \   0001B5   78..         MOV       R0,#?V2
   \   0001B7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001BA   78..         MOV       R0,#?V0
   \   0001BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BF   8E82         MOV       DPL,R6
   \   0001C1   8F83         MOV       DPH,R7
   \   0001C3   A3           INC       DPTR
   \   0001C4   A3           INC       DPTR
   \   0001C5   A3           INC       DPTR
   \   0001C6   A3           INC       DPTR
   \   0001C7   E0           MOVX      A,@DPTR
   \   0001C8   FC           MOV       R4,A
   \   0001C9   A3           INC       DPTR
   \   0001CA   E0           MOVX      A,@DPTR
   \   0001CB   FD           MOV       R5,A
   \   0001CC   EE           MOV       A,R6
   \   0001CD   2406         ADD       A,#0x6
   \   0001CF   FA           MOV       R2,A
   \   0001D0   E4           CLR       A
   \   0001D1   3F           ADDC      A,R7
   \   0001D2   FB           MOV       R3,A
   \   0001D3   EE           MOV       A,R6
   \   0001D4   2414         ADD       A,#0x14
   \   0001D6   F582         MOV       DPL,A
   \   0001D8   E4           CLR       A
   \   0001D9   3F           ADDC      A,R7
   \   0001DA   F583         MOV       DPH,A
   \   0001DC   E0           MOVX      A,@DPTR
   \   0001DD   F9           MOV       R1,A
   \   0001DE   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   0001E1   7405         MOV       A,#0x5
   \   0001E3   12....       LCALL     ?DEALLOC_XSTACK8
   4635              zcl_mem_free( writeRspCmd );
   \   0001E6                ; Setup parameters for call to function osal_mem_free
   \   0001E6   AA..         MOV       R2,?V0
   \   0001E8   AB..         MOV       R3,?V1
   \   0001EA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4636            }
   4637          
   4638            return TRUE;
   \                     ??zclProcessInWriteCmd_10:
   \   0001ED   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteCmd_2:
   \   0001EF   740A         MOV       A,#0xa
   \   0001F1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F4   7F0E         MOV       R7,#0xe
   \   0001F6   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??zclProcessInWriteCmd_9:
   \   0001F9   85..82       MOV       DPL,?V2
   \   0001FC   85..83       MOV       DPH,?V3
   \   0001FF   A3           INC       DPTR
   \   000200   A3           INC       DPTR
   \   000201   E0           MOVX      A,@DPTR
   \   000202   F8           MOV       R0,A
   \   000203   7406         MOV       A,#0x6
   \   000205   12....       LCALL     ?XSTACK_DISP0_8
   \   000208   E0           MOVX      A,@DPTR
   \   000209   68           XRL       A,R0
   \   00020A   6003         JZ        $+5
   \   00020C   02....       LJMP      ??zclProcessInWriteCmd_12 & 0xFFFF
   \   00020F   7408         MOV       A,#0x8
   \   000211   12....       LCALL     ?XSTACK_DISP0_8
   \   000214   E0           MOVX      A,@DPTR
   \   000215   F8           MOV       R0,A
   \   000216   A3           INC       DPTR
   \   000217   E0           MOVX      A,@DPTR
   \   000218   F9           MOV       R1,A
   \   000219   E8           MOV       A,R0
   \   00021A   49           ORL       A,R1
   \   00021B   85..82       MOV       DPL,?V8
   \   00021E   85..83       MOV       DPH,?V9
   \   000221   7003         JNZ       $+5
   \   000223   02....       LJMP      ??zclProcessInWriteCmd_13 & 0xFFFF
   \   000226   E0           MOVX      A,@DPTR
   \   000227   F5..         MOV       ?V4,A
   \   000229   A3           INC       DPTR
   \   00022A   E0           MOVX      A,@DPTR
   \   00022B   F5..         MOV       ?V5,A
   \   00022D   85..82       MOV       DPL,?V4
   \   000230   F583         MOV       DPH,A
   \   000232   A3           INC       DPTR
   \   000233   A3           INC       DPTR
   \   000234   A3           INC       DPTR
   \   000235   A3           INC       DPTR
   \   000236   E0           MOVX      A,@DPTR
   \   000237   6403         XRL       A,#0x3
   \   000239   7002         JNZ       ??zclProcessInWriteCmd_14
   \   00023B   A3           INC       DPTR
   \   00023C   E0           MOVX      A,@DPTR
   \                     ??zclProcessInWriteCmd_14:
   \   00023D   705F         JNZ       ??zclProcessInWriteCmd_15
   \   00023F   85..82       MOV       DPL,?V2
   \   000242   85..83       MOV       DPH,?V3
   \   000245   E0           MOVX      A,@DPTR
   \   000246   F8           MOV       R0,A
   \   000247   A3           INC       DPTR
   \   000248   E0           MOVX      A,@DPTR
   \   000249   F9           MOV       R1,A
   \   00024A   E8           MOV       A,R0
   \   00024B   49           ORL       A,R1
   \   00024C   7050         JNZ       ??zclProcessInWriteCmd_15
   \   00024E                ; Setup parameters for call to function osal_memcpy
   \   00024E   85..82       MOV       DPL,?V2
   \   000251   85..83       MOV       DPH,?V3
   \   000254   A3           INC       DPTR
   \   000255   A3           INC       DPTR
   \   000256   A3           INC       DPTR
   \   000257   E0           MOVX      A,@DPTR
   \   000258   F5..         MOV       ?V4,A
   \   00025A   A3           INC       DPTR
   \   00025B   E0           MOVX      A,@DPTR
   \   00025C   F5..         MOV       ?V5,A
   \   00025E   75..00       MOV       ?V6,#0x0
   \   000261   78..         MOV       R0,#?V4
   \   000263   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000266   7C02         MOV       R4,#0x2
   \   000268   7D00         MOV       R5,#0x0
   \   00026A   7403         MOV       A,#0x3
   \   00026C   12....       LCALL     ?XSTACK_DISP101_8
   \   00026F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000272   7403         MOV       A,#0x3
   \   000274   12....       LCALL     ?DEALLOC_XSTACK8
   \   000277                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   000277   85..82       MOV       DPL,?V8
   \   00027A   85..83       MOV       DPH,?V9
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   F8           MOV       R0,A
   \   00027F   A3           INC       DPTR
   \   000280   E0           MOVX      A,@DPTR
   \   000281   C8           XCH       A,R0
   \   000282   2414         ADD       A,#0x14
   \   000284   F582         MOV       DPL,A
   \   000286   E4           CLR       A
   \   000287   38           ADDC      A,R0
   \   000288   F583         MOV       DPH,A
   \   00028A   E0           MOVX      A,@DPTR
   \   00028B   F9           MOV       R1,A
   \   00028C   85..82       MOV       DPL,?XSP + 0
   \   00028F   85..83       MOV       DPH,?XSP + 1
   \   000292   E0           MOVX      A,@DPTR
   \   000293   FA           MOV       R2,A
   \   000294   A3           INC       DPTR
   \   000295   E0           MOVX      A,@DPTR
   \   000296   FB           MOV       R3,A
   \   000297   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   \   00029A   7A00         MOV       R2,#0x0
   \   00029C   8057         SJMP      ??zclProcessInWriteCmd_16
   \                     ??zclProcessInWriteCmd_15:
   \   00029E                ; Setup parameters for call to function zclWriteAttrData
   \   00029E   78..         MOV       R0,#?V2
   \   0002A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002A3   7404         MOV       A,#0x4
   \   0002A5   12....       LCALL     ?XSTACK_DISP102_8
   \   0002A8   E5..         MOV       A,?V4
   \   0002AA   2406         ADD       A,#0x6
   \   0002AC   FA           MOV       R2,A
   \   0002AD   E4           CLR       A
   \   0002AE   35..         ADDC      A,?V5
   \   0002B0   FB           MOV       R3,A
   \   0002B1   E5..         MOV       A,?V4
   \   0002B3   2414         ADD       A,#0x14
   \   0002B5   F582         MOV       DPL,A
   \   0002B7   E4           CLR       A
   \   0002B8   35..         ADDC      A,?V5
   \   0002BA   F583         MOV       DPH,A
   \   0002BC   E0           MOVX      A,@DPTR
   \   0002BD   F9           MOV       R1,A
   \   0002BE   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   0002C1   802B         SJMP      ??zclProcessInWriteCmd_17
   \                     ??zclProcessInWriteCmd_13:
   \   0002C3   E0           MOVX      A,@DPTR
   \   0002C4   F8           MOV       R0,A
   \   0002C5   A3           INC       DPTR
   \   0002C6   E0           MOVX      A,@DPTR
   \   0002C7   F9           MOV       R1,A
   \   0002C8                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   0002C8   85..82       MOV       DPL,?V2
   \   0002CB   85..83       MOV       DPH,?V3
   \   0002CE   A3           INC       DPTR
   \   0002CF   A3           INC       DPTR
   \   0002D0   A3           INC       DPTR
   \   0002D1   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002D4   7404         MOV       A,#0x4
   \   0002D6   12....       LCALL     ?XSTACK_DISP102_8
   \   0002D9   E8           MOV       A,R0
   \   0002DA   2406         ADD       A,#0x6
   \   0002DC   FA           MOV       R2,A
   \   0002DD   E4           CLR       A
   \   0002DE   39           ADDC      A,R1
   \   0002DF   FB           MOV       R3,A
   \   0002E0   E8           MOV       A,R0
   \   0002E1   2414         ADD       A,#0x14
   \   0002E3   F582         MOV       DPL,A
   \   0002E5   E4           CLR       A
   \   0002E6   39           ADDC      A,R1
   \   0002E7   F583         MOV       DPH,A
   \   0002E9   E0           MOVX      A,@DPTR
   \   0002EA   F9           MOV       R1,A
   \   0002EB   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \                     ??zclProcessInWriteCmd_17:
   \   0002EE   7402         MOV       A,#0x2
   \   0002F0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002F3   E9           MOV       A,R1
   \   0002F4   FA           MOV       R2,A
   \                     ??zclProcessInWriteCmd_16:
   \   0002F5   EF           MOV       A,R7
   \   0002F6   7003         JNZ       $+5
   \   0002F8   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   \   0002FB   EA           MOV       A,R2
   \   0002FC   7003         JNZ       $+5
   \   0002FE   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   \   000301   EE           MOV       A,R6
   \   000302   75F003       MOV       B,#0x3
   \   000305   A4           MUL       AB
   \   000306   F8           MOV       R0,A
   \   000307   A9F0         MOV       R1,B
   \   000309   E5..         MOV       A,?V0
   \   00030B   28           ADD       A,R0
   \   00030C   F8           MOV       R0,A
   \   00030D   E5..         MOV       A,?V1
   \   00030F   39           ADDC      A,R1
   \   000310   F9           MOV       R1,A
   \   000311   EA           MOV       A,R2
   \   000312   8882         MOV       DPL,R0
   \   000314   8983         MOV       DPH,R1
   \   000316   A3           INC       DPTR
   \   000317   02....       LJMP      ??zclProcessInWriteCmd_6 & 0xFFFF
   \                     ??zclProcessInWriteCmd_12:
   \   00031A   EF           MOV       A,R7
   \   00031B   7003         JNZ       $+5
   \   00031D   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   \   000320   EE           MOV       A,R6
   \   000321   75F003       MOV       B,#0x3
   \   000324   A4           MUL       AB
   \   000325   F8           MOV       R0,A
   \   000326   A9F0         MOV       R1,B
   \   000328   E5..         MOV       A,?V0
   \   00032A   28           ADD       A,R0
   \   00032B   F8           MOV       R0,A
   \   00032C   E5..         MOV       A,?V1
   \   00032E   39           ADDC      A,R1
   \   00032F   F9           MOV       R1,A
   \   000330   8882         MOV       DPL,R0
   \   000332   F583         MOV       DPH,A
   \   000334   A3           INC       DPTR
   \   000335   748D         MOV       A,#-0x73
   \   000337   02....       LJMP      ??zclProcessInWriteCmd_6 & 0xFFFF
   4639          }
   4640          
   4641          /*********************************************************************
   4642           * @fn      zclRevertWriteUndividedCmd
   4643           *
   4644           * @brief   Revert the "Profile" Write Undevided Command
   4645           *
   4646           * @param   pInMsg - incoming message to process
   4647           * @param   curWriteRec - old data
   4648           * @param   numAttr - number of attributes to be reverted
   4649           *
   4650           * @return  none
   4651           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4652          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
   \                     zclRevertWriteUndividedCmd:
   4653                                              zclWriteRec_t *curWriteRec, uint16 numAttr )
   4654          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V12,R4
   \   000010   8D..         MOV       ?V13,R5
   4655            uint8 i;
   4656          
   4657            for ( i = 0; i < numAttr; i++ )
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   741E         MOV       A,#0x1e
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V6,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V7,A
   \   000021   8033         SJMP      ??zclRevertWriteUndividedCmd_0
   4658            {
   4659              zclAttrRec_t attrRec;
   4660              zclWriteRec_t *statusRec = &(curWriteRec[i]);
   4661          
   4662              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4663                                    statusRec->attrID, &attrRec ) )
   4664              {
   4665                break; // should never happen
   4666              }
   4667          
   4668              if ( attrRec.attr.dataPtr != NULL )
   4669              {
   4670                // Just copy the old data back - no need to validate the data
   4671                uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   4672                zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   4673              }
   4674              else // Use CB
   4675              {
   4676                // Write the old data back
   4677                zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4678                                         &attrRec, statusRec->attrData );
   \                     ??zclRevertWriteUndividedCmd_1:
   \   000023   85..82       MOV       DPL,?V4
   \   000026   85..83       MOV       DPH,?V5
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F9           MOV       R1,A
   \   00002E                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   00002E   8E82         MOV       DPL,R6
   \   000030   8F83         MOV       DPH,R7
   \   000032   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?XSTACK_DISP102_8
   \   00003A   E8           MOV       A,R0
   \   00003B   2406         ADD       A,#0x6
   \   00003D   FA           MOV       R2,A
   \   00003E   E4           CLR       A
   \   00003F   39           ADDC      A,R1
   \   000040   FB           MOV       R3,A
   \   000041   E8           MOV       A,R0
   \   000042   2414         ADD       A,#0x14
   \   000044   F582         MOV       DPL,A
   \   000046   E4           CLR       A
   \   000047   39           ADDC      A,R1
   \   000048   F583         MOV       DPH,A
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \   00004F   7402         MOV       A,#0x2
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   4679              }
   \                     ??zclRevertWriteUndividedCmd_2:
   \   000054   05..         INC       ?V2
   \                     ??zclRevertWriteUndividedCmd_0:
   \   000056   C3           CLR       C
   \   000057   E5..         MOV       A,?V2
   \   000059   95..         SUBB      A,?V6
   \   00005B   E4           CLR       A
   \   00005C   95..         SUBB      A,?V7
   \   00005E   4003         JC        $+5
   \   000060   02....       LJMP      ??zclRevertWriteUndividedCmd_3 & 0xFFFF
   \   000063   E5..         MOV       A,?V2
   \   000065   75F005       MOV       B,#0x5
   \   000068   A4           MUL       AB
   \   000069   F8           MOV       R0,A
   \   00006A   A9F0         MOV       R1,B
   \   00006C   E5..         MOV       A,?V12
   \   00006E   28           ADD       A,R0
   \   00006F   FE           MOV       R6,A
   \   000070   E5..         MOV       A,?V13
   \   000072   39           ADDC      A,R1
   \   000073   FF           MOV       R7,A
   \   000074   85..82       MOV       DPL,?V4
   \   000077   85..83       MOV       DPH,?V5
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F8           MOV       R0,A
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   88..         MOV       ?V0,R0
   \   000080   F5..         MOV       ?V1,A
   \   000082                ; Setup parameters for call to function zclFindAttrRec
   \   000082   A8..         MOV       R0,?XSP + 0
   \   000084   A9..         MOV       R1,?XSP + 1
   \   000086   88..         MOV       ?V8,R0
   \   000088   89..         MOV       ?V9,R1
   \   00008A   78..         MOV       R0,#?V8
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   E0           MOVX      A,@DPTR
   \   000094   FC           MOV       R4,A
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   FD           MOV       R5,A
   \   000098   85..82       MOV       DPL,?V0
   \   00009B   85..83       MOV       DPH,?V1
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   FA           MOV       R2,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   FB           MOV       R3,A
   \   0000A7   E5..         MOV       A,?V0
   \   0000A9   2414         ADD       A,#0x14
   \   0000AB   F582         MOV       DPL,A
   \   0000AD   E4           CLR       A
   \   0000AE   35..         ADDC      A,?V1
   \   0000B0   F583         MOV       DPH,A
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F9           MOV       R1,A
   \   0000B4   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000B7   7402         MOV       A,#0x2
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV       A,R1
   \   0000BD   6059         JZ        ??zclRevertWriteUndividedCmd_3
   \   0000BF   7406         MOV       A,#0x6
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F5..         MOV       ?V0,A
   \   0000C7   A3           INC       DPTR
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   F5..         MOV       ?V1,A
   \   0000CB   EE           MOV       A,R6
   \   0000CC   2403         ADD       A,#0x3
   \   0000CE   FE           MOV       R6,A
   \   0000CF   5001         JNC       ??zclRevertWriteUndividedCmd_4
   \   0000D1   0F           INC       R7
   \                     ??zclRevertWriteUndividedCmd_4:
   \   0000D2   E5..         MOV       A,?V0
   \   0000D4   45..         ORL       A,?V1
   \   0000D6   7003         JNZ       $+5
   \   0000D8   02....       LJMP      ??zclRevertWriteUndividedCmd_1 & 0xFFFF
   \   0000DB                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000DB   8E82         MOV       DPL,R6
   \   0000DD   8F83         MOV       DPH,R7
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   FA           MOV       R2,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   FB           MOV       R3,A
   \   0000E4   7404         MOV       A,#0x4
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   F9           MOV       R1,A
   \   0000EB   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000EE   8A..         MOV       ?V8,R2
   \   0000F0   8B..         MOV       ?V9,R3
   \   0000F2   AC..         MOV       R4,?V8
   \   0000F4   AD..         MOV       R5,?V9
   \   0000F6                ; Setup parameters for call to function osal_memcpy
   \   0000F6   8E82         MOV       DPL,R6
   \   0000F8   8F83         MOV       DPH,R7
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   F5..         MOV       ?V8,A
   \   0000FD   A3           INC       DPTR
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   F5..         MOV       ?V9,A
   \   000101   75..00       MOV       ?V10,#0x0
   \   000104   78..         MOV       R0,#?V8
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000109   AA..         MOV       R2,?V0
   \   00010B   AB..         MOV       R3,?V1
   \   00010D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000110   7403         MOV       A,#0x3
   \   000112   12....       LCALL     ?DEALLOC_XSTACK8
   \   000115   02....       LJMP      ??zclRevertWriteUndividedCmd_2 & 0xFFFF
   4680            } // for loop
   4681          }
   \                     ??zclRevertWriteUndividedCmd_3:
   \   000118   7408         MOV       A,#0x8
   \   00011A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011D   7F0E         MOV       R7,#0xe
   \   00011F   02....       LJMP      ?BANKED_LEAVE_XDATA
   4682          
   4683          /*********************************************************************
   4684           * @fn      zclProcessInWriteUndividedCmd
   4685           *
   4686           * @brief   Process the "Profile" Write Undivided Command
   4687           *
   4688           * @param   pInMsg - incoming message to process
   4689           *
   4690           * @return  TRUE if command processed. FALSE, otherwise.
   4691           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4692          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   4693          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   4694            zclWriteCmd_t *writeCmd;
   4695            zclWriteRspCmd_t *writeRspCmd;
   4696            zclAttrRec_t attrRec;
   4697            uint16 dataLen;
   4698            uint16 curLen = 0;
   \   00000E   75..00       MOV       ?V8,#0x0
   \   000011   75..00       MOV       ?V9,#0x0
   4699            uint8 j = 0;
   \   000014   7E00         MOV       R6,#0x0
   4700            uint8 i;
   4701          
   4702            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000016   EA           MOV       A,R2
   \   000017   240C         ADD       A,#0xc
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   35..         ADDC      A,?V5
   \   00001E   F583         MOV       DPH,A
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F8           MOV       R0,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   E8           MOV       A,R0
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   E9           MOV       A,R1
   \   00002E   F0           MOVX      @DPTR,A
   4703          
   4704            // Allocate space for Write Response Command
   4705            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4706                             + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F8           MOV       R0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F583         MOV       DPH,A
   \   00003A   8882         MOV       DPL,R0
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   75F003       MOV       B,#0x3
   \   000040   A4           MUL       AB
   \   000041   A9F0         MOV       R1,B
   \   000043   2401         ADD       A,#0x1
   \   000045   FA           MOV       R2,A
   \   000046   E4           CLR       A
   \   000047   39           ADDC      A,R1
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004C   8A..         MOV       ?V0,R2
   \   00004E   8B..         MOV       ?V1,R3
   4707            if ( writeRspCmd == NULL )
   \   000050   EA           MOV       A,R2
   \   000051   4B           ORL       A,R3
   \   000052   7003         JNZ       $+5
   \   000054   02....       LJMP      ??zclProcessInWriteUndividedCmd_0 & 0xFFFF
   4708            {
   4709              return FALSE; // EMBEDDED RETURN
   4710            }
   4711          
   4712            // If any attribute cannot be written, no attribute values are changed. Hence,
   4713            // make sure all the attributes are supported and writable
   4714            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000057   7F00         MOV       R7,#0x0
   \   000059   8062         SJMP      ??zclProcessInWriteUndividedCmd_1
   4715            {
   4716              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4717          
   4718              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4719                                    statusRec->attrID, &attrRec ) )
   4720              {
   4721                // Attribute is not supported - stop here
   4722                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4723                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4724                break;
   4725              }
   4726          
   4727              if ( statusRec->dataType != attrRec.attr.dataType )
   4728              {
   4729                // Attribute data type is incorrect - stope here
   4730                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4731                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4732                break;
   4733              }
   4734          
   4735              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   4736              {
   4737                // Attribute is not writable - stop here
   4738                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   4739                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4740                break;
   4741              }
   4742          
   4743              if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
   4744              {
   4745                // Not authorized to write - stop here
   4746                writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
   4747                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4748                break;
   4749              }
   4750          
   4751              // Attribute Data length
   4752              if ( attrRec.attr.dataPtr != NULL )
   4753              {
   4754                dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
   4755              }
   4756              else // Use CB
   4757              {
   4758                dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4759                                                       statusRec->attrID );
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   00005B   85..82       MOV       DPL,?V4
   \   00005E   85..83       MOV       DPH,?V5
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F8           MOV       R0,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F9           MOV       R1,A
   \   000066                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   000066   85..82       MOV       DPL,?V2
   \   000069   85..83       MOV       DPH,?V3
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FC           MOV       R4,A
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   FD           MOV       R5,A
   \   000071   8882         MOV       DPL,R0
   \   000073   8983         MOV       DPH,R1
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   FA           MOV       R2,A
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FB           MOV       R3,A
   \   00007E   E8           MOV       A,R0
   \   00007F   2414         ADD       A,#0x14
   \   000081   F582         MOV       DPL,A
   \   000083   E4           CLR       A
   \   000084   39           ADDC      A,R1
   \   000085   F583         MOV       DPH,A
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F9           MOV       R1,A
   \   000089   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   00008C   85..82       MOV       DPL,?XSP + 0
   \   00008F   85..83       MOV       DPH,?XSP + 1
   \   000092   EA           MOV       A,R2
   \   000093   F0           MOVX      @DPTR,A
   \   000094   A3           INC       DPTR
   \   000095   EB           MOV       A,R3
   \   000096   F0           MOVX      @DPTR,A
   4760              }
   4761          
   4762              // add padding if needed
   4763              if ( PADDING_NEEDED( dataLen ) )
   \   000097   85..82       MOV       DPL,?XSP + 0
   \   00009A   85..83       MOV       DPH,?XSP + 1
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000A0   5009         JNC       ??zclProcessInWriteUndividedCmd_4
   4764              {
   4765                dataLen++;
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   2401         ADD       A,#0x1
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   3400         ADDC      A,#0x0
   \   0000AA   F0           MOVX      @DPTR,A
   4766              }
   4767          
   4768              curLen += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   0000AB   85..82       MOV       DPL,?XSP + 0
   \   0000AE   85..83       MOV       DPH,?XSP + 1
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   25..         ADD       A,?V8
   \   0000B4   F5..         MOV       ?V8,A
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   35..         ADDC      A,?V9
   \   0000BA   F5..         MOV       ?V9,A
   \   0000BC   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   0000BD   7402         MOV       A,#0x2
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F8           MOV       R0,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   F583         MOV       DPH,A
   \   0000C8   8882         MOV       DPL,R0
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   F8           MOV       R0,A
   \   0000CC   EF           MOV       A,R7
   \   0000CD   C3           CLR       C
   \   0000CE   98           SUBB      A,R0
   \   0000CF   4003         JC        $+5
   \   0000D1   02....       LJMP      ??zclProcessInWriteUndividedCmd_5 & 0xFFFF
   \   0000D4   EF           MOV       A,R7
   \   0000D5   75F005       MOV       B,#0x5
   \   0000D8   A4           MUL       AB
   \   0000D9   F8           MOV       R0,A
   \   0000DA   A9F0         MOV       R1,B
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   28           ADD       A,R0
   \   0000E3   FA           MOV       R2,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   39           ADDC      A,R1
   \   0000E7   8A82         MOV       DPL,R2
   \   0000E9   F583         MOV       DPH,A
   \   0000EB   A3           INC       DPTR
   \   0000EC   8582..       MOV       ?V2,DPL
   \   0000EF   8583..       MOV       ?V3,DPH
   \   0000F2   85..82       MOV       DPL,?V4
   \   0000F5   85..83       MOV       DPH,?V5
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F5..         MOV       ?V6,A
   \   0000FB   A3           INC       DPTR
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F5..         MOV       ?V7,A
   \   0000FF                ; Setup parameters for call to function zclFindAttrRec
   \   0000FF   7404         MOV       A,#0x4
   \   000101   12....       LCALL     ?XSTACK_DISP100_8
   \   000104   88..         MOV       ?V10,R0
   \   000106   89..         MOV       ?V11,R1
   \   000108   78..         MOV       R0,#?V10
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010D   85..82       MOV       DPL,?V2
   \   000110   85..83       MOV       DPH,?V3
   \   000113   E0           MOVX      A,@DPTR
   \   000114   FC           MOV       R4,A
   \   000115   A3           INC       DPTR
   \   000116   E0           MOVX      A,@DPTR
   \   000117   FD           MOV       R5,A
   \   000118   85..82       MOV       DPL,?V6
   \   00011B   85..83       MOV       DPH,?V7
   \   00011E   A3           INC       DPTR
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   E0           MOVX      A,@DPTR
   \   000123   FA           MOV       R2,A
   \   000124   A3           INC       DPTR
   \   000125   E0           MOVX      A,@DPTR
   \   000126   FB           MOV       R3,A
   \   000127   E5..         MOV       A,?V6
   \   000129   2414         ADD       A,#0x14
   \   00012B   F582         MOV       DPL,A
   \   00012D   E4           CLR       A
   \   00012E   35..         ADDC      A,?V7
   \   000130   F583         MOV       DPH,A
   \   000132   E0           MOVX      A,@DPTR
   \   000133   F9           MOV       R1,A
   \   000134   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000137   7402         MOV       A,#0x2
   \   000139   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013C   E9           MOV       A,R1
   \   00013D   7056         JNZ       ??zclProcessInWriteUndividedCmd_6
   \   00013F   85..82       MOV       DPL,?V0
   \   000142   85..83       MOV       DPH,?V1
   \   000145   A3           INC       DPTR
   \   000146   7486         MOV       A,#-0x7a
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   000148   F0           MOVX      @DPTR,A
   \   000149   85..82       MOV       DPL,?V2
   \   00014C   85..83       MOV       DPH,?V3
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   F8           MOV       R0,A
   \   000151   A3           INC       DPTR
   \   000152   E0           MOVX      A,@DPTR
   \   000153   F9           MOV       R1,A
   \   000154   85..82       MOV       DPL,?V0
   \   000157   85..83       MOV       DPH,?V1
   \   00015A   A3           INC       DPTR
   \   00015B   A3           INC       DPTR
   \   00015C   E8           MOV       A,R0
   \   00015D   F0           MOVX      @DPTR,A
   \   00015E   A3           INC       DPTR
   \   00015F   E9           MOV       A,R1
   \   000160   F0           MOVX      @DPTR,A
   \   000161   7E01         MOV       R6,#0x1
   4769            } // for loop
   4770          
   4771            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   000163   EE           MOV       A,R6
   \   000164   85..82       MOV       DPL,?V0
   \   000167   85..83       MOV       DPH,?V1
   \   00016A   F0           MOVX      @DPTR,A
   4772            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   6003         JZ        $+5
   \   00016E   02....       LJMP      ??zclProcessInWriteUndividedCmd_8 & 0xFFFF
   4773            {
   4774              uint8 *curDataPtr;
   4775              zclWriteRec_t *curWriteRec;
   4776          
   4777              // calculate the length of the current data header
   4778              uint8 hdrLen = j * sizeof( zclWriteRec_t );
   \   000171   75F005       MOV       B,#0x5
   \   000174   EE           MOV       A,R6
   \   000175   A4           MUL       AB
   \   000176   FF           MOV       R7,A
   4779          
   4780              // Allocate space to keep a copy of the current data
   4781              curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
   \   000177                ; Setup parameters for call to function osal_mem_alloc
   \   000177   25..         ADD       A,?V8
   \   000179   FA           MOV       R2,A
   \   00017A   E4           CLR       A
   \   00017B   35..         ADDC      A,?V9
   \   00017D   FB           MOV       R3,A
   \   00017E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000181   8A..         MOV       ?V14,R2
   \   000183   8B..         MOV       ?V15,R3
   4782              if ( curWriteRec == NULL )
   \   000185   EA           MOV       A,R2
   \   000186   4B           ORL       A,R3
   \   000187   7067         JNZ       ??zclProcessInWriteUndividedCmd_9
   4783              {
   4784                zcl_mem_free(writeRspCmd );
   \   000189                ; Setup parameters for call to function osal_mem_free
   \   000189   AA..         MOV       R2,?V0
   \   00018B   AB..         MOV       R3,?V1
   \   00018D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4785                return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000190   7900         MOV       R1,#0x0
   \   000192   02....       LJMP      ??zclProcessInWriteUndividedCmd_10 & 0xFFFF
   4786              }
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   000195   7408         MOV       A,#0x8
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   E0           MOVX      A,@DPTR
   \   00019B   F9           MOV       R1,A
   \   00019C   85..82       MOV       DPL,?V2
   \   00019F   85..83       MOV       DPH,?V3
   \   0001A2   A3           INC       DPTR
   \   0001A3   A3           INC       DPTR
   \   0001A4   E0           MOVX      A,@DPTR
   \   0001A5   69           XRL       A,R1
   \   0001A6   600B         JZ        ??zclProcessInWriteUndividedCmd_11
   \   0001A8   85..82       MOV       DPL,?V0
   \   0001AB   85..83       MOV       DPH,?V1
   \   0001AE   A3           INC       DPTR
   \   0001AF   748D         MOV       A,#-0x73
   \   0001B1   8095         SJMP      ??zclProcessInWriteUndividedCmd_7
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   0001B3   7409         MOV       A,#0x9
   \   0001B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B8   E0           MOVX      A,@DPTR
   \   0001B9   A2E1         MOV       C,0xE0 /* A   */.1
   \   0001BB   400B         JC        ??zclProcessInWriteUndividedCmd_12
   \   0001BD   85..82       MOV       DPL,?V0
   \   0001C0   85..83       MOV       DPH,?V1
   \   0001C3   A3           INC       DPTR
   \   0001C4   7488         MOV       A,#-0x78
   \   0001C6   8080         SJMP      ??zclProcessInWriteUndividedCmd_7
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   0001C8   E0           MOVX      A,@DPTR
   \   0001C9   A2E5         MOV       C,0xE0 /* A   */.5
   \   0001CB   500C         JNC       ??zclProcessInWriteUndividedCmd_13
   \   0001CD   85..82       MOV       DPL,?V0
   \   0001D0   85..83       MOV       DPH,?V1
   \   0001D3   A3           INC       DPTR
   \   0001D4   747E         MOV       A,#0x7e
   \   0001D6   02....       LJMP      ??zclProcessInWriteUndividedCmd_7 & 0xFFFF
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   0001D9   740A         MOV       A,#0xa
   \   0001DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DE   E0           MOVX      A,@DPTR
   \   0001DF   FA           MOV       R2,A
   \   0001E0   A3           INC       DPTR
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   FB           MOV       R3,A
   \   0001E3   EA           MOV       A,R2
   \   0001E4   4B           ORL       A,R3
   \   0001E5   7003         JNZ       $+5
   \   0001E7   02....       LJMP      ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   \   0001EA                ; Setup parameters for call to function zclGetAttrDataLength
   \   0001EA   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0001ED   02....       LJMP      ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   4787          
   4788              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   0001F0   EA           MOV       A,R2
   \   0001F1   2F           ADD       A,R7
   \   0001F2   F5..         MOV       ?V8,A
   \   0001F4   E4           CLR       A
   \   0001F5   3B           ADDC      A,R3
   \   0001F6   F5..         MOV       ?V9,A
   4789          
   4790              // Write the new data over
   4791              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   0001F8   7F00         MOV       R7,#0x0
   \   0001FA   802A         SJMP      ??zclProcessInWriteUndividedCmd_14
   4792              {
   4793                uint8 status;
   4794                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4795                zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
   4796          
   4797                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4798                                      statusRec->attrID, &attrRec ) )
   4799                {
   4800                  break; // should never happen
   4801                }
   4802          
   4803                // Keep a copy of the current data before before writing the new data over
   4804                curStatusRec->attrID = statusRec->attrID;
   4805                curStatusRec->attrData = curDataPtr;
   4806          
   4807                if ( attrRec.attr.dataPtr != NULL )
   4808                {
   4809                  // Read the current value
   4810                  zclReadAttrData( curDataPtr, &attrRec, &dataLen );
   4811          
   4812                  // Write the new attribute value
   4813                  status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4814                                             &attrRec, statusRec );
   4815                }
   4816                else // Use CBs
   4817                {
   4818                  // Read the current value
   4819                  zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4820                                          statusRec->attrID, curDataPtr, &dataLen );
   4821                  // Write the new attribute value
   4822                  status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4823                                                    &attrRec, statusRec->attrData );
   4824                }
   4825          
   4826                // If successful, a write attribute status record shall NOT be generated
   4827                if ( status != ZCL_STATUS_SUCCESS )
   4828                {
   4829                  writeRspCmd->attrList[j].status = status;
   4830                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4831          
   4832                  // Since this write failed, we need to revert all the pervious writes
   4833                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   4834                  break;
   4835                }
   4836          
   4837                // add padding if needed
   4838                if ( PADDING_NEEDED( dataLen ) )
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   0001FC   85..82       MOV       DPL,?XSP + 0
   \   0001FF   85..83       MOV       DPH,?XSP + 1
   \   000202   E0           MOVX      A,@DPTR
   \   000203   A2E0         MOV       C,0xE0 /* A   */.0
   \   000205   5009         JNC       ??zclProcessInWriteUndividedCmd_16
   4839                {
   4840                  dataLen++;
   \   000207   E0           MOVX      A,@DPTR
   \   000208   2401         ADD       A,#0x1
   \   00020A   F0           MOVX      @DPTR,A
   \   00020B   A3           INC       DPTR
   \   00020C   E0           MOVX      A,@DPTR
   \   00020D   3400         ADDC      A,#0x0
   \   00020F   F0           MOVX      @DPTR,A
   4841                }
   4842          
   4843                curDataPtr += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   000210   85..82       MOV       DPL,?XSP + 0
   \   000213   85..83       MOV       DPH,?XSP + 1
   \   000216   E0           MOVX      A,@DPTR
   \   000217   F8           MOV       R0,A
   \   000218   A3           INC       DPTR
   \   000219   E0           MOVX      A,@DPTR
   \   00021A   F9           MOV       R1,A
   \   00021B   E5..         MOV       A,?V8
   \   00021D   28           ADD       A,R0
   \   00021E   F5..         MOV       ?V8,A
   \   000220   E5..         MOV       A,?V9
   \   000222   39           ADDC      A,R1
   \   000223   F5..         MOV       ?V9,A
   \   000225   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   000226   7402         MOV       A,#0x2
   \   000228   12....       LCALL     ?XSTACK_DISP0_8
   \   00022B   E0           MOVX      A,@DPTR
   \   00022C   F8           MOV       R0,A
   \   00022D   A3           INC       DPTR
   \   00022E   E0           MOVX      A,@DPTR
   \   00022F   F583         MOV       DPH,A
   \   000231   8882         MOV       DPL,R0
   \   000233   E0           MOVX      A,@DPTR
   \   000234   F8           MOV       R0,A
   \   000235   EF           MOV       A,R7
   \   000236   C3           CLR       C
   \   000237   98           SUBB      A,R0
   \   000238   4003         JC        $+5
   \   00023A   02....       LJMP      ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   00023D   EF           MOV       A,R7
   \   00023E   75F005       MOV       B,#0x5
   \   000241   A4           MUL       AB
   \   000242   F8           MOV       R0,A
   \   000243   A9F0         MOV       R1,B
   \   000245   7402         MOV       A,#0x2
   \   000247   12....       LCALL     ?XSTACK_DISP0_8
   \   00024A   E0           MOVX      A,@DPTR
   \   00024B   28           ADD       A,R0
   \   00024C   FA           MOV       R2,A
   \   00024D   A3           INC       DPTR
   \   00024E   E0           MOVX      A,@DPTR
   \   00024F   39           ADDC      A,R1
   \   000250   8A82         MOV       DPL,R2
   \   000252   F583         MOV       DPH,A
   \   000254   A3           INC       DPTR
   \   000255   8582..       MOV       ?V2,DPL
   \   000258   8583..       MOV       ?V3,DPH
   \   00025B   E5..         MOV       A,?V14
   \   00025D   28           ADD       A,R0
   \   00025E   F5..         MOV       ?V12,A
   \   000260   E5..         MOV       A,?V15
   \   000262   39           ADDC      A,R1
   \   000263   F5..         MOV       ?V13,A
   \   000265   85..82       MOV       DPL,?V4
   \   000268   85..83       MOV       DPH,?V5
   \   00026B   E0           MOVX      A,@DPTR
   \   00026C   F5..         MOV       ?V6,A
   \   00026E   A3           INC       DPTR
   \   00026F   E0           MOVX      A,@DPTR
   \   000270   F5..         MOV       ?V7,A
   \   000272                ; Setup parameters for call to function zclFindAttrRec
   \   000272   7404         MOV       A,#0x4
   \   000274   12....       LCALL     ?XSTACK_DISP100_8
   \   000277   88..         MOV       ?V10,R0
   \   000279   89..         MOV       ?V11,R1
   \   00027B   78..         MOV       R0,#?V10
   \   00027D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000280   85..82       MOV       DPL,?V2
   \   000283   85..83       MOV       DPH,?V3
   \   000286   E0           MOVX      A,@DPTR
   \   000287   FC           MOV       R4,A
   \   000288   A3           INC       DPTR
   \   000289   E0           MOVX      A,@DPTR
   \   00028A   FD           MOV       R5,A
   \   00028B   85..82       MOV       DPL,?V6
   \   00028E   85..83       MOV       DPH,?V7
   \   000291   A3           INC       DPTR
   \   000292   A3           INC       DPTR
   \   000293   A3           INC       DPTR
   \   000294   A3           INC       DPTR
   \   000295   E0           MOVX      A,@DPTR
   \   000296   FA           MOV       R2,A
   \   000297   A3           INC       DPTR
   \   000298   E0           MOVX      A,@DPTR
   \   000299   FB           MOV       R3,A
   \   00029A   E5..         MOV       A,?V6
   \   00029C   2414         ADD       A,#0x14
   \   00029E   F582         MOV       DPL,A
   \   0002A0   E4           CLR       A
   \   0002A1   35..         ADDC      A,?V7
   \   0002A3   F583         MOV       DPH,A
   \   0002A5   E0           MOVX      A,@DPTR
   \   0002A6   F9           MOV       R1,A
   \   0002A7   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0002AA   7402         MOV       A,#0x2
   \   0002AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002AF   E9           MOV       A,R1
   \   0002B0   7003         JNZ       $+5
   \   0002B2   02....       LJMP      ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   0002B5   85..82       MOV       DPL,?V2
   \   0002B8   85..83       MOV       DPH,?V3
   \   0002BB   E0           MOVX      A,@DPTR
   \   0002BC   F8           MOV       R0,A
   \   0002BD   A3           INC       DPTR
   \   0002BE   E0           MOVX      A,@DPTR
   \   0002BF   F9           MOV       R1,A
   \   0002C0   85..82       MOV       DPL,?V12
   \   0002C3   85..83       MOV       DPH,?V13
   \   0002C6   E8           MOV       A,R0
   \   0002C7   F0           MOVX      @DPTR,A
   \   0002C8   A3           INC       DPTR
   \   0002C9   E9           MOV       A,R1
   \   0002CA   F0           MOVX      @DPTR,A
   \   0002CB   85..82       MOV       DPL,?V12
   \   0002CE   85..83       MOV       DPH,?V13
   \   0002D1   A3           INC       DPTR
   \   0002D2   A3           INC       DPTR
   \   0002D3   A3           INC       DPTR
   \   0002D4   E5..         MOV       A,?V8
   \   0002D6   F0           MOVX      @DPTR,A
   \   0002D7   A3           INC       DPTR
   \   0002D8   E5..         MOV       A,?V9
   \   0002DA   F0           MOVX      @DPTR,A
   \   0002DB   740A         MOV       A,#0xa
   \   0002DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E0   E0           MOVX      A,@DPTR
   \   0002E1   F8           MOV       R0,A
   \   0002E2   A3           INC       DPTR
   \   0002E3   E0           MOVX      A,@DPTR
   \   0002E4   F9           MOV       R1,A
   \   0002E5   E8           MOV       A,R0
   \   0002E6   49           ORL       A,R1
   \   0002E7   6050         JZ        ??zclProcessInWriteUndividedCmd_18
   \   0002E9                ; Setup parameters for call to function zclReadAttrData
   \   0002E9   A8..         MOV       R0,?XSP + 0
   \   0002EB   A9..         MOV       R1,?XSP + 1
   \   0002ED   88..         MOV       ?V6,R0
   \   0002EF   89..         MOV       ?V7,R1
   \   0002F1   78..         MOV       R0,#?V6
   \   0002F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002F6   7406         MOV       A,#0x6
   \   0002F8   12....       LCALL     ?XSTACK_DISP102_8
   \   0002FB   AA..         MOV       R2,?V8
   \   0002FD   AB..         MOV       R3,?V9
   \   0002FF   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000302   7402         MOV       A,#0x2
   \   000304   12....       LCALL     ?DEALLOC_XSTACK8
   \   000307   85..82       MOV       DPL,?V4
   \   00030A   85..83       MOV       DPH,?V5
   \   00030D   E0           MOVX      A,@DPTR
   \   00030E   F5..         MOV       ?V6,A
   \   000310   A3           INC       DPTR
   \   000311   E0           MOVX      A,@DPTR
   \   000312   F5..         MOV       ?V7,A
   \   000314                ; Setup parameters for call to function zclWriteAttrData
   \   000314   78..         MOV       R0,#?V2
   \   000316   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000319   7406         MOV       A,#0x6
   \   00031B   12....       LCALL     ?XSTACK_DISP102_8
   \   00031E   E5..         MOV       A,?V6
   \   000320   2406         ADD       A,#0x6
   \   000322   FA           MOV       R2,A
   \   000323   E4           CLR       A
   \   000324   35..         ADDC      A,?V7
   \   000326   FB           MOV       R3,A
   \   000327   E5..         MOV       A,?V6
   \   000329   2414         ADD       A,#0x14
   \   00032B   F582         MOV       DPL,A
   \   00032D   E4           CLR       A
   \   00032E   35..         ADDC      A,?V7
   \   000330   F583         MOV       DPH,A
   \   000332   E0           MOVX      A,@DPTR
   \   000333   F9           MOV       R1,A
   \   000334   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   000337   807F         SJMP      ??zclProcessInWriteUndividedCmd_19
   \                     ??zclProcessInWriteUndividedCmd_18:
   \   000339   85..82       MOV       DPL,?V4
   \   00033C   85..83       MOV       DPH,?V5
   \   00033F   E0           MOVX      A,@DPTR
   \   000340   F5..         MOV       ?V6,A
   \   000342   A3           INC       DPTR
   \   000343   E0           MOVX      A,@DPTR
   \   000344   F5..         MOV       ?V7,A
   \   000346                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000346   A8..         MOV       R0,?XSP + 0
   \   000348   A9..         MOV       R1,?XSP + 1
   \   00034A   88..         MOV       ?V10,R0
   \   00034C   89..         MOV       ?V11,R1
   \   00034E   78..         MOV       R0,#?V10
   \   000350   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000353   78..         MOV       R0,#?V8
   \   000355   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000358   85..82       MOV       DPL,?V2
   \   00035B   85..83       MOV       DPH,?V3
   \   00035E   E0           MOVX      A,@DPTR
   \   00035F   FC           MOV       R4,A
   \   000360   A3           INC       DPTR
   \   000361   E0           MOVX      A,@DPTR
   \   000362   FD           MOV       R5,A
   \   000363   85..82       MOV       DPL,?V6
   \   000366   85..83       MOV       DPH,?V7
   \   000369   A3           INC       DPTR
   \   00036A   A3           INC       DPTR
   \   00036B   A3           INC       DPTR
   \   00036C   A3           INC       DPTR
   \   00036D   E0           MOVX      A,@DPTR
   \   00036E   FA           MOV       R2,A
   \   00036F   A3           INC       DPTR
   \   000370   E0           MOVX      A,@DPTR
   \   000371   FB           MOV       R3,A
   \   000372   E5..         MOV       A,?V6
   \   000374   2414         ADD       A,#0x14
   \   000376   F582         MOV       DPL,A
   \   000378   E4           CLR       A
   \   000379   35..         ADDC      A,?V7
   \   00037B   F583         MOV       DPH,A
   \   00037D   E0           MOVX      A,@DPTR
   \   00037E   F9           MOV       R1,A
   \   00037F   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   000382   7404         MOV       A,#0x4
   \   000384   12....       LCALL     ?DEALLOC_XSTACK8
   \   000387   85..82       MOV       DPL,?V4
   \   00038A   85..83       MOV       DPH,?V5
   \   00038D   E0           MOVX      A,@DPTR
   \   00038E   F8           MOV       R0,A
   \   00038F   A3           INC       DPTR
   \   000390   E0           MOVX      A,@DPTR
   \   000391   F9           MOV       R1,A
   \   000392                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000392   85..82       MOV       DPL,?V2
   \   000395   85..83       MOV       DPH,?V3
   \   000398   A3           INC       DPTR
   \   000399   A3           INC       DPTR
   \   00039A   A3           INC       DPTR
   \   00039B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00039E   7406         MOV       A,#0x6
   \   0003A0   12....       LCALL     ?XSTACK_DISP102_8
   \   0003A3   E8           MOV       A,R0
   \   0003A4   2406         ADD       A,#0x6
   \   0003A6   FA           MOV       R2,A
   \   0003A7   E4           CLR       A
   \   0003A8   39           ADDC      A,R1
   \   0003A9   FB           MOV       R3,A
   \   0003AA   E8           MOV       A,R0
   \   0003AB   2414         ADD       A,#0x14
   \   0003AD   F582         MOV       DPL,A
   \   0003AF   E4           CLR       A
   \   0003B0   39           ADDC      A,R1
   \   0003B1   F583         MOV       DPH,A
   \   0003B3   E0           MOVX      A,@DPTR
   \   0003B4   F9           MOV       R1,A
   \   0003B5   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \                     ??zclProcessInWriteUndividedCmd_19:
   \   0003B8   7402         MOV       A,#0x2
   \   0003BA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003BD   E9           MOV       A,R1
   \   0003BE   FA           MOV       R2,A
   \   0003BF   EA           MOV       A,R2
   \   0003C0   7003         JNZ       $+5
   \   0003C2   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   0003C5   EE           MOV       A,R6
   \   0003C6   75F003       MOV       B,#0x3
   \   0003C9   A4           MUL       AB
   \   0003CA   F8           MOV       R0,A
   \   0003CB   A9F0         MOV       R1,B
   \   0003CD   E5..         MOV       A,?V0
   \   0003CF   28           ADD       A,R0
   \   0003D0   F8           MOV       R0,A
   \   0003D1   E5..         MOV       A,?V1
   \   0003D3   39           ADDC      A,R1
   \   0003D4   F9           MOV       R1,A
   \   0003D5   EA           MOV       A,R2
   \   0003D6   8882         MOV       DPL,R0
   \   0003D8   8983         MOV       DPH,R1
   \   0003DA   A3           INC       DPTR
   \   0003DB   F0           MOVX      @DPTR,A
   \   0003DC   85..82       MOV       DPL,?V2
   \   0003DF   85..83       MOV       DPH,?V3
   \   0003E2   E0           MOVX      A,@DPTR
   \   0003E3   FA           MOV       R2,A
   \   0003E4   A3           INC       DPTR
   \   0003E5   E0           MOVX      A,@DPTR
   \   0003E6   FB           MOV       R3,A
   \   0003E7   8882         MOV       DPL,R0
   \   0003E9   8983         MOV       DPH,R1
   \   0003EB   A3           INC       DPTR
   \   0003EC   A3           INC       DPTR
   \   0003ED   EA           MOV       A,R2
   \   0003EE   F0           MOVX      @DPTR,A
   \   0003EF   A3           INC       DPTR
   \   0003F0   EB           MOV       A,R3
   \   0003F1   F0           MOVX      @DPTR,A
   \   0003F2   0E           INC       R6
   \   0003F3                ; Setup parameters for call to function zclRevertWriteUndividedCmd
   \   0003F3   EF           MOV       A,R7
   \   0003F4   F5..         MOV       ?V2,A
   \   0003F6   75..00       MOV       ?V3,#0x0
   \   0003F9   78..         MOV       R0,#?V2
   \   0003FB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003FE   AC..         MOV       R4,?V14
   \   000400   AD..         MOV       R5,?V15
   \   000402   AA..         MOV       R2,?V4
   \   000404   AB..         MOV       R3,?V5
   \   000406   12....       LCALL     `??zclRevertWriteUndividedCmd::?relay`; Banked call to: zclRevertWriteUndividedCmd
   \   000409   7402         MOV       A,#0x2
   \   00040B   12....       LCALL     ?DEALLOC_XSTACK8
   4844              } // for loop
   4845          
   4846              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   00040E   EE           MOV       A,R6
   \   00040F   85..82       MOV       DPL,?V0
   \   000412   85..83       MOV       DPH,?V1
   \   000415   F0           MOVX      @DPTR,A
   4847              if ( writeRspCmd->numAttr  == 0 )
   \   000416   E0           MOVX      A,@DPTR
   \   000417   700B         JNZ       ??zclProcessInWriteUndividedCmd_20
   4848              {
   4849                // Since all records were written successful, include a single status record
   4850                // in the resonse command with the status field set to SUCCESS and the
   4851                // attribute ID field omitted.
   4852                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000419   A3           INC       DPTR
   \   00041A   E4           CLR       A
   \   00041B   F0           MOVX      @DPTR,A
   4853                writeRspCmd->numAttr = 1;
   \   00041C   85..82       MOV       DPL,?V0
   \   00041F   85..83       MOV       DPH,?V1
   \   000422   04           INC       A
   \   000423   F0           MOVX      @DPTR,A
   4854              }
   4855          
   4856              zcl_mem_free( curWriteRec );
   \                     ??zclProcessInWriteUndividedCmd_20:
   \   000424                ; Setup parameters for call to function osal_mem_free
   \   000424   AA..         MOV       R2,?V14
   \   000426   AB..         MOV       R3,?V15
   \   000428   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4857            }
   4858          
   4859            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4860                              pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4861                              true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   00042B   85..82       MOV       DPL,?V4
   \   00042E   85..83       MOV       DPH,?V5
   \   000431   E0           MOVX      A,@DPTR
   \   000432   FE           MOV       R6,A
   \   000433   A3           INC       DPTR
   \   000434   E0           MOVX      A,@DPTR
   \   000435   FF           MOV       R7,A
   \   000436                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000436   85..82       MOV       DPL,?V4
   \   000439   85..83       MOV       DPH,?V5
   \   00043C   A3           INC       DPTR
   \   00043D   A3           INC       DPTR
   \   00043E   A3           INC       DPTR
   \   00043F   A3           INC       DPTR
   \   000440   A3           INC       DPTR
   \   000441   A3           INC       DPTR
   \   000442   E0           MOVX      A,@DPTR
   \   000443   F5..         MOV       ?V2,A
   \   000445   78..         MOV       R0,#?V2
   \   000447   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00044A   75..01       MOV       ?V2,#0x1
   \   00044D   78..         MOV       R0,#?V2
   \   00044F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000452   85..82       MOV       DPL,?V4
   \   000455   85..83       MOV       DPH,?V5
   \   000458   A3           INC       DPTR
   \   000459   A3           INC       DPTR
   \   00045A   E0           MOVX      A,@DPTR
   \   00045B   13           RRC       A
   \   00045C   13           RRC       A
   \   00045D   13           RRC       A
   \   00045E   541F         ANL       A,#0x1f
   \   000460   6401         XRL       A,#0x1
   \   000462   5401         ANL       A,#0x1
   \   000464   F5..         MOV       ?V2,A
   \   000466   78..         MOV       R0,#?V2
   \   000468   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00046B   78..         MOV       R0,#?V0
   \   00046D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000470   8E82         MOV       DPL,R6
   \   000472   8F83         MOV       DPH,R7
   \   000474   A3           INC       DPTR
   \   000475   A3           INC       DPTR
   \   000476   A3           INC       DPTR
   \   000477   A3           INC       DPTR
   \   000478   E0           MOVX      A,@DPTR
   \   000479   FC           MOV       R4,A
   \   00047A   A3           INC       DPTR
   \   00047B   E0           MOVX      A,@DPTR
   \   00047C   FD           MOV       R5,A
   \   00047D   EE           MOV       A,R6
   \   00047E   2406         ADD       A,#0x6
   \   000480   FA           MOV       R2,A
   \   000481   E4           CLR       A
   \   000482   3F           ADDC      A,R7
   \   000483   FB           MOV       R3,A
   \   000484   EE           MOV       A,R6
   \   000485   2414         ADD       A,#0x14
   \   000487   F582         MOV       DPL,A
   \   000489   E4           CLR       A
   \   00048A   3F           ADDC      A,R7
   \   00048B   F583         MOV       DPH,A
   \   00048D   E0           MOVX      A,@DPTR
   \   00048E   F9           MOV       R1,A
   \   00048F   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   000492   7405         MOV       A,#0x5
   \   000494   12....       LCALL     ?DEALLOC_XSTACK8
   4862            zcl_mem_free( writeRspCmd );
   \   000497                ; Setup parameters for call to function osal_mem_free
   \   000497   AA..         MOV       R2,?V0
   \   000499   AB..         MOV       R3,?V1
   \   00049B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4863          
   4864            return TRUE;
   \   00049E   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   0004A0   740C         MOV       A,#0xc
   \   0004A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004A5   7F10         MOV       R7,#0x10
   \   0004A7   02....       LJMP      ?BANKED_LEAVE_XDATA
   4865          }
   4866          #endif // ZCL_WRITE
   4867          
   4868          #ifdef ZCL_DISCOVER
   4869          /*********************************************************************
   4870           * @fn      zclProcessInDiscAttrs
   4871           *
   4872           * @brief   Process the "Profile" Discover Attributes Commands
   4873           *
   4874           * @param   pInMsg - incoming message to process
   4875           *
   4876           * @return  TRUE if command processed. FALSE, otherwise.
   4877           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4878          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscAttrs:
   4879          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   4880            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4881            zclAttrRec_t attrRec;
   4882            uint16 attrID;
   4883            uint8 numAttrs;
   4884            uint8 i;
   4885          
   4886            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
   4887          
   4888            // Find out the number of attributes supported within the specified range
   4889            for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
   \   00001E   75..00       MOV       ?V2,#0x0
   \   000021   85..82       MOV       DPL,?V0
   \   000024   F583         MOV       DPH,A
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   \   00002B   85..82       MOV       DPL,?XSP + 0
   \   00002E   85..83       MOV       DPH,?XSP + 1
   \   000031   E8           MOV       A,R0
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   E9           MOV       A,R1
   \   000035   8010         SJMP      ??zclProcessInDiscAttrs_0
   \                     ??zclProcessInDiscAttrs_1:
   \   000037   05..         INC       ?V2
   \   000039   85..82       MOV       DPL,?XSP + 0
   \   00003C   85..83       MOV       DPH,?XSP + 1
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   2401         ADD       A,#0x1
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   3400         ADDC      A,#0x0
   \                     ??zclProcessInDiscAttrs_0:
   \   000047   F0           MOVX      @DPTR,A
   \   000048   85..82       MOV       DPL,?V0
   \   00004B   85..83       MOV       DPH,?V1
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F8           MOV       R0,A
   \   000052   E5..         MOV       A,?V2
   \   000054   C3           CLR       C
   \   000055   98           SUBB      A,R0
   \   000056   505E         JNC       ??zclProcessInDiscAttrs_2
   4890            {
   4891              // finds the next attribute on this endpoint/cluster after the range.
   4892              // attributes must be in numerical order in the list.
   4893              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F8           MOV       R0,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   88..         MOV       ?V4,R0
   \   000062   F5..         MOV       ?V5,A
   \   000064                ; Setup parameters for call to function zclFindNextAttrRec
   \   000064   7402         MOV       A,#0x2
   \   000066   12....       LCALL     ?XSTACK_DISP100_8
   \   000069   88..         MOV       ?V6,R0
   \   00006B   89..         MOV       ?V7,R1
   \   00006D   78..         MOV       R0,#?V6
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000072   7402         MOV       A,#0x2
   \   000074   12....       LCALL     ?XSTACK_DISP100_8
   \   000077   88..         MOV       ?V6,R0
   \   000079   89..         MOV       ?V7,R1
   \   00007B   78..         MOV       R0,#?V6
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000080   8E82         MOV       DPL,R6
   \   000082   8F83         MOV       DPH,R7
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   13           RRC       A
   \   000088   13           RRC       A
   \   000089   13           RRC       A
   \   00008A   541F         ANL       A,#0x1f
   \   00008C   5401         ANL       A,#0x1
   \   00008E   FC           MOV       R4,A
   \   00008F   85..82       MOV       DPL,?V4
   \   000092   85..83       MOV       DPH,?V5
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   FA           MOV       R2,A
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   FB           MOV       R3,A
   \   00009E   E5..         MOV       A,?V4
   \   0000A0   2414         ADD       A,#0x14
   \   0000A2   F582         MOV       DPL,A
   \   0000A4   E4           CLR       A
   \   0000A5   35..         ADDC      A,?V5
   \   0000A7   F583         MOV       DPH,A
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   F9           MOV       R1,A
   \   0000AB   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   0000AE   7404         MOV       A,#0x4
   \   0000B0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B3   E9           MOV       A,R1
   \   0000B4   7081         JNZ       ??zclProcessInDiscAttrs_1
   4894              {
   4895                break;
   4896              }
   4897            }
   4898          
   4899            numAttrs = i;  // store range of attributes in buffer
   4900          
   4901              // Process message for either attributes or extended attributes
   4902            if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
   \                     ??zclProcessInDiscAttrs_2:
   \   0000B6   8E82         MOV       DPL,R6
   \   0000B8   8F83         MOV       DPH,R7
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   F8           MOV       R0,A
   \   0000C3   740C         MOV       A,#0xc
   \   0000C5   68           XRL       A,R0
   \   0000C6   700F         JNZ       ??zclProcessInDiscAttrs_3
   4903            {
   4904              zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   0000C8                ; Setup parameters for call to function zclProcessInDiscAttrsCmd
   \   0000C8   A9..         MOV       R1,?V2
   \   0000CA   AC..         MOV       R4,?V0
   \   0000CC   AD..         MOV       R5,?V1
   \   0000CE   EE           MOV       A,R6
   \   0000CF   FA           MOV       R2,A
   \   0000D0   EF           MOV       A,R7
   \   0000D1   FB           MOV       R3,A
   \   0000D2   12....       LCALL     `??zclProcessInDiscAttrsCmd::?relay`; Banked call to: zclProcessInDiscAttrsCmd
   \   0000D5   8012         SJMP      ??zclProcessInDiscAttrs_4
   4905            }
   4906            else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
   \                     ??zclProcessInDiscAttrs_3:
   \   0000D7   7415         MOV       A,#0x15
   \   0000D9   68           XRL       A,R0
   \   0000DA   700D         JNZ       ??zclProcessInDiscAttrs_4
   4907            {
   4908              zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   0000DC                ; Setup parameters for call to function zclProcessInDiscAttrsExtCmd
   \   0000DC   A9..         MOV       R1,?V2
   \   0000DE   AC..         MOV       R4,?V0
   \   0000E0   AD..         MOV       R5,?V1
   \   0000E2   EE           MOV       A,R6
   \   0000E3   FA           MOV       R2,A
   \   0000E4   EF           MOV       A,R7
   \   0000E5   FB           MOV       R3,A
   \   0000E6   12....       LCALL     `??zclProcessInDiscAttrsExtCmd::?relay`; Banked call to: zclProcessInDiscAttrsExtCmd
   4909            }
   4910          
   4911            return TRUE;
   \                     ??zclProcessInDiscAttrs_4:
   \   0000E9   7901         MOV       R1,#0x1
   \   0000EB   740A         MOV       A,#0xa
   \   0000ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F0   7F08         MOV       R7,#0x8
   \   0000F2   02....       LJMP      ?BANKED_LEAVE_XDATA
   4912          }
   4913          
   4914          /*********************************************************************
   4915           * @fn      zclProcessInDiscAttrsCmd
   4916           *
   4917           * @brief   Process the Discover Attributes Command
   4918           *
   4919           * @param   pInMsg - incoming message to process
   4920           *
   4921           * @param   pDiscoverCmd - structure from requesting command
   4922           *
   4923           * @param   attrLenBuf - describes the amount of attributes to be processed
   4924           *
   4925           * @return  none
   4926           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4927          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsCmd:
   4928          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V4,R4
   \   000010   8D..         MOV       ?V5,R5
   \   000012   E9           MOV       A,R1
   \   000013   FE           MOV       R6,A
   4929            zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
   4930            uint8 discComplete = TRUE;
   \   000014   7F01         MOV       R7,#0x1
   4931            zclAttrRec_t attrRec;
   4932            uint16 attrID;
   4933            uint8 i;
   4934          
   4935            // Allocate space for the response command
   4936            pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
   4937                                                                    + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   75F003       MOV       B,#0x3
   \   000019   A4           MUL       AB
   \   00001A   A9F0         MOV       R1,B
   \   00001C   2402         ADD       A,#0x2
   \   00001E   FA           MOV       R2,A
   \   00001F   E4           CLR       A
   \   000020   39           ADDC      A,R1
   \   000021   FB           MOV       R3,A
   \   000022   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV       ?V0,R2
   \   000027   8B..         MOV       ?V1,R3
   4938            if ( pDiscoverRsp == NULL )
   \   000029   EA           MOV       A,R2
   \   00002A   4B           ORL       A,R3
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??zclProcessInDiscAttrsCmd_0 & 0xFFFF
   4939            {
   4940              return; // EMBEDDED RETURN
   4941            }
   4942          
   4943            if ( numAttrs != 0 )
   \   000030   E5..         MOV       A,?V6
   \   000032   2402         ADD       A,#0x2
   \   000034   F5..         MOV       ?V8,A
   \   000036   E4           CLR       A
   \   000037   35..         ADDC      A,?V7
   \   000039   F5..         MOV       ?V9,A
   \   00003B   EE           MOV       A,R6
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??zclProcessInDiscAttrsCmd_1 & 0xFFFF
   4944            {
   4945              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   000041   75..00       MOV       ?V2,#0x0
   \   000044   85..82       MOV       DPL,?V4
   \   000047   85..83       MOV       DPH,?V5
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F8           MOV       R0,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   85..82       MOV       DPL,?XSP + 0
   \   000052   85..83       MOV       DPH,?XSP + 1
   \   000055   E8           MOV       A,R0
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   E9           MOV       A,R1
   \   000059   8044         SJMP      ??zclProcessInDiscAttrsCmd_2
   4946              {
   4947                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4948                {
   4949                  break; // should not happen, as numAttrs already calculated
   4950                }
   4951          
   4952                pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
   \                     ??zclProcessInDiscAttrsCmd_3:
   \   00005B   E5..         MOV       A,?V2
   \   00005D   75F003       MOV       B,#0x3
   \   000060   A4           MUL       AB
   \   000061   F8           MOV       R0,A
   \   000062   A9F0         MOV       R1,B
   \   000064   E5..         MOV       A,?V0
   \   000066   28           ADD       A,R0
   \   000067   F8           MOV       R0,A
   \   000068   E5..         MOV       A,?V1
   \   00006A   39           ADDC      A,R1
   \   00006B   F9           MOV       R1,A
   \   00006C   7404         MOV       A,#0x4
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FA           MOV       R2,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   FB           MOV       R3,A
   \   000076   8882         MOV       DPL,R0
   \   000078   8983         MOV       DPH,R1
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   EA           MOV       A,R2
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   A3           INC       DPTR
   \   00007F   EB           MOV       A,R3
   \   000080   F0           MOVX      @DPTR,A
   4953                pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
   \   000081   7406         MOV       A,#0x6
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   E0           MOVX      A,@DPTR
   \   000087   8882         MOV       DPL,R0
   \   000089   8983         MOV       DPH,R1
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   05..         INC       ?V2
   \   000092   85..82       MOV       DPL,?XSP + 0
   \   000095   85..83       MOV       DPH,?XSP + 1
   \   000098   E0           MOVX      A,@DPTR
   \   000099   2F           ADD       A,R7
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   3400         ADDC      A,#0x0
   \                     ??zclProcessInDiscAttrsCmd_2:
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   E5..         MOV       A,?V2
   \   0000A2   C3           CLR       C
   \   0000A3   9E           SUBB      A,R6
   \   0000A4   5062         JNC       ??zclProcessInDiscAttrsCmd_4
   \   0000A6   85..82       MOV       DPL,?V6
   \   0000A9   85..83       MOV       DPH,?V7
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F5..         MOV       ?V4,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F5..         MOV       ?V5,A
   \   0000B3                ; Setup parameters for call to function zclFindNextAttrRec
   \   0000B3   7402         MOV       A,#0x2
   \   0000B5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B8   88..         MOV       ?V10,R0
   \   0000BA   89..         MOV       ?V11,R1
   \   0000BC   78..         MOV       R0,#?V10
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   12....       LCALL     ?XSTACK_DISP100_8
   \   0000C6   88..         MOV       ?V10,R0
   \   0000C8   89..         MOV       ?V11,R1
   \   0000CA   78..         MOV       R0,#?V10
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CF   85..82       MOV       DPL,?V8
   \   0000D2   85..83       MOV       DPH,?V9
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   13           RRC       A
   \   0000D7   13           RRC       A
   \   0000D8   13           RRC       A
   \   0000D9   541F         ANL       A,#0x1f
   \   0000DB   5401         ANL       A,#0x1
   \   0000DD   FC           MOV       R4,A
   \   0000DE   85..82       MOV       DPL,?V4
   \   0000E1   85..83       MOV       DPH,?V5
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   FA           MOV       R2,A
   \   0000EA   A3           INC       DPTR
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   FB           MOV       R3,A
   \   0000ED   E5..         MOV       A,?V4
   \   0000EF   2414         ADD       A,#0x14
   \   0000F1   F582         MOV       DPL,A
   \   0000F3   E4           CLR       A
   \   0000F4   35..         ADDC      A,?V5
   \   0000F6   F583         MOV       DPH,A
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F9           MOV       R1,A
   \   0000FA   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   0000FD   7404         MOV       A,#0x4
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000102   E9           MOV       A,R1
   \   000103   6003         JZ        $+5
   \   000105   02....       LJMP      ??zclProcessInDiscAttrsCmd_3 & 0xFFFF
   4954              }
   4955          
   4956              // Are there more attributes to be discovered?
   4957              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsCmd_4:
   \   000108   85..82       MOV       DPL,?V6
   \   00010B   85..83       MOV       DPH,?V7
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   F5..         MOV       ?V2,A
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   F5..         MOV       ?V3,A
   \   000115                ; Setup parameters for call to function zclFindNextAttrRec
   \   000115   7402         MOV       A,#0x2
   \   000117   12....       LCALL     ?XSTACK_DISP100_8
   \   00011A   88..         MOV       ?V4,R0
   \   00011C   89..         MOV       ?V5,R1
   \   00011E   78..         MOV       R0,#?V4
   \   000120   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000123   7402         MOV       A,#0x2
   \   000125   12....       LCALL     ?XSTACK_DISP100_8
   \   000128   88..         MOV       ?V4,R0
   \   00012A   89..         MOV       ?V5,R1
   \   00012C   78..         MOV       R0,#?V4
   \   00012E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000131   85..82       MOV       DPL,?V8
   \   000134   85..83       MOV       DPH,?V9
   \   000137   E0           MOVX      A,@DPTR
   \   000138   13           RRC       A
   \   000139   13           RRC       A
   \   00013A   13           RRC       A
   \   00013B   541F         ANL       A,#0x1f
   \   00013D   5401         ANL       A,#0x1
   \   00013F   FC           MOV       R4,A
   \   000140   85..82       MOV       DPL,?V2
   \   000143   85..83       MOV       DPH,?V3
   \   000146   A3           INC       DPTR
   \   000147   A3           INC       DPTR
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   FA           MOV       R2,A
   \   00014C   A3           INC       DPTR
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   FB           MOV       R3,A
   \   00014F   E5..         MOV       A,?V2
   \   000151   2414         ADD       A,#0x14
   \   000153   F582         MOV       DPL,A
   \   000155   E4           CLR       A
   \   000156   35..         ADDC      A,?V3
   \   000158   F583         MOV       DPH,A
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   F9           MOV       R1,A
   \   00015C   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00015F   7404         MOV       A,#0x4
   \   000161   12....       LCALL     ?DEALLOC_XSTACK8
   \   000164   E9           MOV       A,R1
   \   000165   6002         JZ        ??zclProcessInDiscAttrsCmd_1
   4958              {
   4959                discComplete = FALSE;
   \   000167   7F00         MOV       R7,#0x0
   4960              }
   4961            }
   4962          
   4963            pDiscoverRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsCmd_1:
   \   000169   EF           MOV       A,R7
   \   00016A   85..82       MOV       DPL,?V0
   \   00016D   85..83       MOV       DPH,?V1
   \   000170   F0           MOVX      @DPTR,A
   4964            pDiscoverRsp->numAttr = numAttrs;
   \   000171   EE           MOV       A,R6
   \   000172   A3           INC       DPTR
   \   000173   F0           MOVX      @DPTR,A
   4965          
   4966            zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4967                                         pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
   4968                                         true, pInMsg->hdr.transSeqNum );
   \   000174   85..82       MOV       DPL,?V6
   \   000177   85..83       MOV       DPH,?V7
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   F5..         MOV       ?V2,A
   \   00017D   A3           INC       DPTR
   \   00017E   E0           MOVX      A,@DPTR
   \   00017F   F5..         MOV       ?V3,A
   \   000181                ; Setup parameters for call to function zcl_SendDiscoverAttrsRspCmd
   \   000181   85..82       MOV       DPL,?V6
   \   000184   85..83       MOV       DPH,?V7
   \   000187   A3           INC       DPTR
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   A3           INC       DPTR
   \   00018B   A3           INC       DPTR
   \   00018C   A3           INC       DPTR
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   F5..         MOV       ?V4,A
   \   000190   78..         MOV       R0,#?V4
   \   000192   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000195   75..01       MOV       ?V4,#0x1
   \   000198   78..         MOV       R0,#?V4
   \   00019A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019D   85..82       MOV       DPL,?V8
   \   0001A0   85..83       MOV       DPH,?V9
   \   0001A3   E0           MOVX      A,@DPTR
   \   0001A4   13           RRC       A
   \   0001A5   13           RRC       A
   \   0001A6   13           RRC       A
   \   0001A7   541F         ANL       A,#0x1f
   \   0001A9   6401         XRL       A,#0x1
   \   0001AB   5401         ANL       A,#0x1
   \   0001AD   F5..         MOV       ?V4,A
   \   0001AF   78..         MOV       R0,#?V4
   \   0001B1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B4   78..         MOV       R0,#?V0
   \   0001B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B9   85..82       MOV       DPL,?V2
   \   0001BC   85..83       MOV       DPH,?V3
   \   0001BF   A3           INC       DPTR
   \   0001C0   A3           INC       DPTR
   \   0001C1   A3           INC       DPTR
   \   0001C2   A3           INC       DPTR
   \   0001C3   E0           MOVX      A,@DPTR
   \   0001C4   FC           MOV       R4,A
   \   0001C5   A3           INC       DPTR
   \   0001C6   E0           MOVX      A,@DPTR
   \   0001C7   FD           MOV       R5,A
   \   0001C8   E5..         MOV       A,?V2
   \   0001CA   2406         ADD       A,#0x6
   \   0001CC   FA           MOV       R2,A
   \   0001CD   E4           CLR       A
   \   0001CE   35..         ADDC      A,?V3
   \   0001D0   FB           MOV       R3,A
   \   0001D1   E5..         MOV       A,?V2
   \   0001D3   2414         ADD       A,#0x14
   \   0001D5   F582         MOV       DPL,A
   \   0001D7   E4           CLR       A
   \   0001D8   35..         ADDC      A,?V3
   \   0001DA   F583         MOV       DPH,A
   \   0001DC   E0           MOVX      A,@DPTR
   \   0001DD   F9           MOV       R1,A
   \   0001DE   12....       LCALL     `??zcl_SendDiscoverAttrsRspCmd::?relay`; Banked call to: zcl_SendDiscoverAttrsRspCmd
   \   0001E1   7405         MOV       A,#0x5
   \   0001E3   12....       LCALL     ?DEALLOC_XSTACK8
   4969            zcl_mem_free( pDiscoverRsp );
   \   0001E6                ; Setup parameters for call to function osal_mem_free
   \   0001E6   AA..         MOV       R2,?V0
   \   0001E8   AB..         MOV       R3,?V1
   \   0001EA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4970          
   4971            return;
   \                     ??zclProcessInDiscAttrsCmd_0:
   \   0001ED   740A         MOV       A,#0xa
   \   0001EF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F2   7F0C         MOV       R7,#0xc
   \   0001F4   02....       LJMP      ?BANKED_LEAVE_XDATA
   4972          }
   4973          
   4974          /*********************************************************************
   4975           * @fn      zclProcessInDiscAttrsExtCmd
   4976           *
   4977           * @brief   Process the Discover Attributes Extended Command
   4978           *
   4979           * @param   pInMsg - incoming message to process
   4980           *
   4981           * @param   pDiscoverCmd - structure from requesting command
   4982           *
   4983           * @param   attrLenBuf - describes the amount of attributes to be processed
   4984           *
   4985           * @return  none
   4986           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4987          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsExtCmd:
   4988          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V4,R4
   \   000010   8D..         MOV       ?V5,R5
   \   000012   E9           MOV       A,R1
   \   000013   FE           MOV       R6,A
   4989            zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
   4990            uint8 discComplete = TRUE;
   \   000014   7F01         MOV       R7,#0x1
   4991            zclAttrRec_t attrRec;
   4992            uint16 attrID;
   4993            uint8 i;
   4994          
   4995              // Allocate space for the response command
   4996            pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
   4997                                                                   + sizeof ( zclExtAttrInfo_t ) * numAttrs );
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   F5..         MOV       ?V0,A
   \   000018   75..00       MOV       ?V1,#0x0
   \   00001B   7402         MOV       A,#0x2
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?S_SHL
   \   000022   E5..         MOV       A,?V0
   \   000024   2402         ADD       A,#0x2
   \   000026   FA           MOV       R2,A
   \   000027   E4           CLR       A
   \   000028   35..         ADDC      A,?V1
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV       ?V0,R2
   \   000030   8B..         MOV       ?V1,R3
   4998            if ( pDiscoverExtRsp == NULL )
   \   000032   EA           MOV       A,R2
   \   000033   4B           ORL       A,R3
   \   000034   7003         JNZ       $+5
   \   000036   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_0 & 0xFFFF
   4999            {
   5000              return; // EMBEDDED RETURN
   5001            }
   5002          
   5003          
   5004            if ( numAttrs != 0 )
   \   000039   E5..         MOV       A,?V6
   \   00003B   2402         ADD       A,#0x2
   \   00003D   F5..         MOV       ?V8,A
   \   00003F   E4           CLR       A
   \   000040   35..         ADDC      A,?V7
   \   000042   F5..         MOV       ?V9,A
   \   000044   EE           MOV       A,R6
   \   000045   7003         JNZ       $+5
   \   000047   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_1 & 0xFFFF
   5005            {
   5006              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   00004A   75..00       MOV       ?V2,#0x0
   \   00004D   85..82       MOV       DPL,?V4
   \   000050   85..83       MOV       DPH,?V5
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F9           MOV       R1,A
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   E8           MOV       A,R0
   \   00005F   F0           MOVX      @DPTR,A
   \   000060   A3           INC       DPTR
   \   000061   E9           MOV       A,R1
   \   000062   805D         SJMP      ??zclProcessInDiscAttrsExtCmd_2
   5007              {
   5008                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   5009                {
   5010                  break; // Should not happen, as numAttrs already calculated
   5011                }
   5012          
   5013                pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
   \                     ??zclProcessInDiscAttrsExtCmd_3:
   \   000064   E5..         MOV       A,?V2
   \   000066   F5..         MOV       ?V4,A
   \   000068   75..00       MOV       ?V5,#0x0
   \   00006B   7402         MOV       A,#0x2
   \   00006D   78..         MOV       R0,#?V4
   \   00006F   12....       LCALL     ?S_SHL
   \   000072   E5..         MOV       A,?V0
   \   000074   25..         ADD       A,?V4
   \   000076   F8           MOV       R0,A
   \   000077   E5..         MOV       A,?V1
   \   000079   35..         ADDC      A,?V5
   \   00007B   F9           MOV       R1,A
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FA           MOV       R2,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   FB           MOV       R3,A
   \   000086   8882         MOV       DPL,R0
   \   000088   8983         MOV       DPH,R1
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   EA           MOV       A,R2
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   A3           INC       DPTR
   \   00008F   EB           MOV       A,R3
   \   000090   F0           MOVX      @DPTR,A
   5014                pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
   \   000091   7406         MOV       A,#0x6
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   E0           MOVX      A,@DPTR
   \   000097   8882         MOV       DPL,R0
   \   000099   8983         MOV       DPH,R1
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   F0           MOVX      @DPTR,A
   5015                pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
   \   0000A0   7407         MOV       A,#0x7
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   5407         ANL       A,#0x7
   \   0000A8   8882         MOV       DPL,R0
   \   0000AA   8983         MOV       DPH,R1
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   F0           MOVX      @DPTR,A
   \   0000B2   05..         INC       ?V2
   \   0000B4   85..82       MOV       DPL,?XSP + 0
   \   0000B7   85..83       MOV       DPH,?XSP + 1
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   2F           ADD       A,R7
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   3400         ADDC      A,#0x0
   \                     ??zclProcessInDiscAttrsExtCmd_2:
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   E5..         MOV       A,?V2
   \   0000C4   C3           CLR       C
   \   0000C5   9E           SUBB      A,R6
   \   0000C6   5062         JNC       ??zclProcessInDiscAttrsExtCmd_4
   \   0000C8   85..82       MOV       DPL,?V6
   \   0000CB   85..83       MOV       DPH,?V7
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F5..         MOV       ?V4,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   F5..         MOV       ?V5,A
   \   0000D5                ; Setup parameters for call to function zclFindNextAttrRec
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   12....       LCALL     ?XSTACK_DISP100_8
   \   0000DA   88..         MOV       ?V10,R0
   \   0000DC   89..         MOV       ?V11,R1
   \   0000DE   78..         MOV       R0,#?V10
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E3   7402         MOV       A,#0x2
   \   0000E5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000E8   88..         MOV       ?V10,R0
   \   0000EA   89..         MOV       ?V11,R1
   \   0000EC   78..         MOV       R0,#?V10
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F1   85..82       MOV       DPL,?V8
   \   0000F4   85..83       MOV       DPH,?V9
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   13           RRC       A
   \   0000F9   13           RRC       A
   \   0000FA   13           RRC       A
   \   0000FB   541F         ANL       A,#0x1f
   \   0000FD   5401         ANL       A,#0x1
   \   0000FF   FC           MOV       R4,A
   \   000100   85..82       MOV       DPL,?V4
   \   000103   85..83       MOV       DPH,?V5
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   FA           MOV       R2,A
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   FB           MOV       R3,A
   \   00010F   E5..         MOV       A,?V4
   \   000111   2414         ADD       A,#0x14
   \   000113   F582         MOV       DPL,A
   \   000115   E4           CLR       A
   \   000116   35..         ADDC      A,?V5
   \   000118   F583         MOV       DPH,A
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   F9           MOV       R1,A
   \   00011C   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00011F   7404         MOV       A,#0x4
   \   000121   12....       LCALL     ?DEALLOC_XSTACK8
   \   000124   E9           MOV       A,R1
   \   000125   6003         JZ        $+5
   \   000127   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_3 & 0xFFFF
   5016              }
   5017          
   5018              // Are there more attributes to be discovered?
   5019              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsExtCmd_4:
   \   00012A   85..82       MOV       DPL,?V6
   \   00012D   85..83       MOV       DPH,?V7
   \   000130   E0           MOVX      A,@DPTR
   \   000131   F5..         MOV       ?V2,A
   \   000133   A3           INC       DPTR
   \   000134   E0           MOVX      A,@DPTR
   \   000135   F5..         MOV       ?V3,A
   \   000137                ; Setup parameters for call to function zclFindNextAttrRec
   \   000137   7402         MOV       A,#0x2
   \   000139   12....       LCALL     ?XSTACK_DISP100_8
   \   00013C   88..         MOV       ?V4,R0
   \   00013E   89..         MOV       ?V5,R1
   \   000140   78..         MOV       R0,#?V4
   \   000142   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000145   7402         MOV       A,#0x2
   \   000147   12....       LCALL     ?XSTACK_DISP100_8
   \   00014A   88..         MOV       ?V4,R0
   \   00014C   89..         MOV       ?V5,R1
   \   00014E   78..         MOV       R0,#?V4
   \   000150   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000153   85..82       MOV       DPL,?V8
   \   000156   85..83       MOV       DPH,?V9
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   13           RRC       A
   \   00015B   13           RRC       A
   \   00015C   13           RRC       A
   \   00015D   541F         ANL       A,#0x1f
   \   00015F   5401         ANL       A,#0x1
   \   000161   FC           MOV       R4,A
   \   000162   85..82       MOV       DPL,?V2
   \   000165   85..83       MOV       DPH,?V3
   \   000168   A3           INC       DPTR
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   FA           MOV       R2,A
   \   00016E   A3           INC       DPTR
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   FB           MOV       R3,A
   \   000171   E5..         MOV       A,?V2
   \   000173   2414         ADD       A,#0x14
   \   000175   F582         MOV       DPL,A
   \   000177   E4           CLR       A
   \   000178   35..         ADDC      A,?V3
   \   00017A   F583         MOV       DPH,A
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   F9           MOV       R1,A
   \   00017E   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   000181   7404         MOV       A,#0x4
   \   000183   12....       LCALL     ?DEALLOC_XSTACK8
   \   000186   E9           MOV       A,R1
   \   000187   6002         JZ        ??zclProcessInDiscAttrsExtCmd_1
   5020              {
   5021                discComplete = FALSE;
   \   000189   7F00         MOV       R7,#0x0
   5022              }
   5023            }
   5024          
   5025            pDiscoverExtRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsExtCmd_1:
   \   00018B   EF           MOV       A,R7
   \   00018C   85..82       MOV       DPL,?V0
   \   00018F   85..83       MOV       DPH,?V1
   \   000192   F0           MOVX      @DPTR,A
   5026            pDiscoverExtRsp->numAttr = numAttrs;
   \   000193   EE           MOV       A,R6
   \   000194   A3           INC       DPTR
   \   000195   F0           MOVX      @DPTR,A
   5027          
   5028            zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5029                                         pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
   5030                                         true, pInMsg->hdr.transSeqNum );
   \   000196   85..82       MOV       DPL,?V6
   \   000199   85..83       MOV       DPH,?V7
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   F5..         MOV       ?V2,A
   \   00019F   A3           INC       DPTR
   \   0001A0   E0           MOVX      A,@DPTR
   \   0001A1   F5..         MOV       ?V3,A
   \   0001A3                ; Setup parameters for call to function zcl_SendDiscoverAttrsExtRsp
   \   0001A3   85..82       MOV       DPL,?V6
   \   0001A6   85..83       MOV       DPH,?V7
   \   0001A9   A3           INC       DPTR
   \   0001AA   A3           INC       DPTR
   \   0001AB   A3           INC       DPTR
   \   0001AC   A3           INC       DPTR
   \   0001AD   A3           INC       DPTR
   \   0001AE   A3           INC       DPTR
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   F5..         MOV       ?V4,A
   \   0001B2   78..         MOV       R0,#?V4
   \   0001B4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B7   75..01       MOV       ?V4,#0x1
   \   0001BA   78..         MOV       R0,#?V4
   \   0001BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001BF   85..82       MOV       DPL,?V8
   \   0001C2   85..83       MOV       DPH,?V9
   \   0001C5   E0           MOVX      A,@DPTR
   \   0001C6   13           RRC       A
   \   0001C7   13           RRC       A
   \   0001C8   13           RRC       A
   \   0001C9   541F         ANL       A,#0x1f
   \   0001CB   6401         XRL       A,#0x1
   \   0001CD   5401         ANL       A,#0x1
   \   0001CF   F5..         MOV       ?V4,A
   \   0001D1   78..         MOV       R0,#?V4
   \   0001D3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D6   78..         MOV       R0,#?V0
   \   0001D8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DB   85..82       MOV       DPL,?V2
   \   0001DE   85..83       MOV       DPH,?V3
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   A3           INC       DPTR
   \   0001E4   A3           INC       DPTR
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   FC           MOV       R4,A
   \   0001E7   A3           INC       DPTR
   \   0001E8   E0           MOVX      A,@DPTR
   \   0001E9   FD           MOV       R5,A
   \   0001EA   E5..         MOV       A,?V2
   \   0001EC   2406         ADD       A,#0x6
   \   0001EE   FA           MOV       R2,A
   \   0001EF   E4           CLR       A
   \   0001F0   35..         ADDC      A,?V3
   \   0001F2   FB           MOV       R3,A
   \   0001F3   E5..         MOV       A,?V2
   \   0001F5   2414         ADD       A,#0x14
   \   0001F7   F582         MOV       DPL,A
   \   0001F9   E4           CLR       A
   \   0001FA   35..         ADDC      A,?V3
   \   0001FC   F583         MOV       DPH,A
   \   0001FE   E0           MOVX      A,@DPTR
   \   0001FF   F9           MOV       R1,A
   \   000200   12....       LCALL     `??zcl_SendDiscoverAttrsExtRsp::?relay`; Banked call to: zcl_SendDiscoverAttrsExtRsp
   \   000203   7405         MOV       A,#0x5
   \   000205   12....       LCALL     ?DEALLOC_XSTACK8
   5031          
   5032            zcl_mem_free( pDiscoverExtRsp );
   \   000208                ; Setup parameters for call to function osal_mem_free
   \   000208   AA..         MOV       R2,?V0
   \   00020A   AB..         MOV       R3,?V1
   \   00020C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   5033          
   5034            return;
   \                     ??zclProcessInDiscAttrsExtCmd_0:
   \   00020F   740A         MOV       A,#0xa
   \   000211   12....       LCALL     ?DEALLOC_XSTACK8
   \   000214   7F0C         MOV       R7,#0xc
   \   000216   02....       LJMP      ?BANKED_LEAVE_XDATA
   5035          }
   5036          
   5037          /*********************************************************************
   5038           * @fn      zclProcessInDiscCmd
   5039           *
   5040           * @brief   Process the "Profile" Discover Command
   5041           *
   5042           * @param   pInMsg - incoming message to process
   5043           *
   5044           * @return  TRUE if command processed. FALSE, otherwise.
   5045           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5046          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscCmd:
   5047          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   5048            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   5049            zclDiscoverCmdsCmdRsp_t cmdRsp;
   5050            ZStatus_t status;
   5051            zclCommandRec_t cmdRec;
   5052            uint8 cmdID;
   5053            uint8 i;
   5054            uint8 j;
   5055          
   5056            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V4,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V5,A
   5057          
   5058            // Find out the number of commands supported within the specified range
   5059            for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
   \   00001E   75..00       MOV       ?V0,#0x0
   \   000021   85..82       MOV       DPL,?V4
   \   000024   F583         MOV       DPH,A
   \   000026   E0           MOVX      A,@DPTR
   \   000027   85..82       MOV       DPL,?XSP + 0
   \   00002A   85..83       MOV       DPH,?XSP + 1
   \   00002D   800A         SJMP      ??zclProcessInDiscCmd_0
   \                     ??zclProcessInDiscCmd_1:
   \   00002F   05..         INC       ?V0
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   E0           MOVX      A,@DPTR
   \   000038   04           INC       A
   \                     ??zclProcessInDiscCmd_0:
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   85..82       MOV       DPL,?V4
   \   00003D   85..83       MOV       DPH,?V5
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F8           MOV       R0,A
   \   000043   E5..         MOV       A,?V0
   \   000045   C3           CLR       C
   \   000046   98           SUBB      A,R0
   \   000047   506D         JNC       ??zclProcessInDiscCmd_2
   5060            {
   5061              if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F5..         MOV       ?V2,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F5..         MOV       ?V3,A
   \   000054                ; Setup parameters for call to function zclFindNextCmdRec
   \   000054   7406         MOV       A,#0x6
   \   000056   12....       LCALL     ?XSTACK_DISP100_8
   \   000059   88..         MOV       ?V6,R0
   \   00005B   89..         MOV       ?V7,R1
   \   00005D   78..         MOV       R0,#?V6
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7402         MOV       A,#0x2
   \   000064   12....       LCALL     ?XSTACK_DISP100_8
   \   000067   88..         MOV       ?V6,R0
   \   000069   89..         MOV       ?V7,R1
   \   00006B   78..         MOV       R0,#?V6
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   8E82         MOV       DPL,R6
   \   000072   8F83         MOV       DPH,R7
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   13           RRC       A
   \   000078   13           RRC       A
   \   000079   13           RRC       A
   \   00007A   541F         ANL       A,#0x1f
   \   00007C   5401         ANL       A,#0x1
   \   00007E   FD           MOV       R5,A
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   FC           MOV       R4,A
   \   00008C   85..82       MOV       DPL,?V2
   \   00008F   85..83       MOV       DPH,?V3
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   FA           MOV       R2,A
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   FB           MOV       R3,A
   \   00009B   E5..         MOV       A,?V2
   \   00009D   2414         ADD       A,#0x14
   \   00009F   F582         MOV       DPL,A
   \   0000A1   E4           CLR       A
   \   0000A2   35..         ADDC      A,?V3
   \   0000A4   F583         MOV       DPH,A
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F9           MOV       R1,A
   \   0000A8   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   0000AB   7404         MOV       A,#0x4
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B0   E9           MOV       A,R1
   \   0000B1   6003         JZ        $+5
   \   0000B3   02....       LJMP      ??zclProcessInDiscCmd_1 & 0xFFFF
   5062              {
   5063                break;  // Command not supported
   5064              }
   5065            }
   5066          
   5067            // Allocate space for the response command
   5068            cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
   \                     ??zclProcessInDiscCmd_2:
   \   0000B6                ; Setup parameters for call to function osal_mem_alloc
   \   0000B6   AA..         MOV       R2,?V0
   \   0000B8   7B00         MOV       R3,#0x0
   \   0000BA   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000BD   8B..         MOV       ?V3,R3
   \   0000BF   A9..         MOV       R1,?V3
   \   0000C1   7404         MOV       A,#0x4
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   EA           MOV       A,R2
   \   0000C7   F0           MOVX      @DPTR,A
   \   0000C8   A3           INC       DPTR
   \   0000C9   EB           MOV       A,R3
   \   0000CA   F0           MOVX      @DPTR,A
   5069          
   5070            if ( cmdRsp.pCmdID == NULL )
   \   0000CB   EA           MOV       A,R2
   \   0000CC   49           ORL       A,R1
   \   0000CD   7003         JNZ       $+5
   \   0000CF   02....       LJMP      ??zclProcessInDiscCmd_3 & 0xFFFF
   5071            {
   5072              return FALSE; // EMBEDDED RETURN
   5073            }
   5074          
   5075            if ( i != 0 )
   \   0000D2   E5..         MOV       A,?V0
   \   0000D4   7003         JNZ       $+5
   \   0000D6   02....       LJMP      ??zclProcessInDiscCmd_4 & 0xFFFF
   5076            {
   5077              for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
   \   0000D9   75..00       MOV       ?V1,#0x0
   \   0000DC   85..82       MOV       DPL,?V4
   \   0000DF   85..83       MOV       DPH,?V5
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   85..82       MOV       DPL,?XSP + 0
   \   0000E6   85..83       MOV       DPH,?XSP + 1
   \   0000E9   8027         SJMP      ??zclProcessInDiscCmd_5
   5078              {
   5079                if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   5080                {
   5081                  break; // Attribute not supported
   5082                }
   5083          
   5084                cmdRsp.pCmdID[j] = cmdRec.cmdID;
   \                     ??zclProcessInDiscCmd_6:
   \   0000EB   7408         MOV       A,#0x8
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   C0E0         PUSH      A
   \   0000F3   A8..         MOV       R0,?V1
   \   0000F5   7404         MOV       A,#0x4
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   28           ADD       A,R0
   \   0000FC   FA           MOV       R2,A
   \   0000FD   A3           INC       DPTR
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   3400         ADDC      A,#0x0
   \   000101   8A82         MOV       DPL,R2
   \   000103   F583         MOV       DPH,A
   \   000105   D0E0         POP       A
   \   000107   F0           MOVX      @DPTR,A
   \   000108   05..         INC       ?V1
   \   00010A   85..82       MOV       DPL,?XSP + 0
   \   00010D   85..83       MOV       DPH,?XSP + 1
   \   000110   E0           MOVX      A,@DPTR
   \   000111   04           INC       A
   \                     ??zclProcessInDiscCmd_5:
   \   000112   F0           MOVX      @DPTR,A
   \   000113   E5..         MOV       A,?V1
   \   000115   C3           CLR       C
   \   000116   95..         SUBB      A,?V0
   \   000118   506E         JNC       ??zclProcessInDiscCmd_4
   \   00011A   8E82         MOV       DPL,R6
   \   00011C   8F83         MOV       DPH,R7
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F8           MOV       R0,A
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   88..         MOV       ?V2,R0
   \   000124   F5..         MOV       ?V3,A
   \   000126                ; Setup parameters for call to function zclFindNextCmdRec
   \   000126   7406         MOV       A,#0x6
   \   000128   12....       LCALL     ?XSTACK_DISP100_8
   \   00012B   88..         MOV       ?V4,R0
   \   00012D   89..         MOV       ?V5,R1
   \   00012F   78..         MOV       R0,#?V4
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000134   7402         MOV       A,#0x2
   \   000136   12....       LCALL     ?XSTACK_DISP100_8
   \   000139   88..         MOV       ?V4,R0
   \   00013B   89..         MOV       ?V5,R1
   \   00013D   78..         MOV       R0,#?V4
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000142   8E82         MOV       DPL,R6
   \   000144   8F83         MOV       DPH,R7
   \   000146   A3           INC       DPTR
   \   000147   A3           INC       DPTR
   \   000148   E0           MOVX      A,@DPTR
   \   000149   13           RRC       A
   \   00014A   13           RRC       A
   \   00014B   13           RRC       A
   \   00014C   541F         ANL       A,#0x1f
   \   00014E   5401         ANL       A,#0x1
   \   000150   FD           MOV       R5,A
   \   000151   8E82         MOV       DPL,R6
   \   000153   8F83         MOV       DPH,R7
   \   000155   A3           INC       DPTR
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   A3           INC       DPTR
   \   00015B   A3           INC       DPTR
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   FC           MOV       R4,A
   \   00015E   85..82       MOV       DPL,?V2
   \   000161   85..83       MOV       DPH,?V3
   \   000164   A3           INC       DPTR
   \   000165   A3           INC       DPTR
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   E0           MOVX      A,@DPTR
   \   000169   FA           MOV       R2,A
   \   00016A   A3           INC       DPTR
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   FB           MOV       R3,A
   \   00016D   E5..         MOV       A,?V2
   \   00016F   2414         ADD       A,#0x14
   \   000171   F582         MOV       DPL,A
   \   000173   E4           CLR       A
   \   000174   35..         ADDC      A,?V3
   \   000176   F583         MOV       DPH,A
   \   000178   E0           MOVX      A,@DPTR
   \   000179   F9           MOV       R1,A
   \   00017A   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   00017D   7404         MOV       A,#0x4
   \   00017F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000182   E9           MOV       A,R1
   \   000183   6003         JZ        $+5
   \   000185   02....       LJMP      ??zclProcessInDiscCmd_6 & 0xFFFF
   5085              }
   5086            }
   5087          
   5088            // Are there more commands to be discovered?
   5089            if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??zclProcessInDiscCmd_4:
   \   000188   8E82         MOV       DPL,R6
   \   00018A   8F83         MOV       DPH,R7
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   F5..         MOV       ?V4,A
   \   00018F   A3           INC       DPTR
   \   000190   E0           MOVX      A,@DPTR
   \   000191   F5..         MOV       ?V5,A
   \   000193   EE           MOV       A,R6
   \   000194   2407         ADD       A,#0x7
   \   000196   F5..         MOV       ?V6,A
   \   000198   E4           CLR       A
   \   000199   3F           ADDC      A,R7
   \   00019A   F5..         MOV       ?V7,A
   \   00019C   EE           MOV       A,R6
   \   00019D   2402         ADD       A,#0x2
   \   00019F   F5..         MOV       ?V2,A
   \   0001A1   E4           CLR       A
   \   0001A2   3F           ADDC      A,R7
   \   0001A3   F5..         MOV       ?V3,A
   \   0001A5                ; Setup parameters for call to function zclFindNextCmdRec
   \   0001A5   7406         MOV       A,#0x6
   \   0001A7   12....       LCALL     ?XSTACK_DISP100_8
   \   0001AA   88..         MOV       ?V8,R0
   \   0001AC   89..         MOV       ?V9,R1
   \   0001AE   78..         MOV       R0,#?V8
   \   0001B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B3   7402         MOV       A,#0x2
   \   0001B5   12....       LCALL     ?XSTACK_DISP100_8
   \   0001B8   88..         MOV       ?V8,R0
   \   0001BA   89..         MOV       ?V9,R1
   \   0001BC   78..         MOV       R0,#?V8
   \   0001BE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C1   85..82       MOV       DPL,?V2
   \   0001C4   85..83       MOV       DPH,?V3
   \   0001C7   E0           MOVX      A,@DPTR
   \   0001C8   13           RRC       A
   \   0001C9   13           RRC       A
   \   0001CA   13           RRC       A
   \   0001CB   541F         ANL       A,#0x1f
   \   0001CD   5401         ANL       A,#0x1
   \   0001CF   FD           MOV       R5,A
   \   0001D0   85..82       MOV       DPL,?V6
   \   0001D3   85..83       MOV       DPH,?V7
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   FC           MOV       R4,A
   \   0001D8   85..82       MOV       DPL,?V4
   \   0001DB   85..83       MOV       DPH,?V5
   \   0001DE   A3           INC       DPTR
   \   0001DF   A3           INC       DPTR
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   E0           MOVX      A,@DPTR
   \   0001E3   FA           MOV       R2,A
   \   0001E4   A3           INC       DPTR
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   FB           MOV       R3,A
   \   0001E7   E5..         MOV       A,?V4
   \   0001E9   2414         ADD       A,#0x14
   \   0001EB   F582         MOV       DPL,A
   \   0001ED   E4           CLR       A
   \   0001EE   35..         ADDC      A,?V5
   \   0001F0   F583         MOV       DPH,A
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   F9           MOV       R1,A
   \   0001F4   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   0001F7   7404         MOV       A,#0x4
   \   0001F9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FC   E9           MOV       A,R1
   \   0001FD   6008         JZ        ??zclProcessInDiscCmd_7
   5090            {
   5091              cmdRsp.discComplete = FALSE;
   \   0001FF   7401         MOV       A,#0x1
   \   000201   12....       LCALL     ?XSTACK_DISP0_8
   \   000204   E4           CLR       A
   \   000205   8007         SJMP      ??zclProcessInDiscCmd_8
   5092            }
   5093            else
   5094            {
   5095              cmdRsp.discComplete = TRUE;
   \                     ??zclProcessInDiscCmd_7:
   \   000207   7401         MOV       A,#0x1
   \   000209   12....       LCALL     ?XSTACK_DISP0_8
   \   00020C   7401         MOV       A,#0x1
   \                     ??zclProcessInDiscCmd_8:
   \   00020E   F0           MOVX      @DPTR,A
   5096            }
   5097          
   5098            // pass the command requested
   5099            cmdRsp.cmdType = pInMsg->hdr.commandID;
   \   00020F   85..82       MOV       DPL,?V6
   \   000212   85..83       MOV       DPH,?V7
   \   000215   E0           MOVX      A,@DPTR
   \   000216   C0E0         PUSH      A
   \   000218   7402         MOV       A,#0x2
   \   00021A   12....       LCALL     ?XSTACK_DISP0_8
   \   00021D   D0E0         POP       A
   \   00021F   F0           MOVX      @DPTR,A
   5100          
   5101            // store number of commands returned
   5102            cmdRsp.numCmd = j;
   \   000220   7403         MOV       A,#0x3
   \   000222   12....       LCALL     ?XSTACK_DISP0_8
   \   000225   E5..         MOV       A,?V1
   \   000227   F0           MOVX      @DPTR,A
   5103          
   5104            status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5105                                                pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
   5106                                                true, pInMsg->hdr.transSeqNum );
   \   000228   8E82         MOV       DPL,R6
   \   00022A   8F83         MOV       DPH,R7
   \   00022C   E0           MOVX      A,@DPTR
   \   00022D   F5..         MOV       ?V0,A
   \   00022F   A3           INC       DPTR
   \   000230   E0           MOVX      A,@DPTR
   \   000231   F5..         MOV       ?V1,A
   \   000233                ; Setup parameters for call to function zcl_SendDiscoverCmdsRspCmd
   \   000233   8E82         MOV       DPL,R6
   \   000235   8F83         MOV       DPH,R7
   \   000237   A3           INC       DPTR
   \   000238   A3           INC       DPTR
   \   000239   A3           INC       DPTR
   \   00023A   A3           INC       DPTR
   \   00023B   A3           INC       DPTR
   \   00023C   A3           INC       DPTR
   \   00023D   E0           MOVX      A,@DPTR
   \   00023E   F5..         MOV       ?V4,A
   \   000240   78..         MOV       R0,#?V4
   \   000242   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000245   75..01       MOV       ?V4,#0x1
   \   000248   78..         MOV       R0,#?V4
   \   00024A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00024D   85..82       MOV       DPL,?V2
   \   000250   85..83       MOV       DPH,?V3
   \   000253   E0           MOVX      A,@DPTR
   \   000254   13           RRC       A
   \   000255   13           RRC       A
   \   000256   13           RRC       A
   \   000257   541F         ANL       A,#0x1f
   \   000259   6401         XRL       A,#0x1
   \   00025B   5401         ANL       A,#0x1
   \   00025D   F5..         MOV       ?V2,A
   \   00025F   78..         MOV       R0,#?V2
   \   000261   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000264   7404         MOV       A,#0x4
   \   000266   12....       LCALL     ?XSTACK_DISP100_8
   \   000269   88..         MOV       ?V2,R0
   \   00026B   89..         MOV       ?V3,R1
   \   00026D   78..         MOV       R0,#?V2
   \   00026F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000272   85..82       MOV       DPL,?V0
   \   000275   85..83       MOV       DPH,?V1
   \   000278   A3           INC       DPTR
   \   000279   A3           INC       DPTR
   \   00027A   A3           INC       DPTR
   \   00027B   A3           INC       DPTR
   \   00027C   E0           MOVX      A,@DPTR
   \   00027D   FC           MOV       R4,A
   \   00027E   A3           INC       DPTR
   \   00027F   E0           MOVX      A,@DPTR
   \   000280   FD           MOV       R5,A
   \   000281   E5..         MOV       A,?V0
   \   000283   2406         ADD       A,#0x6
   \   000285   FA           MOV       R2,A
   \   000286   E4           CLR       A
   \   000287   35..         ADDC      A,?V1
   \   000289   FB           MOV       R3,A
   \   00028A   E5..         MOV       A,?V0
   \   00028C   2414         ADD       A,#0x14
   \   00028E   F582         MOV       DPL,A
   \   000290   E4           CLR       A
   \   000291   35..         ADDC      A,?V1
   \   000293   F583         MOV       DPH,A
   \   000295   E0           MOVX      A,@DPTR
   \   000296   F9           MOV       R1,A
   \   000297   12....       LCALL     `??zcl_SendDiscoverCmdsRspCmd::?relay`; Banked call to: zcl_SendDiscoverCmdsRspCmd
   \   00029A   7405         MOV       A,#0x5
   \   00029C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00029F   E9           MOV       A,R1
   \   0002A0   FE           MOV       R6,A
   5107          
   5108            zcl_mem_free( cmdRsp.pCmdID );
   \   0002A1                ; Setup parameters for call to function osal_mem_free
   \   0002A1   7404         MOV       A,#0x4
   \   0002A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A6   E0           MOVX      A,@DPTR
   \   0002A7   FA           MOV       R2,A
   \   0002A8   A3           INC       DPTR
   \   0002A9   E0           MOVX      A,@DPTR
   \   0002AA   FB           MOV       R3,A
   \   0002AB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   5109          
   5110            if ( status == ZSuccess )
   \   0002AE   EE           MOV       A,R6
   \   0002AF   7004         JNZ       ??zclProcessInDiscCmd_3
   5111            {
   5112              return TRUE;
   \   0002B1   7901         MOV       R1,#0x1
   \   0002B3   8002         SJMP      ??zclProcessInDiscCmd_9
   5113            }
   5114            else
   5115            {
   5116              return FALSE;
   \                     ??zclProcessInDiscCmd_3:
   \   0002B5   7900         MOV       R1,#0x0
   \                     ??zclProcessInDiscCmd_9:
   \   0002B7   740A         MOV       A,#0xa
   \   0002B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002BC   7F0A         MOV       R7,#0xa
   \   0002BE   02....       LJMP      ?BANKED_LEAVE_XDATA
   5117            }
   5118          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_radius>`:
   \   000000   1E           DB 30
   5119          
   5120          #endif // ZCL_DISCOVER
   5121          
   5122          
   5123          /*********************************************************************
   5124          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     26   zclAnalogDataType
      0     42   zclAuthorizeRead
        0     14   -> zclGetAuthorizeCB
      0     29   zclAuthorizeWrite
        0     14   -> zclGetAuthorizeCB
      1     39   zclBuildHdr
      2     30   zclCalcHdrSize
      2     54   zclFindAttrRec
        0     16   -> zclFindAttrRecsList
      2     16   zclFindAttrRecsList
      0     19   zclFindClusterOption
      2     16   zclFindCmdRec
        0     14   -> zclFindCmdRecsList
      2     16   zclFindCmdRecsList
      0     50   zclFindNextAttrRec
        0     16   -> zclFindAttrRecsList
      1     48   zclFindNextCmdRec
        0     16   -> zclFindCmdRecsList
      2     38   zclFindPlugin
      0     45   zclGetAttrDataLength
        0      9   -> zclGetDataTypeLength
      0     58   zclGetAttrDataLengthUsingCB
        0     18   -> zclGetReadWriteCB
      0     24   zclGetAuthorizeCB
        0     10   -> zclFindAttrRecsList
      0     48   zclGetClusterOption
        0     10   -> zclFindClusterOption
      0     26   zclGetDataTypeLength
      0     28   zclGetReadWriteCB
        0     10   -> zclFindAttrRecsList
      2     18   zclIsLittleEndianMachine
      1     50   zclParseHdr
        0     12   -> osal_memset
      1     18   zclParseInConfigReportCmd
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> zclAnalogDataType
        0     18   -> zclGetDataTypeLength
        0     18   -> zcl_BuildAnalogData
      1     10   zclParseInDefaultRspCmd
        0     10   -> osal_mem_alloc
      1     10   zclParseInDiscAttrsCmd
        0     10   -> osal_mem_alloc
      1     14   zclParseInDiscAttrsExtRspCmd
        0     14   -> osal_mem_alloc
      1     12   zclParseInDiscAttrsRspCmd
        0     12   -> osal_mem_alloc
      1     10   zclParseInDiscCmdsCmd
        0     10   -> osal_mem_alloc
      1     12   zclParseInDiscCmdsRspCmd
        0     12   -> osal_mem_alloc
      1     12   zclParseInReadCmd
        0     12   -> osal_mem_alloc
      1     12   zclParseInReadReportCfgCmd
        0     12   -> osal_mem_alloc
      1     25   zclParseInReadRspCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     25   zclParseInReportCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     25   zclParseInWriteCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     16   zclParseInWriteRspCmd
        0     16   -> osal_mem_alloc
      0     30   zclProcessInDiscAttrs
        0     30   -> zclFindNextAttrRec
        0     26   -> zclProcessInDiscAttrsCmd
        0     26   -> zclProcessInDiscAttrsExtCmd
      1     61   zclProcessInDiscAttrsCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     34   -> zclFindNextAttrRec
        0     35   -> zcl_SendDiscoverAttrsRspCmd
      1     61   zclProcessInDiscAttrsExtCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     34   -> zclFindNextAttrRec
        0     35   -> zcl_SendDiscoverAttrsExtRsp
      1     33   zclProcessInDiscCmd
        0     28   -> osal_mem_alloc
        0     28   -> osal_mem_free
        0     32   -> zclFindNextCmdRec
        0     33   -> zcl_SendDiscoverCmdsRspCmd
      1     33   zclProcessInReadCmd
        0     28   -> osal_mem_alloc
        0     28   -> osal_mem_free
        0     28   -> zclAuthorizeRead
        0     30   -> zclFindAttrRec
        0     33   -> zcl_SendReadRsp
      1     37   zclProcessInWriteCmd
        0     32   -> bdb_ZclIdentifyCmdInd
        0     32   -> osal_mem_alloc
        0     32   -> osal_mem_free
        0     35   -> osal_memcpy
        0     34   -> zclFindAttrRec
        0     34   -> zclWriteAttrData
        0     34   -> zclWriteAttrDataUsingCB
        0     37   -> zcl_SendWriteRsp
      1     41   zclProcessInWriteUndividedCmd
        0     36   -> osal_mem_alloc
        0     36   -> osal_mem_free
        0     38   -> zclFindAttrRec
        0     36   -> zclGetAttrDataLength
        0     36   -> zclGetAttrDataLengthUsingCB
        0     38   -> zclReadAttrData
        0     40   -> zclReadAttrDataUsingCB
        0     38   -> zclRevertWriteUndividedCmd
        0     38   -> zclWriteAttrData
        0     38   -> zclWriteAttrDataUsingCB
        0     41   -> zcl_SendWriteRsp
      0     56   zclReadAttrData
        0     18   -> osal_memcpy
        0     15   -> zclGetAttrDataLength
      0     60   zclReadAttrDataUsingCB
        0     16   -> zclGetReadWriteCB
      0     71   zclRevertWriteUndividedCmd
        0     33   -> osal_memcpy
        0     32   -> zclFindAttrRec
        0     30   -> zclGetAttrDataLength
        0     32   -> zclWriteAttrDataUsingCB
      1     46   zclSerializeData
        0     20   -> osal_buffer_uint32
        0     19   -> osal_memcpy
      0     48   zclSetSecurityOption
        0     10   -> zclFindClusterOption
      0     56   zclWriteAttrData
        0     18   -> osal_memcpy
        0     15   -> zclAuthorizeWrite
        0     15   -> zclGetAttrDataLength
      0     56   zclWriteAttrDataUsingCB
        0     14   -> zclAuthorizeWrite
        0     14   -> zclGetReadWriteCB
      1     34   zcl_BuildAnalogData
        0     16   -> zclGetAttrDataLength
        0     16   -> zclIsLittleEndianMachine
      0     63   zcl_DeviceOperational
        0     23   -> zclFindAttrRec
        0     23   -> zclReadAttrData
      1     14   zcl_HandleExternal
        0     14   -> bdb_ProcessInConfigReportCmd
        0     14   -> bdb_ProcessInReadReportCfgCmd
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_send
        0     14   -> zcl_getExternalFoundationHandler
      2      0   zcl_Init
      1     57   zcl_ProcessMessageMSG
        0     38   -> afFindEndPointDesc
        0     38   -> osal_mem_free
        0     38   -> zclFindPlugin
        0     38   -> zclGetClusterOption
        0     38   -> zclParseHdr
        0     38   -> zclSetSecurityOption
        0     40   -> zcl_DeviceOperational
        0     45   -> zcl_SendDefaultRspCmd
      0     32   zcl_ReadAttrData
        0     26   -> zclFindAttrRec
        0     26   -> zclReadAttrData
        0     28   -> zclReadAttrDataUsingCB
      1     76   zcl_SendCommand
        0     39   -> AF_DataRequest
        0     30   -> afFindEndPointDesc
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     33   -> osal_memcpy
        0     30   -> osal_memset
        0     30   -> zclBuildHdr
        0     30   -> zclCalcHdrSize
        0     30   -> zclGetClusterOption
        0     32   -> zcl_DeviceOperational
        0     30   -> zcl_getRawAFMsg
      1     36   zcl_SendConfigReportRspCmd
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     68   zcl_SendDefaultRspCmd
        0     23   -> zcl_SendCommand
      1     32   zcl_SendDiscoverAttrsCmd
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     27   -> zcl_SendCommand
      1     31   zcl_SendDiscoverAttrsExt
        0     26   -> zcl_SendCommand
      1     70   zcl_SendDiscoverAttrsExtRsp
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     35   -> zcl_SendCommand
      1     70   zcl_SendDiscoverAttrsRspCmd
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     35   -> zcl_SendCommand
      1     31   zcl_SendDiscoverCmdsCmd
        0     25   -> zcl_SendCommand
      1     66   zcl_SendDiscoverCmdsRspCmd
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     33   -> zcl_SendCommand
      1     36   zcl_SendRead
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     42   zcl_SendReadReportCfgRspCmd
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     26   -> zclAnalogDataType
        0     26   -> zclGetDataTypeLength
        0     26   -> zclSerializeData
        0     37   -> zcl_SendCommand
      1     68   zcl_SendReadRsp
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     24   -> zclGetAttrDataLength
        0     24   -> zclGetAttrDataLengthUsingCB
        0     28   -> zclReadAttrDataUsingCB
        0     24   -> zclSerializeData
        0     35   -> zcl_SendCommand
      1     38   zcl_SendReportCmd
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> zclGetAttrDataLength
        0     22   -> zclSerializeData
        0     33   -> zcl_SendCommand
      1     39   zcl_SendWriteRequest
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> zclGetAttrDataLength
        0     22   -> zclSerializeData
        0     33   -> zcl_SendCommand
      1     72   zcl_SendWriteRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     19   zcl_addExternalFoundationHandler
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free
      0     12   zcl_event_loop
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_msg_send
        0     12   -> zcl_ProcessMessageMSG
        0     12   -> zcl_getExternalFoundationHandler
      2     14   zcl_getExternalFoundationHandler
      2      0   zcl_getParsedTransSeqNum
      2     30   zcl_getRawAFMsg
      1     12   zcl_registerAttrList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerClusterOptionList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerCmdList
        0     12   -> osal_mem_alloc
      0      9   zcl_registerForMsg
        0      9   -> zcl_addExternalFoundationHandler
      0      9   zcl_registerForMsgExt
        0      9   -> zcl_addExternalFoundationHandler
      0     14   zcl_registerPlugin
        0     12   -> osal_mem_alloc
      0     14   zcl_registerReadWriteCB
        0     14   -> zclFindAttrRecsList
      2      0   zcl_registerValidateAttrData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zcl_radius>
       2  attrList
       2  clusterOptionList
       2  externalEndPointHandlerList
       2  gpCmdList
       2  plugins
       2  rawAFMsg
       1  savedZCLTransSeqNum
      37  zclAnalogDataType
      62  zclAuthorizeRead
      62  zclAuthorizeWrite
     154  zclBuildHdr
      24  zclCalcHdrSize
      92  zclCmdTable
     164  zclFindAttrRec
      45  zclFindAttrRecsList
     108  zclFindClusterOption
     140  zclFindCmdRec
      45  zclFindCmdRecsList
     247  zclFindNextAttrRec
     287  zclFindNextCmdRec
      73  zclFindPlugin
      70  zclGetAttrDataLength
     107  zclGetAttrDataLengthUsingCB
      39  zclGetAuthorizeCB
      31  zclGetClusterOption
     166  zclGetDataTypeLength
      37  zclGetReadWriteCB
      43  zclIsLittleEndianMachine
     248  zclParseHdr
     566  zclParseInConfigReportCmd
      59  zclParseInDefaultRspCmd
      69  zclParseInDiscAttrsCmd
     201  zclParseInDiscAttrsExtRspCmd
     166  zclParseInDiscAttrsRspCmd
      59  zclParseInDiscCmdsCmd
     123  zclParseInDiscCmdsRspCmd
     138  zclParseInReadCmd
     147  zclParseInReadReportCfgCmd
     417  zclParseInReadRspCmd
     393  zclParseInReportCmd
     393  zclParseInWriteCmd
     193  zclParseInWriteRspCmd
     245  zclProcessInDiscAttrs
     503  zclProcessInDiscAttrsCmd
     537  zclProcessInDiscAttrsExtCmd
     705  zclProcessInDiscCmd
     543  zclProcessInReadCmd
     826  zclProcessInWriteCmd
    1194  zclProcessInWriteUndividedCmd
     126  zclReadAttrData
      98  zclReadAttrDataUsingCB
     290  zclRevertWriteUndividedCmd
     439  zclSerializeData
      44  zclSetSecurityOption
     189  zclWriteAttrData
     114  zclWriteAttrDataUsingCB
     113  zcl_BuildAnalogData
     126  zcl_DeviceOperational
     290  zcl_HandleExternal
       1  zcl_InSeqNum
      16  zcl_Init
    1353  zcl_ProcessMessageMSG
     148  zcl_ReadAttrData
     466  zcl_SendCommand
     302  zcl_SendConfigReportRspCmd
     157  zcl_SendDefaultRspCmd
     196  zcl_SendDiscoverAttrsCmd
     174  zcl_SendDiscoverAttrsExt
     326  zcl_SendDiscoverAttrsExtRsp
     292  zcl_SendDiscoverAttrsRspCmd
     224  zcl_SendDiscoverCmdsCmd
     335  zcl_SendDiscoverCmdsRspCmd
     237  zcl_SendRead
     673  zcl_SendReadReportCfgRspCmd
     541  zcl_SendReadRsp
     381  zcl_SendReportCmd
     386  zcl_SendWriteRequest
     275  zcl_SendWriteRsp
       1  zcl_TaskID
       2  zcl_ValidateAttrDataCB
     171  zcl_addExternalFoundationHandler
     110  zcl_event_loop
      70  zcl_getExternalFoundationHandler
      16  zcl_getParsedTransSeqNum
      19  zcl_getRawAFMsg
       1  zcl_radius
     149  zcl_registerAttrList
     130  zcl_registerClusterOptionList
     130  zcl_registerCmdList
      15  zcl_registerForMsg
      13  zcl_registerForMsgExt
     149  zcl_registerPlugin
      63  zcl_registerReadWriteCB
      21  zcl_registerValidateAttrData
     492  -- Other

 
 19 033 bytes in segment BANKED_CODE
    492 bytes in segment BANK_RELAYS
     92 bytes in segment CODE_C
      1 byte  in segment XDATA_I
      1 byte  in segment XDATA_ID
     17 bytes in segment XDATA_Z
 
    585 bytes of CODE     memory
 19 033 bytes of HUGECODE memory
     18 bytes of XDATA    memory

Errors: none
Warnings: none
