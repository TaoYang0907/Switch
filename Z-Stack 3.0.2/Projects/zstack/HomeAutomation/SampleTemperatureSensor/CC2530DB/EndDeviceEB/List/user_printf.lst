###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  15:22:20
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\user_printf.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWB449.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\user_printf.c"
#        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        xNV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK
#        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -D ZCL_ON_OFF -D ZCL_REPORT
#        -D ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\user_printf.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\user_printf.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\user_printf.c
      1          /*
      2          	Copyright 2001, 2002 Georges Menie (www.menie.org)
      3          	stdarg version contributed by Christian Ettinger
      4          
      5              This program is free software; you can redistribute it and/or modify
      6              it under the terms of the GNU Lesser General Public License as published by
      7              the Free Software Foundation; either version 2 of the License, or
      8              (at your option) any later version.
      9          
     10              This program is distributed in the hope that it will be useful,
     11              but WITHOUT ANY WARRANTY; without even the implied warranty of
     12              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     13              GNU Lesser General Public License for more details.
     14          
     15              You should have received a copy of the GNU Lesser General Public License
     16              along with this program; if not, write to the Free Software
     17              Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     18          */
     19          
     20          /*
     21          	putchar is the only external dependency for this file,
     22          	if you have a working putchar, leave it commented out.
     23          	If not, uncomment the define below and
     24          	replace outbyte(c) by your own function call.
     25          
     26          #define putchar(c) outbyte(c)
     27          */
     28          
     29          #include "stdarg.h"
     30          #include "user_printf.h"
     31          #include "hal_uart.h"
     32          
     33          void putchar(char c);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          void putchar(char c){
   \                     putchar:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
     35            HalUARTWrite(HAL_UART_PORT_0,(uint8*)&c,1);
   \   000011                ; Setup parameters for call to function HalUARTWrite
   \   000011   7C01         MOV       R4,#0x1
   \   000013   7D00         MOV       R5,#0x0
   \   000015   AA..         MOV       R2,?XSP + 0
   \   000017   AB..         MOV       R3,?XSP + 1
   \   000019   7900         MOV       R1,#0x0
   \   00001B   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     36          }
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
   \   000023   D083         POP       DPH
   \   000025   D082         POP       DPL
   \   000027   02....       LJMP      ?BRET
     37          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     38          static void printchar(char **str, int c)
   \                     printchar:
     39          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     40          	extern void putchar(char c);
     41          	
     42          	if (str) {
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   602A         JZ        ??printchar_0
     43          		**str = c;
   \   000008   EC           MOV       A,R4
   \   000009   C0E0         PUSH      A
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F583         MOV       DPH,A
   \   000015   8882         MOV       DPL,R0
   \   000017   D0E0         POP       A
   \   000019   F0           MOVX      @DPTR,A
     44          		++(*str);
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   2401         ADD       A,#0x1
   \   000021   F8           MOV       R0,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   3400         ADDC      A,#0x0
   \   000026   F9           MOV       R1,A
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   E8           MOV       A,R0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E9           MOV       A,R1
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   8005         SJMP      ??printchar_1
     45          	}
     46          	else (void)putchar((char)c);
   \                     ??printchar_0:
   \   000032                ; Setup parameters for call to function putchar
   \   000032   EC           MOV       A,R4
   \   000033   F9           MOV       R1,A
   \   000034   12....       LCALL     `??putchar::?relay`; Banked call to: putchar
     47          }
   \                     ??printchar_1:
   \   000037   D083         POP       DPH
   \   000039   D082         POP       DPL
   \   00003B   02....       LJMP      ?BRET
     48          
     49          #define PAD_RIGHT 1
     50          #define PAD_ZERO 2
     51          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     52          static int prints(char **out, const char *string, int width, int pad)
   \                     prints:
     53          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
     54          	register int pc = 0, padchar = ' ';
   \   00000D   7E00         MOV       R6,#0x0
   \   00000F   7F00         MOV       R7,#0x0
   \   000011   75..20       MOV       ?V4,#0x20
   \   000014   8E..         MOV       ?V5,R6
   \   000016   7410         MOV       A,#0x10
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V1,A
   \   000022   7412         MOV       A,#0x12
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
     55          
     56          	if (width > 0) {
   \   000029   C3           CLR       C
   \   00002A   E5..         MOV       A,?V0
   \   00002C   9401         SUBB      A,#0x1
   \   00002E   E5..         MOV       A,?V1
   \   000030   9400         SUBB      A,#0x0
   \   000032   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000034   65D0         XRL       A,PSW
   \   000036   33           RLC       A
   \   000037   403A         JC        ??prints_0
     57          		register int len = 0;
   \   000039   7A00         MOV       R2,#0x0
   \   00003B   7B00         MOV       R3,#0x0
     58          		register const char *ptr;
     59          		for (ptr = string; *ptr; ++ptr) ++len;
   \   00003D   8C82         MOV       DPL,R4
   \   00003F   8D83         MOV       DPH,R5
   \   000041   8006         SJMP      ??prints_1
   \                     ??prints_2:
   \   000043   0A           INC       R2
   \   000044   EA           MOV       A,R2
   \   000045   7001         JNZ       ??prints_3
   \   000047   0B           INC       R3
   \                     ??prints_3:
   \   000048   A3           INC       DPTR
   \                     ??prints_1:
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   70F7         JNZ       ??prints_2
     60          		if (len >= width) width = 0;
   \   00004C   C3           CLR       C
   \   00004D   EA           MOV       A,R2
   \   00004E   95..         SUBB      A,?V0
   \   000050   EB           MOV       A,R3
   \   000051   95..         SUBB      A,?V1
   \   000053   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000055   65D0         XRL       A,PSW
   \   000057   33           RLC       A
   \   000058   4006         JC        ??prints_4
   \   00005A   8E..         MOV       ?V0,R6
   \   00005C   8E..         MOV       ?V1,R6
   \   00005E   800B         SJMP      ??prints_5
     61          		else width -= len;
   \                     ??prints_4:
   \   000060   C3           CLR       C
   \   000061   E5..         MOV       A,?V0
   \   000063   9A           SUBB      A,R2
   \   000064   F5..         MOV       ?V0,A
   \   000066   E5..         MOV       A,?V1
   \   000068   9B           SUBB      A,R3
   \   000069   F5..         MOV       ?V1,A
     62          		if (pad & PAD_ZERO) padchar = '0';
   \                     ??prints_5:
   \   00006B   E8           MOV       A,R0
   \   00006C   5402         ANL       A,#0x2
   \   00006E   6003         JZ        ??prints_0
   \   000070   75..30       MOV       ?V4,#0x30
     63          	}
     64          	if (!(pad & PAD_RIGHT)) {
   \                     ??prints_0:
   \   000073   E8           MOV       A,R0
   \   000074   A2E0         MOV       C,0xE0 /* A   */.0
   \   000076   402E         JC        ??prints_6
   \   000078   801C         SJMP      ??prints_7
     65          		for ( ; width > 0; --width) {
     66          			printchar (out, padchar);
   \                     ??prints_8:
   \   00007A                ; Setup parameters for call to function printchar
   \   00007A   AC..         MOV       R4,?V4
   \   00007C   AD..         MOV       R5,?V5
   \   00007E   AA..         MOV       R2,?V6
   \   000080   AB..         MOV       R3,?V7
   \   000082   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
     67          			++pc;
   \   000085   0E           INC       R6
   \   000086   EE           MOV       A,R6
   \   000087   7001         JNZ       ??prints_9
   \   000089   0F           INC       R7
     68          		}
   \                     ??prints_9:
   \   00008A   E5..         MOV       A,?V0
   \   00008C   24FF         ADD       A,#-0x1
   \   00008E   F5..         MOV       ?V0,A
   \   000090   E5..         MOV       A,?V1
   \   000092   34FF         ADDC      A,#-0x1
   \   000094   F5..         MOV       ?V1,A
   \                     ??prints_7:
   \   000096   C3           CLR       C
   \   000097   E5..         MOV       A,?V0
   \   000099   9401         SUBB      A,#0x1
   \   00009B   E5..         MOV       A,?V1
   \   00009D   9400         SUBB      A,#0x0
   \   00009F   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000A1   65D0         XRL       A,PSW
   \   0000A3   33           RLC       A
   \   0000A4   50D4         JNC       ??prints_8
     69          	}
     70          	for ( ; *string ; ++string) {
   \                     ??prints_6:
   \   0000A6   85..82       MOV       DPL,?V2
   \   0000A9   85..83       MOV       DPH,?V3
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   603A         JZ        ??prints_10
     71          		printchar (out, *string);
   \   0000AF                ; Setup parameters for call to function printchar
   \   0000AF   FC           MOV       R4,A
   \   0000B0   7D00         MOV       R5,#0x0
   \   0000B2   AA..         MOV       R2,?V6
   \   0000B4   AB..         MOV       R3,?V7
   \   0000B6   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
     72          		++pc;
   \   0000B9   0E           INC       R6
   \   0000BA   EE           MOV       A,R6
   \   0000BB   7001         JNZ       ??prints_11
   \   0000BD   0F           INC       R7
     73          	}
   \                     ??prints_11:
   \   0000BE   85..82       MOV       DPL,?V2
   \   0000C1   85..83       MOV       DPH,?V3
   \   0000C4   A3           INC       DPTR
   \   0000C5   8582..       MOV       ?V2,DPL
   \   0000C8   8583..       MOV       ?V3,DPH
   \   0000CB   80D9         SJMP      ??prints_6
     74          	for ( ; width > 0; --width) {
     75          		printchar (out, padchar);
   \                     ??prints_12:
   \   0000CD                ; Setup parameters for call to function printchar
   \   0000CD   AC..         MOV       R4,?V4
   \   0000CF   AD..         MOV       R5,?V5
   \   0000D1   AA..         MOV       R2,?V6
   \   0000D3   AB..         MOV       R3,?V7
   \   0000D5   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
     76          		++pc;
   \   0000D8   0E           INC       R6
   \   0000D9   EE           MOV       A,R6
   \   0000DA   7001         JNZ       ??prints_13
   \   0000DC   0F           INC       R7
     77          	}
   \                     ??prints_13:
   \   0000DD   E5..         MOV       A,?V0
   \   0000DF   24FF         ADD       A,#-0x1
   \   0000E1   F5..         MOV       ?V0,A
   \   0000E3   E5..         MOV       A,?V1
   \   0000E5   34FF         ADDC      A,#-0x1
   \   0000E7   F5..         MOV       ?V1,A
   \                     ??prints_10:
   \   0000E9   C3           CLR       C
   \   0000EA   E5..         MOV       A,?V0
   \   0000EC   9401         SUBB      A,#0x1
   \   0000EE   E5..         MOV       A,?V1
   \   0000F0   9400         SUBB      A,#0x0
   \   0000F2   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000F4   65D0         XRL       A,PSW
   \   0000F6   33           RLC       A
   \   0000F7   50D4         JNC       ??prints_12
     78          
     79          	return pc;
   \   0000F9   EE           MOV       A,R6
   \   0000FA   FA           MOV       R2,A
   \   0000FB   EF           MOV       A,R7
   \   0000FC   FB           MOV       R3,A
   \   0000FD   7F08         MOV       R7,#0x8
   \   0000FF   02....       LJMP      ?BANKED_LEAVE_XDATA
     80          }
     81          
     82          /* the following should be enough for 16 bit int */
     83          #define PRINT_BUF_LEN 6
     84          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     85          static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
   \                     printi:
     86          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V14,R2
   \   00000C   8B..         MOV       ?V15,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   F8           MOV       R0,A
   \   000010   ED           MOV       A,R5
   \   000011   F9           MOV       R1,A
     87          	char print_buf[PRINT_BUF_LEN];
     88          	register char *s;
     89          	register int t, neg = 0, pc = 0;
   \   000012   75..00       MOV       ?V8,#0x0
   \   000015   75..00       MOV       ?V4,#0x0
     90          	register unsigned int u = i;
   \   000018   7422         MOV       A,#0x22
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V1,A
   \   000024   7424         MOV       A,#0x24
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   FE           MOV       R6,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FF           MOV       R7,A
     91          
     92          	if (i == 0) {
   \   00002E   EC           MOV       A,R4
   \   00002F   49           ORL       A,R1
   \   000030   702E         JNZ       ??printi_0
     93          		print_buf[0] = '0';
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   7430         MOV       A,#0x30
   \   00003A   F0           MOVX      @DPTR,A
     94          		print_buf[1] = '\0';
   \   00003B   7401         MOV       A,#0x1
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
     95          		return prints (out, print_buf, width, pad);
   \   000042                ; Setup parameters for call to function prints
   \   000042   8E..         MOV       ?V2,R6
   \   000044   8F..         MOV       ?V3,R7
   \   000046   78..         MOV       R0,#?V2
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7404         MOV       A,#0x4
   \   000052   12....       LCALL     ?XSTACK_DISP102_8
   \   000055   12....       LCALL     `??prints::?relay`; Banked call to: prints
   \   000058   7404         MOV       A,#0x4
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   02....       LJMP      ??printi_1 & 0xFFFF
     96          	}
   \                     ??printi_0:
   \   000060   741E         MOV       A,#0x1e
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F5..         MOV       ?V6,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F5..         MOV       ?V7,A
     97          
     98          	if (sg && b == 10 && i < 0) {
   \   00006C   7420         MOV       A,#0x20
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FA           MOV       R2,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   FB           MOV       R3,A
   \   000076   EA           MOV       A,R2
   \   000077   4B           ORL       A,R3
   \   000078   601D         JZ        ??printi_2
   \   00007A   740A         MOV       A,#0xa
   \   00007C   65..         XRL       A,?V6
   \   00007E   45..         ORL       A,?V7
   \   000080   7015         JNZ       ??printi_2
   \   000082   C3           CLR       C
   \   000083   ED           MOV       A,R5
   \   000084   9400         SUBB      A,#0x0
   \   000086   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000088   65D0         XRL       A,PSW
   \   00008A   33           RLC       A
   \   00008B   500A         JNC       ??printi_2
     99          		neg = 1;
   \   00008D   75..01       MOV       ?V8,#0x1
    100          		u = -i;
   \   000090   C3           CLR       C
   \   000091   E4           CLR       A
   \   000092   98           SUBB      A,R0
   \   000093   FC           MOV       R4,A
   \   000094   E4           CLR       A
   \   000095   99           SUBB      A,R1
   \   000096   FD           MOV       R5,A
    101          	}
    102          
    103          	s = print_buf + PRINT_BUF_LEN-1;
   \                     ??printi_2:
   \   000097   7405         MOV       A,#0x5
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   8582..       MOV       ?V2,DPL
   \   00009F   8583..       MOV       ?V3,DPH
    104          	*s = '\0';
   \   0000A2   E4           CLR       A
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   7426         MOV       A,#0x26
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   F5..         MOV       ?V12,A
   \   0000AC   804D         SJMP      ??printi_3
    105          
    106          	while (u) {
    107          		t = u % b;
   \                     ??printi_4:
   \   0000AE   EC           MOV       A,R4
   \   0000AF   F8           MOV       R0,A
   \   0000B0   ED           MOV       A,R5
   \   0000B1   F9           MOV       R1,A
   \   0000B2   AA..         MOV       R2,?V6
   \   0000B4   AB..         MOV       R3,?V7
   \   0000B6   12....       LCALL     ?US_DIV_MOD
   \   0000B9   8A..         MOV       ?V10,R2
   \   0000BB   A8..         MOV       R0,?V10
    108          		if( t >= 10 )
   \   0000BD   EA           MOV       A,R2
   \   0000BE   940A         SUBB      A,#0xa
   \   0000C0   EB           MOV       A,R3
   \   0000C1   9400         SUBB      A,#0x0
   \   0000C3   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000C5   65D0         XRL       A,PSW
   \   0000C7   33           RLC       A
   \   0000C8   4008         JC        ??printi_5
    109          			t += letbase - '0' - 10;
   \   0000CA   E5..         MOV       A,?V12
   \   0000CC   24C6         ADD       A,#-0x3a
   \   0000CE   FA           MOV       R2,A
   \   0000CF   E8           MOV       A,R0
   \   0000D0   2A           ADD       A,R2
   \   0000D1   F8           MOV       R0,A
    110          		*--s = t + '0';
   \                     ??printi_5:
   \   0000D2   E5..         MOV       A,?V2
   \   0000D4   24FF         ADD       A,#-0x1
   \   0000D6   F5..         MOV       ?V2,A
   \   0000D8   E5..         MOV       A,?V3
   \   0000DA   34FF         ADDC      A,#-0x1
   \   0000DC   F5..         MOV       ?V3,A
   \   0000DE   E8           MOV       A,R0
   \   0000DF   2430         ADD       A,#0x30
   \   0000E1   85..82       MOV       DPL,?V2
   \   0000E4   85..83       MOV       DPH,?V3
   \   0000E7   F0           MOVX      @DPTR,A
    111          		u /= b;
   \   0000E8   EC           MOV       A,R4
   \   0000E9   F8           MOV       R0,A
   \   0000EA   ED           MOV       A,R5
   \   0000EB   F9           MOV       R1,A
   \   0000EC   AA..         MOV       R2,?V6
   \   0000EE   AB..         MOV       R3,?V7
   \   0000F0   12....       LCALL     ?US_DIV_MOD
   \   0000F3   88..         MOV       ?V10,R0
   \   0000F5   89..         MOV       ?V11,R1
   \   0000F7   AC..         MOV       R4,?V10
   \   0000F9   AD..         MOV       R5,?V11
    112          	}
   \                     ??printi_3:
   \   0000FB   EC           MOV       A,R4
   \   0000FC   4D           ORL       A,R5
   \   0000FD   70AF         JNZ       ??printi_4
    113          
    114          	if (neg) {
   \   0000FF   E5..         MOV       A,?V8
   \   000101   603B         JZ        ??printi_6
    115          		if( width && (pad & PAD_ZERO) ) {
   \   000103   E5..         MOV       A,?V0
   \   000105   45..         ORL       A,?V1
   \   000107   6021         JZ        ??printi_7
   \   000109   EE           MOV       A,R6
   \   00010A   5402         ANL       A,#0x2
   \   00010C   601C         JZ        ??printi_7
    116          			printchar (out, '-');
   \   00010E                ; Setup parameters for call to function printchar
   \   00010E   7C2D         MOV       R4,#0x2d
   \   000110   7D00         MOV       R5,#0x0
   \   000112   AA..         MOV       R2,?V14
   \   000114   AB..         MOV       R3,?V15
   \   000116   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
    117          			++pc;
   \   000119   75..01       MOV       ?V4,#0x1
    118          			--width;
   \   00011C   E5..         MOV       A,?V0
   \   00011E   24FF         ADD       A,#-0x1
   \   000120   F5..         MOV       ?V0,A
   \   000122   E5..         MOV       A,?V1
   \   000124   34FF         ADDC      A,#-0x1
   \   000126   F5..         MOV       ?V1,A
   \   000128   8014         SJMP      ??printi_6
    119          		}
    120          		else {
    121          			*--s = '-';
   \                     ??printi_7:
   \   00012A   E5..         MOV       A,?V2
   \   00012C   24FF         ADD       A,#-0x1
   \   00012E   F5..         MOV       ?V2,A
   \   000130   E5..         MOV       A,?V3
   \   000132   34FF         ADDC      A,#-0x1
   \   000134   F5..         MOV       ?V3,A
   \   000136   85..82       MOV       DPL,?V2
   \   000139   F583         MOV       DPH,A
   \   00013B   742D         MOV       A,#0x2d
   \   00013D   F0           MOVX      @DPTR,A
    122          		}
    123          	}
    124          
    125          	return pc + prints (out, s, width, pad);
   \                     ??printi_6:
   \   00013E                ; Setup parameters for call to function prints
   \   00013E   8E..         MOV       ?V6,R6
   \   000140   8F..         MOV       ?V7,R7
   \   000142   78..         MOV       R0,#?V6
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000147   78..         MOV       R0,#?V0
   \   000149   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014C   AC..         MOV       R4,?V2
   \   00014E   AD..         MOV       R5,?V3
   \   000150   AA..         MOV       R2,?V14
   \   000152   AB..         MOV       R3,?V15
   \   000154   12....       LCALL     `??prints::?relay`; Banked call to: prints
   \   000157   7404         MOV       A,#0x4
   \   000159   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015C   8B..         MOV       ?V1,R3
   \   00015E   E5..         MOV       A,?V4
   \   000160   2A           ADD       A,R2
   \   000161   FA           MOV       R2,A
   \   000162   E4           CLR       A
   \   000163   35..         ADDC      A,?V1
   \   000165   FB           MOV       R3,A
   \                     ??printi_1:
   \   000166   7406         MOV       A,#0x6
   \   000168   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016B   7F10         MOV       R7,#0x10
   \   00016D   02....       LJMP      ?BANKED_LEAVE_XDATA
    126          }
    127          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          static int print(char **out, const char *format, va_list args )
   \                     print:
    129          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    130          	register int width, pad;
    131          	register int pc = 0;
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   75..00       MOV       ?V3,#0x0
   \   000018   7414         MOV       A,#0x14
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V4,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V5,A
   \   000024   8026         SJMP      ??print_0
    132          	char scr[2];
    133          
    134          	for (; *format != 0; ++format) {
    135          		if (*format == '%') {
    136          			++format;
    137          			width = pad = 0;
    138          			if (*format == '\0') break;
    139          			if (*format == '%') goto out;
    140          			if (*format == '-') {
    141          				++format;
    142          				pad = PAD_RIGHT;
    143          			}
    144          			while (*format == '0') {
    145          				++format;
    146          				pad |= PAD_ZERO;
    147          			}
    148          			for ( ; *format >= '0' && *format <= '9'; ++format) {
    149          				width *= 10;
    150          				width += *format - '0';
    151          			}
    152          			if( *format == 's' ) {
    153          				register char *s = (char *)va_arg( args, int );
    154          				pc += prints (out, s?s:"(null)", width, pad);
    155          				continue;
    156          			}
    157          			if( *format == 'd' ) {
    158          				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
    159          				continue;
    160          			}
    161          			if( *format == 'x' ) {
    162          				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
    163          				continue;
    164          			}
    165          			if( *format == 'X' ) {
    166          				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
    167          				continue;
    168          			}
    169          			if( *format == 'u' ) {
    170          				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
    171          				continue;
    172          			}
    173          			if( *format == 'c' ) {
    174          				/* char are converted to int then pushed on the stack */
    175          				scr[0] = (char)va_arg( args, int );
    176          				scr[1] = '\0';
    177          				pc += prints (out, scr, width, pad);
    178          				continue;
    179          			}
    180          		}
    181          		else {
    182          		out:
    183          			printchar (out, *format);
   \                     ??print_1:
   \   000026                ; Setup parameters for call to function printchar
   \   000026   85..82       MOV       DPL,?V0
   \   000029   85..83       MOV       DPH,?V1
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FC           MOV       R4,A
   \   00002E   7D00         MOV       R5,#0x0
   \   000030   EE           MOV       A,R6
   \   000031   FA           MOV       R2,A
   \   000032   EF           MOV       A,R7
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
    184          			++pc;
   \   000037   05..         INC       ?V2
   \   000039   E5..         MOV       A,?V2
   \   00003B   7002         JNZ       ??print_2
   \   00003D   05..         INC       ?V3
    185          		}
   \                     ??print_2:
   \   00003F   85..82       MOV       DPL,?V0
   \   000042   85..83       MOV       DPH,?V1
   \   000045   A3           INC       DPTR
   \   000046   8582..       MOV       ?V0,DPL
   \   000049   8583..       MOV       ?V1,DPH
   \                     ??print_0:
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   85..83       MOV       DPH,?V1
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F8           MOV       R0,A
   \   000054   7003         JNZ       $+5
   \   000056   02....       LJMP      ??print_3 & 0xFFFF
   \   000059   7425         MOV       A,#0x25
   \   00005B   68           XRL       A,R0
   \   00005C   70C8         JNZ       ??print_1
   \   00005E   A3           INC       DPTR
   \   00005F   8582..       MOV       ?V0,DPL
   \   000062   8583..       MOV       ?V1,DPH
   \   000065   7C00         MOV       R4,#0x0
   \   000067   7D00         MOV       R5,#0x0
   \   000069   7A00         MOV       R2,#0x0
   \   00006B   7B00         MOV       R3,#0x0
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F8           MOV       R0,A
   \   00006F   7003         JNZ       $+5
   \   000071   02....       LJMP      ??print_3 & 0xFFFF
   \   000074   7425         MOV       A,#0x25
   \   000076   68           XRL       A,R0
   \   000077   60AD         JZ        ??print_1
   \   000079   742D         MOV       A,#0x2d
   \   00007B   68           XRL       A,R0
   \   00007C   7015         JNZ       ??print_4
   \   00007E   A3           INC       DPTR
   \   00007F   8582..       MOV       ?V0,DPL
   \   000082   8583..       MOV       ?V1,DPH
   \   000085   0C           INC       R4
   \   000086   800B         SJMP      ??print_4
   \                     ??print_5:
   \   000088   A3           INC       DPTR
   \   000089   8582..       MOV       ?V0,DPL
   \   00008C   8583..       MOV       ?V1,DPH
   \   00008F   7402         MOV       A,#0x2
   \   000091   4C           ORL       A,R4
   \   000092   FC           MOV       R4,A
   \                     ??print_4:
   \   000093   85..82       MOV       DPL,?V0
   \   000096   85..83       MOV       DPH,?V1
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   6430         XRL       A,#0x30
   \   00009C   60EA         JZ        ??print_5
   \                     ??print_6:
   \   00009E   85..82       MOV       DPL,?V0
   \   0000A1   85..83       MOV       DPH,?V1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F8           MOV       R0,A
   \   0000A6   74D0         MOV       A,#-0x30
   \   0000A8   28           ADD       A,R0
   \   0000A9   C3           CLR       C
   \   0000AA   940A         SUBB      A,#0xa
   \   0000AC   5026         JNC       ??print_7
   \   0000AE   EA           MOV       A,R2
   \   0000AF   75F00A       MOV       B,#0xa
   \   0000B2   A4           MUL       AB
   \   0000B3   FA           MOV       R2,A
   \   0000B4   A9F0         MOV       R1,B
   \   0000B6   75F00A       MOV       B,#0xa
   \   0000B9   EB           MOV       A,R3
   \   0000BA   A4           MUL       AB
   \   0000BB   29           ADD       A,R1
   \   0000BC   FB           MOV       R3,A
   \   0000BD   EA           MOV       A,R2
   \   0000BE   28           ADD       A,R0
   \   0000BF   F8           MOV       R0,A
   \   0000C0   E4           CLR       A
   \   0000C1   3B           ADDC      A,R3
   \   0000C2   F9           MOV       R1,A
   \   0000C3   E8           MOV       A,R0
   \   0000C4   24D0         ADD       A,#-0x30
   \   0000C6   FA           MOV       R2,A
   \   0000C7   E9           MOV       A,R1
   \   0000C8   34FF         ADDC      A,#-0x1
   \   0000CA   FB           MOV       R3,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   8582..       MOV       ?V0,DPL
   \   0000CF   8583..       MOV       ?V1,DPH
   \   0000D2   80CA         SJMP      ??print_6
   \                     ??print_7:
   \   0000D4   7473         MOV       A,#0x73
   \   0000D6   68           XRL       A,R0
   \   0000D7   7064         JNZ       ??print_8
   \   0000D9   85..82       MOV       DPL,?V4
   \   0000DC   85..83       MOV       DPH,?V5
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F8           MOV       R0,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F9           MOV       R1,A
   \   0000E4   8882         MOV       DPL,R0
   \   0000E6   F583         MOV       DPH,A
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   F5..         MOV       ?V6,A
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   F5..         MOV       ?V7,A
   \   0000EF   E8           MOV       A,R0
   \   0000F0   2402         ADD       A,#0x2
   \   0000F2   5001         JNC       ??print_9
   \   0000F4   09           INC       R1
   \                     ??print_9:
   \   0000F5   85..82       MOV       DPL,?V4
   \   0000F8   85..83       MOV       DPH,?V5
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   E9           MOV       A,R1
   \   0000FE   F0           MOVX      @DPTR,A
   \   0000FF   E5..         MOV       A,?V6
   \   000101   45..         ORL       A,?V7
   \   000103   7006         JNZ       ??print_10
   \   000105   75....       MOV       ?V6,#`?<Constant "(null)">` & 0xff
   \   000108   75....       MOV       ?V7,#(`?<Constant "(null)">` >> 8) & 0xff
   \                     ??print_10:
   \   00010B                ; Setup parameters for call to function prints
   \   00010B   8C..         MOV       ?V8,R4
   \   00010D   8D..         MOV       ?V9,R5
   \   00010F   78..         MOV       R0,#?V8
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000114   8A..         MOV       ?V8,R2
   \   000116   8B..         MOV       ?V9,R3
   \   000118   78..         MOV       R0,#?V8
   \   00011A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011D   AC..         MOV       R4,?V6
   \   00011F   AD..         MOV       R5,?V7
   \                     ??print_11:
   \   000121   EE           MOV       A,R6
   \   000122   FA           MOV       R2,A
   \   000123   EF           MOV       A,R7
   \   000124   FB           MOV       R3,A
   \   000125   12....       LCALL     `??prints::?relay`; Banked call to: prints
   \   000128   7404         MOV       A,#0x4
   \   00012A   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??print_12:
   \   00012D   8B..         MOV       ?V7,R3
   \   00012F   E5..         MOV       A,?V2
   \   000131   2A           ADD       A,R2
   \   000132   F5..         MOV       ?V2,A
   \   000134   E5..         MOV       A,?V3
   \   000136   35..         ADDC      A,?V7
   \   000138   F5..         MOV       ?V3,A
   \   00013A   02....       LJMP      ??print_2 & 0xFFFF
   \                     ??print_8:
   \   00013D   7464         MOV       A,#0x64
   \   00013F   68           XRL       A,R0
   \   000140   7066         JNZ       ??print_13
   \   000142   85..82       MOV       DPL,?V4
   \   000145   85..83       MOV       DPH,?V5
   \   000148   E0           MOVX      A,@DPTR
   \   000149   F8           MOV       R0,A
   \   00014A   A3           INC       DPTR
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   88..         MOV       ?V6,R0
   \   00014E   F5..         MOV       ?V7,A
   \   000150   E8           MOV       A,R0
   \   000151   2402         ADD       A,#0x2
   \   000153   F8           MOV       R0,A
   \   000154   E4           CLR       A
   \   000155   35..         ADDC      A,?V7
   \   000157   F9           MOV       R1,A
   \   000158   85..82       MOV       DPL,?V4
   \   00015B   85..83       MOV       DPH,?V5
   \   00015E   E8           MOV       A,R0
   \   00015F   F0           MOVX      @DPTR,A
   \   000160   A3           INC       DPTR
   \   000161   E9           MOV       A,R1
   \   000162   F0           MOVX      @DPTR,A
   \   000163                ; Setup parameters for call to function printi
   \   000163   75..61       MOV       ?V8,#0x61
   \   000166   8D..         MOV       ?V9,R5
   \   000168   78..         MOV       R0,#?V8
   \   00016A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016D   8C..         MOV       ?V8,R4
   \   00016F   78..         MOV       R0,#?V8
   \   000171   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000174   8A..         MOV       ?V8,R2
   \   000176   8B..         MOV       ?V9,R3
   \   000178   78..         MOV       R0,#?V8
   \   00017A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017D   75..01       MOV       ?V8,#0x1
   \   000180   8D..         MOV       ?V9,R5
   \                     ??print_14:
   \   000182   78..         MOV       R0,#?V8
   \   000184   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000187   75..0A       MOV       ?V8,#0xa
   \                     ??print_15:
   \   00018A   78..         MOV       R0,#?V8
   \   00018C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018F   85..82       MOV       DPL,?V6
   \   000192   85..83       MOV       DPH,?V7
   \   000195   E0           MOVX      A,@DPTR
   \   000196   FC           MOV       R4,A
   \   000197   A3           INC       DPTR
   \   000198   E0           MOVX      A,@DPTR
   \   000199   FD           MOV       R5,A
   \   00019A   EE           MOV       A,R6
   \   00019B   FA           MOV       R2,A
   \   00019C   EF           MOV       A,R7
   \   00019D   FB           MOV       R3,A
   \   00019E   12....       LCALL     `??printi::?relay`; Banked call to: printi
   \   0001A1   740A         MOV       A,#0xa
   \   0001A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A6   8085         SJMP      ??print_12
   \                     ??print_13:
   \   0001A8   7478         MOV       A,#0x78
   \   0001AA   68           XRL       A,R0
   \   0001AB   704A         JNZ       ??print_16
   \   0001AD   85..82       MOV       DPL,?V4
   \   0001B0   85..83       MOV       DPH,?V5
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   F8           MOV       R0,A
   \   0001B5   A3           INC       DPTR
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   88..         MOV       ?V6,R0
   \   0001B9   F5..         MOV       ?V7,A
   \   0001BB   E8           MOV       A,R0
   \   0001BC   2402         ADD       A,#0x2
   \   0001BE   F8           MOV       R0,A
   \   0001BF   E4           CLR       A
   \   0001C0   35..         ADDC      A,?V7
   \   0001C2   F9           MOV       R1,A
   \   0001C3   85..82       MOV       DPL,?V4
   \   0001C6   85..83       MOV       DPH,?V5
   \   0001C9   E8           MOV       A,R0
   \   0001CA   F0           MOVX      @DPTR,A
   \   0001CB   A3           INC       DPTR
   \   0001CC   E9           MOV       A,R1
   \   0001CD   F0           MOVX      @DPTR,A
   \   0001CE                ; Setup parameters for call to function printi
   \   0001CE   75..61       MOV       ?V8,#0x61
   \                     ??print_17:
   \   0001D1   8D..         MOV       ?V9,R5
   \   0001D3   78..         MOV       R0,#?V8
   \   0001D5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D8   8C..         MOV       ?V8,R4
   \   0001DA   78..         MOV       R0,#?V8
   \   0001DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DF   8A..         MOV       ?V8,R2
   \   0001E1   8B..         MOV       ?V9,R3
   \   0001E3   78..         MOV       R0,#?V8
   \   0001E5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E8   E4           CLR       A
   \   0001E9   F5..         MOV       ?V8,A
   \   0001EB   F5..         MOV       ?V9,A
   \   0001ED   78..         MOV       R0,#?V8
   \   0001EF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F2   75..10       MOV       ?V8,#0x10
   \   0001F5   8093         SJMP      ??print_15
   \                     ??print_16:
   \   0001F7   7458         MOV       A,#0x58
   \   0001F9   68           XRL       A,R0
   \   0001FA   7026         JNZ       ??print_18
   \   0001FC   85..82       MOV       DPL,?V4
   \   0001FF   85..83       MOV       DPH,?V5
   \   000202   E0           MOVX      A,@DPTR
   \   000203   F8           MOV       R0,A
   \   000204   A3           INC       DPTR
   \   000205   E0           MOVX      A,@DPTR
   \   000206   88..         MOV       ?V6,R0
   \   000208   F5..         MOV       ?V7,A
   \   00020A   E8           MOV       A,R0
   \   00020B   2402         ADD       A,#0x2
   \   00020D   F8           MOV       R0,A
   \   00020E   E4           CLR       A
   \   00020F   35..         ADDC      A,?V7
   \   000211   F9           MOV       R1,A
   \   000212   85..82       MOV       DPL,?V4
   \   000215   85..83       MOV       DPH,?V5
   \   000218   E8           MOV       A,R0
   \   000219   F0           MOVX      @DPTR,A
   \   00021A   A3           INC       DPTR
   \   00021B   E9           MOV       A,R1
   \   00021C   F0           MOVX      @DPTR,A
   \   00021D                ; Setup parameters for call to function printi
   \   00021D   75..41       MOV       ?V8,#0x41
   \   000220   80AF         SJMP      ??print_17
   \                     ??print_18:
   \   000222   7475         MOV       A,#0x75
   \   000224   68           XRL       A,R0
   \   000225   7043         JNZ       ??print_19
   \   000227   85..82       MOV       DPL,?V4
   \   00022A   85..83       MOV       DPH,?V5
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   F8           MOV       R0,A
   \   00022F   A3           INC       DPTR
   \   000230   E0           MOVX      A,@DPTR
   \   000231   88..         MOV       ?V6,R0
   \   000233   F5..         MOV       ?V7,A
   \   000235   E8           MOV       A,R0
   \   000236   2402         ADD       A,#0x2
   \   000238   F8           MOV       R0,A
   \   000239   E4           CLR       A
   \   00023A   35..         ADDC      A,?V7
   \   00023C   F9           MOV       R1,A
   \   00023D   85..82       MOV       DPL,?V4
   \   000240   85..83       MOV       DPH,?V5
   \   000243   E8           MOV       A,R0
   \   000244   F0           MOVX      @DPTR,A
   \   000245   A3           INC       DPTR
   \   000246   E9           MOV       A,R1
   \   000247   F0           MOVX      @DPTR,A
   \   000248                ; Setup parameters for call to function printi
   \   000248   75..61       MOV       ?V8,#0x61
   \   00024B   8D..         MOV       ?V9,R5
   \   00024D   78..         MOV       R0,#?V8
   \   00024F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000252   8C..         MOV       ?V8,R4
   \   000254   78..         MOV       R0,#?V8
   \   000256   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000259   8A..         MOV       ?V8,R2
   \   00025B   8B..         MOV       ?V9,R3
   \   00025D   78..         MOV       R0,#?V8
   \   00025F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000262   E4           CLR       A
   \   000263   F5..         MOV       ?V8,A
   \   000265   F5..         MOV       ?V9,A
   \   000267   02....       LJMP      ??print_14 & 0xFFFF
   \                     ??print_19:
   \   00026A   7463         MOV       A,#0x63
   \   00026C   68           XRL       A,R0
   \   00026D   6003         JZ        $+5
   \   00026F   02....       LJMP      ??print_2 & 0xFFFF
   \   000272   85..82       MOV       DPL,?V4
   \   000275   85..83       MOV       DPH,?V5
   \   000278   E0           MOVX      A,@DPTR
   \   000279   F8           MOV       R0,A
   \   00027A   A3           INC       DPTR
   \   00027B   E0           MOVX      A,@DPTR
   \   00027C   F583         MOV       DPH,A
   \   00027E   8882         MOV       DPL,R0
   \   000280   E0           MOVX      A,@DPTR
   \   000281   85..82       MOV       DPL,?XSP + 0
   \   000284   85..83       MOV       DPH,?XSP + 1
   \   000287   F0           MOVX      @DPTR,A
   \   000288   85..82       MOV       DPL,?V4
   \   00028B   85..83       MOV       DPH,?V5
   \   00028E   E0           MOVX      A,@DPTR
   \   00028F   2402         ADD       A,#0x2
   \   000291   F8           MOV       R0,A
   \   000292   A3           INC       DPTR
   \   000293   E0           MOVX      A,@DPTR
   \   000294   3400         ADDC      A,#0x0
   \   000296   F9           MOV       R1,A
   \   000297   85..82       MOV       DPL,?V4
   \   00029A   85..83       MOV       DPH,?V5
   \   00029D   E8           MOV       A,R0
   \   00029E   F0           MOVX      @DPTR,A
   \   00029F   A3           INC       DPTR
   \   0002A0   E9           MOV       A,R1
   \   0002A1   F0           MOVX      @DPTR,A
   \   0002A2   7401         MOV       A,#0x1
   \   0002A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A7   E4           CLR       A
   \   0002A8   F0           MOVX      @DPTR,A
   \   0002A9                ; Setup parameters for call to function prints
   \   0002A9   8C..         MOV       ?V6,R4
   \   0002AB   8D..         MOV       ?V7,R5
   \   0002AD   78..         MOV       R0,#?V6
   \   0002AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002B2   8A..         MOV       ?V6,R2
   \   0002B4   8B..         MOV       ?V7,R3
   \   0002B6   78..         MOV       R0,#?V6
   \   0002B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002BB   7404         MOV       A,#0x4
   \   0002BD   12....       LCALL     ?XSTACK_DISP102_8
   \   0002C0   02....       LJMP      ??print_11 & 0xFFFF
    186          	}
    187          	if (out) **out = '\0';
   \                     ??print_3:
   \   0002C3   EE           MOV       A,R6
   \   0002C4   4F           ORL       A,R7
   \   0002C5   600E         JZ        ??print_20
   \   0002C7   8E82         MOV       DPL,R6
   \   0002C9   8F83         MOV       DPH,R7
   \   0002CB   E0           MOVX      A,@DPTR
   \   0002CC   F8           MOV       R0,A
   \   0002CD   A3           INC       DPTR
   \   0002CE   E0           MOVX      A,@DPTR
   \   0002CF   F583         MOV       DPH,A
   \   0002D1   8882         MOV       DPL,R0
   \   0002D3   E4           CLR       A
   \   0002D4   F0           MOVX      @DPTR,A
    188          	va_end( args );
    189          	return pc;
   \                     ??print_20:
   \   0002D5   AA..         MOV       R2,?V2
   \   0002D7   AB..         MOV       R3,?V3
   \   0002D9   7402         MOV       A,#0x2
   \   0002DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002DE   7F0A         MOV       R7,#0xa
   \   0002E0   02....       LJMP      ?BANKED_LEAVE_XDATA
    190          }
    191          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          int printf(const char *format, ...)
   \                     printf:
    193          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    194                  va_list args;
    195                  
    196                  va_start( args, format );
   \   00000A   740C         MOV       A,#0xc
   \   00000C   12....       LCALL     ?XSTACK_DISP100_8
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   E8           MOV       A,R0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   E9           MOV       A,R1
   \   000019   F0           MOVX      @DPTR,A
    197                  return print( 0, format, args );
   \   00001A                ; Setup parameters for call to function print
   \   00001A   A8..         MOV       R0,?XSP + 0
   \   00001C   A9..         MOV       R1,?XSP + 1
   \   00001E   88..         MOV       ?V0,R0
   \   000020   89..         MOV       ?V1,R1
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   EA           MOV       A,R2
   \   000028   FC           MOV       R4,A
   \   000029   EB           MOV       A,R3
   \   00002A   FD           MOV       R5,A
   \   00002B   7A00         MOV       R2,#0x0
   \   00002D   7B00         MOV       R3,#0x0
   \   00002F   12....       LCALL     `??print::?relay`; Banked call to: print
   \   000032   7402         MOV       A,#0x2
   \   000034   12....       LCALL     ?DEALLOC_XSTACK8
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003C   7F02         MOV       R7,#0x2
   \   00003E   02....       LJMP      ?BANKED_LEAVE_XDATA
    198          }
    199          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    200          int sprintf(char *out, const char *format, ...)
   \                     sprintf:
    201          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
    202                  va_list args;
    203                  
    204                  va_start( args, format );
   \   000014   740E         MOV       A,#0xe
   \   000016   12....       LCALL     ?XSTACK_DISP100_8
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   E8           MOV       A,R0
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   E9           MOV       A,R1
   \   000023   F0           MOVX      @DPTR,A
    205                  return print( &out, format, args );
   \   000024                ; Setup parameters for call to function print
   \   000024   A8..         MOV       R0,?XSP + 0
   \   000026   A9..         MOV       R1,?XSP + 1
   \   000028   88..         MOV       ?V0,R0
   \   00002A   89..         MOV       ?V1,R1
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7404         MOV       A,#0x4
   \   000033   12....       LCALL     ?XSTACK_DISP101_8
   \   000036   12....       LCALL     `??print::?relay`; Banked call to: print
   \   000039   7402         MOV       A,#0x2
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   \   000043   7F02         MOV       R7,#0x2
   \   000045   02....       LJMP      ?BANKED_LEAVE_XDATA
    206          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "(null)">`:
   \   000000   286E756C     DB "(null)"
   \            6C2900  
    207          
    208          #ifdef TEST_PRINTF
    209          int main(void)
    210          {
    211          	char *ptr = "Hello world!";
    212          	char *np = 0;
    213          	int i = 5;
    214          	unsigned int bs = sizeof(int)*8;
    215          	int mi;
    216          	//char buf[80];
    217          
    218          	mi = (1 << (bs-1)) + 1;
    219          	printf("%s\n", ptr);
    220          	printf("printf test\n");
    221          	printf("%s is null pointer\n", np);
    222          	printf("%d = 5\n", i);
    223          	printf("%d = - max int\n", mi);
    224          	printf("char %c = 'a'\n", 'a');
    225          	printf("hex %x = ff\n", 0xff);
    226          	printf("hex %02x = 00\n", 0);
    227          	printf("signed %d = unsigned %u = hex %x\n", -3, -3, -3);
    228          	printf("%d %s(s)%", 0, "message");
    229          	printf("\n");
    230          	printf("%d %s(s) with %%\n", 0, "message");
    231          	sprintf(buf, "justif: \"%-10s\"\n", "left"); printf("%s", buf);
    232          	sprintf(buf, "justif: \"%10s\"\n", "right"); printf("%s", buf);
    233          	sprintf(buf, " 3: %04d zero padded\n", 3); printf("%s", buf);
    234          	sprintf(buf, " 3: %-4d left justif.\n", 3); printf("%s", buf);
    235          	sprintf(buf, " 3: %4d right justif.\n", 3); printf("%s", buf);
    236          	sprintf(buf, "-3: %04d zero padded\n", -3); printf("%s", buf);
    237          	sprintf(buf, "-3: %-4d left justif.\n", -3); printf("%s", buf);
    238          	sprintf(buf, "-3: %4d right justif.\n", -3); printf("%s", buf);
    239          
    240          	return 0;
    241          }
    242          
    243          /*
    244           * if you compile this file with
    245           *   gcc -Wall $(YOUR_C_OPTIONS) -DTEST_PRINTF -c printf.c
    246           * you will get a normal warning:
    247           *   printf.c:214: warning: spurious trailing `%' in format
    248           * this line is testing an invalid % at the end of the format string.
    249           *
    250           * this should display (on 32bit int machine) :
    251           *
    252           * Hello world!
    253           * printf test
    254           * (null) is null pointer
    255           * 5 = 5
    256           * -2147483647 = - max int
    257           * char a = 'a'
    258           * hex ff = ff
    259           * hex 00 = 00
    260           * signed -3 = unsigned 4294967293 = hex fffffffd
    261           * 0 message(s)
    262           * 0 message(s) with %
    263           * justif: "left      "
    264           * justif: "     right"
    265           *  3: 0003 zero padded
    266           *  3: 3    left justif.
    267           *  3:    3 right justif.
    268           * -3: -003 zero padded
    269           * -3: -3   left justif.
    270           * -3:   -3 right justif.
    271           */
    272          
    273          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     46   print
        0     20   -> printchar
        0     30   -> printi
        0     24   -> prints
      3     30   printchar
        2      0   -> putchar
      0     14   printf
        0     14   -> print
      1     64   printi
        0     30   -> printchar
        0     34   -> prints
      0     50   prints
        0     16   -> printchar
      3      1   putchar
        2      1   -> HalUARTWrite
      0     16   sprintf
        0     16   -> print


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "(null)">
     739  print
      62  printchar
      65  printf
     368  printi
     258  prints
      42  putchar
      72  sprintf
      42  -- Other

 
 1 606 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     7 bytes in segment XDATA_ROM_C
 
    42 bytes of CODE     memory
     7 bytes of CONST    memory
 1 606 bytes of HUGECODE memory

Errors: none
Warnings: none
