###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  17:08:11
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW9CE8.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\zdo\ZDProfile.c" -D BDB_REPORTING -D SECURE=1
#        -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS
#        -D ZCL_ON_OFF -D ZCL_REPORT -D ZCL_REPORT_DESTINATION_DEVICE -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\ZDProfile.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\ZDProfile.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2015-10-14 11:48:06 -0700 (Wed, 14 Oct 2015) $
      4            Revision:       $Revision: 44530 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 childIndex = 0;
   \                     childIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          
    136          /*********************************************************************
    137           * EXTERNAL VARIABLES
    138           */
    139          
    140          extern endPointDesc_t ZDApp_epDesc;
    141          
    142          /*********************************************************************
    143           * EXTERNAL FUNCTIONS
    144           */
    145          extern void ZDApp_SetParentAnnceTimer( void );
    146          
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          
    151          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    152          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    153          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    154          
    155          /*********************************************************************
    156           * LOCAL VARIABLES
    157           */
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    160          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    164          
    165          /*********************************************************************
    166           * ZDO Message Processing table
    167           */
    168          
    169          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    170          
    171          typedef struct
    172          {
    173            uint16                clusterID;
    174            pfnZDPMsgProcessor    pFn;
    175          } zdpMsgProcItem_t;
    176          

   \                                 In  segment CODE_C, align 1
    177          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   0100         DW 1
   \   000006   ....         DW `??zdpProcessAddrReq::?relay`
   \   000008   0200         DW 2
   \   00000A   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   00000C   0280         DW 32770
   \   00000E   ....         DW `??ZDO_ProcessNodeDescRsp::?relay`
   \   000010   0300         DW 3
   \   000012   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000014   0400         DW 4
   \   000016   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000018   0480         DW 32772
   \   00001A   ....         DW `??ZDO_ProcessSimpleDescRsp::?relay`
   \   00001C   0500         DW 5
   \   00001E   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   000020   0600         DW 6
   \   000022   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000024   3100         DW 49
   \   000026   ....         DW `??ZDO_ProcessMgmtLqiReq::?relay`
   \   000028   3300         DW 51
   \   00002A   ....         DW `??ZDO_ProcessMgmtBindReq::?relay`
   \   00002C   3400         DW 52
   \   00002E   ....         DW `??ZDO_ProcessMgmtLeaveReq::?relay`
   \   000030   FFFF         DW 65535
   \   000032   0000         DW 0H
    178          {
    179          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    180            // These aren't processed by sleeping end devices.
    181            { Device_annce,           ZDO_ProcessDeviceAnnce },
    182          #endif
    183          #if ( ZG_BUILD_RTR_TYPE )
    184            // These aren't processed by end devices.
    185            { Parent_annce,           ZDO_ProcessParentAnnce },
    186            { Parent_annce_rsp,       ZDO_ProcessParentAnnceRsp },
    187          #endif
    188            { NWK_addr_req,           zdpProcessAddrReq },
    189            { IEEE_addr_req,          zdpProcessAddrReq },
    190            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    191            { Node_Desc_rsp,          ZDO_ProcessNodeDescRsp },
    192            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    193            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    194            { Simple_Desc_rsp,        ZDO_ProcessSimpleDescRsp },
    195            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    196            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    197          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    198            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE || ZG_BUILD_ENDDEVICE_TYPE )
    201            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    204            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    207            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    208          #endif
    209          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    210            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    211          #endif
    212          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    213            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    214          #endif
    215          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    216            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    217          #endif
    218          #if defined ( ZDO_USERDESC_RESPONSE )
    219            { User_Desc_req,          ZDO_ProcessUserDescReq },
    220          #endif
    221          #if defined ( ZDO_USERDESCSET_RESPONSE )
    222            { User_Desc_set,          ZDO_ProcessUserDescSet },
    223          #endif
    224          #if defined ( ZDO_SERVERDISC_RESPONSE )
    225            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    226          #endif
    227            {0xFFFF, NULL} // Last
    228          };
    229          
    230          /*********************************************************************
    231           * @fn          fillAndSend
    232           *
    233           * @brief       Combined to reduce space
    234           *
    235           * @param
    236           * @param
    237           *
    238           * @return      afStatus_t
    239           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    240          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    241          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V4,R1
    242            afAddrType_t afAddr;
    243          
    244            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV       R4,#0xc
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   AA..         MOV       R2,?XSP + 0
   \   00001C   AB..         MOV       R3,?XSP + 1
   \   00001E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    245            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV       A,#0x9
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E4           CLR       A
   \   000027   F0           MOVX      @DPTR,A
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   C0E0         PUSH      A
   \   000037   7408         MOV       A,#0x8
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   D0E0         POP       A
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F8           MOV       R0,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F9           MOV       R1,A
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   E8           MOV       A,R0
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   E9           MOV       A,R1
   \   000052   F0           MOVX      @DPTR,A
    246          
    247            *(ZDP_TmpBuf-1) = *transSeq;
   \   000053   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000056   E0           MOVX      A,@DPTR
   \   000057   24FF         ADD       A,#-0x1
   \   000059   F5..         MOV       ?V2,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   34FF         ADDC      A,#-0x1
   \   00005F   F5..         MOV       ?V3,A
   \   000061   85..82       MOV       DPL,?V0
   \   000064   85..83       MOV       DPH,?V1
   \   000067   E0           MOVX      A,@DPTR
   \   000068   85..82       MOV       DPL,?V2
   \   00006B   85..83       MOV       DPH,?V3
   \   00006E   F0           MOVX      @DPTR,A
    248          
    249            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    250                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    251                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   00006F                ; Setup parameters for call to function AF_DataRequest
   \   00006F   75..1E       MOV       ?V5,#0x1e
   \   000072   78..         MOV       R0,#?V5
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007C   78..         MOV       R0,#?V2
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   E5..         MOV       A,?V4
   \   000083   2401         ADD       A,#0x1
   \   000085   F5..         MOV       ?V0,A
   \   000087   E4           CLR       A
   \   000088   3400         ADDC      A,#0x0
   \   00008A   F5..         MOV       ?V1,A
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   7421         MOV       A,#0x21
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000099   90....       MOV       DPTR,#ZDP_TxOptions
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F9           MOV       R1,A
   \   00009E   7C..         MOV       R4,#ZDApp_epDesc & 0xff
   \   0000A0   7D..         MOV       R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000A2   7409         MOV       A,#0x9
   \   0000A4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A7   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000AA   7409         MOV       A,#0x9
   \   0000AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AF   740C         MOV       A,#0xc
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B4   7F06         MOV       R7,#0x6
   \   0000B6   02....       LJMP      ?BANKED_LEAVE_XDATA
    252          
    253          }
    254          
    255          /*********************************************************************
    256           * @fn          ZDP_SendData
    257           *
    258           * @brief       This builds and send a request message that has
    259           *              NWKAddrOfInterest as its only parameter.
    260           *
    261           * @param       dstAddr - destination address
    262           * @param       cmd - clusterID
    263           * @param       dataLen - number of bytes of data
    264           * @param       data - pointer to the data
    265           * @param       SecurityEnable - Security Options
    266           *
    267           * @return      afStatus_t
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    270                                  byte len, uint8 *buf, byte SecurityEnable )
    271          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    272            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V2,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V3,A
    273            byte cnt = len;
   \   000011   E9           MOV       A,R1
   \   000012   FE           MOV       R6,A
   \   000013   740E         MOV       A,#0xe
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   8022         SJMP      ??ZDP_SendData_0
    274          
    275            while ( cnt-- )
    276            {
    277              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   00001F   8882         MOV       DPL,R0
   \   000021   8983         MOV       DPH,R1
   \   000023   E0           MOVX      A,@DPTR
   \   000024   85..82       MOV       DPL,?V2
   \   000027   85..83       MOV       DPH,?V3
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   8882         MOV       DPL,R0
   \   00002D   8983         MOV       DPH,R1
   \   00002F   A3           INC       DPTR
   \   000030   A882         MOV       R0,DPL
   \   000032   A983         MOV       R1,DPH
   \   000034   85..82       MOV       DPL,?V2
   \   000037   85..83       MOV       DPH,?V3
   \   00003A   A3           INC       DPTR
   \   00003B   8582..       MOV       ?V2,DPL
   \   00003E   8583..       MOV       ?V3,DPH
    278            }
   \                     ??ZDP_SendData_0:
   \   000041   74FF         MOV       A,#-0x1
   \   000043   2E           ADD       A,R6
   \   000044   FE           MOV       R6,A
   \   000045   04           INC       A
   \   000046   70D7         JNZ       ??ZDP_SendData_1
    279          
    280            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   000048   7410         MOV       A,#0x10
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   90....       MOV       DPTR,#ZDP_TxOptions
   \   000051   6004         JZ        ??ZDP_SendData_2
   \   000053   7440         MOV       A,#0x40
   \   000055   8001         SJMP      ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   000057   E4           CLR       A
   \                     ??ZDP_SendData_3:
   \   000058   F0           MOVX      @DPTR,A
   \   000059                ; Setup parameters for call to function fillAndSend
   \   000059   740C         MOV       A,#0xc
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000061   EF           MOV       A,R7
   \   000062   F9           MOV       R1,A
   \   000063   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000066   7402         MOV       A,#0x2
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006B   E9           MOV       A,R1
   \   00006C   F9           MOV       R1,A
   \   00006D   90....       MOV       DPTR,#ZDP_TxOptions
   \   000070   E4           CLR       A
   \   000071   F0           MOVX      @DPTR,A
   \   000072   7F04         MOV       R7,#0x4
   \   000074   02....       LJMP      ?BANKED_LEAVE_XDATA
    281          }
    282          
    283          /*********************************************************************
    284           * @fn          ZDP_NWKAddrOfInterestReq
    285           *
    286           * @brief       This builds and send a request message that has
    287           *              NWKAddrOfInterest as its only parameter.
    288           *
    289           * @param       dstAddr - destination address
    290           * @param       nwkAddr - 16 bit address
    291           * @param       SecurityEnable - Security Options
    292           *
    293           * @return      afStatus_t
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    296                                               byte cmd, byte SecurityEnable )
    297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    298            (void)SecurityEnable;  // Intentionally unreferenced parameter
    299          
    300            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   EC           MOV       A,R4
   \   000006   C0E0         PUSH      A
   \   000008   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F583         MOV       DPH,A
   \   000011   8882         MOV       DPL,R0
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
    301            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000016   ED           MOV       A,R5
   \   000017   C0E0         PUSH      A
   \   000019   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F8           MOV       R0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F583         MOV       DPH,A
   \   000022   8882         MOV       DPL,R0
   \   000024   A3           INC       DPTR
   \   000025   D0E0         POP       A
   \   000027   F0           MOVX      @DPTR,A
    302          
    303            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   000028                ; Setup parameters for call to function fillAndSend
   \   000028   E9           MOV       A,R1
   \   000029   F5..         MOV       ?V0,A
   \   00002B   75..00       MOV       ?V1,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7902         MOV       R1,#0x2
   \   000035   EA           MOV       A,R2
   \   000036   FC           MOV       R4,A
   \   000037   EB           MOV       A,R3
   \   000038   FD           MOV       R5,A
   \   000039   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00003B   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00003D   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000040   7402         MOV       A,#0x2
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   7F02         MOV       R7,#0x2
   \   000047   02....       LJMP      ?BANKED_LEAVE_XDATA
    304          }
    305          
    306          /*********************************************************************
    307           * Address Requests
    308           */
    309          
    310          /*********************************************************************
    311           * @fn          ZDP_NwkAddrReq
    312           *
    313           * @brief       This builds and send a NWK_addr_req message.  This
    314           *              function sends a broadcast message looking for a 16
    315           *              bit address with a 64 bit address as bait.
    316           *
    317           * @param       IEEEAddress - looking for this device
    318           * @param       SecurityEnable - Security Options
    319           *
    320           * @return      afStatus_t
    321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    323                                     byte StartIndex, byte SecurityEnable )
    324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V2,R1
   \   000010   8C..         MOV       ?V3,R4
    325            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V0,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V1,A
    326            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    327            zAddrType_t dstAddr;
    328          
    329            (void)SecurityEnable;  // Intentionally unreferenced parameter
    330          
    331            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \   00001C                ; Setup parameters for call to function sAddrExtCmp
   \   00001C   EA           MOV       A,R2
   \   00001D   FC           MOV       R4,A
   \   00001E   EB           MOV       A,R3
   \   00001F   FD           MOV       R5,A
   \   000020   7A..         MOV       R2,#saveExtAddr & 0xff
   \   000022   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   000024   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000027   E9           MOV       A,R1
   \   000028   7016         JNZ       ??ZDP_NwkAddrReq_0
    332            {
    333              dstAddr.addrMode = AddrBroadcast;
   \   00002A   7408         MOV       A,#0x8
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   740F         MOV       A,#0xf
   \   000031   F0           MOVX      @DPTR,A
    334              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   74FD         MOV       A,#-0x3
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   74FF         MOV       A,#-0x1
   \   00003E   801A         SJMP      ??ZDP_NwkAddrReq_1
    335            }
    336            else
    337            {
    338              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000040   7408         MOV       A,#0x8
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   7402         MOV       A,#0x2
   \   000047   F0           MOVX      @DPTR,A
    339              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000048   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F8           MOV       R0,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F9           MOV       R1,A
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   E8           MOV       A,R0
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   E9           MOV       A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   00005A   F0           MOVX      @DPTR,A
    340            }
    341          
    342            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   00005B                ; Setup parameters for call to function sAddrExtCpy
   \   00005B   EE           MOV       A,R6
   \   00005C   FC           MOV       R4,A
   \   00005D   EF           MOV       A,R7
   \   00005E   FD           MOV       R5,A
   \   00005F   AA..         MOV       R2,?V0
   \   000061   AB..         MOV       R3,?V1
   \   000063   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    343          
    344            *pBuf++ = ReqType;
   \   000066   8A82         MOV       DPL,R2
   \   000068   8B83         MOV       DPH,R3
   \   00006A   E5..         MOV       A,?V2
   \   00006C   F0           MOVX      @DPTR,A
    345            *pBuf++ = StartIndex;
   \   00006D   A3           INC       DPTR
   \   00006E   E5..         MOV       A,?V3
   \   000070   F0           MOVX      @DPTR,A
    346          
    347            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000071                ; Setup parameters for call to function fillAndSend
   \   000071   E4           CLR       A
   \   000072   F5..         MOV       ?V0,A
   \   000074   F5..         MOV       ?V1,A
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007B   790A         MOV       R1,#0xa
   \   00007D   7402         MOV       A,#0x2
   \   00007F   12....       LCALL     ?XSTACK_DISP102_8
   \   000082   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000084   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000086   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000089   7402         MOV       A,#0x2
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008E   7409         MOV       A,#0x9
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
   \   000093   7F06         MOV       R7,#0x6
   \   000095   02....       LJMP      ?BANKED_LEAVE_XDATA
    348          }
    349          
    350          /*********************************************************************
    351           * @fn          ZDP_IEEEAddrReq
    352           *
    353           * @brief       This builds and send a IEEE_addr_req message.  This
    354           *              function sends a unicast message looking for a 64
    355           *              bit IEEE address with a 16 bit address as bait.
    356           *
    357           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    358           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    359           * @param       SecurityEnable - Security Options
    360           *
    361           * @return      afStatus_t
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    364                                      byte StartIndex, byte SecurityEnable )
    365          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    366            uint8 *pBuf = ZDP_TmpBuf;
   \   00000C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
    367            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    368            zAddrType_t dstAddr;
    369          
    370            (void)SecurityEnable;  // Intentionally unreferenced parameter
    371          
    372            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000014   7408         MOV       A,#0x8
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   7402         MOV       A,#0x2
   \   00001B   F0           MOVX      @DPTR,A
    373            dstAddr.addr.shortAddr = shortAddr;
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   EA           MOV       A,R2
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   EB           MOV       A,R3
   \   000026   F0           MOVX      @DPTR,A
    374          
    375            *pBuf++ = LO_UINT16( shortAddr );
   \   000027   EA           MOV       A,R2
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   F0           MOVX      @DPTR,A
    376            *pBuf++ = HI_UINT16( shortAddr );
   \   00002D   EB           MOV       A,R3
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
    377          
    378            *pBuf++ = ReqType;
   \   000030   EE           MOV       A,R6
   \   000031   8882         MOV       DPL,R0
   \   000033   8983         MOV       DPH,R1
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   F0           MOVX      @DPTR,A
    379            *pBuf++ = StartIndex;
   \   000038   EC           MOV       A,R4
   \   000039   8882         MOV       DPL,R0
   \   00003B   8983         MOV       DPH,R1
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   F0           MOVX      @DPTR,A
    380          
    381            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000041                ; Setup parameters for call to function fillAndSend
   \   000041   75..01       MOV       ?V0,#0x1
   \   000044   75..00       MOV       ?V1,#0x0
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7904         MOV       R1,#0x4
   \   00004E   7402         MOV       A,#0x2
   \   000050   12....       LCALL     ?XSTACK_DISP102_8
   \   000053   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000055   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000057   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005F   7409         MOV       A,#0x9
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064   7F02         MOV       R7,#0x2
   \   000066   02....       LJMP      ?BANKED_LEAVE_XDATA
    382          }
    383          
    384          /*********************************************************************
    385           * @fn          ZDP_MatchDescReq
    386           *
    387           * @brief       This builds and send a Match_Desc_req message.  This
    388           *              function sends a broadcast or unicast message
    389           *              requesting the list of endpoint/interfaces that
    390           *              match profile ID and cluster IDs.
    391           *
    392           * @param       dstAddr - destination address
    393           * @param       nwkAddr - network address of interest
    394           * @param       ProfileID - Profile ID
    395           * @param       NumInClusters - number of input clusters
    396           * @param       InClusterList - input cluster ID list
    397           * @param       NumOutClusters - number of output clusters
    398           * @param       OutClusterList - output cluster ID list
    399           * @param       SecurityEnable - Security Options
    400           *
    401           * @return      afStatus_t
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    404                                          uint16 ProfileID,
    405                                          byte NumInClusters, cId_t *InClusterList,
    406                                          byte NumOutClusters, cId_t *OutClusterList,
    407                                          byte SecurityEnable )
    408          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    409            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   7412         MOV       A,#0x12
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V0,A
    410            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    411            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    412          
    413            (void)SecurityEnable;  // Intentionally unreferenced parameter
    414          
    415            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000017   EE           MOV       A,R6
   \   000018   25..         ADD       A,?V0
   \   00001A   C3           CLR       C
   \   00001B   33           RLC       A
   \   00001C   2406         ADD       A,#0x6
   \   00001E   FF           MOV       R7,A
    416          
    417            if ( len >= ZDP_BUF_SZ-1 )
   \   00001F   C3           CLR       C
   \   000020   944F         SUBB      A,#0x4f
   \   000022   4005         JC        ??ZDP_MatchDescReq_0
    418            {
    419              return afStatus_MEM_FAIL;
   \   000024   7910         MOV       R1,#0x10
   \   000026   02....       LJMP      ??ZDP_MatchDescReq_1 & 0xFFFF
    420            }
    421          
    422            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    423            // this command to 0xFFFF.  So, here we will filter this and replace
    424            // with 0xFFFD to only send to devices with RX ON.  This includes the
    425            // network address of interest.
    426            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    427                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F5..         MOV       ?V1,A
   \   000038   740F         MOV       A,#0xf
   \   00003A   65..         XRL       A,?V1
   \   00003C   6006         JZ        ??ZDP_MatchDescReq_2
   \   00003E   7402         MOV       A,#0x2
   \   000040   65..         XRL       A,?V1
   \   000042   7018         JNZ       ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   000044   8A82         MOV       DPL,R2
   \   000046   8B83         MOV       DPH,R3
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F4           CPL       A
   \   00004A   7003         JNZ       ??ZDP_MatchDescReq_4
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F4           CPL       A
   \                     ??ZDP_MatchDescReq_4:
   \   00004F   700B         JNZ       ??ZDP_MatchDescReq_3
    428            {
    429              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   74FD         MOV       A,#-0x3
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   74FF         MOV       A,#-0x1
   \   00005B   F0           MOVX      @DPTR,A
    430            }
    431            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   00005C   74FF         MOV       A,#-0x1
   \   00005E   6C           XRL       A,R4
   \   00005F   7003         JNZ       ??ZDP_MatchDescReq_5
   \   000061   74FF         MOV       A,#-0x1
   \   000063   6D           XRL       A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   000064   7004         JNZ       ??ZDP_MatchDescReq_6
    432            {
    433              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000066   7CFD         MOV       R4,#-0x3
   \   000068   7DFF         MOV       R5,#-0x1
    434            }
    435          
    436            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   00006A   EC           MOV       A,R4
   \   00006B   8882         MOV       DPL,R0
   \   00006D   8983         MOV       DPH,R1
   \   00006F   F0           MOVX      @DPTR,A
    437            *pBuf++ = HI_UINT16( nwkAddr );
   \   000070   ED           MOV       A,R5
   \   000071   A3           INC       DPTR
   \   000072   F0           MOVX      @DPTR,A
   \   000073   740E         MOV       A,#0xe
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   E0           MOVX      A,@DPTR
   \   000079   FC           MOV       R4,A
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   FD           MOV       R5,A
    438          
    439            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   00007D   EC           MOV       A,R4
   \   00007E   8882         MOV       DPL,R0
   \   000080   8983         MOV       DPH,R1
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   F0           MOVX      @DPTR,A
    440            *pBuf++ = HI_UINT16( ProfileID );
   \   000085   ED           MOV       A,R5
   \   000086   8882         MOV       DPL,R0
   \   000088   8983         MOV       DPH,R1
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   F0           MOVX      @DPTR,A
    441          
    442            *pBuf++ = NumInClusters; // Input cluster list
   \   00008E   EE           MOV       A,R6
   \   00008F   8882         MOV       DPL,R0
   \   000091   8983         MOV       DPH,R1
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   F0           MOVX      @DPTR,A
   \   000098   E8           MOV       A,R0
   \   000099   2405         ADD       A,#0x5
   \   00009B   F8           MOV       R0,A
   \   00009C   5001         JNC       ??ZDP_MatchDescReq_7
   \   00009E   09           INC       R1
    443            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_7:
   \   00009F   EE           MOV       A,R6
   \   0000A0   604B         JZ        ??ZDP_MatchDescReq_8
    444            {
    445              for (i=0; i<NumInClusters; ++i)  {
   \   0000A2   75..00       MOV       ?V1,#0x0
   \   0000A5   7410         MOV       A,#0x10
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   FC           MOV       R4,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   FD           MOV       R5,A
   \   0000AF   8036         SJMP      ??ZDP_MatchDescReq_9
    446                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??ZDP_MatchDescReq_10:
   \   0000B1   E5..         MOV       A,?V1
   \   0000B3   25E0         ADD       A,0xE0 /* A   */
   \   0000B5   F5..         MOV       ?V2,A
   \   0000B7   E4           CLR       A
   \   0000B8   33           RLC       A
   \   0000B9   F5..         MOV       ?V3,A
   \   0000BB   EC           MOV       A,R4
   \   0000BC   25..         ADD       A,?V2
   \   0000BE   F5..         MOV       ?V2,A
   \   0000C0   ED           MOV       A,R5
   \   0000C1   35..         ADDC      A,?V3
   \   0000C3   F5..         MOV       ?V3,A
   \   0000C5   85..82       MOV       DPL,?V2
   \   0000C8   F583         MOV       DPH,A
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   8882         MOV       DPL,R0
   \   0000CD   8983         MOV       DPH,R1
   \   0000CF   F0           MOVX      @DPTR,A
    447                *pBuf++ = HI_UINT16( InClusterList[i] );
   \   0000D0   85..82       MOV       DPL,?V2
   \   0000D3   85..83       MOV       DPH,?V3
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   8882         MOV       DPL,R0
   \   0000DA   8983         MOV       DPH,R1
   \   0000DC   A3           INC       DPTR
   \   0000DD   F0           MOVX      @DPTR,A
   \   0000DE   E8           MOV       A,R0
   \   0000DF   2402         ADD       A,#0x2
   \   0000E1   F8           MOV       R0,A
   \   0000E2   5001         JNC       ??ZDP_MatchDescReq_11
   \   0000E4   09           INC       R1
    448              }
   \                     ??ZDP_MatchDescReq_11:
   \   0000E5   05..         INC       ?V1
   \                     ??ZDP_MatchDescReq_9:
   \   0000E7   E5..         MOV       A,?V1
   \   0000E9   C3           CLR       C
   \   0000EA   9E           SUBB      A,R6
   \   0000EB   40C4         JC        ??ZDP_MatchDescReq_10
    449            }
    450          
    451            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_8:
   \   0000ED   8882         MOV       DPL,R0
   \   0000EF   8983         MOV       DPH,R1
   \   0000F1   E5..         MOV       A,?V0
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   A882         MOV       R0,DPL
   \   0000F7   A983         MOV       R1,DPH
    452            if ( NumOutClusters )
   \   0000F9   604C         JZ        ??ZDP_MatchDescReq_12
    453            {
    454              for (i=0; i<NumOutClusters; ++i)  {
   \   0000FB   75..00       MOV       ?V1,#0x0
   \   0000FE   7413         MOV       A,#0x13
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FC           MOV       R4,A
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   FD           MOV       R5,A
   \   000108   8036         SJMP      ??ZDP_MatchDescReq_13
    455                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??ZDP_MatchDescReq_14:
   \   00010A   E5..         MOV       A,?V1
   \   00010C   25E0         ADD       A,0xE0 /* A   */
   \   00010E   F5..         MOV       ?V2,A
   \   000110   E4           CLR       A
   \   000111   33           RLC       A
   \   000112   F5..         MOV       ?V3,A
   \   000114   EC           MOV       A,R4
   \   000115   25..         ADD       A,?V2
   \   000117   F5..         MOV       ?V2,A
   \   000119   ED           MOV       A,R5
   \   00011A   35..         ADDC      A,?V3
   \   00011C   F5..         MOV       ?V3,A
   \   00011E   85..82       MOV       DPL,?V2
   \   000121   F583         MOV       DPH,A
   \   000123   E0           MOVX      A,@DPTR
   \   000124   8882         MOV       DPL,R0
   \   000126   8983         MOV       DPH,R1
   \   000128   F0           MOVX      @DPTR,A
    456                *pBuf++ = HI_UINT16( OutClusterList[i] );
   \   000129   85..82       MOV       DPL,?V2
   \   00012C   85..83       MOV       DPH,?V3
   \   00012F   A3           INC       DPTR
   \   000130   E0           MOVX      A,@DPTR
   \   000131   8882         MOV       DPL,R0
   \   000133   8983         MOV       DPH,R1
   \   000135   A3           INC       DPTR
   \   000136   F0           MOVX      @DPTR,A
   \   000137   E8           MOV       A,R0
   \   000138   2402         ADD       A,#0x2
   \   00013A   F8           MOV       R0,A
   \   00013B   5001         JNC       ??ZDP_MatchDescReq_15
   \   00013D   09           INC       R1
    457              }
   \                     ??ZDP_MatchDescReq_15:
   \   00013E   05..         INC       ?V1
   \                     ??ZDP_MatchDescReq_13:
   \   000140   E5..         MOV       A,?V1
   \   000142   C3           CLR       C
   \   000143   95..         SUBB      A,?V0
   \   000145   40C3         JC        ??ZDP_MatchDescReq_14
    458            }
    459          
    460            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_12:
   \   000147                ; Setup parameters for call to function fillAndSend
   \   000147   75..06       MOV       ?V0,#0x6
   \   00014A   75..00       MOV       ?V1,#0x0
   \   00014D   78..         MOV       R0,#?V0
   \   00014F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000152   EF           MOV       A,R7
   \   000153   F9           MOV       R1,A
   \   000154   EA           MOV       A,R2
   \   000155   FC           MOV       R4,A
   \   000156   EB           MOV       A,R3
   \   000157   FD           MOV       R5,A
   \   000158   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00015A   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00015C   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00015F   7402         MOV       A,#0x2
   \   000161   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   000164   7F06         MOV       R7,#0x6
   \   000166   02....       LJMP      ?BANKED_LEAVE_XDATA
    461          }
    462          
    463          /*********************************************************************
    464           * @fn          ZDP_SimpleDescReq
    465           *
    466           * @brief       This builds and send a NWK_Simple_Desc_req
    467           *              message.  This function sends unicast message to the
    468           *              destination device.
    469           *
    470           * @param       dstAddr - destination address
    471           * @param       nwkAddr - 16 bit address
    472           * @param       epIntf - endpoint/interface
    473           * @param       SecurityEnable - Security Options
    474           *
    475           * @return      afStatus_t
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    478                                              byte endPoint, byte SecurityEnable )
    479          
    480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    481            (void)SecurityEnable;  // Intentionally unreferenced parameter
    482          
    483            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   EC           MOV       A,R4
   \   000006   C0E0         PUSH      A
   \   000008   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F583         MOV       DPH,A
   \   000011   8882         MOV       DPL,R0
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
    484            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000016   ED           MOV       A,R5
   \   000017   C0E0         PUSH      A
   \   000019   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F8           MOV       R0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F583         MOV       DPH,A
   \   000022   8882         MOV       DPL,R0
   \   000024   A3           INC       DPTR
   \   000025   D0E0         POP       A
   \   000027   F0           MOVX      @DPTR,A
    485            ZDP_TmpBuf[2] = endPoint;
   \   000028   E9           MOV       A,R1
   \   000029   C0E0         PUSH      A
   \   00002B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F583         MOV       DPH,A
   \   000034   8882         MOV       DPL,R0
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   D0E0         POP       A
   \   00003A   F0           MOVX      @DPTR,A
    486          
    487            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \   00003B                ; Setup parameters for call to function fillAndSend
   \   00003B   75..04       MOV       ?V0,#0x4
   \   00003E   75..00       MOV       ?V1,#0x0
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7903         MOV       R1,#0x3
   \   000048   EA           MOV       A,R2
   \   000049   FC           MOV       R4,A
   \   00004A   EB           MOV       A,R3
   \   00004B   FD           MOV       R5,A
   \   00004C   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00004E   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000050   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000053   7402         MOV       A,#0x2
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   \   000058   7F02         MOV       R7,#0x2
   \   00005A   02....       LJMP      ?BANKED_LEAVE_XDATA
    488          }
    489          
    490          /*********************************************************************
    491           * @fn          ZDP_UserDescSet
    492           *
    493           * @brief       This builds and send a User_Desc_set message to set
    494           *              the user descriptor.  This function sends unicast
    495           *              message to the destination device.
    496           *
    497           * @param       dstAddr - destination address
    498           * @param       nwkAddr - 16 bit address
    499           * @param       UserDescriptor - user descriptor
    500           * @param       SecurityEnable - Security Options
    501           *
    502           * @return      afStatus_t
    503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    505                                    UserDescriptorFormat_t *UserDescriptor,
    506                                    byte SecurityEnable )
    507          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    508            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V1,A
   \   000013   740F         MOV       A,#0xf
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
    509            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    510                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00001D   8882         MOV       DPL,R0
   \   00001F   F583         MOV       DPH,A
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FA           MOV       R2,A
   \   000023   C3           CLR       C
   \   000024   9410         SUBB      A,#0x10
   \   000026   5004         JNC       ??ZDP_UserDescSet_0
   \   000028   8A..         MOV       ?V2,R2
   \   00002A   8003         SJMP      ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00002C   75..10       MOV       ?V2,#0x10
    511            byte addrLen = 2;
    512          
    513            (void)SecurityEnable;  // Intentionally unreferenced parameter
    514          
    515            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   00002F   EC           MOV       A,R4
   \   000030   85..82       MOV       DPL,?V0
   \   000033   85..83       MOV       DPH,?V1
   \   000036   F0           MOVX      @DPTR,A
    516            *pBuf++ = HI_UINT16( nwkAddr );
   \   000037   ED           MOV       A,R5
   \   000038   A3           INC       DPTR
   \   000039   F0           MOVX      @DPTR,A
    517          
    518            *pBuf++ = len;
   \   00003A   85..82       MOV       DPL,?V0
   \   00003D   85..83       MOV       DPH,?V1
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E5..         MOV       A,?V2
   \   000044   F0           MOVX      @DPTR,A
    519            addrLen = 3;
    520          
    521            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \   000045                ; Setup parameters for call to function osal_memcpy
   \   000045   8882         MOV       DPL,R0
   \   000047   8983         MOV       DPH,R1
   \   000049   A3           INC       DPTR
   \   00004A   A982         MOV       R1,DPL
   \   00004C   AA83         MOV       R2,DPH
   \   00004E   89..         MOV       ?V4,R1
   \   000050   8A..         MOV       ?V5,R2
   \   000052   75..00       MOV       ?V6,#0x0
   \   000055   78..         MOV       R0,#?V4
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005A   AC..         MOV       R4,?V2
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   E5..         MOV       A,?V0
   \   000060   2403         ADD       A,#0x3
   \   000062   FA           MOV       R2,A
   \   000063   E4           CLR       A
   \   000064   35..         ADDC      A,?V1
   \   000066   FB           MOV       R3,A
   \   000067   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
    522            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   00006F                ; Setup parameters for call to function osal_memset
   \   00006F   A8..         MOV       R0,?V2
   \   000071   7410         MOV       A,#0x10
   \   000073   C3           CLR       C
   \   000074   98           SUBB      A,R0
   \   000075   FC           MOV       R4,A
   \   000076   95E0         SUBB      A,0xE0 /* A   */
   \   000078   FD           MOV       R5,A
   \   000079   7920         MOV       R1,#0x20
   \   00007B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    523          
    524            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   00007E                ; Setup parameters for call to function fillAndSend
   \   00007E   75..14       MOV       ?V0,#0x14
   \   000081   75..00       MOV       ?V1,#0x0
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000089   7913         MOV       R1,#0x13
   \   00008B   EE           MOV       A,R6
   \   00008C   FC           MOV       R4,A
   \   00008D   EF           MOV       A,R7
   \   00008E   FD           MOV       R5,A
   \   00008F   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000091   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000093   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000096   7402         MOV       A,#0x2
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009B   7F07         MOV       R7,#0x7
   \   00009D   02....       LJMP      ?BANKED_LEAVE_XDATA
    525          }
    526          
    527          /*********************************************************************
    528           * @fn          ZDP_ServerDiscReq
    529           *
    530           * @brief       Build and send a Server_Discovery_req request message.
    531           *
    532           * @param       serverMask - 16-bit bit-mask of server services being sought.
    533           * @param       SecurityEnable - Security Options
    534           *
    535           * @return      afStatus_t
    536           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    538          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    539            uint8 *pBuf = ZDP_TmpBuf;
   \   00000C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
    540            zAddrType_t dstAddr;
    541          
    542            dstAddr.addrMode = AddrBroadcast;
   \   000014   7408         MOV       A,#0x8
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   740F         MOV       A,#0xf
   \   00001B   F0           MOVX      @DPTR,A
    543            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   74FD         MOV       A,#-0x3
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   74FF         MOV       A,#-0x1
   \   000028   F0           MOVX      @DPTR,A
    544          
    545            *pBuf++ = LO_UINT16( serverMask );
   \   000029   EA           MOV       A,R2
   \   00002A   8882         MOV       DPL,R0
   \   00002C   8983         MOV       DPH,R1
   \   00002E   F0           MOVX      @DPTR,A
    546            *pBuf = HI_UINT16( serverMask );
   \   00002F   EB           MOV       A,R3
   \   000030   A3           INC       DPTR
   \   000031   F0           MOVX      @DPTR,A
    547          
    548            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    549                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   000032   EE           MOV       A,R6
   \   000033   90....       MOV       DPTR,#ZDP_TxOptions
   \   000036   6004         JZ        ??ZDP_ServerDiscReq_0
   \   000038   7440         MOV       A,#0x40
   \   00003A   8001         SJMP      ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   00003C   E4           CLR       A
   \                     ??ZDP_ServerDiscReq_1:
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E                ; Setup parameters for call to function fillAndSend
   \   00003E   75..15       MOV       ?V0,#0x15
   \   000041   75..00       MOV       ?V1,#0x0
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   7902         MOV       R1,#0x2
   \   00004B   E9           MOV       A,R1
   \   00004C   12....       LCALL     ?XSTACK_DISP102_8
   \   00004F   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000051   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000053   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005B   E9           MOV       A,R1
   \   00005C   F9           MOV       R1,A
   \   00005D   90....       MOV       DPTR,#ZDP_TxOptions
   \   000060   E4           CLR       A
   \   000061   F0           MOVX      @DPTR,A
   \   000062   7409         MOV       A,#0x9
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   \   000067   7F02         MOV       R7,#0x2
   \   000069   02....       LJMP      ?BANKED_LEAVE_XDATA
    550          }
    551          
    552          /*********************************************************************
    553           * @fn          ZDP_DeviceAnnce
    554           *
    555           * @brief       This builds and send a Device_Annce message.  This
    556           *              function sends a broadcast message.
    557           *
    558           * @param       nwkAddr - 16 bit address of the device
    559           * @param       IEEEAddr - 64 bit address of the device
    560           * @param       capabilities - device capabilities.  This field is only
    561           *                 sent for v1.1 networks.
    562           * @param       SecurityEnable - Security Options
    563           *
    564           * @return      afStatus_t
    565           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    566          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    567                                        byte capabilities, byte SecurityEnable )
    568          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    569            zAddrType_t dstAddr;
    570            uint8 len;
    571          
    572            (void)SecurityEnable;  // Intentionally unreferenced parameter
    573          
    574            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV       A,#0x8
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   740F         MOV       A,#0xf
   \   000013   F0           MOVX      @DPTR,A
    575            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   74FD         MOV       A,#-0x3
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   74FF         MOV       A,#-0x1
   \   000020   F0           MOVX      @DPTR,A
    576          
    577            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000021   EA           MOV       A,R2
   \   000022   C0E0         PUSH      A
   \   000024   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F583         MOV       DPH,A
   \   00002D   8882         MOV       DPL,R0
   \   00002F   D0E0         POP       A
   \   000031   F0           MOVX      @DPTR,A
    578            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000032   EB           MOV       A,R3
   \   000033   C0E0         PUSH      A
   \   000035   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F583         MOV       DPH,A
   \   00003E   8882         MOV       DPL,R0
   \   000040   A3           INC       DPTR
   \   000041   D0E0         POP       A
   \   000043   F0           MOVX      @DPTR,A
    579            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   000044                ; Setup parameters for call to function sAddrExtCpy
   \   000044   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000047   E0           MOVX      A,@DPTR
   \   000048   2402         ADD       A,#0x2
   \   00004A   FA           MOV       R2,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   3400         ADDC      A,#0x0
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    580            len = 2 + Z_EXTADDR_LEN;
    581          
    582            ZDP_TmpBuf[10] = capabilities;
   \   000053   EE           MOV       A,R6
   \   000054   C0E0         PUSH      A
   \   000056   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F8           MOV       R0,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   C8           XCH       A,R0
   \   00005E   240A         ADD       A,#0xa
   \   000060   F582         MOV       DPL,A
   \   000062   E4           CLR       A
   \   000063   38           ADDC      A,R0
   \   000064   F583         MOV       DPH,A
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
    583            len++;
    584          
    585            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   000069                ; Setup parameters for call to function fillAndSend
   \   000069   75..13       MOV       ?V0,#0x13
   \   00006C   75..00       MOV       ?V1,#0x0
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   790B         MOV       R1,#0xb
   \   000076   7402         MOV       A,#0x2
   \   000078   12....       LCALL     ?XSTACK_DISP102_8
   \   00007B   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00007D   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00007F   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000082   7402         MOV       A,#0x2
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   \   000087   7409         MOV       A,#0x9
   \   000089   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008C   7F02         MOV       R7,#0x2
   \   00008E   02....       LJMP      ?BANKED_LEAVE_XDATA
    586          }
    587          
    588          /*********************************************************************
    589           * @fn          ZDP_ParentAnnce
    590           *
    591           * @brief       This builds and send a Parent_Annce and Parent_Annce_Rsp
    592           *              messages, it will depend on the clusterID parameter.
    593           *
    594           * @param       TransSeq - ZDP Transaction Sequence Number
    595           * @param       dstAddr - destination address
    596           * @param       numberOfChildren - 8 bit number of children
    597           * @param       childInfo - list of children information (ExtAddr and Age)
    598           * @param       clusterID - Parent_annce or Parent_annce_rsp
    599           * @param       SecurityEnable - Security Options
    600           *
    601           * @return      afStatus_t
    602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    603          afStatus_t ZDP_ParentAnnce( uint8 *TransSeq,
   \                     ZDP_ParentAnnce:
    604                                      zAddrType_t *dstAddr,
    605                                      uint8 numberOfChildren,
    606                                      uint8 *childInfo,
    607                                      cId_t clusterID,
    608                                      uint8 SecurityEnable )
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D   89..         MOV       ?V8,R1
    610            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FA           MOV       R2,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FB           MOV       R3,A
    611            ZDO_ChildInfo_t *pChildInfo;
    612            uint8 i, len;
    613            uint8 *numOfChild;
    614          
    615            (void)SecurityEnable;  // Intentionally unreferenced parameter
    616          
    617            pChildInfo = (ZDO_ChildInfo_t *)childInfo;
    618          
    619            if ( dstAddr->addrMode == AddrBroadcast )
   \   000017   8C82         MOV       DPL,R4
   \   000019   8D83         MOV       DPH,R5
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   640F         XRL       A,#0xf
   \   000026   700B         JNZ       ??ZDP_ParentAnnce_0
    620            {
    621              // Make sure is sent to 0xFFFC
    622              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000028   8C82         MOV       DPL,R4
   \   00002A   8D83         MOV       DPH,R5
   \   00002C   74FC         MOV       A,#-0x4
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   74FF         MOV       A,#-0x1
   \   000032   F0           MOVX      @DPTR,A
    623            }
    624            len = 1;
   \                     ??ZDP_ParentAnnce_0:
   \   000033   75..01       MOV       ?V6,#0x1
   \   000036   7418         MOV       A,#0x18
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F5..         MOV       ?V2,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F5..         MOV       ?V3,A
    625            if ( clusterID == Parent_annce_rsp )
   \   000042   741F         MOV       A,#0x1f
   \   000044   65..         XRL       A,?V2
   \   000046   7004         JNZ       ??ZDP_ParentAnnce_1
   \   000048   7480         MOV       A,#-0x80
   \   00004A   65..         XRL       A,?V3
   \                     ??ZDP_ParentAnnce_1:
   \   00004C   700E         JNZ       ??ZDP_ParentAnnce_2
    626            {
    627              // + Status Byte
    628              len += 1;
   \   00004E   75..02       MOV       ?V6,#0x2
    629              // Set the status bit to success
    630              *pBuf++ = 0;
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   E4           CLR       A
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   AA82         MOV       R2,DPL
   \   00005A   AB83         MOV       R3,DPH
    631            }
    632            
    633            numOfChild = pBuf;
   \                     ??ZDP_ParentAnnce_2:
   \   00005C   8A..         MOV       ?V0,R2
   \   00005E   8B..         MOV       ?V1,R3
    634            *pBuf++ = numberOfChildren;
   \   000060   8A82         MOV       DPL,R2
   \   000062   8B83         MOV       DPH,R3
   \   000064   E9           MOV       A,R1
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   AA82         MOV       R2,DPL
   \   000069   AB83         MOV       R3,DPH
    635          
    636            for ( i = 0; i < MAX_PARENT_ANNCE_CHILD; i++ )
   \   00006B   75..00       MOV       ?V7,#0x0
   \   00006E   7416         MOV       A,#0x16
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F5..         MOV       ?V12,A
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F5..         MOV       ?V13,A
   \   00007A   8002         SJMP      ??ZDP_ParentAnnce_3
   \                     ??ZDP_ParentAnnce_4:
   \   00007C   05..         INC       ?V7
   \                     ??ZDP_ParentAnnce_3:
   \   00007E   E5..         MOV       A,?V7
   \   000080   C3           CLR       C
   \   000081   940A         SUBB      A,#0xa
   \   000083   5040         JNC       ??ZDP_ParentAnnce_5
    637            {
    638              pBuf = osal_cpyExtAddr( pBuf, pChildInfo[childIndex].extAddr );
   \   000085                ; Setup parameters for call to function sAddrExtCpy
   \   000085   90....       MOV       DPTR,#childIndex
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F5..         MOV       ?V10,A
   \   00008B   75..00       MOV       ?V11,#0x0
   \   00008E   7403         MOV       A,#0x3
   \   000090   78..         MOV       R0,#?V10
   \   000092   12....       LCALL     ?S_SHL
   \   000095   E5..         MOV       A,?V12
   \   000097   25..         ADD       A,?V10
   \   000099   FC           MOV       R4,A
   \   00009A   E5..         MOV       A,?V13
   \   00009C   35..         ADDC      A,?V11
   \   00009E   FD           MOV       R5,A
   \   00009F   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    639              childIndex++;
   \   0000A2   90....       MOV       DPTR,#childIndex
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   04           INC       A
   \   0000A7   F0           MOVX      @DPTR,A
    640              
    641              len += Z_EXTADDR_LEN;
   \   0000A8   7408         MOV       A,#0x8
   \   0000AA   25..         ADD       A,?V6
   \   0000AC   F5..         MOV       ?V6,A
    642              
    643              if ( childIndex == numberOfChildren )
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   65..         XRL       A,?V8
   \   0000B1   70C9         JNZ       ??ZDP_ParentAnnce_4
    644              {
    645                pBuf = numOfChild;
    646                *pBuf = i + 1;
   \   0000B3   7401         MOV       A,#0x1
   \   0000B5   25..         ADD       A,?V7
   \   0000B7   85..82       MOV       DPL,?V0
   \   0000BA   85..83       MOV       DPH,?V1
   \   0000BD   F0           MOVX      @DPTR,A
    647                // All childs are taken, restart index and go out
    648                childIndex = 0;
   \   0000BE   90....       MOV       DPTR,#childIndex
   \   0000C1   E4           CLR       A
   \   0000C2   F0           MOVX      @DPTR,A
    649                return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \   0000C3                ; Setup parameters for call to function fillAndSend
   \   0000C3   8040         SJMP      ??ZDP_ParentAnnce_6
    650              }
    651            }
    652            
    653            pBuf = numOfChild;
    654            *pBuf = MAX_PARENT_ANNCE_CHILD;
   \                     ??ZDP_ParentAnnce_5:
   \   0000C5   85..82       MOV       DPL,?V0
   \   0000C8   85..83       MOV       DPH,?V1
   \   0000CB   740A         MOV       A,#0xa
   \   0000CD   F0           MOVX      @DPTR,A
    655            if ( childIndex < numberOfChildren )
   \   0000CE   90....       MOV       DPTR,#childIndex
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   C3           CLR       C
   \   0000D3   95..         SUBB      A,?V8
   \   0000D5   502E         JNC       ??ZDP_ParentAnnce_6
    656            {
    657              if ( clusterID == Parent_annce )
   \   0000D7   741F         MOV       A,#0x1f
   \   0000D9   65..         XRL       A,?V2
   \   0000DB   45..         ORL       A,?V3
   \   0000DD   7003         JNZ       ??ZDP_ParentAnnce_7
    658              {
    659                ZDApp_SetParentAnnceTimer();
   \   0000DF                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   0000DF   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
    660              }
    661              if ( clusterID == Parent_annce_rsp )
   \                     ??ZDP_ParentAnnce_7:
   \   0000E2   741F         MOV       A,#0x1f
   \   0000E4   65..         XRL       A,?V2
   \   0000E6   7004         JNZ       ??ZDP_ParentAnnce_8
   \   0000E8   7480         MOV       A,#-0x80
   \   0000EA   65..         XRL       A,?V3
   \                     ??ZDP_ParentAnnce_8:
   \   0000EC   7017         JNZ       ??ZDP_ParentAnnce_6
    662              {
    663                osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, 10 );
   \   0000EE                ; Setup parameters for call to function osal_start_timerEx
   \   0000EE   90....       MOV       DPTR,#__Constant_a
   \   0000F1   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000F4   7A00         MOV       R2,#0x0
   \   0000F6   7B40         MOV       R3,#0x40
   \   0000F8   90....       MOV       DPTR,#ZDAppTaskID
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   F9           MOV       R1,A
   \   0000FD   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000100   7404         MOV       A,#0x4
   \   000102   12....       LCALL     ?DEALLOC_XSTACK8
    664              }
    665            }
    666          
    667            return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \                     ??ZDP_ParentAnnce_6:
   \   000105                ; Setup parameters for call to function fillAndSend
   \   000105   78..         MOV       R0,#?V2
   \   000107   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010A   A9..         MOV       R1,?V6
   \   00010C   EE           MOV       A,R6
   \   00010D   FC           MOV       R4,A
   \   00010E   EF           MOV       A,R7
   \   00010F   FD           MOV       R5,A
   \   000110   AA..         MOV       R2,?V4
   \   000112   AB..         MOV       R3,?V5
   \   000114   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000117   7402         MOV       A,#0x2
   \   000119   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011C   7F0E         MOV       R7,#0xe
   \   00011E   02....       LJMP      ?BANKED_LEAVE_XDATA
    668          }
    669          
    670          /*********************************************************************
    671           * Address Responses
    672           */
    673          
    674          /*********************************************************************
    675           * @fn      zdpProcessAddrReq
    676           *
    677           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    678           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    679           *
    680           * @param   inMsg - incoming message
    681           *
    682           * @return  none
    683           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    684          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    686            associated_devices_t *pAssoc;
    687            uint8 reqType;
    688            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   7EFE         MOV       R6,#-0x2
   \   000010   7FFF         MOV       R7,#-0x1
    689            uint8 *ieee = NULL;
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   75..00       MOV       ?V3,#0x0
    690          
    691            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000018   EA           MOV       A,R2
   \   000019   240C         ADD       A,#0xc
   \   00001B   F5..         MOV       ?V8,A
   \   00001D   E4           CLR       A
   \   00001E   35..         ADDC      A,?V5
   \   000020   F5..         MOV       ?V9,A
   \   000022   85..82       MOV       DPL,?V8
   \   000025   F583         MOV       DPH,A
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FA           MOV       R2,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FB           MOV       R3,A
   \   00002C   EA           MOV       A,R2
   \   00002D   4B           ORL       A,R3
   \   00002E   7004         JNZ       ??zdpProcessAddrReq_0
   \   000030   7C08         MOV       R4,#0x8
   \   000032   8002         SJMP      ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000034   7C02         MOV       R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000036   E5..         MOV       A,?V4
   \   000038   2413         ADD       A,#0x13
   \   00003A   F582         MOV       DPL,A
   \   00003C   E4           CLR       A
   \   00003D   35..         ADDC      A,?V5
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F8           MOV       R0,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
   \   000046   E8           MOV       A,R0
   \   000047   2C           ADD       A,R4
   \   000048   F582         MOV       DPL,A
   \   00004A   E4           CLR       A
   \   00004B   39           ADDC      A,R1
   \   00004C   F583         MOV       DPH,A
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F5..         MOV       ?V6,A
    692          
    693            if ( inMsg->clusterID == NWK_addr_req )
   \   000051   EA           MOV       A,R2
   \   000052   4B           ORL       A,R3
   \   000053   701C         JNZ       ??zdpProcessAddrReq_2
    694          
    695            {
    696              ieee = inMsg->asdu;
   \   000055   88..         MOV       ?V2,R0
   \   000057   89..         MOV       ?V3,R1
    697          
    698              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   000059                ; Setup parameters for call to function sAddrExtCmp
   \   000059   AC..         MOV       R4,?V2
   \   00005B   AD..         MOV       R5,?V3
   \   00005D   7A..         MOV       R2,#saveExtAddr & 0xff
   \   00005F   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   000061   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000064   E9           MOV       A,R1
   \   000065   602E         JZ        ??zdpProcessAddrReq_3
    699              {
    700                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000067   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   FE           MOV       R6,A
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   FF           MOV       R7,A
   \   00006F   8024         SJMP      ??zdpProcessAddrReq_3
    701              }
    702              // Handle response for sleeping end devices
    703              else if ( (ZSTACK_ROUTER_BUILD)
    704                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    705                       && ((pAssoc->nodeRelation == CHILD_RFD) || (pAssoc->nodeRelation == CHILD_RFD_RX_IDLE)) ) )
    706              {
    707                aoi = pAssoc->shortAddr;
    708                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    709                  reqType = 0xFF; // Force Invalid
    710              }
    711            }
    712            else  // if ( inMsg->clusterID == IEEE_addr_req )
    713            {
    714              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   000071   8882         MOV       DPL,R0
   \   000073   8983         MOV       DPH,R1
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FA           MOV       R2,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F8           MOV       R0,A
   \   00007A   E4           CLR       A
   \   00007B   C8           XCH       A,R0
   \   00007C   F9           MOV       R1,A
   \   00007D   EA           MOV       A,R2
   \   00007E   28           ADD       A,R0
   \   00007F   FE           MOV       R6,A
   \   000080   E4           CLR       A
   \   000081   39           ADDC      A,R1
   \   000082   FF           MOV       R7,A
    715          
    716              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000083   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000086   E0           MOVX      A,@DPTR
   \   000087   6E           XRL       A,R6
   \   000088   7003         JNZ       ??zdpProcessAddrReq_4
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_4:
   \   00008D   7006         JNZ       ??zdpProcessAddrReq_3
    717              {
    718                ieee = saveExtAddr;
   \   00008F   75....       MOV       ?V2,#saveExtAddr & 0xff
   \   000092   75....       MOV       ?V3,#(saveExtAddr >> 8) & 0xff
    719              }
    720              else if ( (ZSTACK_ROUTER_BUILD)
    721                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    722                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    723              {
    724                AddrMgrEntry_t addrEntry;
    725                addrEntry.user = ADDRMGR_USER_DEFAULT;
    726                addrEntry.index = pAssoc->addrIdx;
    727                if ( AddrMgrEntryGet( &addrEntry ) )
    728                {
    729                  ieee = addrEntry.extAddr;
    730                }
    731          
    732                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    733                  reqType = 0xFF; // Force Invalid
    734              }
    735            }
    736          
    737            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_3:
   \   000095   74FE         MOV       A,#-0x2
   \   000097   6E           XRL       A,R6
   \   000098   7003         JNZ       ??zdpProcessAddrReq_5
   \   00009A   74FF         MOV       A,#-0x1
   \   00009C   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_5:
   \   00009D   6006         JZ        ??zdpProcessAddrReq_6
   \   00009F   E5..         MOV       A,?V2
   \   0000A1   45..         ORL       A,?V3
   \   0000A3   7011         JNZ       ??zdpProcessAddrReq_7
   \                     ??zdpProcessAddrReq_6:
   \   0000A5   E5..         MOV       A,?V4
   \   0000A7   240B         ADD       A,#0xb
   \   0000A9   F582         MOV       DPL,A
   \   0000AB   E4           CLR       A
   \   0000AC   35..         ADDC      A,?V5
   \   0000AE   F583         MOV       DPH,A
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   6003         JZ        $+5
   \   0000B3   02....       LJMP      ??zdpProcessAddrReq_8 & 0xFFFF
    738            {
    739              uint8 stat;
    740              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_7:
   \   0000B6   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F5..         MOV       ?V0,A
   \   0000BC   A3           INC       DPTR
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F5..         MOV       ?V1,A
    741              // Status + IEEE-Addr + Nwk-Addr.
    742              uint8 len = 1 + Z_EXTADDR_LEN + 2;
    743          
    744              // If aoi and iee are both setup, we found results
    745              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   0000C0   74FE         MOV       A,#-0x2
   \   0000C2   6E           XRL       A,R6
   \   0000C3   7003         JNZ       ??zdpProcessAddrReq_9
   \   0000C5   74FF         MOV       A,#-0x1
   \   0000C7   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_9:
   \   0000C8   6031         JZ        ??zdpProcessAddrReq_10
   \   0000CA   E5..         MOV       A,?V2
   \   0000CC   45..         ORL       A,?V3
   \   0000CE   602B         JZ        ??zdpProcessAddrReq_10
    746              {
    747                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    748                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0000D0   E5..         MOV       A,?V6
   \   0000D2   6006         JZ        ??zdpProcessAddrReq_11
   \   0000D4   7401         MOV       A,#0x1
   \   0000D6   65..         XRL       A,?V6
   \   0000D8   7005         JNZ       ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0000DA   75..00       MOV       ?V6,#0x0
   \   0000DD   8003         SJMP      ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_12:
   \   0000DF   75..80       MOV       ?V6,#-0x80
    749                        
    750                if(stat == ZDP_INVALID_REQTYPE)
   \                     ??zdpProcessAddrReq_13:
   \   0000E2   7480         MOV       A,#-0x80
   \   0000E4   65..         XRL       A,?V6
   \   0000E6   7040         JNZ       ??zdpProcessAddrReq_14
    751                {
    752                  //R21 Errata update CCB 2111 
    753                  if(inMsg->wasBroadcast == TRUE)
   \   0000E8   E5..         MOV       A,?V4
   \   0000EA   240B         ADD       A,#0xb
   \   0000EC   F582         MOV       DPL,A
   \   0000EE   E4           CLR       A
   \   0000EF   35..         ADDC      A,?V5
   \   0000F1   F583         MOV       DPH,A
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   6401         XRL       A,#0x1
   \   0000F6   7030         JNZ       ??zdpProcessAddrReq_14
    754                  {
    755                    return;
   \   0000F8   02....       LJMP      ??zdpProcessAddrReq_8 & 0xFFFF
    756                  }
    757                  
    758                  stat = ZDP_INVALID_REQTYPE;
    759                }
    760              }
    761              else
    762              {
    763                // not found and the req was unicast to this device
    764                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_10:
   \   0000FB   75..81       MOV       ?V6,#-0x7f
    765          
    766                // Fill in the missing field with this device's address
    767                if ( inMsg->clusterID == NWK_addr_req )
   \   0000FE   85..82       MOV       DPL,?V8
   \   000101   85..83       MOV       DPH,?V9
   \   000104   E0           MOVX      A,@DPTR
   \   000105   F8           MOV       R0,A
   \   000106   A3           INC       DPTR
   \   000107   E0           MOVX      A,@DPTR
   \   000108   F9           MOV       R1,A
   \   000109   E8           MOV       A,R0
   \   00010A   49           ORL       A,R1
   \   00010B   7006         JNZ       ??zdpProcessAddrReq_15
    768                {
    769                  //CCB 2112 Zigbee Core spec
    770                  aoi = 0xFFFF;
   \   00010D   7EFF         MOV       R6,#-0x1
   \   00010F   7FFF         MOV       R7,#-0x1
   \   000111   8015         SJMP      ??zdpProcessAddrReq_14
    771                }
    772                else
    773                {
    774                  //CCB 2113 Zigbee Core spec
    775                  uint8 invalidIEEEAddr[Z_EXTADDR_LEN];
    776                  osal_memset(invalidIEEEAddr,0xFF,Z_EXTADDR_LEN);
   \                     ??zdpProcessAddrReq_15:
   \   000113                ; Setup parameters for call to function osal_memset
   \   000113   7C08         MOV       R4,#0x8
   \   000115   7D00         MOV       R5,#0x0
   \   000117   79FF         MOV       R1,#-0x1
   \   000119   AA..         MOV       R2,?XSP + 0
   \   00011B   AB..         MOV       R3,?XSP + 1
   \   00011D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    777                  ieee = invalidIEEEAddr;
   \   000120   A8..         MOV       R0,?XSP + 0
   \   000122   A9..         MOV       R1,?XSP + 1
   \   000124   88..         MOV       ?V2,R0
   \   000126   89..         MOV       ?V3,R1
    778                }
    779              }
    780          
    781              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_14:
   \   000128   85..82       MOV       DPL,?V0
   \   00012B   85..83       MOV       DPH,?V1
   \   00012E   E5..         MOV       A,?V6
   \   000130   F0           MOVX      @DPTR,A
   \   000131   A3           INC       DPTR
   \   000132   8582..       MOV       ?V0,DPL
   \   000135   8583..       MOV       ?V1,DPH
    782          
    783              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   000138                ; Setup parameters for call to function sAddrExtCpy
   \   000138   AC..         MOV       R4,?V2
   \   00013A   AD..         MOV       R5,?V3
   \   00013C   AA..         MOV       R2,?V0
   \   00013E   AB..         MOV       R3,?V1
   \   000140   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    784          
    785              *pBuf++ = LO_UINT16( aoi );
   \   000143   EE           MOV       A,R6
   \   000144   8A82         MOV       DPL,R2
   \   000146   8B83         MOV       DPH,R3
   \   000148   F0           MOVX      @DPTR,A
    786              *pBuf++ = HI_UINT16( aoi );
   \   000149   EF           MOV       A,R7
   \   00014A   A3           INC       DPTR
   \   00014B   F0           MOVX      @DPTR,A
    787          
    788              if ( ZSTACK_ROUTER_BUILD )
    789              {
    790                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    791                     && (stat == ZDP_SUCCESS) )
    792                {
    793                  uint8  cnt = 0;
    794                  
    795                  //Updated to only search for ZED devices as per R21 spec (2.4.3.1.1.2)
    796                  uint16 *list = AssocMakeList( &cnt );
    797          
    798                  if ( list != NULL )
    799                  {
    800                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    801                    uint16 *pList = list + idx;
    802          
    803                    // NumAssocDev field is only present on success.
    804                    if ( cnt > idx )
    805                    {
    806                      cnt -= idx;
    807                      len += (cnt * sizeof( uint16 ));
    808                    }
    809                    else
    810                    {
    811                      cnt = 0;
    812                    }
    813                    *pBuf++ = cnt;
    814                    len++;
    815          
    816                    // StartIndex field is only present if NumAssocDev field is non-zero.
    817                    *pBuf++ = idx;
    818                    len++;
    819          
    820                    while ( cnt != 0 )
    821                    {
    822                      *pBuf++ = LO_UINT16( *pList );
    823                      *pBuf++ = HI_UINT16( *pList );
    824                      pList++;
    825                      cnt--;
    826                    }
    827          
    828                    osal_mem_free( (uint8 *)list );
    829                  }
    830                  else
    831                  {
    832                    // NumAssocDev field is only present on success.
    833                    *pBuf++ = 0;
    834                    len++;
    835                  }
    836                }
    837              }
    838          
    839              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   00014C   90....       MOV       DPTR,#ZDP_TxOptions
   \   00014F   7410         MOV       A,#0x10
   \   000151   F0           MOVX      @DPTR,A
    840              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   000152                ; Setup parameters for call to function fillAndSend
   \   000152   85..82       MOV       DPL,?V8
   \   000155   85..83       MOV       DPH,?V9
   \   000158   E0           MOVX      A,@DPTR
   \   000159   F5..         MOV       ?V0,A
   \   00015B   A3           INC       DPTR
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   4480         ORL       A,#0x80
   \   00015F   F5..         MOV       ?V1,A
   \   000161   78..         MOV       R0,#?V0
   \   000163   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000166   790B         MOV       R1,#0xb
   \   000168   E5..         MOV       A,?V4
   \   00016A   2402         ADD       A,#0x2
   \   00016C   FC           MOV       R4,A
   \   00016D   E4           CLR       A
   \   00016E   35..         ADDC      A,?V5
   \   000170   FD           MOV       R5,A
   \   000171   E5..         MOV       A,?V4
   \   000173   240F         ADD       A,#0xf
   \   000175   FA           MOV       R2,A
   \   000176   E4           CLR       A
   \   000177   35..         ADDC      A,?V5
   \   000179   FB           MOV       R3,A
   \   00017A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00017D   7402         MOV       A,#0x2
   \   00017F   12....       LCALL     ?DEALLOC_XSTACK8
    841              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000182   90....       MOV       DPTR,#ZDP_TxOptions
   \   000185   E4           CLR       A
   \   000186   F0           MOVX      @DPTR,A
    842            }
    843          }
   \                     ??zdpProcessAddrReq_8:
   \   000187   7408         MOV       A,#0x8
   \   000189   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018C   7F0C         MOV       R7,#0xc
   \   00018E   02....       LJMP      ?BANKED_LEAVE_XDATA
    844          
    845          /*********************************************************************
    846           * @fn          ZDP_NodeDescMsg
    847           *
    848           * @brief       Builds and sends a Node Descriptor message, unicast to the
    849           *              specified device.
    850           *
    851           * @param       inMsg - incoming message
    852           * @param       nwkAddr - 16 bit network address for device
    853           * @param       pNodeDesc - pointer to the node descriptor
    854           *
    855           * @return      afStatus_t
    856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    857          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    858                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    859          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    860            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FE           MOV       R6,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FF           MOV       R7,A
    861            byte len;
    862          
    863            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    864          
    865            *pBuf++ = ZDP_SUCCESS;
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   F583         MOV       DPH,A
   \   000011   E4           CLR       A
   \   000012   F0           MOVX      @DPTR,A
    866          
    867            *pBuf++ = LO_UINT16( nwkAddr );
   \   000013   EC           MOV       A,R4
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
    868            *pBuf++ = HI_UINT16( nwkAddr );
   \   000016   ED           MOV       A,R5
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   740A         MOV       A,#0xa
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F8           MOV       R0,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
    869          
    870            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    871                               (pNodeDesc->UserDescAvail << 4) |
    872                               (pNodeDesc->LogicalType & 0x07));
   \   000028   8882         MOV       DPL,R0
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   541F         ANL       A,#0x1f
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
    873          
    874            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \   000037   8882         MOV       DPL,R0
   \   000039   8983         MOV       DPH,R1
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   F0           MOVX      @DPTR,A
    875            *pBuf++ = pNodeDesc->CapabilityFlags;
   \   000046   8882         MOV       DPL,R0
   \   000048   8983         MOV       DPH,R1
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   F0           MOVX      @DPTR,A
    876            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \   000057   8882         MOV       DPL,R0
   \   000059   8983         MOV       DPH,R1
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   F0           MOVX      @DPTR,A
    877            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \   00006A   8882         MOV       DPL,R0
   \   00006C   8983         MOV       DPH,R1
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   8E82         MOV       DPL,R6
   \   000075   8F83         MOV       DPH,R7
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   F0           MOVX      @DPTR,A
    878            *pBuf++ = pNodeDesc->MaxBufferSize;
   \   00007F   8882         MOV       DPL,R0
   \   000081   8983         MOV       DPH,R1
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   8E82         MOV       DPL,R6
   \   00008B   8F83         MOV       DPH,R7
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   F0           MOVX      @DPTR,A
    879            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \   000096   8882         MOV       DPL,R0
   \   000098   8983         MOV       DPH,R1
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   8E82         MOV       DPL,R6
   \   0000A3   8F83         MOV       DPH,R7
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   F0           MOVX      @DPTR,A
    880            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \   0000AF   8882         MOV       DPL,R0
   \   0000B1   8983         MOV       DPH,R1
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   8E82         MOV       DPL,R6
   \   0000BD   8F83         MOV       DPH,R7
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   F0           MOVX      @DPTR,A
    881          
    882            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   0000CA   E8           MOV       A,R0
   \   0000CB   2408         ADD       A,#0x8
   \   0000CD   FC           MOV       R4,A
   \   0000CE   E4           CLR       A
   \   0000CF   39           ADDC      A,R1
   \   0000D0   FD           MOV       R5,A
   \   0000D1   8C82         MOV       DPL,R4
   \   0000D3   F583         MOV       DPH,A
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F5..         MOV       ?V0,A
   \   0000D8   EE           MOV       A,R6
   \   0000D9   240B         ADD       A,#0xb
   \   0000DB   F582         MOV       DPL,A
   \   0000DD   E4           CLR       A
   \   0000DE   3F           ADDC      A,R7
   \   0000DF   F583         MOV       DPH,A
   \   0000E1   E5..         MOV       A,?V0
   \   0000E3   F0           MOVX      @DPTR,A
    883            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \   0000E4   8C82         MOV       DPL,R4
   \   0000E6   8D83         MOV       DPH,R5
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   C0E0         PUSH      A
   \   0000EC   EE           MOV       A,R6
   \   0000ED   240C         ADD       A,#0xc
   \   0000EF   F582         MOV       DPL,A
   \   0000F1   E4           CLR       A
   \   0000F2   3F           ADDC      A,R7
   \   0000F3   F583         MOV       DPH,A
   \   0000F5   D0E0         POP       A
   \   0000F7   F0           MOVX      @DPTR,A
    884            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \   0000F8   8882         MOV       DPL,R0
   \   0000FA   8983         MOV       DPH,R1
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   C0E0         PUSH      A
   \   000109   EE           MOV       A,R6
   \   00010A   240D         ADD       A,#0xd
   \   00010C   F582         MOV       DPL,A
   \   00010E   E4           CLR       A
   \   00010F   3F           ADDC      A,R7
   \   000110   F583         MOV       DPH,A
   \   000112   D0E0         POP       A
   \   000114   F0           MOVX      @DPTR,A
    885            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   000115   E8           MOV       A,R0
   \   000116   240B         ADD       A,#0xb
   \   000118   F582         MOV       DPL,A
   \   00011A   E4           CLR       A
   \   00011B   39           ADDC      A,R1
   \   00011C   F583         MOV       DPH,A
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   C0E0         PUSH      A
   \   000121   EE           MOV       A,R6
   \   000122   240E         ADD       A,#0xe
   \   000124   F582         MOV       DPL,A
   \   000126   E4           CLR       A
   \   000127   3F           ADDC      A,R7
   \   000128   F583         MOV       DPH,A
   \   00012A   D0E0         POP       A
   \   00012C   F0           MOVX      @DPTR,A
    886            *pBuf = pNodeDesc->DescriptorCapability;
   \   00012D   E8           MOV       A,R0
   \   00012E   240C         ADD       A,#0xc
   \   000130   F582         MOV       DPL,A
   \   000132   E4           CLR       A
   \   000133   39           ADDC      A,R1
   \   000134   F583         MOV       DPH,A
   \   000136   E0           MOVX      A,@DPTR
   \   000137   C0E0         PUSH      A
   \   000139   EE           MOV       A,R6
   \   00013A   240F         ADD       A,#0xf
   \   00013C   F582         MOV       DPL,A
   \   00013E   E4           CLR       A
   \   00013F   3F           ADDC      A,R7
   \   000140   F583         MOV       DPH,A
   \   000142   D0E0         POP       A
   \   000144   F0           MOVX      @DPTR,A
    887          
    888            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   000145                ; Setup parameters for call to function fillAndSend
   \   000145   75..02       MOV       ?V0,#0x2
   \   000148   75..80       MOV       ?V1,#-0x80
   \   00014B   78..         MOV       R0,#?V0
   \   00014D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000150   7910         MOV       R1,#0x10
   \   000152   EA           MOV       A,R2
   \   000153   2402         ADD       A,#0x2
   \   000155   FC           MOV       R4,A
   \   000156   E4           CLR       A
   \   000157   3B           ADDC      A,R3
   \   000158   FD           MOV       R5,A
   \   000159   EA           MOV       A,R2
   \   00015A   240F         ADD       A,#0xf
   \   00015C   FA           MOV       R2,A
   \   00015D   5001         JNC       ??ZDP_NodeDescMsg_0
   \   00015F   0B           INC       R3
   \                     ??ZDP_NodeDescMsg_0:
   \   000160   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000163   7402         MOV       A,#0x2
   \   000165   12....       LCALL     ?DEALLOC_XSTACK8
   \   000168   7F02         MOV       R7,#0x2
   \   00016A   02....       LJMP      ?BANKED_LEAVE_XDATA
    889          }
    890          
    891          /*********************************************************************
    892           * @fn          ZDP_PowerDescMsg
    893           *
    894           * @brief       Builds and sends a Power Descriptor message, unicast to the
    895           *              specified device.
    896           *
    897           * @param       inMsg - incoming message (request)
    898           * @param       nwkAddr - 16 bit network address for device
    899           * @param       pPowerDesc - pointer to the node descriptor
    900           *
    901           * @return      afStatus_t
    902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    903          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    904                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    905          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    906            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   E8           MOV       A,R0
   \   00000E   FE           MOV       R6,A
   \   00000F   E9           MOV       A,R1
   \   000010   FF           MOV       R7,A
    907            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    908          
    909            *pBuf++ = ZDP_SUCCESS;
   \   000011   8882         MOV       DPL,R0
   \   000013   F583         MOV       DPH,A
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
    910          
    911            *pBuf++ = LO_UINT16( nwkAddr );
   \   000017   EC           MOV       A,R4
   \   000018   A3           INC       DPTR
   \   000019   F0           MOVX      @DPTR,A
    912            *pBuf++ = HI_UINT16( nwkAddr );
   \   00001A   ED           MOV       A,R5
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   F0           MOVX      @DPTR,A
   \   000022   740A         MOV       A,#0xa
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F9           MOV       R1,A
    913          
    914            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    915                              | (pPowerDesc->PowerMode & 0x0F));
   \   00002C   8882         MOV       DPL,R0
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   F0           MOVX      @DPTR,A
    916            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    917                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \   000039   8882         MOV       DPL,R0
   \   00003B   8983         MOV       DPH,R1
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F5..         MOV       ?V0,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F5..         MOV       ?V1,A
   \   000044   540F         ANL       A,#0xf
   \   000046   F9           MOV       R1,A
   \   000047   740C         MOV       A,#0xc
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?US_SHR
   \   00004E   E5..         MOV       A,?V0
   \   000050   C4           SWAP      A
   \   000051   49           ORL       A,R1
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   F0           MOVX      @DPTR,A
    918          
    919            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   00005B                ; Setup parameters for call to function fillAndSend
   \   00005B   75..03       MOV       ?V0,#0x3
   \   00005E   75..80       MOV       ?V1,#-0x80
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7905         MOV       R1,#0x5
   \   000068   EA           MOV       A,R2
   \   000069   2402         ADD       A,#0x2
   \   00006B   FC           MOV       R4,A
   \   00006C   E4           CLR       A
   \   00006D   3B           ADDC      A,R3
   \   00006E   FD           MOV       R5,A
   \   00006F   EA           MOV       A,R2
   \   000070   240F         ADD       A,#0xf
   \   000072   FA           MOV       R2,A
   \   000073   5001         JNC       ??ZDP_PowerDescMsg_0
   \   000075   0B           INC       R3
   \                     ??ZDP_PowerDescMsg_0:
   \   000076   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000079   7402         MOV       A,#0x2
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007E   7F02         MOV       R7,#0x2
   \   000080   02....       LJMP      ?BANKED_LEAVE_XDATA
    920          }
    921          
    922          /*********************************************************************
    923           * @fn          ZDP_SimpleDescMsg
    924           *
    925           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    926           *              specified device.
    927           *
    928           * @param       inMsg - incoming message (request)
    929           * @param       Status - message status (ZDP_SUCCESS or other)
    930           * @param       pSimpleDesc - pointer to the node descriptor
    931           *
    932           * @return      afStatus_t
    933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    934          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    935                                        SimpleDescriptionFormat_t *pSimpleDesc )
    936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FE           MOV       R6,A
    937            uint8 *pBuf = ZDP_TmpBuf;
   \   00000B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
    938            uint8 i, len;
    939          
    940            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \   000013   EE           MOV       A,R6
   \   000014   7026         JNZ       ??ZDP_SimpleDescMsg_0
   \   000016   EC           MOV       A,R4
   \   000017   4D           ORL       A,R5
   \   000018   6022         JZ        ??ZDP_SimpleDescMsg_0
    941            {
    942              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    943              len = 1 + 2 + 1 + 8;
    944              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00001A   8C82         MOV       DPL,R4
   \   00001C   8D83         MOV       DPH,R5
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FA           MOV       R2,A
   \   000029   8C82         MOV       DPL,R4
   \   00002B   8D83         MOV       DPH,R5
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   2A           ADD       A,R2
   \   000035   C3           CLR       C
   \   000036   33           RLC       A
   \   000037   240C         ADD       A,#0xc
   \   000039   FA           MOV       R2,A
   \   00003A   8002         SJMP      ??ZDP_SimpleDescMsg_1
    945            }
    946            else
    947            {
    948              len = 1 + 2 + 1; // Status + desc length
   \                     ??ZDP_SimpleDescMsg_0:
   \   00003C   7A04         MOV       R2,#0x4
    949            }
    950            if ( len >= ZDP_BUF_SZ-1 )
   \                     ??ZDP_SimpleDescMsg_1:
   \   00003E   EA           MOV       A,R2
   \   00003F   C3           CLR       C
   \   000040   944F         SUBB      A,#0x4f
   \   000042   4005         JC        ??ZDP_SimpleDescMsg_2
    951            {
    952              return afStatus_MEM_FAIL;
   \   000044   7910         MOV       R1,#0x10
   \   000046   02....       LJMP      ??ZDP_SimpleDescMsg_3 & 0xFFFF
    953            }
    954          
    955            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_2:
   \   000049   EE           MOV       A,R6
   \   00004A   8882         MOV       DPL,R0
   \   00004C   8983         MOV       DPH,R1
   \   00004E   F0           MOVX      @DPTR,A
    956            
    957            //From spec 2.4.3.1.5 The NWKAddrOfInterest field shall match 
    958            //that specified in the original Simple_Desc_req command
    959            *pBuf++ = inMsg->asdu[0];  
   \   00004F   E5..         MOV       A,?V0
   \   000051   2413         ADD       A,#0x13
   \   000053   F5..         MOV       ?V2,A
   \   000055   E4           CLR       A
   \   000056   35..         ADDC      A,?V1
   \   000058   F5..         MOV       ?V3,A
   \   00005A   85..82       MOV       DPL,?V2
   \   00005D   F583         MOV       DPH,A
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   FB           MOV       R3,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F583         MOV       DPH,A
   \   000065   8B82         MOV       DPL,R3
   \   000067   E0           MOVX      A,@DPTR
   \   000068   8882         MOV       DPL,R0
   \   00006A   8983         MOV       DPH,R1
   \   00006C   A3           INC       DPTR
   \   00006D   F0           MOVX      @DPTR,A
    960            *pBuf++ = inMsg->asdu[1];
   \   00006E   85..82       MOV       DPL,?V2
   \   000071   85..83       MOV       DPH,?V3
   \   000074   E0           MOVX      A,@DPTR
   \   000075   FB           MOV       R3,A
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F583         MOV       DPH,A
   \   00007A   8B82         MOV       DPL,R3
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   8882         MOV       DPL,R0
   \   000080   8983         MOV       DPH,R1
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   F0           MOVX      @DPTR,A
    961          
    962            if ( len > 4 )
   \   000085   E8           MOV       A,R0
   \   000086   2403         ADD       A,#0x3
   \   000088   F582         MOV       DPL,A
   \   00008A   E4           CLR       A
   \   00008B   39           ADDC      A,R1
   \   00008C   F583         MOV       DPH,A
   \   00008E   EA           MOV       A,R2
   \   00008F   C3           CLR       C
   \   000090   9405         SUBB      A,#0x5
   \   000092   5003         JNC       $+5
   \   000094   02....       LJMP      ??ZDP_SimpleDescMsg_4 & 0xFFFF
    963            {
    964              *pBuf++ = len - 4;   // Simple descriptor length
   \   000097   74FC         MOV       A,#-0x4
   \   000099   2A           ADD       A,R2
   \   00009A   F0           MOVX      @DPTR,A
    965          
    966              *pBuf++ = pSimpleDesc->EndPoint;
   \   00009B   8C82         MOV       DPL,R4
   \   00009D   8D83         MOV       DPH,R5
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   8882         MOV       DPL,R0
   \   0000A2   8983         MOV       DPH,R1
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   F0           MOVX      @DPTR,A
    967              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \   0000A9   8C82         MOV       DPL,R4
   \   0000AB   8D83         MOV       DPH,R5
   \   0000AD   A3           INC       DPTR
   \   0000AE   8582..       MOV       ?V2,DPL
   \   0000B1   8583..       MOV       ?V3,DPH
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   8882         MOV       DPL,R0
   \   0000B7   8983         MOV       DPH,R1
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   F0           MOVX      @DPTR,A
    968              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \   0000BF   85..82       MOV       DPL,?V2
   \   0000C2   85..83       MOV       DPH,?V3
   \   0000C5   A3           INC       DPTR
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   8882         MOV       DPL,R0
   \   0000C9   8983         MOV       DPH,R1
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   F0           MOVX      @DPTR,A
    969              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   0000D2   EC           MOV       A,R4
   \   0000D3   2403         ADD       A,#0x3
   \   0000D5   F5..         MOV       ?V2,A
   \   0000D7   E4           CLR       A
   \   0000D8   3D           ADDC      A,R5
   \   0000D9   F5..         MOV       ?V3,A
   \   0000DB   85..82       MOV       DPL,?V2
   \   0000DE   F583         MOV       DPH,A
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   8882         MOV       DPL,R0
   \   0000E3   8983         MOV       DPH,R1
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   F0           MOVX      @DPTR,A
    970              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \   0000ED   85..82       MOV       DPL,?V2
   \   0000F0   85..83       MOV       DPH,?V3
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   8882         MOV       DPL,R0
   \   0000F7   8983         MOV       DPH,R1
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   F0           MOVX      @DPTR,A
    971          
    972              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \   000102   8C82         MOV       DPL,R4
   \   000104   8D83         MOV       DPH,R5
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   540F         ANL       A,#0xf
   \   00010E   8882         MOV       DPL,R0
   \   000110   8983         MOV       DPH,R1
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   A3           INC       DPTR
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   F0           MOVX      @DPTR,A
    973          
    974              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   00011C   EC           MOV       A,R4
   \   00011D   2406         ADD       A,#0x6
   \   00011F   F5..         MOV       ?V2,A
   \   000121   E4           CLR       A
   \   000122   3D           ADDC      A,R5
   \   000123   85....       MOV       ?V4,?V2
   \   000126   F5..         MOV       ?V5,A
   \   000128   85..82       MOV       DPL,?V4
   \   00012B   F583         MOV       DPH,A
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   8882         MOV       DPL,R0
   \   000130   8983         MOV       DPH,R1
   \   000132   A3           INC       DPTR
   \   000133   A3           INC       DPTR
   \   000134   A3           INC       DPTR
   \   000135   A3           INC       DPTR
   \   000136   A3           INC       DPTR
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   A3           INC       DPTR
   \   00013C   F0           MOVX      @DPTR,A
   \   00013D   E8           MOV       A,R0
   \   00013E   240B         ADD       A,#0xb
   \   000140   F8           MOV       R0,A
   \   000141   5001         JNC       ??ZDP_SimpleDescMsg_5
   \   000143   09           INC       R1
    975              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_5:
   \   000144   85..82       MOV       DPL,?V4
   \   000147   85..83       MOV       DPH,?V5
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   605C         JZ        ??ZDP_SimpleDescMsg_6
    976              {
    977                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   00014D   7B00         MOV       R3,#0x0
   \   00014F   804B         SJMP      ??ZDP_SimpleDescMsg_7
    978                {
    979                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_8:
   \   000151   EB           MOV       A,R3
   \   000152   25E0         ADD       A,0xE0 /* A   */
   \   000154   F5..         MOV       ?V2,A
   \   000156   E4           CLR       A
   \   000157   33           RLC       A
   \   000158   F5..         MOV       ?V3,A
   \   00015A   EC           MOV       A,R4
   \   00015B   2407         ADD       A,#0x7
   \   00015D   F5..         MOV       ?V6,A
   \   00015F   E4           CLR       A
   \   000160   3D           ADDC      A,R5
   \   000161   F5..         MOV       ?V7,A
   \   000163   85..82       MOV       DPL,?V6
   \   000166   F583         MOV       DPH,A
   \   000168   E0           MOVX      A,@DPTR
   \   000169   25..         ADD       A,?V2
   \   00016B   FF           MOV       R7,A
   \   00016C   A3           INC       DPTR
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   35..         ADDC      A,?V3
   \   000170   8F82         MOV       DPL,R7
   \   000172   F583         MOV       DPH,A
   \   000174   E0           MOVX      A,@DPTR
   \   000175   8882         MOV       DPL,R0
   \   000177   8983         MOV       DPH,R1
   \   000179   F0           MOVX      @DPTR,A
    980                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   00017A   85..82       MOV       DPL,?V6
   \   00017D   85..83       MOV       DPH,?V7
   \   000180   E0           MOVX      A,@DPTR
   \   000181   25..         ADD       A,?V2
   \   000183   FF           MOV       R7,A
   \   000184   A3           INC       DPTR
   \   000185   E0           MOVX      A,@DPTR
   \   000186   35..         ADDC      A,?V3
   \   000188   8F82         MOV       DPL,R7
   \   00018A   F583         MOV       DPH,A
   \   00018C   A3           INC       DPTR
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   8882         MOV       DPL,R0
   \   000190   8983         MOV       DPH,R1
   \   000192   A3           INC       DPTR
   \   000193   F0           MOVX      @DPTR,A
   \   000194   E8           MOV       A,R0
   \   000195   2402         ADD       A,#0x2
   \   000197   F8           MOV       R0,A
   \   000198   5001         JNC       ??ZDP_SimpleDescMsg_9
   \   00019A   09           INC       R1
    981                }
   \                     ??ZDP_SimpleDescMsg_9:
   \   00019B   0B           INC       R3
   \                     ??ZDP_SimpleDescMsg_7:
   \   00019C   85..82       MOV       DPL,?V4
   \   00019F   85..83       MOV       DPH,?V5
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   FF           MOV       R7,A
   \   0001A4   EB           MOV       A,R3
   \   0001A5   C3           CLR       C
   \   0001A6   9F           SUBB      A,R7
   \   0001A7   40A8         JC        ??ZDP_SimpleDescMsg_8
    982              }
    983          
    984              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_6:
   \   0001A9   EC           MOV       A,R4
   \   0001AA   2409         ADD       A,#0x9
   \   0001AC   F5..         MOV       ?V2,A
   \   0001AE   E4           CLR       A
   \   0001AF   3D           ADDC      A,R5
   \   0001B0   85....       MOV       ?V4,?V2
   \   0001B3   F5..         MOV       ?V5,A
   \   0001B5   85..82       MOV       DPL,?V4
   \   0001B8   F583         MOV       DPH,A
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   8882         MOV       DPL,R0
   \   0001BD   8983         MOV       DPH,R1
   \   0001BF   F0           MOVX      @DPTR,A
   \   0001C0   A3           INC       DPTR
   \   0001C1   A882         MOV       R0,DPL
   \   0001C3   A983         MOV       R1,DPH
    985              if ( pSimpleDesc->AppNumOutClusters )
   \   0001C5   85..82       MOV       DPL,?V4
   \   0001C8   85..83       MOV       DPH,?V5
   \   0001CB   E0           MOVX      A,@DPTR
   \   0001CC   605E         JZ        ??ZDP_SimpleDescMsg_10
    986              {
    987                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0001CE   7B00         MOV       R3,#0x0
   \                     ??ZDP_SimpleDescMsg_11:
   \   0001D0   85..82       MOV       DPL,?V4
   \   0001D3   85..83       MOV       DPH,?V5
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   FF           MOV       R7,A
   \   0001D8   EB           MOV       A,R3
   \   0001D9   C3           CLR       C
   \   0001DA   9F           SUBB      A,R7
   \   0001DB   504F         JNC       ??ZDP_SimpleDescMsg_10
    988                {
    989                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   0001DD   EB           MOV       A,R3
   \   0001DE   25E0         ADD       A,0xE0 /* A   */
   \   0001E0   F5..         MOV       ?V2,A
   \   0001E2   E4           CLR       A
   \   0001E3   33           RLC       A
   \   0001E4   F5..         MOV       ?V3,A
   \   0001E6   EC           MOV       A,R4
   \   0001E7   240A         ADD       A,#0xa
   \   0001E9   F5..         MOV       ?V6,A
   \   0001EB   E4           CLR       A
   \   0001EC   3D           ADDC      A,R5
   \   0001ED   F5..         MOV       ?V7,A
   \   0001EF   85..82       MOV       DPL,?V6
   \   0001F2   F583         MOV       DPH,A
   \   0001F4   E0           MOVX      A,@DPTR
   \   0001F5   25..         ADD       A,?V2
   \   0001F7   FF           MOV       R7,A
   \   0001F8   A3           INC       DPTR
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   35..         ADDC      A,?V3
   \   0001FC   8F82         MOV       DPL,R7
   \   0001FE   F583         MOV       DPH,A
   \   000200   E0           MOVX      A,@DPTR
   \   000201   8882         MOV       DPL,R0
   \   000203   8983         MOV       DPH,R1
   \   000205   F0           MOVX      @DPTR,A
    990                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000206   85..82       MOV       DPL,?V6
   \   000209   85..83       MOV       DPH,?V7
   \   00020C   E0           MOVX      A,@DPTR
   \   00020D   25..         ADD       A,?V2
   \   00020F   FF           MOV       R7,A
   \   000210   A3           INC       DPTR
   \   000211   E0           MOVX      A,@DPTR
   \   000212   35..         ADDC      A,?V3
   \   000214   8F82         MOV       DPL,R7
   \   000216   F583         MOV       DPH,A
   \   000218   A3           INC       DPTR
   \   000219   E0           MOVX      A,@DPTR
   \   00021A   8882         MOV       DPL,R0
   \   00021C   8983         MOV       DPH,R1
   \   00021E   A3           INC       DPTR
   \   00021F   F0           MOVX      @DPTR,A
   \   000220   E8           MOV       A,R0
   \   000221   2402         ADD       A,#0x2
   \   000223   F8           MOV       R0,A
   \   000224   5001         JNC       ??ZDP_SimpleDescMsg_12
   \   000226   09           INC       R1
    991                }
   \                     ??ZDP_SimpleDescMsg_12:
   \   000227   0B           INC       R3
   \   000228   80A6         SJMP      ??ZDP_SimpleDescMsg_11
    992              }
    993            }
    994          
    995            else
    996            {
    997              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_4:
   \   00022A   E4           CLR       A
   \   00022B   F0           MOVX      @DPTR,A
    998            }
    999          
   1000            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_10:
   \   00022C                ; Setup parameters for call to function fillAndSend
   \   00022C   75..04       MOV       ?V2,#0x4
   \   00022F   75..80       MOV       ?V3,#-0x80
   \   000232   78..         MOV       R0,#?V2
   \   000234   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000237   EA           MOV       A,R2
   \   000238   F9           MOV       R1,A
   \   000239   E5..         MOV       A,?V0
   \   00023B   2402         ADD       A,#0x2
   \   00023D   FC           MOV       R4,A
   \   00023E   E4           CLR       A
   \   00023F   35..         ADDC      A,?V1
   \   000241   FD           MOV       R5,A
   \   000242   E5..         MOV       A,?V0
   \   000244   240F         ADD       A,#0xf
   \   000246   FA           MOV       R2,A
   \   000247   E4           CLR       A
   \   000248   35..         ADDC      A,?V1
   \   00024A   FB           MOV       R3,A
   \   00024B   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00024E   7402         MOV       A,#0x2
   \   000250   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_3:
   \   000253   7F0A         MOV       R7,#0xa
   \   000255   02....       LJMP      ?BANKED_LEAVE_XDATA
   1001          }
   1002          
   1003          /*********************************************************************
   1004           * @fn          ZDP_EPRsp
   1005           *
   1006           * @brief       This builds and send an endpoint list. Used in
   1007           *              Active_EP_rsp and Match_Desc_Rsp
   1008           *              message.  This function sends unicast message to the
   1009           *              requesting device.
   1010           *
   1011           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
   1012           * @param       dstAddr - destination address
   1013           * @param       Status - message status (ZDP_SUCCESS or other)
   1014           * @param       nwkAddr - Device's short address that this response describes
   1015           * @param       Count - number of endpoint/interfaces in list
   1016           * @param       pEPIntfList - Array of Endpoint/Interfaces
   1017           * @param       SecurityEnable - Security Options
   1018           *
   1019           * @return      afStatus_t
   1020           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1021          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
   1022                                  byte Status, uint16 nwkAddr, byte Count,
   1023                                  uint8 *pEPList,
   1024                                  byte SecurityEnable )
   1025          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   EC           MOV       A,R4
   \   000017   FE           MOV       R6,A
   \   000018   ED           MOV       A,R5
   \   000019   FF           MOV       R7,A
   1026            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   FA           MOV       R2,A
   \   000024   E9           MOV       A,R1
   \   000025   FB           MOV       R3,A
   1027            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \   000026   75..04       MOV       ?V0,#0x4
   1028            byte txOptions;
   1029          
   1030            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1031          
   1032            if ( MsgType == Match_Desc_rsp )
   \   000029   7406         MOV       A,#0x6
   \   00002B   65..         XRL       A,?V2
   \   00002D   7004         JNZ       ??ZDP_EPRsp_0
   \   00002F   7480         MOV       A,#-0x80
   \   000031   65..         XRL       A,?V3
   \                     ??ZDP_EPRsp_0:
   \   000033   7005         JNZ       ??ZDP_EPRsp_1
   1033              txOptions = AF_MSG_ACK_REQUEST;
   \   000035   75..10       MOV       ?V1,#0x10
   \   000038   8003         SJMP      ??ZDP_EPRsp_2
   1034            else
   1035              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00003A   75..00       MOV       ?V1,#0x0
   1036          
   1037              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   00003D   7410         MOV       A,#0x10
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   E0           MOVX      A,@DPTR
   \   000043   8882         MOV       DPL,R0
   \   000045   8983         MOV       DPH,R1
   \   000047   F0           MOVX      @DPTR,A
   \   000048   7411         MOV       A,#0x11
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F8           MOV       R0,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F9           MOV       R1,A
   1038            *pBuf++ = LO_UINT16( nwkAddr );
   \   000052   E8           MOV       A,R0
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \   000057   A3           INC       DPTR
   \   000058   F0           MOVX      @DPTR,A
   1039            *pBuf++ = HI_UINT16( nwkAddr );
   \   000059   E9           MOV       A,R1
   \   00005A   8A82         MOV       DPL,R2
   \   00005C   8B83         MOV       DPH,R3
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   F0           MOVX      @DPTR,A
   \   000061   7413         MOV       A,#0x13
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F9           MOV       R1,A
   1040          
   1041            *pBuf++ = Count;   // Endpoint/Interface count
   \   000068   8A82         MOV       DPL,R2
   \   00006A   8B83         MOV       DPH,R3
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   F0           MOVX      @DPTR,A
   1042          
   1043            if ( Count )
   \   000070   602C         JZ        ??ZDP_EPRsp_3
   1044            {
   1045              len += Count;
   \   000072   7404         MOV       A,#0x4
   \   000074   29           ADD       A,R1
   \   000075   F5..         MOV       ?V0,A
   1046              osal_memcpy( pBuf, pEPList, Count );
   \   000077                ; Setup parameters for call to function osal_memcpy
   \   000077   7414         MOV       A,#0x14
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F5..         MOV       ?V4,A
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F5..         MOV       ?V5,A
   \   000083   75..00       MOV       ?V6,#0x0
   \   000086   78..         MOV       R0,#?V4
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008B   E9           MOV       A,R1
   \   00008C   FC           MOV       R4,A
   \   00008D   7D00         MOV       R5,#0x0
   \   00008F   EA           MOV       A,R2
   \   000090   2404         ADD       A,#0x4
   \   000092   FA           MOV       R2,A
   \   000093   5001         JNC       ??ZDP_EPRsp_4
   \   000095   0B           INC       R3
   \                     ??ZDP_EPRsp_4:
   \   000096   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000099   7403         MOV       A,#0x3
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   1047            }
   1048          
   1049            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   00009E   E5..         MOV       A,?V1
   \   0000A0   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4                ; Setup parameters for call to function fillAndSend
   \   0000A4   78..         MOV       R0,#?V2
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A9   A9..         MOV       R1,?V0
   \   0000AB   EE           MOV       A,R6
   \   0000AC   FC           MOV       R4,A
   \   0000AD   EF           MOV       A,R7
   \   0000AE   FD           MOV       R5,A
   \   0000AF   7402         MOV       A,#0x2
   \   0000B1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B4   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000B7   7402         MOV       A,#0x2
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV       A,R1
   \   0000BD   F9           MOV       R1,A
   \   0000BE   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000C1   E4           CLR       A
   \   0000C2   F0           MOVX      @DPTR,A
   \   0000C3   04           INC       A
   \   0000C4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C7   7F07         MOV       R7,#0x7
   \   0000C9   02....       LJMP      ?BANKED_LEAVE_XDATA
   1050          }
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_UserDescRsp
   1054           *
   1055           * @brief       Build and send the User Decriptor Response.
   1056           *
   1057           *
   1058           * @param       dstAddr - destination address
   1059           * @param       nwkAddrOfInterest -
   1060           * @param       userDesc -
   1061           * @param       SecurityEnable - Security Options
   1062           *
   1063           * @return      ZStatus_t
   1064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1065          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
   1066                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
   1067                          byte SecurityEnable )
   1068          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EA           MOV       A,R2
   \   000013   FE           MOV       R6,A
   \   000014   EB           MOV       A,R3
   \   000015   FF           MOV       R7,A
   1069            uint8 *pBuf = ZDP_TmpBuf;
   \   000016   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   88..         MOV       ?V0,R0
   \   00001F   F5..         MOV       ?V1,A
   \   000021   7413         MOV       A,#0x13
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   88..         MOV       ?V8,R0
   \   00002C   F5..         MOV       ?V9,A
   1070            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   1071          
   1072            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1073          
   1074            len += userDesc->len;
   \   00002E   8882         MOV       DPL,R0
   \   000030   F583         MOV       DPH,A
   \   000032   E0           MOVX      A,@DPTR
   \   000033   2404         ADD       A,#0x4
   \   000035   F5..         MOV       ?V2,A
   1075          
   1076            *pBuf++ = ZSUCCESS;
   \   000037   85..82       MOV       DPL,?V0
   \   00003A   85..83       MOV       DPH,?V1
   \   00003D   E4           CLR       A
   \   00003E   F0           MOVX      @DPTR,A
   1077          
   1078            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   00003F   EC           MOV       A,R4
   \   000040   A3           INC       DPTR
   \   000041   F0           MOVX      @DPTR,A
   1079            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000042   ED           MOV       A,R5
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   F0           MOVX      @DPTR,A
   1080          
   1081            *pBuf++ = userDesc->len;
   \   00004C   8882         MOV       DPL,R0
   \   00004E   85..83       MOV       DPH,?V9
   \   000051   E0           MOVX      A,@DPTR
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   F0           MOVX      @DPTR,A
   1082            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \   00005C                ; Setup parameters for call to function osal_memcpy
   \   00005C   8882         MOV       DPL,R0
   \   00005E   85..83       MOV       DPH,?V9
   \   000061   A3           INC       DPTR
   \   000062   A982         MOV       R1,DPL
   \   000064   AA83         MOV       R2,DPH
   \   000066   89..         MOV       ?V4,R1
   \   000068   8A..         MOV       ?V5,R2
   \   00006A   75..00       MOV       ?V6,#0x0
   \   00006D   78..         MOV       R0,#?V4
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000072   85..82       MOV       DPL,?V8
   \   000075   85..83       MOV       DPH,?V9
   \   000078   E0           MOVX      A,@DPTR
   \   000079   FC           MOV       R4,A
   \   00007A   7D00         MOV       R5,#0x0
   \   00007C   E5..         MOV       A,?V0
   \   00007E   2404         ADD       A,#0x4
   \   000080   FA           MOV       R2,A
   \   000081   E4           CLR       A
   \   000082   35..         ADDC      A,?V1
   \   000084   FB           MOV       R3,A
   \   000085   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000088   7403         MOV       A,#0x3
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   1083          
   1084            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00008D                ; Setup parameters for call to function fillAndSend
   \   00008D   75..11       MOV       ?V0,#0x11
   \   000090   75..80       MOV       ?V1,#-0x80
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   A9..         MOV       R1,?V2
   \   00009A   EE           MOV       A,R6
   \   00009B   FC           MOV       R4,A
   \   00009C   EF           MOV       A,R7
   \   00009D   FD           MOV       R5,A
   \   00009E   7402         MOV       A,#0x2
   \   0000A0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A3   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000A6   7402         MOV       A,#0x2
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AB   7401         MOV       A,#0x1
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B0   7F0A         MOV       R7,#0xa
   \   0000B2   02....       LJMP      ?BANKED_LEAVE_XDATA
   1085          }
   1086          
   1087          /*********************************************************************
   1088           * @fn          ZDP_ServerDiscRsp
   1089           *
   1090           * @brief       Build and send the Server_Discovery_rsp response.
   1091           *
   1092           * @param       transID - Transaction sequence number of request.
   1093           * @param       dstAddr - Network Destination Address.
   1094           * @param       status - Status of response to request.
   1095           * @param       aoi - Network Address of Interest of request.
   1096           * @param       serverMask - Bit map of service(s) being sought.
   1097           * @param       SecurityEnable - Security Options
   1098           *
   1099           * @return      ZStatus_t
   1100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1101          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1102                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1103          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EC           MOV       A,R4
   \   000013   FE           MOV       R6,A
   1104            const byte len = 1  + 2;  // status + aoi + mask.
   1105            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   E8           MOV       A,R0
   \   00001D   FC           MOV       R4,A
   \   00001E   E9           MOV       A,R1
   \   00001F   FD           MOV       R5,A
   1106            ZStatus_t stat;
   1107          
   1108            // Intentionally unreferenced parameters
   1109            (void)aoi;
   1110            (void)SecurityEnable;
   1111          
   1112            *pBuf++ = status;
   \   000020   EE           MOV       A,R6
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   F0           MOVX      @DPTR,A
   \   000026   740D         MOV       A,#0xd
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   1113          
   1114            *pBuf++ = LO_UINT16( serverMask );
   \   000030   E8           MOV       A,R0
   \   000031   8C82         MOV       DPL,R4
   \   000033   8D83         MOV       DPH,R5
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
   1115            *pBuf++ = HI_UINT16( serverMask );
   \   000037   E9           MOV       A,R1
   \   000038   8C82         MOV       DPL,R4
   \   00003A   8D83         MOV       DPH,R5
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   1116          
   1117            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   00003F   90....       MOV       DPTR,#ZDP_TxOptions
   \   000042   7410         MOV       A,#0x10
   \   000044   F0           MOVX      @DPTR,A
   1118            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000045                ; Setup parameters for call to function fillAndSend
   \   000045   75..15       MOV       ?V0,#0x15
   \   000048   75..80       MOV       ?V1,#-0x80
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7903         MOV       R1,#0x3
   \   000052   EA           MOV       A,R2
   \   000053   FC           MOV       R4,A
   \   000054   EB           MOV       A,R3
   \   000055   FD           MOV       R5,A
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP101_8
   \   00005B   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   \   000063   E9           MOV       A,R1
   \   000064   F9           MOV       R1,A
   1119            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000065   90....       MOV       DPTR,#ZDP_TxOptions
   \   000068   E4           CLR       A
   \   000069   F0           MOVX      @DPTR,A
   1120          
   1121            return ( stat );
   \   00006A   04           INC       A
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   7F02         MOV       R7,#0x2
   \   000070   02....       LJMP      ?BANKED_LEAVE_XDATA
   1122          }
   1123          
   1124          /*********************************************************************
   1125           * @fn          ZDP_GenericRsp
   1126           *
   1127           * @brief       Sends a response message with only the parameter status
   1128           *              byte and the addr of interest for data.
   1129           *              This function sends unicast message to the
   1130           *              requesting device.
   1131           *
   1132           * @param       dstAddr - destination address
   1133           * @param       status  - generic status for response
   1134           * @param       aoi     - address of interest
   1135           * @param       dstAddr - destination address
   1136           * @param       rspId   - response cluster ID
   1137           * @param       SecurityEnable - Security Options
   1138           *
   1139           * @return      afStatus_t
   1140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1141          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1142                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1143          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EC           MOV       A,R4
   1144            uint8 len;
   1145          
   1146            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1147          
   1148            ZDP_TmpBuf[0] = status;
   \   000013   C0E0         PUSH      A
   \   000015   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F583         MOV       DPH,A
   \   00001E   8882         MOV       DPL,R0
   \   000020   D0E0         POP       A
   \   000022   F0           MOVX      @DPTR,A
   \   000023   740A         MOV       A,#0xa
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   1149            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   00002D   E8           MOV       A,R0
   \   00002E   C0E0         PUSH      A
   \   000030   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FC           MOV       R4,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F583         MOV       DPH,A
   \   000039   8C82         MOV       DPL,R4
   \   00003B   A3           INC       DPTR
   \   00003C   D0E0         POP       A
   \   00003E   F0           MOVX      @DPTR,A
   1150            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   00003F   E9           MOV       A,R1
   \   000040   C0E0         PUSH      A
   \   000042   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F8           MOV       R0,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F583         MOV       DPH,A
   \   00004B   8882         MOV       DPL,R0
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   D0E0         POP       A
   \   000051   F0           MOVX      @DPTR,A
   1151          
   1152            // Length byte
   1153            ZDP_TmpBuf[3] = 0;
   \   000052   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F8           MOV       R0,A
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F583         MOV       DPH,A
   \   00005B   8882         MOV       DPL,R0
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   E4           CLR       A
   \   000061   F0           MOVX      @DPTR,A
   1154            len = 4;
   1155          
   1156            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000062                ; Setup parameters for call to function fillAndSend
   \   000062   740C         MOV       A,#0xc
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00006A   7904         MOV       R1,#0x4
   \   00006C   EA           MOV       A,R2
   \   00006D   FC           MOV       R4,A
   \   00006E   EB           MOV       A,R3
   \   00006F   FD           MOV       R5,A
   \   000070   7402         MOV       A,#0x2
   \   000072   12....       LCALL     ?XSTACK_DISP101_8
   \   000075   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000078   7402         MOV       A,#0x2
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   7401         MOV       A,#0x1
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000082   7F01         MOV       R7,#0x1
   \   000084   02....       LJMP      ?BANKED_LEAVE_XDATA
   1157          }
   1158          
   1159          /*********************************************************************
   1160           * Binding
   1161           */
   1162          /*********************************************************************
   1163           * @fn          ZDP_EndDeviceBindReq
   1164           *
   1165           * @brief       This builds and sends a End_Device_Bind_req message.
   1166           *              This function sends a unicast message.
   1167           *
   1168           * @param       dstAddr - destination address
   1169           * @param       LocalCoordinator - short address of local coordinator
   1170           * @param       epIntf - Endpoint/Interface of Simple Desc
   1171           * @param       ProfileID - Profile ID
   1172           *
   1173           *   The Input cluster list is the opposite of what you would think.
   1174           *   This is the output cluster list of this device
   1175           * @param       NumInClusters - number of input clusters
   1176           * @param       InClusterList - input cluster ID list
   1177           *
   1178           *   The Output cluster list is the opposite of what you would think.
   1179           *   This is the input cluster list of this device
   1180           * @param       NumOutClusters - number of output clusters
   1181           * @param       OutClusterList - output cluster ID list
   1182           *
   1183           * @param       SecurityEnable - Security Options
   1184           *
   1185           * @return      afStatus_t
   1186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1187          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1188                                           uint16 LocalCoordinator,
   1189                                           byte endPoint,
   1190                                           uint16 ProfileID,
   1191                                           byte NumInClusters, cId_t *InClusterList,
   1192                                           byte NumOutClusters, cId_t *OutClusterList,
   1193                                           byte SecurityEnable )
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V3,R1
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V0,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V1,A
   \   000019   7414         MOV       A,#0x14
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V2,A
   \   000021   7417         MOV       A,#0x17
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FF           MOV       R7,A
   1196            uint8 i, len;
   1197            uint8 *ieeeAddr;
   1198          
   1199            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1200          
   1201            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1202            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1203            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000028   E5..         MOV       A,?V2
   \   00002A   2F           ADD       A,R7
   \   00002B   C3           CLR       C
   \   00002C   33           RLC       A
   \   00002D   240F         ADD       A,#0xf
   \   00002F   FE           MOV       R6,A
   1204          
   1205            if ( len >= ZDP_BUF_SZ-1 )
   \   000030   C3           CLR       C
   \   000031   944F         SUBB      A,#0x4f
   \   000033   4005         JC        ??ZDP_EndDeviceBindReq_0
   1206            {
   1207              return afStatus_MEM_FAIL;
   \   000035   7910         MOV       R1,#0x10
   \   000037   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1208            }
   1209          
   1210            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   00003A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003A   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00003D   EA           MOV       A,R2
   \   00003E   65..         XRL       A,?V4
   \   000040   7003         JNZ       ??ZDP_EndDeviceBindReq_2
   \   000042   EB           MOV       A,R3
   \   000043   65..         XRL       A,?V5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000045   6005         JZ        ??ZDP_EndDeviceBindReq_3
   1211            {
   1212              return afStatus_INVALID_PARAMETER;
   \   000047   7902         MOV       R1,#0x2
   \   000049   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1213            }
   1214          
   1215            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   85..83       MOV       DPH,?V1
   \   000052   E5..         MOV       A,?V4
   \   000054   F0           MOVX      @DPTR,A
   1216            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000055   E5..         MOV       A,?V5
   \   000057   A3           INC       DPTR
   \   000058   F0           MOVX      @DPTR,A
   1217          
   1218            ieeeAddr = NLME_GetExtAddr();
   \   000059                ; Setup parameters for call to function NLME_GetExtAddr
   \   000059   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00005C   8A..         MOV       ?V4,R2
   \   00005E   8B..         MOV       ?V5,R3
   \   000060   AC..         MOV       R4,?V4
   \   000062   AD..         MOV       R5,?V5
   1219            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   000064                ; Setup parameters for call to function sAddrExtCpy
   \   000064   E5..         MOV       A,?V0
   \   000066   2402         ADD       A,#0x2
   \   000068   FA           MOV       R2,A
   \   000069   E4           CLR       A
   \   00006A   35..         ADDC      A,?V1
   \   00006C   FB           MOV       R3,A
   \   00006D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000070   8B..         MOV       ?V1,R3
   1220          
   1221            *pBuf++ = endPoint;
   \   000072   8A82         MOV       DPL,R2
   \   000074   8B83         MOV       DPH,R3
   \   000076   E5..         MOV       A,?V3
   \   000078   F0           MOVX      @DPTR,A
   \   000079   7412         MOV       A,#0x12
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F8           MOV       R0,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F9           MOV       R1,A
   1222          
   1223            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   000083   E8           MOV       A,R0
   \   000084   8A82         MOV       DPL,R2
   \   000086   8B83         MOV       DPH,R3
   \   000088   A3           INC       DPTR
   \   000089   F0           MOVX      @DPTR,A
   1224            *pBuf++ = HI_UINT16( ProfileID );
   \   00008A   E9           MOV       A,R1
   \   00008B   8A82         MOV       DPL,R2
   \   00008D   8B83         MOV       DPH,R3
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   F0           MOVX      @DPTR,A
   1225          
   1226            *pBuf++ = NumInClusters; // Input cluster list
   \   000092   8A82         MOV       DPL,R2
   \   000094   8B83         MOV       DPH,R3
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   E5..         MOV       A,?V2
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C   EA           MOV       A,R2
   \   00009D   2404         ADD       A,#0x4
   \   00009F   F5..         MOV       ?V0,A
   \   0000A1   5002         JNC       ??ZDP_EndDeviceBindReq_4
   \   0000A3   05..         INC       ?V1
   1227            for ( i = 0; i < NumInClusters; ++i )
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000A5   7C00         MOV       R4,#0x0
   \   0000A7   7415         MOV       A,#0x15
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F8           MOV       R0,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F9           MOV       R1,A
   \   0000B1   E8           MOV       A,R0
   \   0000B2   FA           MOV       R2,A
   \   0000B3   E9           MOV       A,R1
   \   0000B4   FB           MOV       R3,A
   \   0000B5   8038         SJMP      ??ZDP_EndDeviceBindReq_5
   1228            {
   1229              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000B7   EC           MOV       A,R4
   \   0000B8   25E0         ADD       A,0xE0 /* A   */
   \   0000BA   F5..         MOV       ?V4,A
   \   0000BC   E4           CLR       A
   \   0000BD   33           RLC       A
   \   0000BE   F5..         MOV       ?V5,A
   \   0000C0   EA           MOV       A,R2
   \   0000C1   25..         ADD       A,?V4
   \   0000C3   F5..         MOV       ?V4,A
   \   0000C5   EB           MOV       A,R3
   \   0000C6   35..         ADDC      A,?V5
   \   0000C8   F5..         MOV       ?V5,A
   \   0000CA   85..82       MOV       DPL,?V4
   \   0000CD   F583         MOV       DPH,A
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   85..82       MOV       DPL,?V0
   \   0000D3   85..83       MOV       DPH,?V1
   \   0000D6   F0           MOVX      @DPTR,A
   1230              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   0000D7   85..82       MOV       DPL,?V4
   \   0000DA   85..83       MOV       DPH,?V5
   \   0000DD   A3           INC       DPTR
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   8882         MOV       DPL,R0
   \   0000E1   8983         MOV       DPH,R1
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   E5..         MOV       A,?V0
   \   0000E6   2402         ADD       A,#0x2
   \   0000E8   F5..         MOV       ?V0,A
   \   0000EA   5002         JNC       ??ZDP_EndDeviceBindReq_7
   \   0000EC   05..         INC       ?V1
   1231            }
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0000EE   0C           INC       R4
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000EF   85..82       MOV       DPL,?V0
   \   0000F2   85..83       MOV       DPH,?V1
   \   0000F5   A3           INC       DPTR
   \   0000F6   A882         MOV       R0,DPL
   \   0000F8   A983         MOV       R1,DPH
   \   0000FA   EC           MOV       A,R4
   \   0000FB   C3           CLR       C
   \   0000FC   95..         SUBB      A,?V2
   \   0000FE   40B7         JC        ??ZDP_EndDeviceBindReq_6
   1232          
   1233            *pBuf++ = NumOutClusters; // Output cluster list
   \   000100   EF           MOV       A,R7
   \   000101   85..82       MOV       DPL,?V0
   \   000104   85..83       MOV       DPH,?V1
   \   000107   F0           MOVX      @DPTR,A
   \   000108   88..         MOV       ?V0,R0
   \   00010A   89..         MOV       ?V1,R1
   1234            for ( i = 0; i < NumOutClusters; ++i )
   \   00010C   7C00         MOV       R4,#0x0
   \   00010E   7418         MOV       A,#0x18
   \   000110   12....       LCALL     ?XSTACK_DISP0_8
   \   000113   E0           MOVX      A,@DPTR
   \   000114   F8           MOV       R0,A
   \   000115   A3           INC       DPTR
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F9           MOV       R1,A
   \   000118   8032         SJMP      ??ZDP_EndDeviceBindReq_8
   1235            {
   1236              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_9:
   \   00011A   EC           MOV       A,R4
   \   00011B   25E0         ADD       A,0xE0 /* A   */
   \   00011D   FA           MOV       R2,A
   \   00011E   E4           CLR       A
   \   00011F   33           RLC       A
   \   000120   FB           MOV       R3,A
   \   000121   E8           MOV       A,R0
   \   000122   2A           ADD       A,R2
   \   000123   FA           MOV       R2,A
   \   000124   E9           MOV       A,R1
   \   000125   3B           ADDC      A,R3
   \   000126   FB           MOV       R3,A
   \   000127   8A82         MOV       DPL,R2
   \   000129   F583         MOV       DPH,A
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   85..82       MOV       DPL,?V0
   \   00012F   85..83       MOV       DPH,?V1
   \   000132   F0           MOVX      @DPTR,A
   1237              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \   000133   8A82         MOV       DPL,R2
   \   000135   8B83         MOV       DPH,R3
   \   000137   A3           INC       DPTR
   \   000138   E0           MOVX      A,@DPTR
   \   000139   85..82       MOV       DPL,?V0
   \   00013C   85..83       MOV       DPH,?V1
   \   00013F   A3           INC       DPTR
   \   000140   F0           MOVX      @DPTR,A
   \   000141   E5..         MOV       A,?V0
   \   000143   2402         ADD       A,#0x2
   \   000145   F5..         MOV       ?V0,A
   \   000147   5002         JNC       ??ZDP_EndDeviceBindReq_10
   \   000149   05..         INC       ?V1
   1238            }
   \                     ??ZDP_EndDeviceBindReq_10:
   \   00014B   0C           INC       R4
   \                     ??ZDP_EndDeviceBindReq_8:
   \   00014C   EC           MOV       A,R4
   \   00014D   C3           CLR       C
   \   00014E   9F           SUBB      A,R7
   \   00014F   40C9         JC        ??ZDP_EndDeviceBindReq_9
   1239          
   1240            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   000151                ; Setup parameters for call to function fillAndSend
   \   000151   75..20       MOV       ?V0,#0x20
   \   000154   75..00       MOV       ?V1,#0x0
   \   000157   78..         MOV       R0,#?V0
   \   000159   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015C   EE           MOV       A,R6
   \   00015D   F9           MOV       R1,A
   \   00015E   AC..         MOV       R4,?V6
   \   000160   AD..         MOV       R5,?V7
   \   000162   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000164   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000166   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000169   7402         MOV       A,#0x2
   \   00016B   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   00016E   7F0A         MOV       R7,#0xa
   \   000170   02....       LJMP      ?BANKED_LEAVE_XDATA
   1241          }
   1242          
   1243          /*********************************************************************
   1244           * @fn          ZDP_BindUnbindReq
   1245           *
   1246           * @brief       This builds and send a Bind_req or Unbind_req message
   1247           *              Depending on the ClusterID. This function
   1248           *              sends a unicast message to the local coordinator.
   1249           *
   1250           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1251           * @param       dstAddr - destination address of the message
   1252           * @param       SourceAddr - source 64 bit address of the binding
   1253           * @param       SrcEPIntf - Source endpoint/interface
   1254           * @param       ClusterID - Binding cluster ID
   1255           * @param       DestinationAddr - destination 64 bit addr of binding
   1256           * @param       DstEPIntf - destination endpoint/interface
   1257           * @param       SecurityEnable - Security Options
   1258           *
   1259           * @return      afStatus_t
   1260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1262                                        uint8 *SourceAddr, byte SrcEndPoint,
   1263                                        cId_t ClusterID,
   1264                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1265                                        byte SecurityEnable )
   1266          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V3,R1
   1267            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FA           MOV       R2,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FB           MOV       R3,A
   1268            byte len;
   1269          
   1270            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1271          
   1272            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1273            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \   000017   75..0C       MOV       ?V2,#0xc
   \   00001A   7416         MOV       A,#0x16
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FE           MOV       R6,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FF           MOV       R7,A
   1274            if ( destinationAddr->addrMode == Addr64Bit )
   \   000024   EE           MOV       A,R6
   \   000025   2408         ADD       A,#0x8
   \   000027   F5..         MOV       ?V0,A
   \   000029   E4           CLR       A
   \   00002A   3F           ADDC      A,R7
   \   00002B   F5..         MOV       ?V1,A
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   F583         MOV       DPH,A
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F8           MOV       R0,A
   \   000034   7403         MOV       A,#0x3
   \   000036   68           XRL       A,R0
   \   000037   7005         JNZ       ??ZDP_BindUnbindReq_0
   1275              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000039   75..15       MOV       ?V2,#0x15
   \   00003C   8008         SJMP      ??ZDP_BindUnbindReq_1
   1276            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   00003E   7401         MOV       A,#0x1
   \   000040   68           XRL       A,R0
   \   000041   7003         JNZ       ??ZDP_BindUnbindReq_1
   1277              len += sizeof ( uint16 );
   \   000043   75..0E       MOV       ?V2,#0xe
   1278          
   1279            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000046                ; Setup parameters for call to function sAddrExtCpy
   \   000046   7412         MOV       A,#0x12
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   FC           MOV       R4,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   FD           MOV       R5,A
   \   000050   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1280            *pBuf++ = SrcEndPoint;
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \   000057   E5..         MOV       A,?V3
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   7414         MOV       A,#0x14
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   1281          
   1282            *pBuf++ = LO_UINT16( ClusterID );
   \   000064   E8           MOV       A,R0
   \   000065   8A82         MOV       DPL,R2
   \   000067   8B83         MOV       DPH,R3
   \   000069   A3           INC       DPTR
   \   00006A   F0           MOVX      @DPTR,A
   1283          
   1284            *pBuf++ = HI_UINT16( ClusterID );
   \   00006B   E9           MOV       A,R1
   \   00006C   8A82         MOV       DPL,R2
   \   00006E   8B83         MOV       DPH,R3
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   F0           MOVX      @DPTR,A
   1285            *pBuf++ = destinationAddr->addrMode;
   \   000073   85..82       MOV       DPL,?V0
   \   000076   85..83       MOV       DPH,?V1
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   8A82         MOV       DPL,R2
   \   00007C   8B83         MOV       DPH,R3
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   F0           MOVX      @DPTR,A
   \   000082   EA           MOV       A,R2
   \   000083   2404         ADD       A,#0x4
   \   000085   FA           MOV       R2,A
   \   000086   5001         JNC       ??ZDP_BindUnbindReq_2
   \   000088   0B           INC       R3
   1286            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   000089   85..82       MOV       DPL,?V0
   \   00008C   85..83       MOV       DPH,?V1
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F8           MOV       R0,A
   \   000091   7403         MOV       A,#0x3
   \   000093   68           XRL       A,R0
   \   000094   7013         JNZ       ??ZDP_BindUnbindReq_3
   1287            {
   1288              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   \   000096                ; Setup parameters for call to function sAddrExtCpy
   \   000096   EE           MOV       A,R6
   \   000097   FC           MOV       R4,A
   \   000098   EF           MOV       A,R7
   \   000099   FD           MOV       R5,A
   \   00009A   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1289              *pBuf = DstEndPoint;
   \   00009D   7418         MOV       A,#0x18
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   8A82         MOV       DPL,R2
   \   0000A5   8B83         MOV       DPH,R3
   \   0000A7   801A         SJMP      ??ZDP_BindUnbindReq_4
   1290            }
   1291            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   0000A9   7401         MOV       A,#0x1
   \   0000AB   68           XRL       A,R0
   \   0000AC   7016         JNZ       ??ZDP_BindUnbindReq_5
   1292            {
   1293              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   0000AE   8E82         MOV       DPL,R6
   \   0000B0   8F83         MOV       DPH,R7
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   8A82         MOV       DPL,R2
   \   0000B5   8B83         MOV       DPH,R3
   \   0000B7   F0           MOVX      @DPTR,A
   1294              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \   0000B8   8E82         MOV       DPL,R6
   \   0000BA   8F83         MOV       DPH,R7
   \   0000BC   A3           INC       DPTR
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   8A82         MOV       DPL,R2
   \   0000C0   8B83         MOV       DPH,R3
   \   0000C2   A3           INC       DPTR
   \                     ??ZDP_BindUnbindReq_4:
   \   0000C3   F0           MOVX      @DPTR,A
   1295            }
   1296          
   1297            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_5:
   \   0000C4   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000C7   7410         MOV       A,#0x10
   \   0000C9   F0           MOVX      @DPTR,A
   \   0000CA                ; Setup parameters for call to function fillAndSend
   \   0000CA   78..         MOV       R0,#?V6
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CF   A9..         MOV       R1,?V2
   \   0000D1   AC..         MOV       R4,?V4
   \   0000D3   AD..         MOV       R5,?V5
   \   0000D5   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   0000D7   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   0000D9   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E1   E9           MOV       A,R1
   \   0000E2   F9           MOV       R1,A
   \   0000E3   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000E6   E4           CLR       A
   \   0000E7   F0           MOVX      @DPTR,A
   \   0000E8   7F0A         MOV       R7,#0xa
   \   0000EA   02....       LJMP      ?BANKED_LEAVE_XDATA
   1298          }
   1299          
   1300          /*********************************************************************
   1301           * Network Management
   1302           */
   1303          
   1304          /*********************************************************************
   1305           * @fn          ZDP_MgmtNwkDiscReq
   1306           *
   1307           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1308           *              function sends a unicast message.
   1309           *
   1310           * @param       dstAddr - destination address of the message
   1311           * @param       ScanChannels - 32 bit address bit map
   1312           * @param       StartIndex - Starting index within the reporting network
   1313           *                           list
   1314           * @param       SecurityEnable - Security Options
   1315           *
   1316           * @return      afStatus_t
   1317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1318          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1319                                         uint32 ScanChannels,
   1320                                         byte ScanDuration,
   1321                                         byte StartIndex,
   1322                                         byte SecurityEnable )
   1323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
   \   00000B   8C..         MOV       ?V1,R4
   1324            uint8 *pBuf = ZDP_TmpBuf;
   1325            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1326          
   1327            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1328          
   1329            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000015   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000018   E0           MOVX      A,@DPTR
   \   000019   FA           MOV       R2,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000020   7404         MOV       A,#0x4
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   1330          
   1331            *pBuf++ = ScanDuration;
   \   000029   E5..         MOV       A,?V0
   \   00002B   F0           MOVX      @DPTR,A
   1332            *pBuf = StartIndex;
   \   00002C   A3           INC       DPTR
   \   00002D   E5..         MOV       A,?V1
   \   00002F   F0           MOVX      @DPTR,A
   1333          
   1334            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000030                ; Setup parameters for call to function fillAndSend
   \   000030   75..30       MOV       ?V2,#0x30
   \   000033   75..00       MOV       ?V3,#0x0
   \   000036   78..         MOV       R0,#?V2
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7906         MOV       R1,#0x6
   \   00003D   EE           MOV       A,R6
   \   00003E   FC           MOV       R4,A
   \   00003F   EF           MOV       A,R7
   \   000040   FD           MOV       R5,A
   \   000041   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000043   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000045   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000048   7402         MOV       A,#0x2
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004D   7F04         MOV       R7,#0x4
   \   00004F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1335          }
   1336          
   1337          /*********************************************************************
   1338           * @fn          ZDP_MgmtDirectJoinReq
   1339           *
   1340           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1341           *              function sends a unicast message.
   1342           *
   1343           * @param       dstAddr - destination address of the message
   1344           * @param       deviceAddr - 64 bit IEEE Address
   1345           * @param       SecurityEnable - Security Options
   1346           *
   1347           * @return      afStatus_t
   1348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1349          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1350                                         uint8 *deviceAddr,
   1351                                         byte capInfo,
   1352                                         byte SecurityEnable )
   1353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
   1354            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1355          
   1356            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   FA           MOV       R2,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1357            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   000016   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   C8           XCH       A,R0
   \   00001E   2408         ADD       A,#0x8
   \   000020   F582         MOV       DPL,A
   \   000022   E4           CLR       A
   \   000023   38           ADDC      A,R0
   \   000024   F583         MOV       DPH,A
   \   000026   E5..         MOV       A,?V0
   \   000028   F0           MOVX      @DPTR,A
   1358          
   1359            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000029                ; Setup parameters for call to function fillAndSend
   \   000029   75..35       MOV       ?V2,#0x35
   \   00002C   75..00       MOV       ?V3,#0x0
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   7909         MOV       R1,#0x9
   \   000036   EE           MOV       A,R6
   \   000037   FC           MOV       R4,A
   \   000038   EF           MOV       A,R7
   \   000039   FD           MOV       R5,A
   \   00003A   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00003C   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00003E   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   7F04         MOV       R7,#0x4
   \   000048   02....       LJMP      ?BANKED_LEAVE_XDATA
   1360          }
   1361          
   1362          /*********************************************************************
   1363           * @fn          ZDP_MgmtPermitJoinReq
   1364           *
   1365           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1366           *
   1367           * @param       dstAddr - destination address of the message
   1368           * @param       duration - Permit duration
   1369           * @param       TcSignificance - Trust Center Significance
   1370           *
   1371           * @return      afStatus_t
   1372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1373          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1374                                            byte TcSignificance, byte SecurityEnable )
   1375          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1376            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1377          
   1378            // Build buffer
   1379            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   00000E   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F583         MOV       DPH,A
   \   000017   8882         MOV       DPL,R0
   \   000019   E9           MOV       A,R1
   \   00001A   F0           MOVX      @DPTR,A
   1380            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \   00001B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F583         MOV       DPH,A
   \   000024   8882         MOV       DPL,R0
   \   000026   A3           INC       DPTR
   \   000027   EC           MOV       A,R4
   \   000028   F0           MOVX      @DPTR,A
   1381          
   1382            // Check of this is a broadcast message
   1383            if ( (dstAddr) && ((dstAddr->addrMode == Addr16Bit) || (dstAddr->addrMode == AddrBroadcast))
   1384                && ((dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL)
   1385                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   1386                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVRXON)) )
   \   000029   EA           MOV       A,R2
   \   00002A   4F           ORL       A,R7
   \   00002B   6072         JZ        ??ZDP_MgmtPermitJoinReq_0
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F8           MOV       R0,A
   \   00003B   7402         MOV       A,#0x2
   \   00003D   68           XRL       A,R0
   \   00003E   6005         JZ        ??ZDP_MgmtPermitJoinReq_1
   \   000040   740F         MOV       A,#0xf
   \   000042   68           XRL       A,R0
   \   000043   705A         JNZ       ??ZDP_MgmtPermitJoinReq_0
   \                     ??ZDP_MgmtPermitJoinReq_1:
   \   000045   8A82         MOV       DPL,R2
   \   000047   8B83         MOV       DPH,R3
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F8           MOV       R0,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   \   00004E   74FF         MOV       A,#-0x1
   \   000050   68           XRL       A,R0
   \   000051   7003         JNZ       ??ZDP_MgmtPermitJoinReq_2
   \   000053   74FF         MOV       A,#-0x1
   \   000055   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_2:
   \   000056   6014         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   000058   74FC         MOV       A,#-0x4
   \   00005A   68           XRL       A,R0
   \   00005B   7003         JNZ       ??ZDP_MgmtPermitJoinReq_4
   \   00005D   74FF         MOV       A,#-0x1
   \   00005F   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_4:
   \   000060   600A         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   000062   74FD         MOV       A,#-0x3
   \   000064   68           XRL       A,R0
   \   000065   7003         JNZ       ??ZDP_MgmtPermitJoinReq_5
   \   000067   74FF         MOV       A,#-0x1
   \   000069   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_5:
   \   00006A   7033         JNZ       ??ZDP_MgmtPermitJoinReq_0
   1387            {
   1388              // Send this to our self as well as broadcast to network
   1389              zAddrType_t tmpAddr;
   1390          
   1391              tmpAddr.addrMode = Addr16Bit;
   \                     ??ZDP_MgmtPermitJoinReq_3:
   \   00006C   7408         MOV       A,#0x8
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   7402         MOV       A,#0x2
   \   000073   F0           MOVX      @DPTR,A
   1392              tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000074                ; Setup parameters for call to function NLME_GetShortAddr
   \   000074   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000077   85..82       MOV       DPL,?XSP + 0
   \   00007A   85..83       MOV       DPH,?XSP + 1
   \   00007D   EA           MOV       A,R2
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   A3           INC       DPTR
   \   000080   EB           MOV       A,R3
   \   000081   F0           MOVX      @DPTR,A
   1393          
   1394              fillAndSend( &ZDP_TransID, &tmpAddr, Mgmt_Permit_Join_req,
   1395                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   000082                ; Setup parameters for call to function fillAndSend
   \   000082   75..36       MOV       ?V2,#0x36
   \   000085   75..00       MOV       ?V3,#0x0
   \   000088   78..         MOV       R0,#?V2
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   7902         MOV       R1,#0x2
   \   00008F   E9           MOV       A,R1
   \   000090   12....       LCALL     ?XSTACK_DISP102_8
   \   000093   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000095   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000097   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00009A   7402         MOV       A,#0x2
   \   00009C   12....       LCALL     ?DEALLOC_XSTACK8
   1396            }
   1397          
   1398            // Send the message
   1399            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1400                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??ZDP_MgmtPermitJoinReq_0:
   \   00009F                ; Setup parameters for call to function fillAndSend
   \   00009F   75..36       MOV       ?V2,#0x36
   \   0000A2   75..00       MOV       ?V3,#0x0
   \   0000A5   78..         MOV       R0,#?V2
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   7902         MOV       R1,#0x2
   \   0000AC   EE           MOV       A,R6
   \   0000AD   FC           MOV       R4,A
   \   0000AE   EF           MOV       A,R7
   \   0000AF   FD           MOV       R5,A
   \   0000B0   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   0000B2   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   0000B4   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000B7   7402         MOV       A,#0x2
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   7409         MOV       A,#0x9
   \   0000BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C1   7F04         MOV       R7,#0x4
   \   0000C3   02....       LJMP      ?BANKED_LEAVE_XDATA
   1401          }
   1402          
   1403          /*********************************************************************
   1404           * @fn          ZDP_MgmtLeaveReq
   1405           *
   1406           * @brief       This builds and send a Mgmt_Leave_req message.
   1407           *
   1408           * @param       dstAddr - destination address of the message
   1409           *              IEEEAddr - IEEE adddress of device that is removed
   1410           *              RemoveChildren - set to 1 to remove the children of the
   1411           *                                device as well. 0 otherwise.
   1412           *              Rejoin - set to 1 if the removed device should rejoin
   1413                                   afterwards. 0 otherwise.
   1414           *
   1415           * @return      afStatus_t
   1416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1417          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1418                           uint8 Rejoin, uint8 SecurityEnable )
   1419          
   1420          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
   1421            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1422          
   1423            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   FA           MOV       R2,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1424            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000016   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   2408         ADD       A,#0x8
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   3400         ADDC      A,#0x0
   \   000021   F9           MOV       R1,A
   \   000022   8882         MOV       DPL,R0
   \   000024   F583         MOV       DPH,A
   \   000026   E4           CLR       A
   \   000027   F0           MOVX      @DPTR,A
   1425          
   1426            if ( RemoveChildren == TRUE )
   \   000028   04           INC       A
   \   000029   65..         XRL       A,?V0
   \   00002B   7003         JNZ       ??ZDP_MgmtLeaveReq_0
   1427            {
   1428              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   00002D   7440         MOV       A,#0x40
   \   00002F   F0           MOVX      @DPTR,A
   1429            }
   1430            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000030   740C         MOV       A,#0xc
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6401         XRL       A,#0x1
   \   000038   7008         JNZ       ??ZDP_MgmtLeaveReq_1
   1431            {
   1432              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00003A   8882         MOV       DPL,R0
   \   00003C   8983         MOV       DPH,R1
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   D2E7         SETB      0xE0 /* A   */.7
   \   000041   F0           MOVX      @DPTR,A
   1433            }
   1434          
   1435            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000042                ; Setup parameters for call to function fillAndSend
   \   000042   75..34       MOV       ?V2,#0x34
   \   000045   75..00       MOV       ?V3,#0x0
   \   000048   78..         MOV       R0,#?V2
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   7909         MOV       R1,#0x9
   \   00004F   EE           MOV       A,R6
   \   000050   FC           MOV       R4,A
   \   000051   EF           MOV       A,R7
   \   000052   FD           MOV       R5,A
   \   000053   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000055   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000057   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005F   7F04         MOV       R7,#0x4
   \   000061   02....       LJMP      ?BANKED_LEAVE_XDATA
   1436          }
   1437          
   1438          /*********************************************************************
   1439           * @fn          ZDP_MgmtNwkUpdateReq
   1440           *
   1441           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1442           *              function sends a unicast or broadcast message.
   1443           *
   1444           * @param       dstAddr - destination address of the message
   1445           * @param       ChannelMask - 32 bit address bit map
   1446           * @param       ScanDuration - length of time to spend scanning each channel
   1447           * @param       ScanCount - number of energy scans to be conducted
   1448           * @param       NwkUpdateId - NWk Update Id value
   1449           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1450           *                               bit set in its Node Descriptor
   1451           *
   1452           * @return      afStatus_t
   1453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1454          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1455                                           uint32 ChannelMask,
   1456                                           uint8 ScanDuration,
   1457                                           uint8 ScanCount,
   1458                                           uint8 NwkUpdateId,
   1459                                           uint16 NwkManagerAddr )
   1460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   1461            uint8 *pBuf = ZDP_TmpBuf;
   1462            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   7E05         MOV       R6,#0x5
   1463          
   1464            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000011                ; Setup parameters for call to function osal_buffer_uint32
   \   000011   740E         MOV       A,#0xe
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000019   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FA           MOV       R2,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000024   7404         MOV       A,#0x4
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
   1465          
   1466            *pBuf++ = ScanDuration;
   \   000029   EF           MOV       A,R7
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   F0           MOVX      @DPTR,A
   1467          
   1468            if ( ScanDuration <= 0x05 )
   \   00002F   C3           CLR       C
   \   000030   9406         SUBB      A,#0x6
   \   000032   5007         JNC       ??ZDP_MgmtNwkUpdateReq_0
   1469            {
   1470              // Request is to scan over channelMask
   1471              len += sizeof( uint8 );
   \   000034   7E06         MOV       R6,#0x6
   1472          
   1473              *pBuf++ = ScanCount;
   \   000036   A3           INC       DPTR
   \   000037   E5..         MOV       A,?V2
   \   000039   8031         SJMP      ??ZDP_MgmtNwkUpdateReq_1
   1474            }
   1475            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00003B   74FE         MOV       A,#-0x2
   \   00003D   6F           XRL       A,R7
   \   00003E   6005         JZ        ??ZDP_MgmtNwkUpdateReq_2
   \   000040   74FF         MOV       A,#-0x1
   \   000042   6F           XRL       A,R7
   \   000043   7028         JNZ       ??ZDP_MgmtNwkUpdateReq_3
   1476            {
   1477              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1478              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000045   7E06         MOV       R6,#0x6
   1479          
   1480              *pBuf++ = NwkUpdateId;
   \   000047   A3           INC       DPTR
   \   000048   E5..         MOV       A,?V3
   \   00004A   F0           MOVX      @DPTR,A
   1481          
   1482              if ( ScanDuration == 0xFF )
   \   00004B   74FF         MOV       A,#-0x1
   \   00004D   6F           XRL       A,R7
   \   00004E   701D         JNZ       ??ZDP_MgmtNwkUpdateReq_3
   1483              {
   1484                len += sizeof( uint16 );
   \   000050   7E08         MOV       R6,#0x8
   \   000052   7412         MOV       A,#0x12
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F8           MOV       R0,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F9           MOV       R1,A
   1485          
   1486                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \   00005C   E8           MOV       A,R0
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8B83         MOV       DPH,R3
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   F0           MOVX      @DPTR,A
   1487                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   000064   E9           MOV       A,R1
   \   000065   8A82         MOV       DPL,R2
   \   000067   8B83         MOV       DPH,R3
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   00006C   F0           MOVX      @DPTR,A
   1488              }
   1489            }
   1490          
   1491            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_3:
   \   00006D                ; Setup parameters for call to function fillAndSend
   \   00006D   75..38       MOV       ?V4,#0x38
   \   000070   75..00       MOV       ?V5,#0x0
   \   000073   78..         MOV       R0,#?V4
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   EE           MOV       A,R6
   \   000079   F9           MOV       R1,A
   \   00007A   AC..         MOV       R4,?V0
   \   00007C   AD..         MOV       R5,?V1
   \   00007E   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000080   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000082   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000085   7402         MOV       A,#0x2
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008A   7F06         MOV       R7,#0x6
   \   00008C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1492          }
   1493          
   1494          
   1495          /*********************************************************************
   1496           * Network Management Responses
   1497           */
   1498          
   1499          /*********************************************************************
   1500           * @fn          ZDP_MgmtNwkDiscRsp
   1501           *
   1502           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1503           *              function sends a unicast message.
   1504           *
   1505           * @param       dstAddr - destination address of the message
   1506           * @param       Status - message status (ZDP_SUCCESS or other)
   1507           * @param       NetworkCount - Total number of networks found
   1508           * @param       StartIndex - Starting index within the reporting network
   1509           *                           list
   1510           * @param       NetworkListCount - number of network lists included
   1511           *                                 in this message
   1512           * @param       NetworkList - List of network descriptors
   1513           * @param       SecurityEnable - Security Options
   1514           *
   1515           * @return      afStatus_t
   1516           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1517          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1518                                      byte Status,
   1519                                      byte NetworkCount,
   1520                                      byte StartIndex,
   1521                                      byte NetworkListCount,
   1522                                      networkDesc_t *NetworkList,
   1523                                      byte SecurityEnable )
   1524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V12,R2
   \   000014   8B..         MOV       ?V13,R3
   \   000016   8C..         MOV       ?V10,R4
   \   000018   8D..         MOV       ?V7,R5
   \   00001A   7418         MOV       A,#0x18
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V4,A
   1525            uint8 *buf;
   1526            uint8 *pBuf;
   1527            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1528            byte idx;
   1529          
   1530            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1531          
   1532            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000022   75F00C       MOV       B,#0xc
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   F5..         MOV       ?V5,A
   1533          
   1534            buf = osal_mem_alloc( len+1 );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   2401         ADD       A,#0x1
   \   00002C   FA           MOV       R2,A
   \   00002D   E4           CLR       A
   \   00002E   3400         ADDC      A,#0x0
   \   000030   FB           MOV       R3,A
   \   000031   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000034   8A..         MOV       ?V0,R2
   \   000036   8B..         MOV       ?V1,R3
   1535            if ( buf == NULL )
   \   000038   EA           MOV       A,R2
   \   000039   4B           ORL       A,R3
   \   00003A   7005         JNZ       ??ZDP_MgmtNwkDiscRsp_0
   1536            {
   1537              return afStatus_MEM_FAIL;
   \   00003C   7910         MOV       R1,#0x10
   \   00003E   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_1 & 0xFFFF
   1538            }
   1539          
   1540            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000041   8A82         MOV       DPL,R2
   \   000043   8B83         MOV       DPH,R3
   \   000045   A3           INC       DPTR
   \   000046   8582..       MOV       ?V8,DPL
   \   000049   8583..       MOV       ?V9,DPH
   \   00004C   AE..         MOV       R6,?V8
   \   00004E   AF..         MOV       R7,?V9
   1541          
   1542            *pBuf++ = Status;
   \   000050   E5..         MOV       A,?V10
   \   000052   F0           MOVX      @DPTR,A
   1543            *pBuf++ = NetworkCount;
   \   000053   A3           INC       DPTR
   \   000054   E5..         MOV       A,?V7
   \   000056   F0           MOVX      @DPTR,A
   1544            *pBuf++ = StartIndex;
   \   000057   7417         MOV       A,#0x17
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   8E82         MOV       DPL,R6
   \   00005F   8F83         MOV       DPH,R7
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   F0           MOVX      @DPTR,A
   1545            *pBuf++ = NetworkListCount;
   \   000064   8E82         MOV       DPL,R6
   \   000066   8F83         MOV       DPH,R7
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E5..         MOV       A,?V4
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   EE           MOV       A,R6
   \   00006F   2404         ADD       A,#0x4
   \   000071   FE           MOV       R6,A
   \   000072   5001         JNC       ??ZDP_MgmtNwkDiscRsp_2
   \   000074   0F           INC       R7
   1546          
   1547            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000075   75..00       MOV       ?V6,#0x0
   \   000078   7419         MOV       A,#0x19
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   F5..         MOV       ?V2,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F5..         MOV       ?V3,A
   \   000084   801A         SJMP      ??ZDP_MgmtNwkDiscRsp_3
   1548            {
   1549              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1550              pBuf += Z_EXTADDR_LEN;
   1551          
   1552              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1553              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1554              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1555              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1556              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1557          
   1558              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1559              {
   1560                *pBuf++ = TRUE;                         // Permit Joining
   1561              }
   1562              else
   1563              {
   1564                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   000086   E4           CLR       A
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000087   F0           MOVX      @DPTR,A
   \   000088   E8           MOV       A,R0
   \   000089   FE           MOV       R6,A
   \   00008A   E9           MOV       A,R1
   \   00008B   FF           MOV       R7,A
   1565              }
   1566          
   1567              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   00008C   E5..         MOV       A,?V2
   \   00008E   2414         ADD       A,#0x14
   \   000090   F582         MOV       DPL,A
   \   000092   E4           CLR       A
   \   000093   35..         ADDC      A,?V3
   \   000095   F583         MOV       DPH,A
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F5..         MOV       ?V2,A
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F5..         MOV       ?V3,A
   \   00009E   05..         INC       ?V6
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   0000A0   E5..         MOV       A,?V6
   \   0000A2   C3           CLR       C
   \   0000A3   95..         SUBB      A,?V4
   \   0000A5   4003         JC        $+5
   \   0000A7   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_6 & 0xFFFF
   \   0000AA                ; Setup parameters for call to function sAddrExtCpy
   \   0000AA   E5..         MOV       A,?V2
   \   0000AC   240B         ADD       A,#0xb
   \   0000AE   FC           MOV       R4,A
   \   0000AF   E4           CLR       A
   \   0000B0   35..         ADDC      A,?V3
   \   0000B2   FD           MOV       R5,A
   \   0000B3   EE           MOV       A,R6
   \   0000B4   FA           MOV       R2,A
   \   0000B5   EF           MOV       A,R7
   \   0000B6   FB           MOV       R3,A
   \   0000B7   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000BA   85..82       MOV       DPL,?V2
   \   0000BD   85..83       MOV       DPH,?V3
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   8E82         MOV       DPL,R6
   \   0000C5   8F83         MOV       DPH,R7
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0   EE           MOV       A,R6
   \   0000D1   2409         ADD       A,#0x9
   \   0000D3   F8           MOV       R0,A
   \   0000D4   E4           CLR       A
   \   0000D5   3F           ADDC      A,R7
   \   0000D6   F9           MOV       R1,A
   \   0000D7   85..82       MOV       DPL,?V2
   \   0000DA   85..83       MOV       DPH,?V3
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   8882         MOV       DPL,R0
   \   0000E6   8983         MOV       DPH,R1
   \   0000E8   F0           MOVX      @DPTR,A
   \   0000E9   85..82       MOV       DPL,?V2
   \   0000EC   85..83       MOV       DPH,?V3
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   C4           SWAP      A
   \   0000F6   54F0         ANL       A,#0xf0
   \   0000F8   FA           MOV       R2,A
   \   0000F9   8882         MOV       DPL,R0
   \   0000FB   8983         MOV       DPH,R1
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   4A           ORL       A,R2
   \   0000FF   F0           MOVX      @DPTR,A
   \   000100   EE           MOV       A,R6
   \   000101   240A         ADD       A,#0xa
   \   000103   F582         MOV       DPL,A
   \   000105   E4           CLR       A
   \   000106   3F           ADDC      A,R7
   \   000107   F583         MOV       DPH,A
   \   000109   740F         MOV       A,#0xf
   \   00010B   F0           MOVX      @DPTR,A
   \   00010C   74FF         MOV       A,#-0x1
   \   00010E   F0           MOVX      @DPTR,A
   \   00010F   EE           MOV       A,R6
   \   000110   240C         ADD       A,#0xc
   \   000112   F8           MOV       R0,A
   \   000113   E4           CLR       A
   \   000114   3F           ADDC      A,R7
   \   000115   F9           MOV       R1,A
   \   000116   EE           MOV       A,R6
   \   000117   240B         ADD       A,#0xb
   \   000119   FA           MOV       R2,A
   \   00011A   E4           CLR       A
   \   00011B   3F           ADDC      A,R7
   \   00011C   FB           MOV       R3,A
   \   00011D   85..82       MOV       DPL,?V2
   \   000120   85..83       MOV       DPH,?V3
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   64FE         XRL       A,#0xfe
   \   00012D   7003         JNZ       ??ZDP_MgmtNwkDiscRsp_7
   \   00012F   A3           INC       DPTR
   \   000130   E0           MOVX      A,@DPTR
   \   000131   F4           CPL       A
   \                     ??ZDP_MgmtNwkDiscRsp_7:
   \   000132   8A82         MOV       DPL,R2
   \   000134   8B83         MOV       DPH,R3
   \   000136   7003         JNZ       $+5
   \   000138   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   \   00013B   7401         MOV       A,#0x1
   \   00013D   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_5 & 0xFFFF
   1568            }
   1569          
   1570            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   000140   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000143   E5..         MOV       A,?V8
   \   000145   F0           MOVX      @DPTR,A
   \   000146   A3           INC       DPTR
   \   000147   E5..         MOV       A,?V9
   \   000149   F0           MOVX      @DPTR,A
   \   00014A                ; Setup parameters for call to function fillAndSend
   \   00014A   75..30       MOV       ?V2,#0x30
   \   00014D   75..80       MOV       ?V3,#-0x80
   \   000150   78..         MOV       R0,#?V2
   \   000152   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000155   A9..         MOV       R1,?V5
   \   000157   AC..         MOV       R4,?V12
   \   000159   AD..         MOV       R5,?V13
   \   00015B   7402         MOV       A,#0x2
   \   00015D   12....       LCALL     ?XSTACK_DISP101_8
   \   000160   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000163   7402         MOV       A,#0x2
   \   000165   12....       LCALL     ?DEALLOC_XSTACK8
   \   000168   E9           MOV       A,R1
   \   000169   FE           MOV       R6,A
   \   00016A                ; Setup parameters for call to function osal_mem_free
   \   00016A   AA..         MOV       R2,?V0
   \   00016C   AB..         MOV       R3,?V1
   \   00016E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000171   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000174   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000176   F0           MOVX      @DPTR,A
   \   000177   A3           INC       DPTR
   \   000178   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00017A   F0           MOVX      @DPTR,A
   \   00017B   EE           MOV       A,R6
   \   00017C   F9           MOV       R1,A
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   00017D   7401         MOV       A,#0x1
   \   00017F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000182   7F0E         MOV       R7,#0xe
   \   000184   02....       LJMP      ?BANKED_LEAVE_XDATA
   1571          }
   1572          
   1573          /*********************************************************************
   1574           * @fn          ZDP_MgmtLqiRsp
   1575           *
   1576           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1577           *              function sends a unicast message.
   1578           *
   1579           * @param       dstAddr - destination address of the message
   1580           * @param       Status - message status (ZDP_SUCCESS or other)
   1581           * @param       NeighborLqiEntries - Total number of entries found
   1582           * @param       StartIndex - Starting index within the reporting list
   1583           * @param       NeighborLqiCount - number of lists included
   1584           *                                 in this message
   1585           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1586           *                is the list to be sent, not the entire list
   1587           * @param       SecurityEnable - true if secure
   1588           *
   1589           * @return      ZStatus_t
   1590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1591          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1592                                    byte Status,
   1593                                    byte NeighborLqiEntries,
   1594                                    byte StartIndex,
   1595                                    byte NeighborLqiCount,
   1596                                    ZDP_MgmtLqiItem_t* NeighborList,
   1597                                    byte SecurityEnable )
   1598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V12,R2
   \   000014   8B..         MOV       ?V13,R3
   \   000016   8D..         MOV       ?V14,R5
   1599            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000018   741A         MOV       A,#0x1a
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   FE           MOV       R6,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FF           MOV       R7,A
   1600            uint8 *buf, *pBuf;
   1601            byte len, x;
   1602          
   1603            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1604          
   1605            if ( ZSuccess != Status )
   \   000022   EC           MOV       A,R4
   \   000023   602E         JZ        ??ZDP_MgmtLqiRsp_0
   1606            {
   1607              ZDP_TmpBuf[0] = Status;
   \   000025   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F583         MOV       DPH,A
   \   00002E   8882         MOV       DPL,R0
   \   000030   EC           MOV       A,R4
   \   000031   F0           MOVX      @DPTR,A
   1608              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000032                ; Setup parameters for call to function fillAndSend
   \   000032   75..31       MOV       ?V0,#0x31
   \   000035   75..80       MOV       ?V1,#-0x80
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7901         MOV       R1,#0x1
   \   00003F   AC..         MOV       R4,?V12
   \   000041   AD..         MOV       R5,?V13
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?XSTACK_DISP101_8
   \   000048   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004B   7402         MOV       A,#0x2
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   02....       LJMP      ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1609            }
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000053   7419         MOV       A,#0x19
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F5..         MOV       ?V5,A
   1610          
   1611            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1612            //  neighbor LQI data.
   1613            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00005B   75F016       MOV       B,#0x16
   \   00005E   A4           MUL       AB
   \   00005F   2404         ADD       A,#0x4
   \   000061   F5..         MOV       ?V6,A
   1614          
   1615            buf = osal_mem_alloc( len+1 );
   \   000063                ; Setup parameters for call to function osal_mem_alloc
   \   000063   2401         ADD       A,#0x1
   \   000065   FA           MOV       R2,A
   \   000066   E4           CLR       A
   \   000067   3400         ADDC      A,#0x0
   \   000069   FB           MOV       R3,A
   \   00006A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006D   8A..         MOV       ?V2,R2
   \   00006F   8B..         MOV       ?V3,R3
   1616            if ( buf == NULL )
   \   000071   EA           MOV       A,R2
   \   000072   4B           ORL       A,R3
   \   000073   7005         JNZ       ??ZDP_MgmtLqiRsp_2
   1617            {
   1618              return afStatus_MEM_FAIL;
   \   000075   7910         MOV       R1,#0x10
   \   000077   02....       LJMP      ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1619            }
   1620          
   1621            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_2:
   \   00007A   8A82         MOV       DPL,R2
   \   00007C   8B83         MOV       DPH,R3
   \   00007E   A3           INC       DPTR
   \   00007F   8582..       MOV       ?V8,DPL
   \   000082   8583..       MOV       ?V9,DPH
   \   000085   85....       MOV       ?V0,?V8
   \   000088   85....       MOV       ?V1,?V9
   1622          
   1623            *pBuf++ = Status;
   \   00008B   E4           CLR       A
   \   00008C   F0           MOVX      @DPTR,A
   1624            *pBuf++ = NeighborLqiEntries;
   \   00008D   A3           INC       DPTR
   \   00008E   E5..         MOV       A,?V14
   \   000090   F0           MOVX      @DPTR,A
   1625            *pBuf++ = StartIndex;
   \   000091   7418         MOV       A,#0x18
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   E0           MOVX      A,@DPTR
   \   000097   85..82       MOV       DPL,?V0
   \   00009A   85..83       MOV       DPH,?V1
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   F0           MOVX      @DPTR,A
   1626            *pBuf++ = NeighborLqiCount;
   \   0000A0   85..82       MOV       DPL,?V0
   \   0000A3   85..83       MOV       DPH,?V1
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   E5..         MOV       A,?V5
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   E5..         MOV       A,?V0
   \   0000AE   2404         ADD       A,#0x4
   \   0000B0   F5..         MOV       ?V0,A
   \   0000B2   5002         JNC       ??ZDP_MgmtLqiRsp_3
   \   0000B4   05..         INC       ?V1
   1627          
   1628            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_3:
   \   0000B6   75..00       MOV       ?V4,#0x0
   \   0000B9   02....       LJMP      ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1629            {
   1630              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_5:
   \   0000BC                ; Setup parameters for call to function sAddrExtCpy
   \   0000BC   EE           MOV       A,R6
   \   0000BD   2402         ADD       A,#0x2
   \   0000BF   FC           MOV       R4,A
   \   0000C0   E4           CLR       A
   \   0000C1   3F           ADDC      A,R7
   \   0000C2   FD           MOV       R5,A
   \   0000C3   AA..         MOV       R2,?V0
   \   0000C5   AB..         MOV       R3,?V1
   \   0000C7   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1631              pBuf += Z_EXTADDR_LEN;
   1632          
   1633              // EXTADDR
   1634              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   0000CA                ; Setup parameters for call to function sAddrExtCpy
   \   0000CA   EE           MOV       A,R6
   \   0000CB   240A         ADD       A,#0xa
   \   0000CD   FC           MOV       R4,A
   \   0000CE   E4           CLR       A
   \   0000CF   3F           ADDC      A,R7
   \   0000D0   FD           MOV       R5,A
   \   0000D1   E5..         MOV       A,?V0
   \   0000D3   2408         ADD       A,#0x8
   \   0000D5   FA           MOV       R2,A
   \   0000D6   E4           CLR       A
   \   0000D7   35..         ADDC      A,?V1
   \   0000D9   FB           MOV       R3,A
   \   0000DA   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000DD   8A..         MOV       ?V0,R2
   \   0000DF   8B..         MOV       ?V1,R3
   1635          
   1636              // NWKADDR
   1637              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000E1   EE           MOV       A,R6
   \   0000E2   2412         ADD       A,#0x12
   \   0000E4   F8           MOV       R0,A
   \   0000E5   E4           CLR       A
   \   0000E6   3F           ADDC      A,R7
   \   0000E7   F9           MOV       R1,A
   \   0000E8   8882         MOV       DPL,R0
   \   0000EA   F583         MOV       DPH,A
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   8A82         MOV       DPL,R2
   \   0000EF   8B83         MOV       DPH,R3
   \   0000F1   F0           MOVX      @DPTR,A
   1638              *pBuf++ = HI_UINT16( list->nwkAddr );
   \   0000F2   8882         MOV       DPL,R0
   \   0000F4   8983         MOV       DPH,R1
   \   0000F6   A3           INC       DPTR
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   8A82         MOV       DPL,R2
   \   0000FA   8B83         MOV       DPH,R3
   \   0000FC   A3           INC       DPTR
   \   0000FD   F0           MOVX      @DPTR,A
   1639          
   1640              // DEVICETYPE
   1641              *pBuf = list->devType;
   \   0000FE   EA           MOV       A,R2
   \   0000FF   2402         ADD       A,#0x2
   \   000101   F8           MOV       R0,A
   \   000102   E4           CLR       A
   \   000103   35..         ADDC      A,?V1
   \   000105   F9           MOV       R1,A
   \   000106   EE           MOV       A,R6
   \   000107   2414         ADD       A,#0x14
   \   000109   F582         MOV       DPL,A
   \   00010B   E4           CLR       A
   \   00010C   3F           ADDC      A,R7
   \   00010D   F583         MOV       DPH,A
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   8882         MOV       DPL,R0
   \   000112   8983         MOV       DPH,R1
   \   000114   F0           MOVX      @DPTR,A
   1642          
   1643              // RXONIDLE
   1644              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   000115   EE           MOV       A,R6
   \   000116   2415         ADD       A,#0x15
   \   000118   F582         MOV       DPL,A
   \   00011A   E4           CLR       A
   \   00011B   3F           ADDC      A,R7
   \   00011C   F583         MOV       DPH,A
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   33           RLC       A
   \   000120   33           RLC       A
   \   000121   54FC         ANL       A,#0xfc
   \   000123   FA           MOV       R2,A
   \   000124   8882         MOV       DPL,R0
   \   000126   8983         MOV       DPH,R1
   \   000128   E0           MOVX      A,@DPTR
   \   000129   4A           ORL       A,R2
   \   00012A   F0           MOVX      @DPTR,A
   1645          
   1646              // RELATIONSHIP
   1647              *pBuf++ |= (uint8)(list->relation << 4);
   \   00012B   EE           MOV       A,R6
   \   00012C   2416         ADD       A,#0x16
   \   00012E   F582         MOV       DPL,A
   \   000130   E4           CLR       A
   \   000131   3F           ADDC      A,R7
   \   000132   F583         MOV       DPH,A
   \   000134   E0           MOVX      A,@DPTR
   \   000135   C4           SWAP      A
   \   000136   54F0         ANL       A,#0xf0
   \   000138   FA           MOV       R2,A
   \   000139   8882         MOV       DPL,R0
   \   00013B   8983         MOV       DPH,R1
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   4A           ORL       A,R2
   \   00013F   F0           MOVX      @DPTR,A
   1648          
   1649              // PERMITJOINING
   1650              *pBuf++ = (uint8)(list->permit);
   \   000140   EE           MOV       A,R6
   \   000141   2417         ADD       A,#0x17
   \   000143   F582         MOV       DPL,A
   \   000145   E4           CLR       A
   \   000146   3F           ADDC      A,R7
   \   000147   F583         MOV       DPH,A
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   85..82       MOV       DPL,?V0
   \   00014D   8B83         MOV       DPH,R3
   \   00014F   A3           INC       DPTR
   \   000150   A3           INC       DPTR
   \   000151   A3           INC       DPTR
   \   000152   F0           MOVX      @DPTR,A
   1651          
   1652              // DEPTH
   1653              *pBuf++ = list->depth;
   \   000153   EE           MOV       A,R6
   \   000154   2418         ADD       A,#0x18
   \   000156   F582         MOV       DPL,A
   \   000158   E4           CLR       A
   \   000159   3F           ADDC      A,R7
   \   00015A   F583         MOV       DPH,A
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   85..82       MOV       DPL,?V0
   \   000160   8B83         MOV       DPH,R3
   \   000162   A3           INC       DPTR
   \   000163   A3           INC       DPTR
   \   000164   A3           INC       DPTR
   \   000165   A3           INC       DPTR
   \   000166   F0           MOVX      @DPTR,A
   1654          
   1655              // LQI
   1656              *pBuf++ = list->lqi;
   \   000167   EE           MOV       A,R6
   \   000168   2419         ADD       A,#0x19
   \   00016A   F582         MOV       DPL,A
   \   00016C   E4           CLR       A
   \   00016D   3F           ADDC      A,R7
   \   00016E   F583         MOV       DPH,A
   \   000170   E0           MOVX      A,@DPTR
   \   000171   85..82       MOV       DPL,?V0
   \   000174   8B83         MOV       DPH,R3
   \   000176   A3           INC       DPTR
   \   000177   A3           INC       DPTR
   \   000178   A3           INC       DPTR
   \   000179   A3           INC       DPTR
   \   00017A   A3           INC       DPTR
   \   00017B   F0           MOVX      @DPTR,A
   \   00017C   E5..         MOV       A,?V0
   \   00017E   2406         ADD       A,#0x6
   \   000180   F5..         MOV       ?V0,A
   \   000182   5002         JNC       ??ZDP_MgmtLqiRsp_6
   \   000184   05..         INC       ?V1
   1657          
   1658              list++; // next list entry
   \                     ??ZDP_MgmtLqiRsp_6:
   \   000186   EE           MOV       A,R6
   \   000187   241A         ADD       A,#0x1a
   \   000189   FE           MOV       R6,A
   \   00018A   5001         JNC       ??ZDP_MgmtLqiRsp_7
   \   00018C   0F           INC       R7
   1659            }
   \                     ??ZDP_MgmtLqiRsp_7:
   \   00018D   05..         INC       ?V4
   \                     ??ZDP_MgmtLqiRsp_4:
   \   00018F   E5..         MOV       A,?V4
   \   000191   C3           CLR       C
   \   000192   95..         SUBB      A,?V5
   \   000194   5003         JNC       $+5
   \   000196   02....       LJMP      ??ZDP_MgmtLqiRsp_5 & 0xFFFF
   1660          
   1661            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000199   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00019C   E5..         MOV       A,?V8
   \   00019E   F0           MOVX      @DPTR,A
   \   00019F   A3           INC       DPTR
   \   0001A0   E5..         MOV       A,?V9
   \   0001A2   F0           MOVX      @DPTR,A
   \   0001A3                ; Setup parameters for call to function fillAndSend
   \   0001A3   75..31       MOV       ?V0,#0x31
   \   0001A6   75..80       MOV       ?V1,#-0x80
   \   0001A9   78..         MOV       R0,#?V0
   \   0001AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AE   A9..         MOV       R1,?V6
   \   0001B0   AC..         MOV       R4,?V12
   \   0001B2   AD..         MOV       R5,?V13
   \   0001B4   7402         MOV       A,#0x2
   \   0001B6   12....       LCALL     ?XSTACK_DISP101_8
   \   0001B9   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0001BC   7402         MOV       A,#0x2
   \   0001BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C1   E9           MOV       A,R1
   \   0001C2   FE           MOV       R6,A
   \   0001C3                ; Setup parameters for call to function osal_mem_free
   \   0001C3   AA..         MOV       R2,?V2
   \   0001C5   AB..         MOV       R3,?V3
   \   0001C7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001CA   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0001CD   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   0001CF   F0           MOVX      @DPTR,A
   \   0001D0   A3           INC       DPTR
   \   0001D1   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0001D3   F0           MOVX      @DPTR,A
   \   0001D4   EE           MOV       A,R6
   \   0001D5   F9           MOV       R1,A
   \                     ??ZDP_MgmtLqiRsp_1:
   \   0001D6   7401         MOV       A,#0x1
   \   0001D8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DB   7F0F         MOV       R7,#0xf
   \   0001DD   02....       LJMP      ?BANKED_LEAVE_XDATA
   1662          }
   1663          
   1664          /*********************************************************************
   1665           * @fn          ZDP_MgmtRtgRsp
   1666           *
   1667           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1668           *              function sends a unicast message.
   1669           *
   1670           * @param       dstAddr - destination address of the message
   1671           * @param       Status - message status (ZDP_SUCCESS or other)
   1672           * @param       RoutingTableEntries - Total number of entries
   1673           * @param       StartIndex - Starting index within the reporting list
   1674           * @param       RoutingTableListCount - number of entries included
   1675           *                                      in this message
   1676           * @param       RoutingTableList - List of Routing Table entries
   1677           * @param       SecurityEnable - true to enable security for this message
   1678           *
   1679           * @return      ZStatus_t
   1680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1681          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1682                                      byte Status,
   1683                                      byte RoutingTableEntries,
   1684                                      byte StartIndex,
   1685                                      byte RoutingListCount,
   1686                                      rtgItem_t *RoutingTableList,
   1687                                      byte SecurityEnable )
   1688          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   8C..         MOV       ?V1,R4
   \   000018   8D..         MOV       ?V0,R5
   \   00001A   7416         MOV       A,#0x16
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V5,A
   1689            uint8 *buf;
   1690            uint8 *pBuf;
   1691            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1692            byte len = 1 + 1 + 1 + 1;
   1693            byte x;
   1694          
   1695            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1696          
   1697            // Add an array for Routing List data
   1698            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000022   75F005       MOV       B,#0x5
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   F5..         MOV       ?V4,A
   1699          
   1700            buf = osal_mem_alloc( (short)(len+1) );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   2401         ADD       A,#0x1
   \   00002C   FA           MOV       R2,A
   \   00002D   E4           CLR       A
   \   00002E   3400         ADDC      A,#0x0
   \   000030   FB           MOV       R3,A
   \   000031   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000034   8A..         MOV       ?V6,R2
   \   000036   8B..         MOV       ?V7,R3
   \   000038   AE..         MOV       R6,?V6
   \   00003A   AF..         MOV       R7,?V7
   1701            if ( buf == NULL )
   \   00003C   EA           MOV       A,R2
   \   00003D   4F           ORL       A,R7
   \   00003E   7005         JNZ       ??ZDP_MgmtRtgRsp_0
   1702            {
   1703              return afStatus_MEM_FAIL;
   \   000040   7910         MOV       R1,#0x10
   \   000042   02....       LJMP      ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1704            }
   1705          
   1706            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000045   8A82         MOV       DPL,R2
   \   000047   8B83         MOV       DPH,R3
   \   000049   A3           INC       DPTR
   \   00004A   A882         MOV       R0,DPL
   \   00004C   A983         MOV       R1,DPH
   \   00004E   E9           MOV       A,R1
   \   00004F   FB           MOV       R3,A
   1707          
   1708            *pBuf++ = Status;
   \   000050   E5..         MOV       A,?V1
   \   000052   F0           MOVX      @DPTR,A
   1709            *pBuf++ = RoutingTableEntries;
   \   000053   A3           INC       DPTR
   \   000054   E5..         MOV       A,?V0
   \   000056   F0           MOVX      @DPTR,A
   1710            *pBuf++ = StartIndex;
   \   000057   7415         MOV       A,#0x15
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   8882         MOV       DPL,R0
   \   00005F   8983         MOV       DPH,R1
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   F0           MOVX      @DPTR,A
   1711            *pBuf++ = RoutingListCount;
   \   000064   8882         MOV       DPL,R0
   \   000066   8983         MOV       DPH,R1
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E5..         MOV       A,?V5
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   E8           MOV       A,R0
   \   00006F   2404         ADD       A,#0x4
   \   000071   FA           MOV       R2,A
   \   000072   5001         JNC       ??ZDP_MgmtRtgRsp_2
   \   000074   0B           INC       R3
   1712          
   1713            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000075   75..00       MOV       ?V6,#0x0
   \   000078   7417         MOV       A,#0x17
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   FC           MOV       R4,A
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   FD           MOV       R5,A
   \   000082   02....       LJMP      ??ZDP_MgmtRtgRsp_3 & 0xFFFF
   1714            {
   1715              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   000085   8C82         MOV       DPL,R4
   \   000087   8D83         MOV       DPH,R5
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   8A82         MOV       DPL,R2
   \   00008C   8B83         MOV       DPH,R3
   \   00008E   F0           MOVX      @DPTR,A
   1716              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \   00008F   8C82         MOV       DPL,R4
   \   000091   8D83         MOV       DPH,R5
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   8A82         MOV       DPL,R2
   \   000097   8B83         MOV       DPH,R3
   \   000099   A3           INC       DPTR
   \   00009A   F0           MOVX      @DPTR,A
   1717          
   1718              *pBuf = (RoutingTableList->status & 0x07);
   \   00009B   EA           MOV       A,R2
   \   00009C   2402         ADD       A,#0x2
   \   00009E   F5..         MOV       ?V8,A
   \   0000A0   E4           CLR       A
   \   0000A1   3B           ADDC      A,R3
   \   0000A2   F5..         MOV       ?V9,A
   \   0000A4   8C82         MOV       DPL,R4
   \   0000A6   8D83         MOV       DPH,R5
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   5407         ANL       A,#0x7
   \   0000B0   85..82       MOV       DPL,?V8
   \   0000B3   85..83       MOV       DPH,?V9
   \   0000B6   F0           MOVX      @DPTR,A
   1719              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   0000B7   EC           MOV       A,R4
   \   0000B8   2406         ADD       A,#0x6
   \   0000BA   F582         MOV       DPL,A
   \   0000BC   E4           CLR       A
   \   0000BD   3D           ADDC      A,R5
   \   0000BE   F583         MOV       DPH,A
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   5418         ANL       A,#0x18
   \   0000C3   602A         JZ        ??ZDP_MgmtRtgRsp_5
   1720              {
   1721                uint8 options = 0;
   1722                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   0000C5   75..02       MOV       ?V7,#0x2
   1723          
   1724                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000CB   5003         JNC       ??ZDP_MgmtRtgRsp_6
   1725                {
   1726                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   0000CD   75..06       MOV       ?V7,#0x6
   1727                }
   1728          
   1729                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   A2E4         MOV       C,0xE0 /* A   */.4
   \   0000D3   5007         JNC       ??ZDP_MgmtRtgRsp_7
   1730                {
   1731                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000D5   D3           SETB      C
   \   0000D6   E5..         MOV       A,?V7
   \   0000D8   D2E0         SETB      0xE0 /* A   */.0
   \   0000DA   F5..         MOV       ?V7,A
   1732                }
   1733          
   1734                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000DC   E5..         MOV       A,?V7
   \   0000DE   33           RLC       A
   \   0000DF   33           RLC       A
   \   0000E0   33           RLC       A
   \   0000E1   54F8         ANL       A,#0xf8
   \   0000E3   F5..         MOV       ?V7,A
   \   0000E5   85..82       MOV       DPL,?V8
   \   0000E8   85..83       MOV       DPH,?V9
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   45..         ORL       A,?V7
   \   0000EE   F0           MOVX      @DPTR,A
   1735              }
   1736              pBuf++;
   1737          
   1738              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000EF   EC           MOV       A,R4
   \   0000F0   2402         ADD       A,#0x2
   \   0000F2   F5..         MOV       ?V8,A
   \   0000F4   E4           CLR       A
   \   0000F5   3D           ADDC      A,R5
   \   0000F6   F5..         MOV       ?V9,A
   \   0000F8   85..82       MOV       DPL,?V8
   \   0000FB   F583         MOV       DPH,A
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   8A82         MOV       DPL,R2
   \   000100   8B83         MOV       DPH,R3
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   F0           MOVX      @DPTR,A
   1739              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   000106   85..82       MOV       DPL,?V8
   \   000109   85..83       MOV       DPH,?V9
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   8A82         MOV       DPL,R2
   \   000110   8B83         MOV       DPH,R3
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   A3           INC       DPTR
   \   000116   F0           MOVX      @DPTR,A
   \   000117   EA           MOV       A,R2
   \   000118   2405         ADD       A,#0x5
   \   00011A   FA           MOV       R2,A
   \   00011B   5001         JNC       ??ZDP_MgmtRtgRsp_8
   \   00011D   0B           INC       R3
   1740              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_8:
   \   00011E   EC           MOV       A,R4
   \   00011F   2407         ADD       A,#0x7
   \   000121   FC           MOV       R4,A
   \   000122   5001         JNC       ??ZDP_MgmtRtgRsp_9
   \   000124   0D           INC       R5
   1741            }
   \                     ??ZDP_MgmtRtgRsp_9:
   \   000125   05..         INC       ?V6
   \                     ??ZDP_MgmtRtgRsp_3:
   \   000127   E5..         MOV       A,?V6
   \   000129   C3           CLR       C
   \   00012A   95..         SUBB      A,?V5
   \   00012C   5003         JNC       $+5
   \   00012E   02....       LJMP      ??ZDP_MgmtRtgRsp_4 & 0xFFFF
   1742          
   1743            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   000131   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000134   E8           MOV       A,R0
   \   000135   F0           MOVX      @DPTR,A
   \   000136   A3           INC       DPTR
   \   000137   E9           MOV       A,R1
   \   000138   F0           MOVX      @DPTR,A
   \   000139                ; Setup parameters for call to function fillAndSend
   \   000139   75..32       MOV       ?V6,#0x32
   \   00013C   75..80       MOV       ?V7,#-0x80
   \   00013F   78..         MOV       R0,#?V6
   \   000141   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000144   A9..         MOV       R1,?V4
   \   000146   AC..         MOV       R4,?V2
   \   000148   AD..         MOV       R5,?V3
   \   00014A   7402         MOV       A,#0x2
   \   00014C   12....       LCALL     ?XSTACK_DISP101_8
   \   00014F   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000152   7402         MOV       A,#0x2
   \   000154   12....       LCALL     ?DEALLOC_XSTACK8
   \   000157   E9           MOV       A,R1
   \   000158   F5..         MOV       ?V2,A
   \   00015A                ; Setup parameters for call to function osal_mem_free
   \   00015A   EE           MOV       A,R6
   \   00015B   FA           MOV       R2,A
   \   00015C   EF           MOV       A,R7
   \   00015D   FB           MOV       R3,A
   \   00015E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000161   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000164   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000166   F0           MOVX      @DPTR,A
   \   000167   A3           INC       DPTR
   \   000168   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00016A   F0           MOVX      @DPTR,A
   \   00016B   A9..         MOV       R1,?V2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   00016D   7401         MOV       A,#0x1
   \   00016F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000172   7F0C         MOV       R7,#0xc
   \   000174   02....       LJMP      ?BANKED_LEAVE_XDATA
   1744          }
   1745          
   1746          /*********************************************************************
   1747           * @fn          ZDP_MgmtBindRsp
   1748           *
   1749           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1750           *              function sends a unicast message.
   1751           *
   1752           * @param       dstAddr - destination address of the message
   1753           * @param       Status - message status (ZDP_SUCCESS or other)
   1754           * @param       BindingTableEntries - Total number of entries
   1755           * @param       StartIndex - Starting index within the reporting list
   1756           * @param       BindingTableListCount - number of entries included
   1757           *                                 in this message
   1758           * @param       BindingTableList - List of Binding Table entries
   1759           * @param       SecurityEnable - Security Options
   1760           *
   1761           * @return      ZStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1764                                      byte Status,
   1765                                      byte BindingTableEntries,
   1766                                      byte StartIndex,
   1767                                      byte BindingTableListCount,
   1768                                      apsBindingItem_t *BindingTableList,
   1769                                      byte SecurityEnable )
   1770          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V12,R2
   \   000014   8B..         MOV       ?V13,R3
   \   000016   8C..         MOV       ?V10,R4
   \   000018   8D..         MOV       ?V5,R5
   \   00001A   7418         MOV       A,#0x18
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V4,A
   1771            uint8 *buf;
   1772            uint8 *pBuf;
   1773            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1774            uint8 len;    // Actual length varies due to different addrMode
   1775            uint8 x;
   1776            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1777            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1778          
   1779            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1780          
   1781            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1782            maxLen = 1 + 1 + 1 + 1;
   1783            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1784            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   75F015       MOV       B,#0x15
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   2401         ADD       A,#0x1
   \   00002A   FA           MOV       R2,A
   \   00002B   E4           CLR       A
   \   00002C   3400         ADDC      A,#0x0
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000032   8A..         MOV       ?V2,R2
   \   000034   8B..         MOV       ?V3,R3
   1785          
   1786            if ( buf == NULL )
   \   000036   EA           MOV       A,R2
   \   000037   4B           ORL       A,R3
   \   000038   7005         JNZ       ??ZDP_MgmtBindRsp_0
   1787            {
   1788              return afStatus_MEM_FAIL;
   \   00003A   7910         MOV       R1,#0x10
   \   00003C   02....       LJMP      ??ZDP_MgmtBindRsp_1 & 0xFFFF
   1789            }
   1790          
   1791            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   A3           INC       DPTR
   \   000044   8582..       MOV       ?V6,DPL
   \   000047   8583..       MOV       ?V7,DPH
   \   00004A   AA..         MOV       R2,?V6
   \   00004C   AB..         MOV       R3,?V7
   1792          
   1793            *pBuf++ = Status;
   \   00004E   E5..         MOV       A,?V10
   \   000050   F0           MOVX      @DPTR,A
   1794            *pBuf++ = BindingTableEntries;
   \   000051   A3           INC       DPTR
   \   000052   E5..         MOV       A,?V5
   \   000054   F0           MOVX      @DPTR,A
   1795            *pBuf++ = StartIndex;
   \   000055   7417         MOV       A,#0x17
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   F0           MOVX      @DPTR,A
   1796            *pBuf++ = BindingTableListCount;
   \   000062   8A82         MOV       DPL,R2
   \   000064   8B83         MOV       DPH,R3
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   E5..         MOV       A,?V4
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   EA           MOV       A,R2
   \   00006D   2404         ADD       A,#0x4
   \   00006F   FA           MOV       R2,A
   \   000070   5001         JNC       ??ZDP_MgmtBindRsp_2
   \   000072   0B           INC       R3
   1797          
   1798            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1799            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1800            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1801            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1802          
   1803            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_2:
   \   000073   75..04       MOV       ?V0,#0x4
   1804            for ( x = 0; x < BindingTableListCount; x++ )
   \   000076   75..00       MOV       ?V1,#0x0
   \   000079   7419         MOV       A,#0x19
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   FE           MOV       R6,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FF           MOV       R7,A
   \   000083   802C         SJMP      ??ZDP_MgmtBindRsp_3
   1805            {
   1806              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1807              *pBuf++ = BindingTableList->srcEP;
   1808          
   1809              // Cluster ID
   1810              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1811              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1812          
   1813              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1814              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1815              {
   1816                len += extZdpBindEntrySize;
   1817                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1818                *pBuf++ = BindingTableList->dstEP;
   1819              }
   1820              else
   1821              {
   1822                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_4:
   \   000085   740E         MOV       A,#0xe
   \   000087   25..         ADD       A,?V0
   \   000089   F5..         MOV       ?V0,A
   1823                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   00008B   8C82         MOV       DPL,R4
   \   00008D   8D83         MOV       DPH,R5
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   8A82         MOV       DPL,R2
   \   000092   8B83         MOV       DPH,R3
   \   000094   F0           MOVX      @DPTR,A
   1824                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000095   8C82         MOV       DPL,R4
   \   000097   8D83         MOV       DPH,R5
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   8A82         MOV       DPL,R2
   \   00009D   8B83         MOV       DPH,R3
   \   00009F   A3           INC       DPTR
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1   EA           MOV       A,R2
   \   0000A2   2402         ADD       A,#0x2
   \   0000A4   FA           MOV       R2,A
   \   0000A5   5001         JNC       ??ZDP_MgmtBindRsp_5
   \   0000A7   0B           INC       R3
   1825              }
   1826              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_5:
   \   0000A8   EE           MOV       A,R6
   \   0000A9   2415         ADD       A,#0x15
   \   0000AB   FE           MOV       R6,A
   \   0000AC   5001         JNC       ??ZDP_MgmtBindRsp_6
   \   0000AE   0F           INC       R7
   \                     ??ZDP_MgmtBindRsp_6:
   \   0000AF   05..         INC       ?V1
   \                     ??ZDP_MgmtBindRsp_3:
   \   0000B1   E5..         MOV       A,?V1
   \   0000B3   C3           CLR       C
   \   0000B4   95..         SUBB      A,?V4
   \   0000B6   4003         JC        $+5
   \   0000B8   02....       LJMP      ??ZDP_MgmtBindRsp_7 & 0xFFFF
   \   0000BB                ; Setup parameters for call to function sAddrExtCpy
   \   0000BB   EE           MOV       A,R6
   \   0000BC   FC           MOV       R4,A
   \   0000BD   EF           MOV       A,R7
   \   0000BE   FD           MOV       R5,A
   \   0000BF   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000C2   8E82         MOV       DPL,R6
   \   0000C4   8F83         MOV       DPH,R7
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   8A82         MOV       DPL,R2
   \   0000D1   8B83         MOV       DPH,R3
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   EE           MOV       A,R6
   \   0000D5   2409         ADD       A,#0x9
   \   0000D7   F8           MOV       R0,A
   \   0000D8   E4           CLR       A
   \   0000D9   3F           ADDC      A,R7
   \   0000DA   F9           MOV       R1,A
   \   0000DB   8882         MOV       DPL,R0
   \   0000DD   F583         MOV       DPH,A
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   8A82         MOV       DPL,R2
   \   0000E2   8B83         MOV       DPH,R3
   \   0000E4   A3           INC       DPTR
   \   0000E5   F0           MOVX      @DPTR,A
   \   0000E6   8882         MOV       DPL,R0
   \   0000E8   8983         MOV       DPH,R1
   \   0000EA   A3           INC       DPTR
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   8A82         MOV       DPL,R2
   \   0000EE   8B83         MOV       DPH,R3
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   F0           MOVX      @DPTR,A
   \   0000F3   EE           MOV       A,R6
   \   0000F4   2413         ADD       A,#0x13
   \   0000F6   F8           MOV       R0,A
   \   0000F7   E4           CLR       A
   \   0000F8   3F           ADDC      A,R7
   \   0000F9   F9           MOV       R1,A
   \   0000FA   8882         MOV       DPL,R0
   \   0000FC   F583         MOV       DPH,A
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   8A82         MOV       DPL,R2
   \   000101   8B83         MOV       DPH,R3
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   F0           MOVX      @DPTR,A
   \   000107   EA           MOV       A,R2
   \   000108   2404         ADD       A,#0x4
   \   00010A   FA           MOV       R2,A
   \   00010B   5001         JNC       ??ZDP_MgmtBindRsp_8
   \   00010D   0B           INC       R3
   \                     ??ZDP_MgmtBindRsp_8:
   \   00010E   EE           MOV       A,R6
   \   00010F   240B         ADD       A,#0xb
   \   000111   FC           MOV       R4,A
   \   000112   E4           CLR       A
   \   000113   3F           ADDC      A,R7
   \   000114   FD           MOV       R5,A
   \   000115   8882         MOV       DPL,R0
   \   000117   8983         MOV       DPH,R1
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   6403         XRL       A,#0x3
   \   00011C   6003         JZ        $+5
   \   00011E   02....       LJMP      ??ZDP_MgmtBindRsp_4 & 0xFFFF
   \   000121   7415         MOV       A,#0x15
   \   000123   25..         ADD       A,?V0
   \   000125   F5..         MOV       ?V0,A
   \   000127                ; Setup parameters for call to function sAddrExtCpy
   \   000127   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00012A   EE           MOV       A,R6
   \   00012B   2414         ADD       A,#0x14
   \   00012D   F582         MOV       DPL,A
   \   00012F   E4           CLR       A
   \   000130   3F           ADDC      A,R7
   \   000131   F583         MOV       DPH,A
   \   000133   E0           MOVX      A,@DPTR
   \   000134   8A82         MOV       DPL,R2
   \   000136   8B83         MOV       DPH,R3
   \   000138   F0           MOVX      @DPTR,A
   \   000139   A3           INC       DPTR
   \   00013A   AA82         MOV       R2,DPL
   \   00013C   AB83         MOV       R3,DPH
   \   00013E   02....       LJMP      ??ZDP_MgmtBindRsp_5 & 0xFFFF
   1827            }
   1828          
   1829            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_7:
   \   000141   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000144   E5..         MOV       A,?V6
   \   000146   F0           MOVX      @DPTR,A
   \   000147   A3           INC       DPTR
   \   000148   E5..         MOV       A,?V7
   \   00014A   F0           MOVX      @DPTR,A
   \   00014B                ; Setup parameters for call to function fillAndSend
   \   00014B   75..33       MOV       ?V6,#0x33
   \   00014E   75..80       MOV       ?V7,#-0x80
   \   000151   78..         MOV       R0,#?V6
   \   000153   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000156   A9..         MOV       R1,?V0
   \   000158   AC..         MOV       R4,?V12
   \   00015A   AD..         MOV       R5,?V13
   \   00015C   7402         MOV       A,#0x2
   \   00015E   12....       LCALL     ?XSTACK_DISP101_8
   \   000161   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000164   7402         MOV       A,#0x2
   \   000166   12....       LCALL     ?DEALLOC_XSTACK8
   \   000169   E9           MOV       A,R1
   \   00016A   FE           MOV       R6,A
   \   00016B                ; Setup parameters for call to function osal_mem_free
   \   00016B   AA..         MOV       R2,?V2
   \   00016D   AB..         MOV       R3,?V3
   \   00016F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000172   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000175   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000177   F0           MOVX      @DPTR,A
   \   000178   A3           INC       DPTR
   \   000179   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00017B   F0           MOVX      @DPTR,A
   \   00017C   EE           MOV       A,R6
   \   00017D   F9           MOV       R1,A
   \                     ??ZDP_MgmtBindRsp_1:
   \   00017E   7401         MOV       A,#0x1
   \   000180   12....       LCALL     ?DEALLOC_XSTACK8
   \   000183   7F0E         MOV       R7,#0xe
   \   000185   02....       LJMP      ?BANKED_LEAVE_XDATA
   1830          }
   1831          
   1832          /*********************************************************************
   1833           * @fn          ZDP_MgmtNwkUpdateNotify
   1834           *
   1835           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1836           *              function sends a unicast message.
   1837           *
   1838           * @param       dstAddr - destination address of the message
   1839           * @param       status - message status (ZDP_SUCCESS or other)
   1840           * @param       scannedChannels - List of channels scanned by the request
   1841           * @param       totalTransmissions - Total transmissions
   1842           * @param       transmissionFailures - Sum of transmission failures
   1843           * @param       listCount - Number of records contained in the energyValues list
   1844           * @param       energyValues - List of descriptors, one for each of ListCount,
   1845           *                             of the enegry detect descriptors
   1846           * @param       txOptions - Transmit options
   1847           * @param       securityEnable - Security options
   1848           *
   1849           * @return      afStatus_t
   1850           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1851          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1852                                              uint8 status, uint32 scannedChannels,
   1853                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1854                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1855                                              uint8 securityEnable )
   1856          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V8,R2
   \   000014   8B..         MOV       ?V9,R3
   \   000016   8C..         MOV       ?V7,R4
   \   000018   8D..         MOV       ?V0,R5
   1857            uint8 *buf;
   1858            uint8 *pBuf;
   1859            uint8 len;
   1860          
   1861            (void)securityEnable;  // Intentionally unreferenced parameter
   1862          
   1863            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1864            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV       A,#0xa
   \   00001C   2D           ADD       A,R5
   \   00001D   F5..         MOV       ?V1,A
   1865          
   1866            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   2401         ADD       A,#0x1
   \   000021   FA           MOV       R2,A
   \   000022   E4           CLR       A
   \   000023   3400         ADDC      A,#0x0
   \   000025   FB           MOV       R3,A
   \   000026   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000029   8A..         MOV       ?V2,R2
   \   00002B   8B..         MOV       ?V3,R3
   \   00002D   AE..         MOV       R6,?V2
   \   00002F   AF..         MOV       R7,?V3
   1867            if ( buf == NULL )
   \   000031   EA           MOV       A,R2
   \   000032   4F           ORL       A,R7
   \   000033   7005         JNZ       ??ZDP_MgmtNwkUpdateNotify_0
   1868            {
   1869              return afStatus_MEM_FAIL;
   \   000035   7910         MOV       R1,#0x10
   \   000037   02....       LJMP      ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1870            }
   1871          
   1872            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   A3           INC       DPTR
   \   00003F   8582..       MOV       ?V2,DPL
   \   000042   8583..       MOV       ?V3,DPH
   1873          
   1874            *pBuf++ = status;
   \   000045   E5..         MOV       A,?V7
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   AA82         MOV       R2,DPL
   \   00004B   AB83         MOV       R3,DPH
   1875          
   1876            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \   00004D                ; Setup parameters for call to function osal_buffer_uint32
   \   00004D   7413         MOV       A,#0x13
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000055   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000058   7404         MOV       A,#0x4
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   7417         MOV       A,#0x17
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F8           MOV       R0,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F9           MOV       R1,A
   1877          
   1878            *pBuf++ = LO_UINT16( totalTransmissions );
   \   000067   E8           MOV       A,R0
   \   000068   8A82         MOV       DPL,R2
   \   00006A   8B83         MOV       DPH,R3
   \   00006C   F0           MOVX      @DPTR,A
   1879            *pBuf++ = HI_UINT16( totalTransmissions );
   \   00006D   E9           MOV       A,R1
   \   00006E   A3           INC       DPTR
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   7419         MOV       A,#0x19
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F8           MOV       R0,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F9           MOV       R1,A
   1880          
   1881            *pBuf++ = LO_UINT16( transmissionFailures );
   \   00007A   E8           MOV       A,R0
   \   00007B   8A82         MOV       DPL,R2
   \   00007D   8B83         MOV       DPH,R3
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   F0           MOVX      @DPTR,A
   1882            *pBuf++ = HI_UINT16( transmissionFailures );
   \   000082   E9           MOV       A,R1
   \   000083   8A82         MOV       DPL,R2
   \   000085   8B83         MOV       DPH,R3
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   F0           MOVX      @DPTR,A
   1883          
   1884            *pBuf++ = listCount;
   \   00008B   8A82         MOV       DPL,R2
   \   00008D   8B83         MOV       DPH,R3
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   E5..         MOV       A,?V0
   \   000095   F0           MOVX      @DPTR,A
   1885          
   1886            if ( listCount > 0 )
   \   000096   6027         JZ        ??ZDP_MgmtNwkUpdateNotify_2
   1887              osal_memcpy( pBuf, energyValues, listCount );
   \   000098                ; Setup parameters for call to function osal_memcpy
   \   000098   741B         MOV       A,#0x1b
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   F5..         MOV       ?V4,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F5..         MOV       ?V5,A
   \   0000A4   75..00       MOV       ?V6,#0x0
   \   0000A7   78..         MOV       R0,#?V4
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000AC   AC..         MOV       R4,?V0
   \   0000AE   7D00         MOV       R5,#0x0
   \   0000B0   EA           MOV       A,R2
   \   0000B1   2405         ADD       A,#0x5
   \   0000B3   FA           MOV       R2,A
   \   0000B4   5001         JNC       ??ZDP_MgmtNwkUpdateNotify_3
   \   0000B6   0B           INC       R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   0000B7   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000BA   7403         MOV       A,#0x3
   \   0000BC   12....       LCALL     ?DEALLOC_XSTACK8
   1888          
   1889            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   0000BF   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0000C2   E5..         MOV       A,?V2
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   E5..         MOV       A,?V3
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   741D         MOV       A,#0x1d
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3                ; Setup parameters for call to function fillAndSend
   \   0000D3   75..38       MOV       ?V2,#0x38
   \   0000D6   75..80       MOV       ?V3,#-0x80
   \   0000D9   78..         MOV       R0,#?V2
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DE   A9..         MOV       R1,?V1
   \   0000E0   AC..         MOV       R4,?V8
   \   0000E2   AD..         MOV       R5,?V9
   \   0000E4   7402         MOV       A,#0x2
   \   0000E6   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E9   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000EC   7402         MOV       A,#0x2
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F1   E9           MOV       A,R1
   \   0000F2   F5..         MOV       ?V1,A
   \   0000F4                ; Setup parameters for call to function osal_mem_free
   \   0000F4   EE           MOV       A,R6
   \   0000F5   FA           MOV       R2,A
   \   0000F6   EF           MOV       A,R7
   \   0000F7   FB           MOV       R3,A
   \   0000F8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000FB   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0000FE   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000100   F0           MOVX      @DPTR,A
   \   000101   A3           INC       DPTR
   \   000102   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000104   F0           MOVX      @DPTR,A
   \   000105   90....       MOV       DPTR,#ZDP_TxOptions
   \   000108   E4           CLR       A
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A9..         MOV       R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   00010C   7401         MOV       A,#0x1
   \   00010E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000111   7F0A         MOV       R7,#0xa
   \   000113   02....       LJMP      ?BANKED_LEAVE_XDATA
   1890          }
   1891          
   1892          /*********************************************************************
   1893           * Functions to register for ZDO Over-the-air messages
   1894           */
   1895          
   1896          /*********************************************************************
   1897           * @fn          ZDO_RegisterForZDOMsg
   1898           *
   1899           * @brief       Call this function to register of an incoming over
   1900           *              the air ZDO message - probably a response message
   1901           *              but requests can also be received.
   1902           *              Messages are delivered to the task with ZDO_CB_MSG
   1903           *              as the message ID.
   1904           *
   1905           * @param       taskID - Where you would like the message delivered
   1906           * @param       clusterID - What message?
   1907           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1908           *                          and device announce
   1909           *
   1910           * @return      ZSuccess - successful, ZMemError if not
   1911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1912          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1913          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   1914            ZDO_MsgCB_t *pList;
   1915            ZDO_MsgCB_t *pLast;
   1916            ZDO_MsgCB_t *pNew;
   1917          
   1918            // Look for duplicate
   1919            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   FE           MOV       R6,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FF           MOV       R7,A
   \   000013   EE           MOV       A,R6
   \   000014   F8           MOV       R0,A
   \   000015   EF           MOV       A,R7
   \   000016   8027         SJMP      ??ZDO_RegisterForZDOMsg_0
   1920            while ( pList )
   1921            {
   1922              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000018   8882         MOV       DPL,R0
   \   00001A   8983         MOV       DPH,R1
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   65..         XRL       A,?V2
   \   000021   7010         JNZ       ??ZDO_RegisterForZDOMsg_2
   \   000023   8882         MOV       DPL,R0
   \   000025   8983         MOV       DPH,R1
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6A           XRL       A,R2
   \   00002C   7003         JNZ       ??ZDO_RegisterForZDOMsg_3
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6B           XRL       A,R3
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000031   605D         JZ        ??ZDO_RegisterForZDOMsg_4
   1923                return ( ZSuccess );
   1924              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000033   E8           MOV       A,R0
   \   000034   FE           MOV       R6,A
   \   000035   E9           MOV       A,R1
   \   000036   FF           MOV       R7,A
   1925              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV       DPL,R0
   \   000039   8983         MOV       DPH,R1
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   00003F   F9           MOV       R1,A
   1926            }
   \   000040   E8           MOV       A,R0
   \   000041   49           ORL       A,R1
   \   000042   70D4         JNZ       ??ZDO_RegisterForZDOMsg_1
   1927          
   1928            // Add to the list
   1929            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000044                ; Setup parameters for call to function osal_mem_alloc
   \   000044   7A05         MOV       R2,#0x5
   \   000046   7B00         MOV       R3,#0x0
   \   000048   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004B   8A..         MOV       ?V4,R2
   \   00004D   8B..         MOV       ?V5,R3
   \   00004F   A8..         MOV       R0,?V4
   \   000051   A9..         MOV       R1,?V5
   1930            if ( pNew )
   \   000053   EA           MOV       A,R2
   \   000054   49           ORL       A,R1
   \   000055   603D         JZ        ??ZDO_RegisterForZDOMsg_5
   1931            {
   1932              pNew->taskID = taskID;
   \   000057   8A82         MOV       DPL,R2
   \   000059   8B83         MOV       DPH,R3
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   E5..         MOV       A,?V2
   \   00005F   F0           MOVX      @DPTR,A
   1933              pNew->clusterID = clusterID;
   \   000060   8A82         MOV       DPL,R2
   \   000062   8B83         MOV       DPH,R3
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E5..         MOV       A,?V0
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   E5..         MOV       A,?V1
   \   00006D   F0           MOVX      @DPTR,A
   1934              pNew->next = NULL;
   \   00006E   8A82         MOV       DPL,R2
   \   000070   8B83         MOV       DPH,R3
   \   000072   E4           CLR       A
   \   000073   F0           MOVX      @DPTR,A
   \   000074   A3           INC       DPTR
   \   000075   F0           MOVX      @DPTR,A
   1935              if ( zdoMsgCBs )
   \   000076   90....       MOV       DPTR,#zdoMsgCBs
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   FA           MOV       R2,A
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FB           MOV       R3,A
   \   00007E   EA           MOV       A,R2
   \   00007F   4B           ORL       A,R3
   \   000080   6006         JZ        ??ZDO_RegisterForZDOMsg_6
   1936              {
   1937                pLast->next = pNew;
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   8003         SJMP      ??ZDO_RegisterForZDOMsg_7
   1938              }
   1939              else
   1940                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   000088   90....       MOV       DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_7:
   \   00008B   E8           MOV       A,R0
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   A3           INC       DPTR
   \   00008E   E9           MOV       A,R1
   \   00008F   F0           MOVX      @DPTR,A
   1941              return ( ZSuccess );
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   000090   7900         MOV       R1,#0x0
   \   000092   8002         SJMP      ??ZDO_RegisterForZDOMsg_8
   1942            }
   1943            else
   1944              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000094   7910         MOV       R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_8:
   \   000096   7F06         MOV       R7,#0x6
   \   000098   02....       LJMP      ?BANKED_LEAVE_XDATA
   1945          }
   1946          
   1947          /*********************************************************************
   1948           * @fn          ZDO_RemoveRegisteredCB
   1949           *
   1950           * @brief       Call this function if you don't want to receive the
   1951           *              incoming message.
   1952           *
   1953           * @param       taskID - Where the messages are being delivered.
   1954           * @param       clusterID - What message?
   1955           *
   1956           * @return      ZSuccess - successful, ZFailure if not found
   1957           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1958          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1959          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1960            ZDO_MsgCB_t *pList;
   1961            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV       R4,#0x0
   \   000009   7D00         MOV       R5,#0x0
   1962          
   1963            pList = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP      ??ZDO_RemoveRegisteredCB_0
   1964            while ( pList )
   1965            {
   1966              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1967              {
   1968                if ( pLast )
   1969                {
   1970                  // remove this one from the linked list
   1971                  pLast->next = pList->next;
   1972                }
   1973                else if ( pList->next )
   1974                {
   1975                  // remove the first one from the linked list
   1976                  zdoMsgCBs = pList->next;
   1977                }
   1978                else
   1979                {
   1980                  // remove the only item from the list
   1981                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1982                }
   1983                osal_mem_free( pList );
   1984                return ( ZSuccess );
   1985              }
   1986              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV       A,R0
   \   000011   FC           MOV       R4,A
   \   000012   E9           MOV       A,R1
   \   000013   FD           MOV       R5,A
   1987              pList = pList->next;
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   E8           MOV       A,R0
   \   00001E   49           ORL       A,R1
   \   00001F   6049         JZ        ??ZDO_RemoveRegisteredCB_2
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6E           XRL       A,R6
   \   000029   70E5         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   00002B   8882         MOV       DPL,R0
   \   00002D   8983         MOV       DPH,R1
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   6A           XRL       A,R2
   \   000034   7003         JNZ       ??ZDO_RemoveRegisteredCB_3
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   6B           XRL       A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000039   70D5         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   00003B   8882         MOV       DPL,R0
   \   00003D   8983         MOV       DPH,R1
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FA           MOV       R2,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FB           MOV       R3,A
   \   000044   EC           MOV       A,R4
   \   000045   4D           ORL       A,R5
   \   000046   6006         JZ        ??ZDO_RemoveRegisteredCB_4
   \   000048   8C82         MOV       DPL,R4
   \   00004A   8D83         MOV       DPH,R5
   \   00004C   8007         SJMP      ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   00004E   EA           MOV       A,R2
   \   00004F   4B           ORL       A,R3
   \   000050   90....       MOV       DPTR,#zdoMsgCBs
   \   000053   6006         JZ        ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000055   EA           MOV       A,R2
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   EB           MOV       A,R3
   \   000059   8003         SJMP      ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   00005B   E4           CLR       A
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F                ; Setup parameters for call to function osal_mem_free
   \   00005F   E8           MOV       A,R0
   \   000060   FA           MOV       R2,A
   \   000061   E9           MOV       A,R1
   \   000062   FB           MOV       R3,A
   \   000063   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000066   7900         MOV       R1,#0x0
   \   000068   8002         SJMP      ??ZDO_RemoveRegisteredCB_8
   1988            }
   1989          
   1990            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   00006A   7901         MOV       R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   00006C   7F01         MOV       R7,#0x1
   \   00006E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1991          }
   1992          
   1993          /*********************************************************************
   1994           * @fn          ZDO_SendMsgCBs
   1995           *
   1996           * @brief       This function sends messages to registered tasks.
   1997           *              Local to ZDO and shouldn't be called outside of ZDO.
   1998           *
   1999           * @param       inMsg - incoming message
   2000           *
   2001           * @return      TRUE if sent to at least 1 task, FALSE if not
   2002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2003          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   2004          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   2005            uint8 ret = FALSE;
   \   000009   75..00       MOV       ?V4,#0x0
   2006            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV       DPTR,#zdoMsgCBs
   \   00000F   02....       LJMP      ??ZDO_SendMsgCBs_0 & 0xFFFF
   2007            while ( pList )
   2008            {
   2009              if ( (pList->clusterID == inMsg->clusterID)
   2010                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   2011                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_1:
   \   000012   E5..         MOV       A,?V2
   \   000014   240C         ADD       A,#0xc
   \   000016   F582         MOV       DPL,A
   \   000018   E4           CLR       A
   \   000019   35..         ADDC      A,?V3
   \   00001B   F583         MOV       DPH,A
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   85..82       MOV       DPL,?V0
   \   000025   85..83       MOV       DPH,?V1
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FA           MOV       R2,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FB           MOV       R3,A
   \   000030   E8           MOV       A,R0
   \   000031   6A           XRL       A,R2
   \   000032   7002         JNZ       ??ZDO_SendMsgCBs_2
   \   000034   E9           MOV       A,R1
   \   000035   6B           XRL       A,R3
   \                     ??ZDO_SendMsgCBs_2:
   \   000036   601B         JZ        ??ZDO_SendMsgCBs_3
   \   000038   74FF         MOV       A,#-0x1
   \   00003A   6A           XRL       A,R2
   \   00003B   7003         JNZ       ??ZDO_SendMsgCBs_4
   \   00003D   74FF         MOV       A,#-0x1
   \   00003F   6B           XRL       A,R3
   \                     ??ZDO_SendMsgCBs_4:
   \   000040   6003         JZ        $+5
   \   000042   02....       LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
   \   000045   E9           MOV       A,R1
   \   000046   5480         ANL       A,#0x80
   \   000048   7009         JNZ       ??ZDO_SendMsgCBs_3
   \   00004A   7413         MOV       A,#0x13
   \   00004C   68           XRL       A,R0
   \   00004D   49           ORL       A,R1
   \   00004E   6003         JZ        $+5
   \   000050   02....       LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
   2012              {
   2013                zdoIncomingMsg_t *msgPtr;
   2014          
   2015                // Send the address to the task
   2016                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_3:
   \   000053   E5..         MOV       A,?V2
   \   000055   2410         ADD       A,#0x10
   \   000057   F5..         MOV       ?V8,A
   \   000059   E4           CLR       A
   \   00005A   35..         ADDC      A,?V3
   \   00005C   F5..         MOV       ?V9,A
   \   00005E                ; Setup parameters for call to function osal_msg_allocate
   \   00005E   85..82       MOV       DPL,?V8
   \   000061   F583         MOV       DPH,A
   \   000063   E0           MOVX      A,@DPTR
   \   000064   2417         ADD       A,#0x17
   \   000066   FA           MOV       R2,A
   \   000067   E4           CLR       A
   \   000068   3400         ADDC      A,#0x0
   \   00006A   FB           MOV       R3,A
   \   00006B   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00006E   8A..         MOV       ?V6,R2
   \   000070   8B..         MOV       ?V7,R3
   \   000072   AE..         MOV       R6,?V6
   \   000074   AF..         MOV       R7,?V7
   2017                if ( msgPtr )
   \   000076   EA           MOV       A,R2
   \   000077   4F           ORL       A,R7
   \   000078   607C         JZ        ??ZDO_SendMsgCBs_5
   2018                {
   2019                  // copy struct
   2020                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   00007A                ; Setup parameters for call to function osal_memcpy
   \   00007A   85....       MOV       ?V4,?V2
   \   00007D   85....       MOV       ?V5,?V3
   \   000080   75..00       MOV       ?V6,#0x0
   \   000083   78..         MOV       R0,#?V4
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000088   7C17         MOV       R4,#0x17
   \   00008A   7D00         MOV       R5,#0x0
   \   00008C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008F   7403         MOV       A,#0x3
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
   2021          
   2022                  if ( inMsg->asduLen )
   \   000094   85..82       MOV       DPL,?V8
   \   000097   85..83       MOV       DPH,?V9
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   603E         JZ        ??ZDO_SendMsgCBs_6
   2023                  {
   2024                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   00009D   EE           MOV       A,R6
   \   00009E   2417         ADD       A,#0x17
   \   0000A0   FA           MOV       R2,A
   \   0000A1   E4           CLR       A
   \   0000A2   3F           ADDC      A,R7
   \   0000A3   FB           MOV       R3,A
   \   0000A4   EE           MOV       A,R6
   \   0000A5   2413         ADD       A,#0x13
   \   0000A7   F582         MOV       DPL,A
   \   0000A9   E4           CLR       A
   \   0000AA   3F           ADDC      A,R7
   \   0000AB   F583         MOV       DPH,A
   \   0000AD   EA           MOV       A,R2
   \   0000AE   F0           MOVX      @DPTR,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   EB           MOV       A,R3
   \   0000B1   F0           MOVX      @DPTR,A
   2025                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000B2                ; Setup parameters for call to function osal_memcpy
   \   0000B2   E5..         MOV       A,?V2
   \   0000B4   2413         ADD       A,#0x13
   \   0000B6   F582         MOV       DPL,A
   \   0000B8   E4           CLR       A
   \   0000B9   35..         ADDC      A,?V3
   \   0000BB   F583         MOV       DPH,A
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F5..         MOV       ?V4,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   F5..         MOV       ?V5,A
   \   0000C4   78..         MOV       R0,#?V4
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C9   85..82       MOV       DPL,?V8
   \   0000CC   85..83       MOV       DPH,?V9
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   FC           MOV       R4,A
   \   0000D1   7D00         MOV       R5,#0x0
   \   0000D3   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D6   7403         MOV       A,#0x3
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
   2026                  }
   2027          
   2028                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_6:
   \   0000DB   8E82         MOV       DPL,R6
   \   0000DD   8F83         MOV       DPH,R7
   \   0000DF   74D3         MOV       A,#-0x2d
   \   0000E1   F0           MOVX      @DPTR,A
   2029                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000E2                ; Setup parameters for call to function osal_msg_send
   \   0000E2   EE           MOV       A,R6
   \   0000E3   FA           MOV       R2,A
   \   0000E4   EF           MOV       A,R7
   \   0000E5   FB           MOV       R3,A
   \   0000E6   85..82       MOV       DPL,?V0
   \   0000E9   85..83       MOV       DPH,?V1
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   F9           MOV       R1,A
   \   0000F0   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2030                  ret = TRUE;
   \   0000F3   75..01       MOV       ?V4,#0x1
   2031                }
   2032              }
   2033              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000F6   85..82       MOV       DPL,?V0
   \   0000F9   85..83       MOV       DPH,?V1
   \                     ??ZDO_SendMsgCBs_0:
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F5..         MOV       ?V0,A
   \   0000FF   A3           INC       DPTR
   \   000100   E0           MOVX      A,@DPTR
   \   000101   F5..         MOV       ?V1,A
   2034            }
   \   000103   E5..         MOV       A,?V0
   \   000105   45..         ORL       A,?V1
   \   000107   6003         JZ        $+5
   \   000109   02....       LJMP      ??ZDO_SendMsgCBs_1 & 0xFFFF
   2035            return ( ret );
   \   00010C   A9..         MOV       R1,?V4
   \   00010E   7F0A         MOV       R7,#0xa
   \   000110   02....       LJMP      ?BANKED_LEAVE_XDATA
   2036          }
   2037          
   2038          /*********************************************************************
   2039           * Incoming message processor
   2040           */
   2041          
   2042          /*********************************************************************
   2043           * @fn          ZDP_IncomingData
   2044           *
   2045           * @brief       This function indicates the transfer of a data PDU (ASDU)
   2046           *              from the APS sub-layer to the ZDO.
   2047           *
   2048           * @param       pData - Incoming Message
   2049           *
   2050           * @return      none
   2051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2052          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   2053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2054            uint8 x = 0;
   \   00000A   7E00         MOV       R6,#0x0
   2055            uint8 handled;
   2056            zdoIncomingMsg_t inMsg;
   2057          
   2058            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV       A,#0xa
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   7402         MOV       A,#0x2
   \   000013   F0           MOVX      @DPTR,A
   2059            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E8           MOV       A,R0
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   E9           MOV       A,R1
   \   00002C   F0           MOVX      @DPTR,A
   2060            inMsg.wasBroadcast = pData->wasBroadcast;
   \   00002D   EA           MOV       A,R2
   \   00002E   2415         ADD       A,#0x15
   \   000030   F582         MOV       DPL,A
   \   000032   E4           CLR       A
   \   000033   3B           ADDC      A,R3
   \   000034   F583         MOV       DPH,A
   \   000036   E0           MOVX      A,@DPTR
   \   000037   C0E0         PUSH      A
   \   000039   740B         MOV       A,#0xb
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   D0E0         POP       A
   \   000040   F0           MOVX      @DPTR,A
   2061            inMsg.clusterID = pData->clusterId;
   \   000041   8A82         MOV       DPL,R2
   \   000043   8B83         MOV       DPH,R3
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F8           MOV       R0,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   \   00004E   740C         MOV       A,#0xc
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E8           MOV       A,R0
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   E9           MOV       A,R1
   \   000057   F0           MOVX      @DPTR,A
   2062            inMsg.SecurityUse = pData->SecurityUse;
   \   000058   EA           MOV       A,R2
   \   000059   2419         ADD       A,#0x19
   \   00005B   F582         MOV       DPL,A
   \   00005D   E4           CLR       A
   \   00005E   3B           ADDC      A,R3
   \   00005F   F583         MOV       DPH,A
   \   000061   E0           MOVX      A,@DPTR
   \   000062   C0E0         PUSH      A
   \   000064   740E         MOV       A,#0xe
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   D0E0         POP       A
   \   00006B   F0           MOVX      @DPTR,A
   2063          
   2064            inMsg.asduLen = pData->cmd.DataLength-1;
   \   00006C   EA           MOV       A,R2
   \   00006D   2420         ADD       A,#0x20
   \   00006F   F582         MOV       DPL,A
   \   000071   E4           CLR       A
   \   000072   3B           ADDC      A,R3
   \   000073   F583         MOV       DPH,A
   \   000075   E0           MOVX      A,@DPTR
   \   000076   14           DEC       A
   \   000077   C0E0         PUSH      A
   \   000079   7410         MOV       A,#0x10
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   D0E0         POP       A
   \   000080   F0           MOVX      @DPTR,A
   2065            inMsg.asdu = pData->cmd.Data+1;
   \   000081   EA           MOV       A,R2
   \   000082   2422         ADD       A,#0x22
   \   000084   F8           MOV       R0,A
   \   000085   E4           CLR       A
   \   000086   3B           ADDC      A,R3
   \   000087   F9           MOV       R1,A
   \   000088   8882         MOV       DPL,R0
   \   00008A   F583         MOV       DPH,A
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   2401         ADD       A,#0x1
   \   00008F   FC           MOV       R4,A
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   3400         ADDC      A,#0x0
   \   000094   FD           MOV       R5,A
   \   000095   7413         MOV       A,#0x13
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   EC           MOV       A,R4
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C   A3           INC       DPTR
   \   00009D   ED           MOV       A,R5
   \   00009E   F0           MOVX      @DPTR,A
   2066            inMsg.TransSeq = pData->cmd.Data[0];
   \   00009F   8882         MOV       DPL,R0
   \   0000A1   8983         MOV       DPH,R1
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F8           MOV       R0,A
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F583         MOV       DPH,A
   \   0000A9   8882         MOV       DPL,R0
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   C0E0         PUSH      A
   \   0000AE   740F         MOV       A,#0xf
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   D0E0         POP       A
   \   0000B5   F0           MOVX      @DPTR,A
   2067            inMsg.macDestAddr = pData->macDestAddr;
   \   0000B6   EA           MOV       A,R2
   \   0000B7   2412         ADD       A,#0x12
   \   0000B9   F582         MOV       DPL,A
   \   0000BB   E4           CLR       A
   \   0000BC   3B           ADDC      A,R3
   \   0000BD   F583         MOV       DPH,A
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F8           MOV       R0,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F9           MOV       R1,A
   \   0000C4   7411         MOV       A,#0x11
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   E8           MOV       A,R0
   \   0000CA   F0           MOVX      @DPTR,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   E9           MOV       A,R1
   \   0000CD   F0           MOVX      @DPTR,A
   2068            inMsg.macSrcAddr = pData->macSrcAddr;
   \   0000CE   EA           MOV       A,R2
   \   0000CF   2424         ADD       A,#0x24
   \   0000D1   F582         MOV       DPL,A
   \   0000D3   E4           CLR       A
   \   0000D4   3B           ADDC      A,R3
   \   0000D5   F583         MOV       DPH,A
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   F8           MOV       R0,A
   \   0000D9   A3           INC       DPTR
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F9           MOV       R1,A
   \   0000DC   7415         MOV       A,#0x15
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   E8           MOV       A,R0
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   A3           INC       DPTR
   \   0000E4   E9           MOV       A,R1
   \   0000E5   F0           MOVX      @DPTR,A
   2069          
   2070            handled = ZDO_SendMsgCBs( &inMsg );
   \   0000E6                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000E6   AA..         MOV       R2,?XSP + 0
   \   0000E8   AB..         MOV       R3,?XSP + 1
   \   0000EA   12....       LCALL     `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000ED   E9           MOV       A,R1
   \   0000EE   FC           MOV       R4,A
   \   0000EF   8001         SJMP      ??ZDP_IncomingData_0
   2071          
   2072          #if (defined MT_ZDO_CB_FUNC)
   2073          #if !defined MT_TASK
   2074            if (zgZdoDirectCB)
   2075          #endif
   2076            {
   2077              MT_ZdoDirectCB( pData, &inMsg );
   2078            }
   2079          #endif
   2080          
   2081            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   2082            {
   2083              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   2084              {
   2085                zdpMsgProcs[x].pFn( &inMsg );
   2086                return;
   2087              }
   2088              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000F1   0E           INC       R6
   \                     ??ZDP_IncomingData_0:
   \   0000F2   EE           MOV       A,R6
   \   0000F3   F5..         MOV       ?V0,A
   \   0000F5   75..00       MOV       ?V1,#0x0
   \   0000F8   7402         MOV       A,#0x2
   \   0000FA   78..         MOV       R0,#?V0
   \   0000FC   12....       LCALL     ?S_SHL
   \   0000FF   74..         MOV       A,#zdpMsgProcs & 0xff
   \   000101   25..         ADD       A,?V0
   \   000103   F8           MOV       R0,A
   \   000104   74..         MOV       A,#(zdpMsgProcs >> 8) & 0xff
   \   000106   35..         ADDC      A,?V1
   \   000108   F9           MOV       R1,A
   \   000109   8882         MOV       DPL,R0
   \   00010B   F583         MOV       DPH,A
   \   00010D   E4           CLR       A
   \   00010E   93           MOVC      A,@A+DPTR
   \   00010F   C0E0         PUSH      A
   \   000111   7401         MOV       A,#0x1
   \   000113   93           MOVC      A,@A+DPTR
   \   000114   F583         MOV       DPH,A
   \   000116   D082         POP       DPL
   \   000118   AA82         MOV       R2,DPL
   \   00011A   AB83         MOV       R3,DPH
   \   00011C   74FF         MOV       A,#-0x1
   \   00011E   6A           XRL       A,R2
   \   00011F   7003         JNZ       ??ZDP_IncomingData_2
   \   000121   74FF         MOV       A,#-0x1
   \   000123   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_2:
   \   000124   6028         JZ        ??ZDP_IncomingData_3
   \   000126   740C         MOV       A,#0xc
   \   000128   12....       LCALL     ?XSTACK_DISP0_8
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   6A           XRL       A,R2
   \   00012D   7003         JNZ       ??ZDP_IncomingData_4
   \   00012F   A3           INC       DPTR
   \   000130   E0           MOVX      A,@DPTR
   \   000131   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_4:
   \   000132   70BD         JNZ       ??ZDP_IncomingData_1
   \   000134                ; Setup parameters for indirect call
   \   000134   AA..         MOV       R2,?XSP + 0
   \   000136   AB..         MOV       R3,?XSP + 1
   \   000138   8882         MOV       DPL,R0
   \   00013A   8983         MOV       DPH,R1
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   E4           CLR       A
   \   00013F   93           MOVC      A,@A+DPTR
   \   000140   C0E0         PUSH      A
   \   000142   7401         MOV       A,#0x1
   \   000144   93           MOVC      A,@A+DPTR
   \   000145   F583         MOV       DPH,A
   \   000147   D082         POP       DPL
   \   000149   12....       LCALL     ?CALL_IND
   \   00014C   800A         SJMP      ??ZDP_IncomingData_5
   2089            }
   2090          
   2091            // Handle unhandled messages
   2092            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00014E   EC           MOV       A,R4
   \   00014F   7007         JNZ       ??ZDP_IncomingData_5
   2093              ZDApp_InMsgCB( &inMsg );
   \   000151                ; Setup parameters for call to function ZDApp_InMsgCB
   \   000151   AA..         MOV       R2,?XSP + 0
   \   000153   AB..         MOV       R3,?XSP + 1
   \   000155   12....       LCALL     `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2094          }
   \                     ??ZDP_IncomingData_5:
   \   000158   7417         MOV       A,#0x17
   \   00015A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015D   7F02         MOV       R7,#0x2
   \   00015F   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
   2095          
   2096          /*********************************************************************
   2097          *********************************************************************/
   2098          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     54   ZDO_SendMsgCBs
        0     21   -> osal_memcpy
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     33   ZDP_IncomingData
        0     33   -> ZDApp_InMsgCB
        0     33   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     30   ZDP_MgmtBindRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     31   ZDP_MgmtLqiRsp
        0     26   -> fillAndSend
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     24   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     30   ZDP_MgmtNwkDiscRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     23   ZDP_MgmtPermitJoinReq
        0     21   -> NLME_GetShortAddr
        0     23   -> fillAndSend
      1     28   ZDP_MgmtRtgRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     25   ZDP_NwkAddrReq
        0     25   -> fillAndSend
        0     23   -> sAddrExtCmp
        0     23   -> sAddrExtCpy
      1     31   ZDP_ParentAnnce
        0     22   -> ZDApp_SetParentAnnceTimer
        0     24   -> fillAndSend
        0     26   -> osal_start_timerEx
        0     22   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     20   ZDP_SimpleDescMsg
        0     20   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     20   ZDP_UserDescSet
        0     17   -> fillAndSend
        0     18   -> osal_memcpy
        0     15   -> osal_memset
      1     65   fillAndSend
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     30   zdpProcessAddrReq
        0     30   -> fillAndSend
        0     28   -> osal_memset
        0     28   -> sAddrExtCmp
        0     28   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
     155  ZDO_RegisterForZDOMsg
     113  ZDO_RemoveRegisteredCB
     275  ZDO_SendMsgCBs
       1  ZDP_AF_ENDPOINT
     237  ZDP_BindUnbindReq
      80  ZDP_Buf
     145  ZDP_DeviceAnnce
     204  ZDP_EPRsp
     371  ZDP_EndDeviceBindReq
     135  ZDP_GenericRsp
     105  ZDP_IEEEAddrReq
     354  ZDP_IncomingData
     361  ZDP_MatchDescReq
     392  ZDP_MgmtBindRsp
      75  ZDP_MgmtDirectJoinReq
     100  ZDP_MgmtLeaveReq
     480  ZDP_MgmtLqiRsp
      82  ZDP_MgmtNwkDiscReq
     391  ZDP_MgmtNwkDiscRsp
     278  ZDP_MgmtNwkUpdateNotify
     143  ZDP_MgmtNwkUpdateReq
     198  ZDP_MgmtPermitJoinReq
     375  ZDP_MgmtRtgRsp
      74  ZDP_NWKAddrOfInterestReq
     365  ZDP_NodeDescMsg
     152  ZDP_NwkAddrReq
     289  ZDP_ParentAnnce
     131  ZDP_PowerDescMsg
     119  ZDP_SendData
     108  ZDP_ServerDiscReq
     115  ZDP_ServerDiscRsp
     600  ZDP_SimpleDescMsg
      93  ZDP_SimpleDescReq
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     181  ZDP_UserDescRsp
     160  ZDP_UserDescSet
       4  __Constant_a
       1  childIndex
     185  fillAndSend
       2  zdoMsgCBs
      52  zdpMsgProcs
     401  zdpProcessAddrReq
     210  -- Other

 
 7 942 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    53 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
    85 bytes in segment XDATA_Z
 
   265 bytes of CODE     memory
     0 bytes of CONST    memory (+ 4 bytes shared)
 7 942 bytes of HUGECODE memory
    87 bytes of XDATA    memory

Errors: none
Warnings: none
