###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  17:08:06
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\nwk\stub_aps.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW8A3D.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\nwk\stub_aps.c" -D BDB_REPORTING -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS
#        -D ZCL_ON_OFF -D ZCL_REPORT -D ZCL_REPORT_DESTINATION_DEVICE -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\stub_aps.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\stub_aps.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\nwk\stub_aps.c
      1          /**************************************************************************************************
      2            Filename:       stub_aps.c
      3            Revised:        $Date: 2014-03-26 10:01:05 -0700 (Wed, 26 Mar 2014) $
      4            Revision:       $Revision: 37899 $
      5          
      6            Description:    Stub APS processing functions
      7          
      8          
      9            Copyright 2008 - 2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "OSAL.h"
     44          #include "mac_spec.h"
     45          #include "nwk_util.h"
     46          #include "AF.h"
     47          
     48          #include "stub_aps.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          // Stub NWK header length
     59          #define STUB_NWK_HDR_LEN                2
     60          
     61          // Start of the Stub APS header in the Inter-PAN frame
     62          #define STUB_APS_HDR_FRAME_CTRL         STUB_NWK_HDR_LEN
     63          
     64          // Stub APS event identifiers
     65          #define CHANNEL_CHANGE_EVT              0x0001
     66          
     67          #define CHANNEL_CHANGE_RETRY_TIMEOUT    100
     68          
     69          /*********************************************************************
     70           * TYPEDEFS
     71           */
     72          typedef struct
     73          {
     74            zAddrType_t addr;
     75            uint16 panId;
     76          } pan_t;
     77          
     78          /*********************************************************************
     79           * GLOBAL VARIABLES
     80           */
     81          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 StubAPS_TaskID = 0xFF;    // Task ID for internal task/event processing
   \                     StubAPS_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for StubAPS_TaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
     83          
     84          /*********************************************************************
     85           * EXTERNAL VARIABLES
     86           */
     87          
     88          
     89          /*********************************************************************
     90           * EXTERNAL FUNCTIONS
     91           */
     92          
     93          
     94          /*********************************************************************
     95           * LOCAL VARIABLES
     96           */
     97          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          static uint8 newChannel;
   \                     newChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          static uint8 channelChangeInProgress = FALSE;
   \                     channelChangeInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          
    101          // Application info

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          static uint8 appTaskID = 0xFF;  // Application task id
   \                     appTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for appTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 appEndPoint = 0;   // Application endpoint
   \                     appEndPoint:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          
    106          /*********************************************************************
    107           * LOCAL FUNCTIONS
    108           */
    109          
    110          static void StubNWK_ParseMsg( uint8 *buf, uint8 bufLength, NLDE_FrameFormat_t *snff );
    111          static void StubAPS_ParseMsg( NLDE_FrameFormat_t *snff, aps_FrameFormat_t *saff );
    112          static void StubNWK_BuildMsg( uint8 *nwkHdr );
    113          static void StubAPS_BuildMsg( uint8 *apsHdr, uint8 frmCtrl, uint16 groupID, APSDE_DataReq_t *req );
    114          static ZStatus_t StubAPS_BuildFrameControl( uint8 *frmCtrl, zAddrType_t *dstAddr,
    115                                                      uint16 *groupID, APSDE_DataReq_t *req );
    116          static ZStatus_t StubAPS_SetNewChannel( uint8 channel );
    117          static void StubAPS_NotifyApp( uint8 status );
    118          
    119          uint8 StubAPS_ZMacCallback( uint8 *msgPtr );
    120          
    121          /*********************************************************************
    122           * @fn      StubAPS_Init()
    123           *
    124           * @brief   Initialize stub APS layer
    125           *
    126           * @param   task_id - Task identifier for the desired task
    127           *
    128           * @return  none
    129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    130          void StubAPS_Init( uint8 task_id )
   \                     StubAPS_Init:
    131          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    132            StubAPS_TaskID = task_id;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#StubAPS_TaskID
   \   000008   F0           MOVX      @DPTR,A
    133          
    134            // register with ZMAC
    135            pZMac_AppCallback = StubAPS_ZMacCallback;
   \   000009   90....       MOV       DPTR,#pZMac_AppCallback
   \   00000C   74..         MOV       A,#`??StubAPS_ZMacCallback::?relay` & 0xff
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   74..         MOV       A,#(`??StubAPS_ZMacCallback::?relay` >> 8) & 0xff
   \   000012   F0           MOVX      @DPTR,A
    136          
    137          } /* StubAPS_Init() */
   \   000013   D083         POP       DPH
   \   000015   D082         POP       DPL
   \   000017   02....       LJMP      ?BRET
    138          
    139          /*********************************************************************
    140           * @fn      StubAPS_ProcessEvent()
    141           *
    142           * @brief   Main event loop for Stub APS task. This function should be called
    143           *          at periodic intervals when event occur.
    144           *
    145           * @param   task_id - Task ID
    146           * @param   events  - Bitmap of events
    147           *
    148           * @return  none
    149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          UINT16 StubAPS_ProcessEvent( uint8 task_id, uint16 events )
   \                     StubAPS_ProcessEvent:
    151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    152            (void)task_id; // Intentionally unreferenced parameter
    153          
    154            if ( events & SYS_EVENT_MSG )
   \   00000E   EB           MOV       A,R3
   \   00000F   5480         ANL       A,#0x80
   \   000011   704A         JNZ       ??StubAPS_ProcessEvent_0
    155            {
    156              osal_event_hdr_t *msg_ptr;
    157          
    158              while ( (msg_ptr = (osal_event_hdr_t *)osal_msg_receive( StubAPS_TaskID )) != NULL )
    159              {
    160                if ( msg_ptr->event == MAC_MCPS_DATA_CNF )
    161                {
    162                  INTERP_DataConfirm( (ZMacDataCnf_t *)msg_ptr );
    163                }
    164                else if ( msg_ptr->event == MAC_MCPS_DATA_IND )
    165                {
    166                  INTERP_DataIndication( (macMcpsDataInd_t *)msg_ptr );
    167                }
    168          
    169                osal_msg_deallocate( (uint8 *)msg_ptr );
    170              }
    171          
    172              // Return unproccessed events
    173              return ( events ^ SYS_EVENT_MSG );
    174            }
    175          
    176            if ( events & CHANNEL_CHANGE_EVT )
   \   000013   EA           MOV       A,R2
   \   000014   A2E0         MOV       C,0xE0 /* A   */.0
   \   000016   5070         JNC       ??StubAPS_ProcessEvent_1
    177            {
    178              // try to change to the new channel
    179              ZStatus_t status = StubAPS_SetNewChannel( newChannel );
   \   000018                ; Setup parameters for call to function StubAPS_SetNewChannel
   \   000018   90....       MOV       DPTR,#newChannel
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   12....       LCALL     `??StubAPS_SetNewChannel::?relay`; Banked call to: StubAPS_SetNewChannel
   \   000020   E9           MOV       A,R1
   \   000021   FE           MOV       R6,A
    180              if ( status != ZSuccess )
   \   000022   601C         JZ        ??StubAPS_ProcessEvent_2
    181              {
    182                // turn MAC receiver back on
    183                uint8 rxOnIdle = true;
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   7401         MOV       A,#0x1
   \   00002C   F0           MOVX      @DPTR,A
    184                ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   00002D                ; Setup parameters for call to function ZMacSetReq
   \   00002D   AA..         MOV       R2,?XSP + 0
   \   00002F   AB..         MOV       R3,?XSP + 1
   \   000031   7952         MOV       R1,#0x52
   \   000033   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    185          
    186                // set NWK task to run
    187                nwk_setStateIdle( FALSE );
   \   000036                ; Setup parameters for call to function nwk_setStateIdle
   \   000036   7900         MOV       R1,#0x0
   \   000038   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    188          
    189                channelChangeInProgress = FALSE;
   \   00003B   90....       MOV       DPTR,#channelChangeInProgress
   \   00003E   E4           CLR       A
   \   00003F   F0           MOVX      @DPTR,A
    190              }
    191          
    192              // notify the application
    193              StubAPS_NotifyApp( status );
   \                     ??StubAPS_ProcessEvent_2:
   \   000040                ; Setup parameters for call to function StubAPS_NotifyApp
   \   000040   EE           MOV       A,R6
   \   000041   F9           MOV       R1,A
   \   000042   12....       LCALL     `??StubAPS_NotifyApp::?relay`; Banked call to: StubAPS_NotifyApp
    194          
    195              return ( events ^ CHANNEL_CHANGE_EVT );
   \   000045   E5..         MOV       A,?V0
   \   000047   6401         XRL       A,#0x1
   \   000049   FA           MOV       R2,A
   \   00004A   AB..         MOV       R3,?V1
   \   00004C   803E         SJMP      ??StubAPS_ProcessEvent_3
    196            }
   \                     ??StubAPS_ProcessEvent_4:
   \   00004E   740D         MOV       A,#0xd
   \   000050   68           XRL       A,R0
   \   000051   7003         JNZ       ??StubAPS_ProcessEvent_5
   \   000053                ; Setup parameters for call to function INTERP_DataIndication
   \   000053   12....       LCALL     `??INTERP_DataIndication::?relay`; Banked call to: INTERP_DataIndication
   \                     ??StubAPS_ProcessEvent_5:
   \   000056                ; Setup parameters for call to function osal_msg_deallocate
   \   000056   AA..         MOV       R2,?V2
   \   000058   EF           MOV       A,R7
   \   000059   FB           MOV       R3,A
   \   00005A   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??StubAPS_ProcessEvent_0:
   \   00005D                ; Setup parameters for call to function osal_msg_receive
   \   00005D   90....       MOV       DPTR,#StubAPS_TaskID
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F9           MOV       R1,A
   \   000062   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000065   8A..         MOV       ?V2,R2
   \   000067   8B..         MOV       ?V3,R3
   \   000069   AF..         MOV       R7,?V3
   \   00006B   EA           MOV       A,R2
   \   00006C   4F           ORL       A,R7
   \   00006D   6010         JZ        ??StubAPS_ProcessEvent_6
   \   00006F   8A82         MOV       DPL,R2
   \   000071   8B83         MOV       DPH,R3
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F8           MOV       R0,A
   \   000075   740C         MOV       A,#0xc
   \   000077   68           XRL       A,R0
   \   000078   70D4         JNZ       ??StubAPS_ProcessEvent_4
   \   00007A                ; Setup parameters for call to function INTERP_DataConfirm
   \   00007A   12....       LCALL     `??INTERP_DataConfirm::?relay`; Banked call to: INTERP_DataConfirm
   \   00007D   80D7         SJMP      ??StubAPS_ProcessEvent_5
   \                     ??StubAPS_ProcessEvent_6:
   \   00007F   AA..         MOV       R2,?V0
   \   000081   E5..         MOV       A,?V1
   \   000083   6480         XRL       A,#0x80
   \   000085   FB           MOV       R3,A
   \   000086   8004         SJMP      ??StubAPS_ProcessEvent_3
    197          
    198            // If reach here, the events are unknown
    199            // Discard or make more handlers
    200            return 0;
   \                     ??StubAPS_ProcessEvent_1:
   \   000088   7A00         MOV       R2,#0x0
   \   00008A   7B00         MOV       R3,#0x0
   \                     ??StubAPS_ProcessEvent_3:
   \   00008C   7401         MOV       A,#0x1
   \   00008E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000091   7F04         MOV       R7,#0x4
   \   000093   02....       LJMP      ?BANKED_LEAVE_XDATA
    201          
    202          } /* StubAPS_ProcessEvent() */
    203          
    204          
    205          /*********************************************************************
    206           * @fn          StubNWK_ParseMsg
    207           *
    208           * @brief       Call this function to parse an incoming Stub NWK frame.
    209           *
    210           * @param       buf - pointer incoming message buffer
    211           * @param       bufLength - length of incoming message
    212           * @param       snff  - pointer Frame Format Parameters
    213           *
    214           * @return      pointer to network packet, NULL if error
    215           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          static void StubNWK_ParseMsg( uint8 *buf, uint8 bufLength, NLDE_FrameFormat_t *snff )
   \                     StubNWK_ParseMsg:
    217          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   89..         MOV       ?V2,R1
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    218            uint16 fc;
    219          
    220            osal_memset( snff, 0, sizeof(NLDE_FrameFormat_t) );
   \   00000F                ; Setup parameters for call to function osal_memset
   \   00000F   7C26         MOV       R4,#0x26
   \   000011   7D00         MOV       R5,#0x0
   \   000013   7900         MOV       R1,#0x0
   \   000015   EE           MOV       A,R6
   \   000016   FA           MOV       R2,A
   \   000017   EF           MOV       A,R7
   \   000018   FB           MOV       R3,A
   \   000019   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    221          
    222            snff->bufLength = bufLength;
   \   00001C   8E82         MOV       DPL,R6
   \   00001E   8F83         MOV       DPH,R7
   \   000020   E5..         MOV       A,?V2
   \   000022   F0           MOVX      @DPTR,A
    223          
    224            // get the frame control
    225            fc = BUILD_UINT16( buf[NWK_HDR_FRAME_CTRL_LSB], buf[NWK_HDR_FRAME_CTRL_MSB] );
    226          
    227            // parse the frame control
    228            NLDE_ParseFrameControl( fc, snff );
   \   000023                ; Setup parameters for call to function NLDE_ParseFrameControl
   \   000023   EE           MOV       A,R6
   \   000024   FC           MOV       R4,A
   \   000025   EF           MOV       A,R7
   \   000026   FD           MOV       R5,A
   \   000027   85..82       MOV       DPL,?V0
   \   00002A   85..83       MOV       DPH,?V1
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FA           MOV       R2,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   E4           CLR       A
   \   000033   C8           XCH       A,R0
   \   000034   F9           MOV       R1,A
   \   000035   EA           MOV       A,R2
   \   000036   28           ADD       A,R0
   \   000037   E4           CLR       A
   \   000038   39           ADDC      A,R1
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??NLDE_ParseFrameControl::?relay`; Banked call to: NLDE_ParseFrameControl
    229          
    230            snff->hdrLen = STUB_NWK_HDR_LEN;
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   A3           INC       DPTR
   \   000042   A882         MOV       R0,DPL
   \   000044   A983         MOV       R1,DPH
   \   000046   7402         MOV       A,#0x2
   \   000048   F0           MOVX      @DPTR,A
    231          
    232            // Stub NWK payload
    233            snff->nsdu = buf + snff->hdrLen;
   \   000049   E5..         MOV       A,?V0
   \   00004B   2402         ADD       A,#0x2
   \   00004D   FA           MOV       R2,A
   \   00004E   E4           CLR       A
   \   00004F   35..         ADDC      A,?V1
   \   000051   FB           MOV       R3,A
   \   000052   EE           MOV       A,R6
   \   000053   241D         ADD       A,#0x1d
   \   000055   F582         MOV       DPL,A
   \   000057   E4           CLR       A
   \   000058   3F           ADDC      A,R7
   \   000059   F583         MOV       DPH,A
   \   00005B   EA           MOV       A,R2
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   EB           MOV       A,R3
   \   00005F   F0           MOVX      @DPTR,A
    234            snff->nsduLength = snff->bufLength - snff->hdrLen;
   \   000060   8882         MOV       DPL,R0
   \   000062   8983         MOV       DPH,R1
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F8           MOV       R0,A
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   C3           CLR       C
   \   00006C   98           SUBB      A,R0
   \   00006D   C0E0         PUSH      A
   \   00006F   EE           MOV       A,R6
   \   000070   2417         ADD       A,#0x17
   \   000072   F582         MOV       DPL,A
   \   000074   E4           CLR       A
   \   000075   3F           ADDC      A,R7
   \   000076   F583         MOV       DPH,A
   \   000078   D0E0         POP       A
   \   00007A   F0           MOVX      @DPTR,A
    235          
    236          } /* StubNWK_ParseMsg */
   \   00007B   7F03         MOV       R7,#0x3
   \   00007D   02....       LJMP      ?BANKED_LEAVE_XDATA
    237          
    238          /*********************************************************************
    239           * @fn          StubAPS_ParseMsg
    240           *
    241           * @brief       Call this function to parse an incoming Stub APS frame.
    242           *
    243           * @param       naff  - pointer Stub NWK Frame Format Parameters
    244           * @param       saff  - pointer Stub APS Format Parameters
    245           *
    246           * @return      none
    247           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          static void StubAPS_ParseMsg( NLDE_FrameFormat_t *snff, aps_FrameFormat_t *saff )
   \                     StubAPS_ParseMsg:
    249          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    250            uint8 fcb;
    251            uint8 *asdu;
    252          
    253            osal_memset( saff, 0, sizeof(aps_FrameFormat_t) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C17         MOV       R4,#0x17
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   EE           MOV       A,R6
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   FB           MOV       R3,A
   \   000017   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    254          
    255            saff->asduLength = snff->nsduLength;
   \   00001A   EE           MOV       A,R6
   \   00001B   2410         ADD       A,#0x10
   \   00001D   F8           MOV       R0,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   F9           MOV       R1,A
   \   000021   E8           MOV       A,R0
   \   000022   FA           MOV       R2,A
   \   000023   E9           MOV       A,R1
   \   000024   FB           MOV       R3,A
   \   000025   E5..         MOV       A,?V0
   \   000027   2417         ADD       A,#0x17
   \   000029   F8           MOV       R0,A
   \   00002A   E4           CLR       A
   \   00002B   35..         ADDC      A,?V1
   \   00002D   F9           MOV       R1,A
   \   00002E   E8           MOV       A,R0
   \   00002F   FC           MOV       R4,A
   \   000030   E9           MOV       A,R1
   \   000031   FD           MOV       R5,A
   \   000032   8882         MOV       DPL,R0
   \   000034   F583         MOV       DPH,A
   \   000036   E0           MOVX      A,@DPTR
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   F0           MOVX      @DPTR,A
    256            asdu = snff->nsdu;
   \   00003C   E5..         MOV       A,?V0
   \   00003E   241D         ADD       A,#0x1d
   \   000040   F8           MOV       R0,A
   \   000041   E4           CLR       A
   \   000042   35..         ADDC      A,?V1
   \   000044   88..         MOV       ?V2,R0
   \   000046   F5..         MOV       ?V3,A
   \   000048   8882         MOV       DPL,R0
   \   00004A   F583         MOV       DPH,A
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F8           MOV       R0,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F9           MOV       R1,A
    257            saff->macDestAddr = snff->macDstAddr;
   \   000051   E5..         MOV       A,?V0
   \   000053   240D         ADD       A,#0xd
   \   000055   F582         MOV       DPL,A
   \   000057   E4           CLR       A
   \   000058   35..         ADDC      A,?V1
   \   00005A   F583         MOV       DPH,A
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F5..         MOV       ?V0,A
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F5..         MOV       ?V1,A
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E5..         MOV       A,?V0
   \   000073   F0           MOVX      @DPTR,A
   \   000074   A3           INC       DPTR
   \   000075   E5..         MOV       A,?V1
   \   000077   F0           MOVX      @DPTR,A
    258          
    259            // First byte is Frame Control.
    260            saff->FrmCtrl = *asdu++;
   \   000078   8882         MOV       DPL,R0
   \   00007A   8983         MOV       DPH,R1
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F5..         MOV       ?V0,A
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   F0           MOVX      @DPTR,A
   \   000084   8882         MOV       DPL,R0
   \   000086   8983         MOV       DPH,R1
   \   000088   A3           INC       DPTR
   \   000089   A882         MOV       R0,DPL
   \   00008B   A983         MOV       R1,DPH
    261          
    262            fcb = saff->FrmCtrl & APS_FRAME_TYPE_MASK;
    263            if ( fcb == STUB_APS_FRAME )
   \   00008D   7403         MOV       A,#0x3
   \   00008F   55..         ANL       A,?V0
   \   000091   6403         XRL       A,#0x3
   \   000093   6003         JZ        $+5
   \   000095   02....       LJMP      ??StubAPS_ParseMsg_0 & 0xFFFF
    264            {
    265              fcb = saff->FrmCtrl & APS_DELIVERYMODE_MASK;
   \   000098   740C         MOV       A,#0xc
   \   00009A   55..         ANL       A,?V0
   \   00009C   F5..         MOV       ?V0,A
    266              if ( fcb == APS_FC_DM_BROADCAST )
   \   00009E   EE           MOV       A,R6
   \   00009F   240C         ADD       A,#0xc
   \   0000A1   F582         MOV       DPL,A
   \   0000A3   E4           CLR       A
   \   0000A4   3F           ADDC      A,R7
   \   0000A5   F583         MOV       DPH,A
   \   0000A7   7408         MOV       A,#0x8
   \   0000A9   65..         XRL       A,?V0
   \   0000AB   7004         JNZ       ??StubAPS_ParseMsg_1
    267                saff->wasBroadcast = true;
   \   0000AD   7401         MOV       A,#0x1
   \   0000AF   8001         SJMP      ??StubAPS_ParseMsg_2
    268              else
    269                saff->wasBroadcast = false;
   \                     ??StubAPS_ParseMsg_1:
   \   0000B1   E4           CLR       A
   \                     ??StubAPS_ParseMsg_2:
   \   0000B2   F0           MOVX      @DPTR,A
    270          
    271              if ( fcb == APS_FC_DM_GROUP )
   \   0000B3   740C         MOV       A,#0xc
   \   0000B5   65..         XRL       A,?V0
   \   0000B7   7021         JNZ       ??StubAPS_ParseMsg_3
    272              {
    273                saff->GroupID = BUILD_UINT16( asdu[0], asdu[1] );
   \   0000B9   8882         MOV       DPL,R0
   \   0000BB   8983         MOV       DPH,R1
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F5..         MOV       ?V4,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   F5..         MOV       ?V1,A
   \   0000C4   E5..         MOV       A,?V4
   \   0000C6   8E82         MOV       DPL,R6
   \   0000C8   8F83         MOV       DPH,R7
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   F0           MOVX      @DPTR,A
   \   0000CF   A3           INC       DPTR
   \   0000D0   E5..         MOV       A,?V1
   \   0000D2   F0           MOVX      @DPTR,A
    274                asdu += sizeof( uint16 );
   \   0000D3   E8           MOV       A,R0
   \   0000D4   2402         ADD       A,#0x2
   \   0000D6   F8           MOV       R0,A
   \   0000D7   5001         JNC       ??StubAPS_ParseMsg_3
   \   0000D9   09           INC       R1
    275              }
    276          
    277              // Pull out the Cluster ID
    278              saff->ClusterID = BUILD_UINT16( asdu[0], asdu[1] );
   \                     ??StubAPS_ParseMsg_3:
   \   0000DA   8882         MOV       DPL,R0
   \   0000DC   8983         MOV       DPH,R1
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   F5..         MOV       ?V4,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F5..         MOV       ?V1,A
   \   0000E5   E5..         MOV       A,?V4
   \   0000E7   8E82         MOV       DPL,R6
   \   0000E9   8F83         MOV       DPH,R7
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   A3           INC       DPTR
   \   0000F3   E5..         MOV       A,?V1
   \   0000F5   F0           MOVX      @DPTR,A
    279              asdu += sizeof( uint16 );
   \   0000F6   E8           MOV       A,R0
   \   0000F7   2402         ADD       A,#0x2
   \   0000F9   F8           MOV       R0,A
   \   0000FA   5001         JNC       ??StubAPS_ParseMsg_4
   \   0000FC   09           INC       R1
    280          
    281              // Pull out the profile ID
    282              saff->ProfileID = BUILD_UINT16( asdu[0], asdu[1] );
   \                     ??StubAPS_ParseMsg_4:
   \   0000FD   F582         MOV       DPL,A
   \   0000FF   8983         MOV       DPH,R1
   \   000101   E0           MOVX      A,@DPTR
   \   000102   F5..         MOV       ?V4,A
   \   000104   A3           INC       DPTR
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F5..         MOV       ?V1,A
   \   000108   E5..         MOV       A,?V4
   \   00010A   8E82         MOV       DPL,R6
   \   00010C   8F83         MOV       DPH,R7
   \   00010E   A3           INC       DPTR
   \   00010F   A3           INC       DPTR
   \   000110   A3           INC       DPTR
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   A3           INC       DPTR
   \   000116   F0           MOVX      @DPTR,A
   \   000117   A3           INC       DPTR
   \   000118   E5..         MOV       A,?V1
   \   00011A   F0           MOVX      @DPTR,A
    283              asdu += 2;
   \   00011B   E8           MOV       A,R0
   \   00011C   2402         ADD       A,#0x2
   \   00011E   F8           MOV       R0,A
   \   00011F   5001         JNC       ??StubAPS_ParseMsg_0
   \   000121   09           INC       R1
    284            }
    285          
    286            saff->asdu = asdu;
   \                     ??StubAPS_ParseMsg_0:
   \   000122   EE           MOV       A,R6
   \   000123   240E         ADD       A,#0xe
   \   000125   F582         MOV       DPL,A
   \   000127   E4           CLR       A
   \   000128   3F           ADDC      A,R7
   \   000129   F583         MOV       DPH,A
   \   00012B   E8           MOV       A,R0
   \   00012C   F0           MOVX      @DPTR,A
   \   00012D   A3           INC       DPTR
   \   00012E   E9           MOV       A,R1
   \   00012F   F0           MOVX      @DPTR,A
    287            saff->asduLength -= (uint8) (asdu - snff->nsdu);
   \   000130   85..82       MOV       DPL,?V2
   \   000133   85..83       MOV       DPH,?V3
   \   000136   E0           MOVX      A,@DPTR
   \   000137   F5..         MOV       ?V0,A
   \   000139   8A82         MOV       DPL,R2
   \   00013B   8B83         MOV       DPH,R3
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   C3           CLR       C
   \   00013F   98           SUBB      A,R0
   \   000140   25..         ADD       A,?V0
   \   000142   F8           MOV       R0,A
   \   000143   F0           MOVX      @DPTR,A
    288            saff->apsHdrLen = snff->nsduLength - saff->asduLength;
   \   000144   8C82         MOV       DPL,R4
   \   000146   8D83         MOV       DPH,R5
   \   000148   E0           MOVX      A,@DPTR
   \   000149   C3           CLR       C
   \   00014A   98           SUBB      A,R0
   \   00014B   C0E0         PUSH      A
   \   00014D   EE           MOV       A,R6
   \   00014E   240D         ADD       A,#0xd
   \   000150   F582         MOV       DPL,A
   \   000152   E4           CLR       A
   \   000153   3F           ADDC      A,R7
   \   000154   F583         MOV       DPH,A
   \   000156   D0E0         POP       A
   \   000158   F0           MOVX      @DPTR,A
    289          
    290          } /* StubAPS_ParseMsg */
   \   000159   7F06         MOV       R7,#0x6
   \   00015B   02....       LJMP      ?BANKED_LEAVE_XDATA
    291          
    292          /******************************************************************************
    293           * @fn          StubAPS_BuildFrameControl
    294           *
    295           * @brief       This function builds Stub APS Frame Control and the destination
    296           *              address parameter for the MCPS-DATA Request.
    297           *
    298           * @param       frmCtrl - frame control
    299           * @param       dstAddr - destination address for MCPS-DATA Request
    300           * @param       groupID - group id
    301           * @param       req - APSDE_DataReq_t
    302           *
    303           * @return      ZStatus_t
    304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          static ZStatus_t StubAPS_BuildFrameControl( uint8 *frmCtrl, zAddrType_t *dstAddr,
   \                     StubAPS_BuildFrameControl:
    306                                                      uint16 *groupID, APSDE_DataReq_t *req )
    307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   F9           MOV       R1,A
   \   000009   EC           MOV       A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FB           MOV       R3,A
   \   00000D   740D         MOV       A,#0xd
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FC           MOV       R4,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FD           MOV       R5,A
    308            // Security
    309            if ( req->txOptions & APS_TX_OPTIONS_SECURITY_ENABLE )
   \   000017   EC           MOV       A,R4
   \   000018   2415         ADD       A,#0x15
   \   00001A   F582         MOV       DPL,A
   \   00001C   E4           CLR       A
   \   00001D   3D           ADDC      A,R5
   \   00001E   F583         MOV       DPH,A
   \   000020   E0           MOVX      A,@DPTR
   \   000021   540D         ANL       A,#0xd
   \   000023   700E         JNZ       ??StubAPS_BuildFrameControl_0
    310              return ( ZApsNotSupported );
    311          
    312            // Ack request
    313            if ( req->txOptions & APS_TX_OPTIONS_ACK )
    314              return ( ZApsNotSupported );
    315          
    316             // Fragmentation
    317            if ( req->txOptions & APS_TX_OPTIONS_PERMIT_FRAGMENT )
    318              return ( ZApsNotSupported );
    319          
    320            // set delivery mode
    321            if ( req->dstAddr.addrMode == AddrNotPresent )
   \   000025   EC           MOV       A,R4
   \   000026   2408         ADD       A,#0x8
   \   000028   FE           MOV       R6,A
   \   000029   E4           CLR       A
   \   00002A   3D           ADDC      A,R5
   \   00002B   FF           MOV       R7,A
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   7005         JNZ       ??StubAPS_BuildFrameControl_1
    322              return ( ZApsNotSupported ); // No REFLECTOR
   \                     ??StubAPS_BuildFrameControl_0:
   \   000033   79B6         MOV       R1,#-0x4a
   \   000035   02....       LJMP      ??StubAPS_BuildFrameControl_2 & 0xFFFF
    323          
    324            // set frame type
    325            *frmCtrl = STUB_APS_FRAME;
   \                     ??StubAPS_BuildFrameControl_1:
   \   000038   8882         MOV       DPL,R0
   \   00003A   8983         MOV       DPH,R1
   \   00003C   7403         MOV       A,#0x3
   \   00003E   F0           MOVX      @DPTR,A
    326          
    327            // set DstAddrMode of MCPS-DATA Request to DstAddrMode of INTERP-Data Request
    328            dstAddr->addrMode = req->dstAddr.addrMode;
   \   00003F   EA           MOV       A,R2
   \   000040   2408         ADD       A,#0x8
   \   000042   F5..         MOV       ?V0,A
   \   000044   E4           CLR       A
   \   000045   3B           ADDC      A,R3
   \   000046   F5..         MOV       ?V1,A
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   85..82       MOV       DPL,?V0
   \   000050   85..83       MOV       DPH,?V1
   \   000053   F0           MOVX      @DPTR,A
    329          
    330            // set DstAddr of MCPS-DATA Request to DstAddr of INTERP-Data Request
    331            if ( req->dstAddr.addrMode == AddrBroadcast )
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   E0           MOVX      A,@DPTR
   \   000059   FE           MOV       R6,A
   \   00005A   740F         MOV       A,#0xf
   \   00005C   6E           XRL       A,R6
   \   00005D   7013         JNZ       ??StubAPS_BuildFrameControl_3
    332            {
    333              *frmCtrl |= APS_FC_DM_BROADCAST;
   \   00005F   8882         MOV       DPL,R0
   \   000061   8983         MOV       DPH,R1
   \   000063   E0           MOVX      A,@DPTR
   \   000064   D2E3         SETB      0xE0 /* A   */.3
   \   000066   F0           MOVX      @DPTR,A
    334          
    335              // set DstAddrMode of MCPS-DATA Request to short address
    336              dstAddr->addrMode = Addr16Bit;
   \   000067   85..82       MOV       DPL,?V0
   \   00006A   85..83       MOV       DPH,?V1
   \   00006D   7402         MOV       A,#0x2
   \   00006F   F0           MOVX      @DPTR,A
    337              dstAddr->addr.shortAddr = req->dstAddr.addr.shortAddr;
   \   000070   8005         SJMP      ??StubAPS_BuildFrameControl_4
    338            }
    339            else if ( req->dstAddr.addrMode == Addr16Bit )
   \                     ??StubAPS_BuildFrameControl_3:
   \   000072   7402         MOV       A,#0x2
   \   000074   6E           XRL       A,R6
   \   000075   700F         JNZ       ??StubAPS_BuildFrameControl_5
    340            {
    341              *frmCtrl |= APS_FC_DM_UNICAST;
    342              dstAddr->addr.shortAddr = req->dstAddr.addr.shortAddr;
   \                     ??StubAPS_BuildFrameControl_4:
   \   000077   8C82         MOV       DPL,R4
   \   000079   8D83         MOV       DPH,R5
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F8           MOV       R0,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F9           MOV       R1,A
   \   000080   8A82         MOV       DPL,R2
   \   000082   8B83         MOV       DPH,R3
   \   000084   803F         SJMP      ??StubAPS_BuildFrameControl_6
    343            }
    344            else if ( req->dstAddr.addrMode == Addr64Bit )
   \                     ??StubAPS_BuildFrameControl_5:
   \   000086   7403         MOV       A,#0x3
   \   000088   6E           XRL       A,R6
   \   000089   7005         JNZ       ??StubAPS_BuildFrameControl_7
    345            {
    346              *frmCtrl |= APS_FC_DM_UNICAST;
    347              osal_cpyExtAddr( dstAddr->addr.extAddr, req->dstAddr.addr.extAddr );
   \   00008B                ; Setup parameters for call to function sAddrExtCpy
   \   00008B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00008E   803A         SJMP      ??StubAPS_BuildFrameControl_8
    348            }
    349            else if ( req->dstAddr.addrMode == AddrGroup )
   \                     ??StubAPS_BuildFrameControl_7:
   \   000090   7401         MOV       A,#0x1
   \   000092   6E           XRL       A,R6
   \   000093   7035         JNZ       ??StubAPS_BuildFrameControl_8
    350            {
    351              *frmCtrl |= APS_FC_DM_GROUP;
   \   000095   8882         MOV       DPL,R0
   \   000097   8983         MOV       DPH,R1
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   440C         ORL       A,#0xc
   \   00009C   F0           MOVX      @DPTR,A
    352          
    353              // set DstAddrMode of MCPS-DATA Request to short address
    354              dstAddr->addrMode = Addr16Bit;
   \   00009D   85..82       MOV       DPL,?V0
   \   0000A0   85..83       MOV       DPH,?V1
   \   0000A3   7402         MOV       A,#0x2
   \   0000A5   F0           MOVX      @DPTR,A
    355          
    356              // set DstAddr of MCPS-DATA Request to 0xFFFF
    357              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   \   0000A6   8A82         MOV       DPL,R2
   \   0000A8   8B83         MOV       DPH,R3
   \   0000AA   74FF         MOV       A,#-0x1
   \   0000AC   F0           MOVX      @DPTR,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   F0           MOVX      @DPTR,A
    358          
    359              // set Group ID to DstAddr of INTERP-Data Request
    360              *groupID = req->dstAddr.addr.shortAddr;
   \   0000AF   8C82         MOV       DPL,R4
   \   0000B1   8D83         MOV       DPH,R5
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F8           MOV       R0,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   F9           MOV       R1,A
   \   0000B8   740B         MOV       A,#0xb
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   FA           MOV       R2,A
   \   0000BF   A3           INC       DPTR
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F583         MOV       DPH,A
   \   0000C3   8A82         MOV       DPL,R2
   \                     ??StubAPS_BuildFrameControl_6:
   \   0000C5   E8           MOV       A,R0
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   A3           INC       DPTR
   \   0000C8   E9           MOV       A,R1
   \   0000C9   F0           MOVX      @DPTR,A
    361            }
    362          
    363            return ( ZSuccess );
   \                     ??StubAPS_BuildFrameControl_8:
   \   0000CA   7900         MOV       R1,#0x0
   \                     ??StubAPS_BuildFrameControl_2:
   \   0000CC   7F03         MOV       R7,#0x3
   \   0000CE   02....       LJMP      ?BANKED_LEAVE_XDATA
    364          
    365          } /* StubAPS_BuildFrameControl */
    366          
    367          /******************************************************************************
    368           * @fn          StubNWK_BuildMsg
    369           *
    370           * @brief       This function builds a Stub NWK frame.
    371           *
    372           * @param       nwkHdr - stub NWK header
    373           *
    374           * @return      none
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          static void StubNWK_BuildMsg( uint8 *nwkHdr )
   \                     StubNWK_BuildMsg:
    377          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    378            uint16 frmCtrl = 0;
    379            uint8  protoVer = NLME_GetProtocolVersion();
    380          
    381            // frame type
    382            frmCtrl |= (STUB_NWK_FRAME_TYPE << NWK_FC_FRAME_TYPE);
    383          
    384            // protocol version
    385            frmCtrl |= (protoVer << NWK_FC_PROT_VERSION);
   \   000009                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000009   12....       LCALL     `??NLME_GetProtocolVersion::?relay`; Banked call to: NLME_GetProtocolVersion
   \   00000C   E9           MOV       A,R1
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   75..00       MOV       ?V1,#0x0
   \   000012   7402         MOV       A,#0x2
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?S_SHL
   \   000019   E5..         MOV       A,?V0
   \   00001B   4403         ORL       A,#0x3
    386          
    387            // set Stub NWK header
    388            *nwkHdr++ = LO_UINT16( frmCtrl );
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   F0           MOVX      @DPTR,A
    389            *nwkHdr++ = HI_UINT16( frmCtrl );
   \   000022   E5..         MOV       A,?V1
   \   000024   A3           INC       DPTR
   \   000025   F0           MOVX      @DPTR,A
    390          
    391          } /* StubNWK_BuildMsg */
   \   000026   7F02         MOV       R7,#0x2
   \   000028   02....       LJMP      ?BANKED_LEAVE_XDATA
    392          
    393          /******************************************************************************
    394           * @fn          StubAPS_BuildMsg
    395           *
    396           * @brief       This function builds a Stub APS frame.
    397           *
    398           * @param       apsHdr - stub APS header
    399           * @param       frmCtrl - stub APS frame control
    400           * @param       groupID - group id
    401           * @param       req - APSDE_DataReq_t
    402           *
    403           * @return      none
    404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          static void StubAPS_BuildMsg( uint8 *apsHdr, uint8 frmCtrl, uint16 groupID, APSDE_DataReq_t *req )
   \                     StubAPS_BuildMsg:
    406          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    407            // add frame type
    408            *apsHdr++ = frmCtrl;
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   AA82         MOV       R2,DPL
   \   00000F   AB83         MOV       R3,DPH
    409          
    410            // add Group ID
    411            if ( ( frmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_GROUP )
   \   000011   740C         MOV       A,#0xc
   \   000013   5E           ANL       A,R6
   \   000014   640C         XRL       A,#0xc
   \   000016   700C         JNZ       ??StubAPS_BuildMsg_0
    412            {
    413              *apsHdr++ = LO_UINT16( groupID );
   \   000018   EC           MOV       A,R4
   \   000019   F0           MOVX      @DPTR,A
    414              *apsHdr++ = HI_UINT16( groupID );
   \   00001A   ED           MOV       A,R5
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   EA           MOV       A,R2
   \   00001E   2402         ADD       A,#0x2
   \   000020   FA           MOV       R2,A
   \   000021   5001         JNC       ??StubAPS_BuildMsg_0
   \   000023   0B           INC       R3
   \                     ??StubAPS_BuildMsg_0:
   \   000024   740B         MOV       A,#0xb
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   FC           MOV       R4,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FD           MOV       R5,A
    415            }
    416          
    417            // add clusterID
    418            *apsHdr++ = LO_UINT16( req->clusterID );
   \   00002E   EC           MOV       A,R4
   \   00002F   240D         ADD       A,#0xd
   \   000031   F8           MOV       R0,A
   \   000032   E4           CLR       A
   \   000033   3D           ADDC      A,R5
   \   000034   F9           MOV       R1,A
   \   000035   8882         MOV       DPL,R0
   \   000037   F583         MOV       DPH,A
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   F0           MOVX      @DPTR,A
    419            *apsHdr++ = HI_UINT16( req->clusterID );
   \   00003F   8882         MOV       DPL,R0
   \   000041   8983         MOV       DPH,R1
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   8A82         MOV       DPL,R2
   \   000047   8B83         MOV       DPH,R3
   \   000049   A3           INC       DPTR
   \   00004A   F0           MOVX      @DPTR,A
    420          
    421            // add profile ID
    422            *apsHdr++ = LO_UINT16( req->profileID );
   \   00004B   EC           MOV       A,R4
   \   00004C   240F         ADD       A,#0xf
   \   00004E   F8           MOV       R0,A
   \   00004F   E4           CLR       A
   \   000050   3D           ADDC      A,R5
   \   000051   F9           MOV       R1,A
   \   000052   8882         MOV       DPL,R0
   \   000054   F583         MOV       DPH,A
   \   000056   E0           MOVX      A,@DPTR
   \   000057   8A82         MOV       DPL,R2
   \   000059   8B83         MOV       DPH,R3
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   F0           MOVX      @DPTR,A
    423            *apsHdr++ = HI_UINT16( req->profileID );
   \   00005E   8882         MOV       DPL,R0
   \   000060   8983         MOV       DPH,R1
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   8A82         MOV       DPL,R2
   \   000066   8B83         MOV       DPH,R3
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   F0           MOVX      @DPTR,A
    424          
    425            // copy ASDU data into frame
    426            osal_memcpy ( apsHdr, req->asdu, req->asduLen );
   \   00006C                ; Setup parameters for call to function osal_memcpy
   \   00006C   EC           MOV       A,R4
   \   00006D   2413         ADD       A,#0x13
   \   00006F   F582         MOV       DPL,A
   \   000071   E4           CLR       A
   \   000072   3D           ADDC      A,R5
   \   000073   F583         MOV       DPH,A
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F5..         MOV       ?V0,A
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F5..         MOV       ?V1,A
   \   00007C   75..00       MOV       ?V2,#0x0
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000084   EC           MOV       A,R4
   \   000085   2411         ADD       A,#0x11
   \   000087   F582         MOV       DPL,A
   \   000089   E4           CLR       A
   \   00008A   3D           ADDC      A,R5
   \   00008B   F583         MOV       DPH,A
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   FC           MOV       R4,A
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   FD           MOV       R5,A
   \   000092   EA           MOV       A,R2
   \   000093   2404         ADD       A,#0x4
   \   000095   FA           MOV       R2,A
   \   000096   5001         JNC       ??StubAPS_BuildMsg_1
   \   000098   0B           INC       R3
   \                     ??StubAPS_BuildMsg_1:
   \   000099   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009C   7403         MOV       A,#0x3
   \   00009E   12....       LCALL     ?DEALLOC_XSTACK8
    427          
    428          } /* StubAPS_BuildMsg */
   \   0000A1   7F03         MOV       R7,#0x3
   \   0000A3   02....       LJMP      ?BANKED_LEAVE_XDATA
    429          
    430          /******************************************************************************
    431           * @fn          StubAPS_setNewChannel
    432           *
    433           * @brief       This function changes the device's channel.
    434           *
    435           * @param       none
    436           *
    437           * @return      ZStatus_t
    438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          static ZStatus_t StubAPS_SetNewChannel( uint8 channel )
   \                     StubAPS_SetNewChannel:
    440          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   C0E0         PUSH      A
   \   00000C   7401         MOV       A,#0x1
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   D0E0         POP       A
   \   000013   F0           MOVX      @DPTR,A
    441            uint8 rxOnIdle;
    442          
    443            // make sure MAC has nothing to transmit
    444            if ( ( nwkDB_CountTypes( NWK_DATABUF_SENT ) == 0 ) && ZMacStateIdle() )
   \   000014                ; Setup parameters for call to function nwkDB_CountTypes
   \   000014   7902         MOV       R1,#0x2
   \   000016   12....       LCALL     `??nwkDB_CountTypes::?relay`; Banked call to: nwkDB_CountTypes
   \   000019   E9           MOV       A,R1
   \   00001A   702A         JNZ       ??StubAPS_SetNewChannel_0
   \   00001C                ; Setup parameters for call to function ZMacStateIdle
   \   00001C   12....       LCALL     `??ZMacStateIdle::?relay`; Banked call to: ZMacStateIdle
   \   00001F   E9           MOV       A,R1
   \   000020   6024         JZ        ??StubAPS_SetNewChannel_0
    445            {
    446              // set the new channel
    447              ZMacSetReq( ZMacChannel, &channel );
   \   000022                ; Setup parameters for call to function ZMacSetReq
   \   000022   7401         MOV       A,#0x1
   \   000024   12....       LCALL     ?XSTACK_DISP101_8
   \   000027   79E1         MOV       R1,#-0x1f
   \   000029   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    448          
    449              // turn MAC receiver back on
    450              rxOnIdle = true;
   \   00002C   85..82       MOV       DPL,?XSP + 0
   \   00002F   85..83       MOV       DPH,?XSP + 1
   \   000032   7401         MOV       A,#0x1
   \   000034   F0           MOVX      @DPTR,A
    451              ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   000035                ; Setup parameters for call to function ZMacSetReq
   \   000035   AA..         MOV       R2,?XSP + 0
   \   000037   AB..         MOV       R3,?XSP + 1
   \   000039   7952         MOV       R1,#0x52
   \   00003B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    452          
    453              channelChangeInProgress = FALSE;
   \   00003E   90....       MOV       DPTR,#channelChangeInProgress
   \   000041   E4           CLR       A
   \   000042   F0           MOVX      @DPTR,A
    454          
    455              return ( ZSuccess );
   \   000043   F9           MOV       R1,A
   \   000044   8002         SJMP      ??StubAPS_SetNewChannel_1
    456            }
    457          
    458            return ( ZFailure );
   \                     ??StubAPS_SetNewChannel_0:
   \   000046   7901         MOV       R1,#0x1
   \                     ??StubAPS_SetNewChannel_1:
   \   000048   7402         MOV       A,#0x2
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004D   D083         POP       DPH
   \   00004F   D082         POP       DPL
   \   000051   02....       LJMP      ?BRET
    459          
    460          } /* StubAPS_setNewChannel */
    461          
    462          
    463          /******************************************************************************
    464           * @fn          StubAPS_NotifyApp
    465           *
    466           * @brief       This function sends an OSAL message to the Application task.
    467           *
    468           * @param       status - command status
    469           *
    470           * @return      none
    471           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          static void StubAPS_NotifyApp( uint8 status )
   \                     StubAPS_NotifyApp:
    473          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    474            osal_event_hdr_t *msgPtr;
    475          
    476            // Notify the application task
    477            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( sizeof(osal_event_hdr_t) );
   \   000007                ; Setup parameters for call to function osal_msg_allocate
   \   000007   7A02         MOV       R2,#0x2
   \   000009   7B00         MOV       R3,#0x0
   \   00000B   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    478            if ( msgPtr )
   \   00000E   EA           MOV       A,R2
   \   00000F   4B           ORL       A,R3
   \   000010   6012         JZ        ??StubAPS_NotifyApp_0
    479            {
    480              msgPtr->event = SAPS_CHANNEL_CHANGE;
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   7433         MOV       A,#0x33
   \   000018   F0           MOVX      @DPTR,A
    481              msgPtr->status = status;
   \   000019   EE           MOV       A,R6
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
    482          
    483              osal_msg_send( appTaskID, (uint8 *)msgPtr );
   \   00001C                ; Setup parameters for call to function osal_msg_send
   \   00001C   90....       MOV       DPTR,#appTaskID
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F9           MOV       R1,A
   \   000021   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    484            }
    485          
    486          } /* StubAPS_NotifyApp */
   \                     ??StubAPS_NotifyApp_0:
   \   000024   7F02         MOV       R7,#0x2
   \   000026   02....       LJMP      ?BANKED_LEAVE_XDATA
    487          
    488          /******************************************************************************
    489           *
    490           *  External APIs provided to the Application.
    491           */
    492          
    493          /******************************************************************************
    494           * @fn          StubAPS_SetInterPanChannel
    495           *
    496           * @brief       This function changes the device's channel for inter-PAN communication.
    497           *
    498           * @param       channel - new channel
    499           *
    500           * @return      ZStatus_t
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          ZStatus_t StubAPS_SetInterPanChannel( uint8 channel )
   \                     StubAPS_SetInterPanChannel:
    503          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    504            uint8 currChannel;
    505            uint8 rxOnIdle;
    506          
    507            if ( channelChangeInProgress )
   \   00000C   90....       MOV       DPTR,#channelChangeInProgress
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6004         JZ        ??StubAPS_SetInterPanChannel_0
    508              return ( ZFailure );
   \   000012   7901         MOV       R1,#0x1
   \   000014   8058         SJMP      ??StubAPS_SetInterPanChannel_1
    509          
    510            ZMacGetReq( ZMacChannel, &currChannel );
   \                     ??StubAPS_SetInterPanChannel_0:
   \   000016                ; Setup parameters for call to function ZMacGetReq
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP101_8
   \   00001B   79E1         MOV       R1,#-0x1f
   \   00001D   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    511            if ( currChannel == channel )
   \   000020   7401         MOV       A,#0x1
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6E           XRL       A,R6
   \   000027   6023         JZ        ??StubAPS_SetInterPanChannel_2
    512            {
    513              // inter PANs communication within the same channel
    514              return ( ZSuccess );
    515            }
    516          
    517            // go into channel transition state
    518            channelChangeInProgress = TRUE;
   \   000029   90....       MOV       DPTR,#channelChangeInProgress
   \   00002C   7401         MOV       A,#0x1
   \   00002E   F0           MOVX      @DPTR,A
    519          
    520            // set NWK task to idle
    521            nwk_setStateIdle( TRUE );
   \   00002F                ; Setup parameters for call to function nwk_setStateIdle
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    522          
    523            // turn MAC receiver off
    524            rxOnIdle = false;
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   E4           CLR       A
   \   00003A   F0           MOVX      @DPTR,A
    525            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   00003B                ; Setup parameters for call to function ZMacSetReq
   \   00003B   AA..         MOV       R2,?XSP + 0
   \   00003D   AB..         MOV       R3,?XSP + 1
   \   00003F   7952         MOV       R1,#0x52
   \   000041   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    526          
    527            // try to change to the new channel
    528            if ( StubAPS_SetNewChannel( channel ) == ZSuccess )
   \   000044                ; Setup parameters for call to function StubAPS_SetNewChannel
   \   000044   EE           MOV       A,R6
   \   000045   F9           MOV       R1,A
   \   000046   12....       LCALL     `??StubAPS_SetNewChannel::?relay`; Banked call to: StubAPS_SetNewChannel
   \   000049   E9           MOV       A,R1
   \   00004A   7004         JNZ       ??StubAPS_SetInterPanChannel_3
    529              return ( ZSuccess );
   \                     ??StubAPS_SetInterPanChannel_2:
   \   00004C   7900         MOV       R1,#0x0
   \   00004E   801E         SJMP      ??StubAPS_SetInterPanChannel_1
    530          
    531            // save the new channel for retry
    532            newChannel = channel;
   \                     ??StubAPS_SetInterPanChannel_3:
   \   000050   EE           MOV       A,R6
   \   000051   90....       MOV       DPTR,#newChannel
   \   000054   F0           MOVX      @DPTR,A
    533          
    534            // ask StubAPS task to retry it later
    535            osal_start_timerEx( StubAPS_TaskID, CHANNEL_CHANGE_EVT, CHANNEL_CHANGE_RETRY_TIMEOUT );
   \   000055                ; Setup parameters for call to function osal_start_timerEx
   \   000055   90....       MOV       DPTR,#__Constant_64
   \   000058   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00005B   7A01         MOV       R2,#0x1
   \   00005D   7B00         MOV       R3,#0x0
   \   00005F   90....       MOV       DPTR,#StubAPS_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
    536          
    537            return ( ZApsNotAllowed );
   \   00006C   79BA         MOV       R1,#-0x46
   \                     ??StubAPS_SetInterPanChannel_1:
   \   00006E   7402         MOV       A,#0x2
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   \   000073   7F01         MOV       R7,#0x1
   \   000075   02....       LJMP      ?BANKED_LEAVE_XDATA
    538          
    539          } /* StubAPS_SetInterPanChannel */
    540          
    541          /******************************************************************************
    542           * @fn          StubAPS_SetIntraPanChannel
    543           *
    544           * @brief       This function sets the device's channel back to the NIB channel.
    545           *
    546           * @param       none
    547           *
    548           * @return      ZStatus_t
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          ZStatus_t StubAPS_SetIntraPanChannel( void )
   \                     StubAPS_SetIntraPanChannel:
    551          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    552            uint8 currChannel;
    553            uint8 rxOnIdle;
    554          
    555            if ( channelChangeInProgress )
   \   000009   90....       MOV       DPTR,#channelChangeInProgress
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6004         JZ        ??StubAPS_SetIntraPanChannel_0
    556              return ( ZFailure );
   \   00000F   7901         MOV       R1,#0x1
   \   000011   8059         SJMP      ??StubAPS_SetIntraPanChannel_1
    557          
    558            ZMacGetReq( ZMacChannel, &currChannel );
   \                     ??StubAPS_SetIntraPanChannel_0:
   \   000013                ; Setup parameters for call to function ZMacGetReq
   \   000013   7401         MOV       A,#0x1
   \   000015   12....       LCALL     ?XSTACK_DISP101_8
   \   000018   79E1         MOV       R1,#-0x1f
   \   00001A   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    559            if ( currChannel == _NIB.nwkLogicalChannel )
   \   00001D   7401         MOV       A,#0x1
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F8           MOV       R0,A
   \   000024   90....       MOV       DPTR,#_NIB + 22
   \   000027   E0           MOVX      A,@DPTR
   \   000028   68           XRL       A,R0
   \   000029   7004         JNZ       ??StubAPS_SetIntraPanChannel_2
    560              return ( ZSuccess );
   \   00002B   7900         MOV       R1,#0x0
   \   00002D   803D         SJMP      ??StubAPS_SetIntraPanChannel_1
    561          
    562            channelChangeInProgress = TRUE;
   \                     ??StubAPS_SetIntraPanChannel_2:
   \   00002F   90....       MOV       DPTR,#channelChangeInProgress
   \   000032   7401         MOV       A,#0x1
   \   000034   F0           MOVX      @DPTR,A
    563          
    564            // turn MAC receiver off
    565            rxOnIdle = false;
   \   000035   85..82       MOV       DPL,?XSP + 0
   \   000038   85..83       MOV       DPH,?XSP + 1
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
    566            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   00003D                ; Setup parameters for call to function ZMacSetReq
   \   00003D   AA..         MOV       R2,?XSP + 0
   \   00003F   AB..         MOV       R3,?XSP + 1
   \   000041   7952         MOV       R1,#0x52
   \   000043   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    567          
    568            // set the NIB channel
    569            ZMacSetReq( ZMacChannel, &(_NIB.nwkLogicalChannel) );
   \   000046                ; Setup parameters for call to function ZMacSetReq
   \   000046   7A..         MOV       R2,#(_NIB + 22) & 0xff
   \   000048   7B..         MOV       R3,#((_NIB + 22) >> 8) & 0xff
   \   00004A   79E1         MOV       R1,#-0x1f
   \   00004C   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    570          
    571            // turn MAC receiver back on
    572            rxOnIdle = true;
   \   00004F   85..82       MOV       DPL,?XSP + 0
   \   000052   85..83       MOV       DPH,?XSP + 1
   \   000055   7401         MOV       A,#0x1
   \   000057   F0           MOVX      @DPTR,A
    573            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   000058                ; Setup parameters for call to function ZMacSetReq
   \   000058   AA..         MOV       R2,?XSP + 0
   \   00005A   AB..         MOV       R3,?XSP + 1
   \   00005C   7952         MOV       R1,#0x52
   \   00005E   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    574          
    575            // set NWK task to run
    576            nwk_setStateIdle( FALSE );
   \   000061                ; Setup parameters for call to function nwk_setStateIdle
   \   000061   7900         MOV       R1,#0x0
   \   000063   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    577          
    578            channelChangeInProgress = FALSE;
   \   000066   90....       MOV       DPTR,#channelChangeInProgress
   \   000069   E4           CLR       A
   \   00006A   F0           MOVX      @DPTR,A
    579          
    580            return ( ZSuccess );
   \   00006B   F9           MOV       R1,A
   \                     ??StubAPS_SetIntraPanChannel_1:
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   D083         POP       DPH
   \   000073   D082         POP       DPL
   \   000075   02....       LJMP      ?BRET
    581          
    582          } /* StubAPS_SetIntraPanChannel */
    583          
    584          /******************************************************************************
    585           * @fn          StubAPS_InterPan
    586           *
    587           * @brief       This function checks to see if a PAN is an Inter-PAN.
    588           *
    589           * @param       panId - PAN ID
    590           * @param       endPoint - endpoint
    591           *
    592           * @return      TRUE if PAN is Inter-PAN, FALSE otherwise
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          uint8 StubAPS_InterPan( uint16 panId, uint8 endPoint )
   \                     StubAPS_InterPan:
    595          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    596            (void)panId; // Intentionally unreferenced parameter
    597          
    598            // No need to check the MAC/NIB Channels or Source/Destination PAN IDs
    599            // since it's possible to send Inter-PAN messages within the same network.
    600            if ( endPoint == STUBAPS_INTER_PAN_EP )
   \   000002   74FE         MOV       A,#-0x2
   \   000004   68           XRL       A,R0
   \   000005   7004         JNZ       ??StubAPS_InterPan_0
    601            {
    602              // Inter-PAN endpoint
    603              return ( TRUE );
   \   000007   7901         MOV       R1,#0x1
   \   000009   8002         SJMP      ??StubAPS_InterPan_1
    604            }
    605          
    606            return ( FALSE );
   \                     ??StubAPS_InterPan_0:
   \   00000B   7900         MOV       R1,#0x0
   \                     ??StubAPS_InterPan_1:
   \   00000D   02....       LJMP      ?BRET
    607          
    608          } /* StubAPS_InterPan */
    609          
    610          /******************************************************************************
    611           * @fn          StubAPS_RegisterApp
    612           *
    613           * @brief       This function registers the Application with the Stub APS layer.
    614           *
    615           *              NOTE: Since Stub APS messages don't include the application
    616           *                    endpoint, the application has to register its endpoint
    617           *                    with Stub APS.
    618           *
    619           * @param       epDesc - application's endpoint descriptor
    620           *
    621           * @return      none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void StubAPS_RegisterApp( endPointDesc_t *epDesc )
   \                     StubAPS_RegisterApp:
    624          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    625            appTaskID = *epDesc->task_id;
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F583         MOV       DPH,A
   \   000010   8882         MOV       DPL,R0
   \   000012   E0           MOVX      A,@DPTR
   \   000013   90....       MOV       DPTR,#appTaskID
   \   000016   F0           MOVX      @DPTR,A
    626            appEndPoint = epDesc->endPoint;
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   90....       MOV       DPTR,#appEndPoint
   \   00001F   F0           MOVX      @DPTR,A
    627          
    628          } /* StubAPS_RegisterApp */
   \   000020   D083         POP       DPH
   \   000022   D082         POP       DPL
   \   000024   02....       LJMP      ?BRET
    629          
    630          /******************************************************************************
    631           * @fn          StubAPS_ZMacCallback
    632           *
    633           * @brief       This function accepts an inter-PAN message from ZMac.
    634           *
    635           * @param       msgPtr - received message
    636           *
    637           * @return      TRUE if message is processed. FALSE otherwise.
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          uint8 StubAPS_ZMacCallback( uint8 *msgPtr )
   \                     StubAPS_ZMacCallback:
    640          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    641            uint16 nwk_fc;
    642            uint8  aps_fc;
    643            uint8  frameType;
    644            uint8 *buf = NULL;
   \   000004   7800         MOV       R0,#0x0
   \   000006   7900         MOV       R1,#0x0
    645            uint8  event = ((osal_event_hdr_t *)msgPtr)->event;
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FC           MOV       R4,A
    646          
    647            if ( event == MAC_MCPS_DATA_IND )
   \   00000E   740D         MOV       A,#0xd
   \   000010   6C           XRL       A,R4
   \   000011   6010         JZ        ??StubAPS_ZMacCallback_0
    648            {
    649              buf = ((macMcpsDataInd_t *)msgPtr)->msdu.p;
    650            }
    651            else if ( event == MAC_MCPS_DATA_CNF )
   \   000013   740C         MOV       A,#0xc
   \   000015   6C           XRL       A,R4
   \   000016   7012         JNZ       ??StubAPS_ZMacCallback_1
    652            {
    653              buf = ((macMcpsDataCnf_t *)msgPtr)->pDataReq->msdu.p;
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F583         MOV       DPH,A
   \   000021   8882         MOV       DPL,R0
   \                     ??StubAPS_ZMacCallback_0:
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F8           MOV       R0,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
    654            }
    655          
    656            if ( buf )
   \                     ??StubAPS_ZMacCallback_1:
   \   00002A   E8           MOV       A,R0
   \   00002B   49           ORL       A,R1
   \   00002C   6020         JZ        ??StubAPS_ZMacCallback_2
    657            {
    658              // get the NWK frame control
    659              nwk_fc = BUILD_UINT16( buf[NWK_HDR_FRAME_CTRL_LSB], buf[NWK_HDR_FRAME_CTRL_MSB] );
    660          
    661              // frame type
    662              frameType = (uint8)((nwk_fc >> NWK_FC_FRAME_TYPE) & NWK_FC_FRAME_TYPE_MASK);
    663          
    664              // check if incoming frame is of the right type
    665              if ( frameType != STUB_NWK_FRAME_TYPE )
   \   00002E   8882         MOV       DPL,R0
   \   000030   8983         MOV       DPH,R1
   \   000032   E0           MOVX      A,@DPTR
   \   000033   5403         ANL       A,#0x3
   \   000035   6403         XRL       A,#0x3
   \   000037   7015         JNZ       ??StubAPS_ZMacCallback_2
    666              {
    667                // message doesn't belong to Stub APS
    668                return ( FALSE );
    669              }
    670          
    671              // get the APS frame control
    672              aps_fc = buf[STUB_APS_HDR_FRAME_CTRL];
    673          
    674              // frame type
    675              frameType = aps_fc & APS_FRAME_TYPE_MASK;
    676          
    677              // check if incoming frame is of the right type
    678              if ( frameType != STUB_APS_FRAME )
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   5403         ANL       A,#0x3
   \   00003E   6403         XRL       A,#0x3
   \   000040   700C         JNZ       ??StubAPS_ZMacCallback_2
    679              {
    680                // message doesn't belong to Stub APS
    681                return ( FALSE );
    682              }
    683          
    684              // message belongs to Stub APS
    685              osal_msg_send( StubAPS_TaskID, (uint8 *)msgPtr );
   \   000042                ; Setup parameters for call to function osal_msg_send
   \   000042   90....       MOV       DPTR,#StubAPS_TaskID
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    686          
    687              return ( TRUE );
   \   00004A   7901         MOV       R1,#0x1
   \   00004C   8002         SJMP      ??StubAPS_ZMacCallback_3
    688            }
    689          
    690            // message doesn't belong to Stub APS
    691            return ( FALSE );
   \                     ??StubAPS_ZMacCallback_2:
   \   00004E   7900         MOV       R1,#0x0
   \                     ??StubAPS_ZMacCallback_3:
   \   000050   D083         POP       DPH
   \   000052   D082         POP       DPL
   \   000054   02....       LJMP      ?BRET
    692          
    693          } /* StubAPS_ZMacCallback */
    694          
    695          /******************************************************************************
    696           *
    697           *  Stub APS Inter-PAN interface INTERP and its callbacks.
    698           */
    699          
    700          /******************************************************************************
    701           * @fn          INTERP_DataReq
    702           *
    703           * @brief       This function requests the transfer of data from the next
    704           *              higher layer to a single peer entity.
    705           *
    706           * @param       req - APSDE_DataReq_t
    707           *
    708           * @return      ZStatus_t
    709           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    710          ZStatus_t INTERP_DataReq( APSDE_DataReq_t *req )
   \                     INTERP_DataReq:
    711          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 36
   \   000005   74DC         MOV       A,#-0x24
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    712            uint8 apsFrmCtrl;
    713            uint16 groupID = 0;
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    714            uint8 *buf;
    715            uint8 hdrLen;
    716            ZMacDataReq_t dataReq;
    717            ZStatus_t status;
    718          
    719            if ( channelChangeInProgress || !StubAPS_InterPan( req->dstPanId, req->dstEP ) )
   \   000017   90....       MOV       DPTR,#channelChangeInProgress
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   702B         JNZ       ??INTERP_DataReq_0
   \   00001D   EA           MOV       A,R2
   \   00001E   240B         ADD       A,#0xb
   \   000020   F5..         MOV       ?V0,A
   \   000022   E4           CLR       A
   \   000023   35..         ADDC      A,?V5
   \   000025   F5..         MOV       ?V1,A
   \   000027                ; Setup parameters for call to function StubAPS_InterPan
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F9           MOV       R1,A
   \   000037   85..82       MOV       DPL,?V0
   \   00003A   85..83       MOV       DPH,?V1
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FA           MOV       R2,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FB           MOV       R3,A
   \   000042   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   000045   E9           MOV       A,R1
   \   000046   7005         JNZ       ??INTERP_DataReq_1
    720              return ( ZFailure );
   \                     ??INTERP_DataReq_0:
   \   000048   7901         MOV       R1,#0x1
   \   00004A   02....       LJMP      ??INTERP_DataReq_2 & 0xFFFF
    721          
    722            osal_memset( &dataReq, 0, sizeof( ZMacDataReq_t ) );
   \                     ??INTERP_DataReq_1:
   \   00004D                ; Setup parameters for call to function osal_memset
   \   00004D   7C21         MOV       R4,#0x21
   \   00004F   7D00         MOV       R5,#0x0
   \   000051   7900         MOV       R1,#0x0
   \   000053   7403         MOV       A,#0x3
   \   000055   12....       LCALL     ?XSTACK_DISP101_8
   \   000058   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    723          
    724            // Build Stub APS header
    725            status = StubAPS_BuildFrameControl( &apsFrmCtrl, &(dataReq.DstAddr), &groupID, req );
   \   00005B                ; Setup parameters for call to function StubAPS_BuildFrameControl
   \   00005B   78..         MOV       R0,#?V4
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   7403         MOV       A,#0x3
   \   000062   12....       LCALL     ?XSTACK_DISP100_8
   \   000065   88..         MOV       ?V2,R0
   \   000067   89..         MOV       ?V3,R1
   \   000069   78..         MOV       R0,#?V2
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   7407         MOV       A,#0x7
   \   000070   12....       LCALL     ?XSTACK_DISP102_8
   \   000073   7404         MOV       A,#0x4
   \   000075   12....       LCALL     ?XSTACK_DISP101_8
   \   000078   12....       LCALL     `??StubAPS_BuildFrameControl::?relay`; Banked call to: StubAPS_BuildFrameControl
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   E9           MOV       A,R1
   \   000081   F5..         MOV       ?V2,A
    726            if ( status != ZSuccess )
   \   000083   6003         JZ        $+5
   \   000085   02....       LJMP      ??INTERP_DataReq_3 & 0xFFFF
    727              return ( status );
    728          
    729            // set default Stub APS header length
    730            hdrLen = APS_FRAME_CTRL_FIELD_LEN;
   \   000088   7801         MOV       R0,#0x1
    731          
    732            // add group ID length
    733            if ( ( apsFrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_GROUP )
   \   00008A   85..82       MOV       DPL,?XSP + 0
   \   00008D   85..83       MOV       DPH,?XSP + 1
   \   000090   E0           MOVX      A,@DPTR
   \   000091   540C         ANL       A,#0xc
   \   000093   640C         XRL       A,#0xc
   \   000095   7002         JNZ       ??INTERP_DataReq_4
    734              hdrLen += APS_GROUP_ID_FIELD_LEN;
   \   000097   7803         MOV       R0,#0x3
    735          
    736            // add cluster ID length
    737            hdrLen += APS_CLUSTERID_FIELD_LEN;
    738          
    739            // add profile ID length
    740            hdrLen += APS_PROFILEID_FIELD_LEN;
    741          
    742            // add default Stub NWK header length
    743            hdrLen += STUB_NWK_HDR_LEN;
    744          
    745            // calculate MSDU length
    746            dataReq.msduLength = hdrLen + req->asduLen;
   \                     ??INTERP_DataReq_4:
   \   000099   E5..         MOV       A,?V4
   \   00009B   2411         ADD       A,#0x11
   \   00009D   F582         MOV       DPL,A
   \   00009F   E4           CLR       A
   \   0000A0   35..         ADDC      A,?V5
   \   0000A2   F583         MOV       DPH,A
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   28           ADD       A,R0
   \   0000A6   2406         ADD       A,#0x6
   \   0000A8   F8           MOV       R0,A
   \   0000A9   C0E0         PUSH      A
   \   0000AB   7421         MOV       A,#0x21
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   D0E0         POP       A
   \   0000B2   F0           MOVX      @DPTR,A
    747          
    748            // allocate buffer
    749            buf = osal_mem_alloc( dataReq.msduLength );
   \   0000B3                ; Setup parameters for call to function osal_mem_alloc
   \   0000B3   E8           MOV       A,R0
   \   0000B4   FA           MOV       R2,A
   \   0000B5   7B00         MOV       R3,#0x0
   \   0000B7   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000BA   8A..         MOV       ?V2,R2
   \   0000BC   8B..         MOV       ?V3,R3
   \   0000BE   AE..         MOV       R6,?V2
   \   0000C0   AF..         MOV       R7,?V3
    750            if ( buf != NULL )
   \   0000C2   EA           MOV       A,R2
   \   0000C3   4F           ORL       A,R7
   \   0000C4   7003         JNZ       $+5
   \   0000C6   02....       LJMP      ??INTERP_DataReq_5 & 0xFFFF
    751            {
    752              dataReq.msdu = buf;
   \   0000C9   7422         MOV       A,#0x22
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   EA           MOV       A,R2
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0   A3           INC       DPTR
   \   0000D1   EB           MOV       A,R3
   \   0000D2   F0           MOVX      @DPTR,A
    753          
    754              // Add Stub APS header and data
    755              StubAPS_BuildMsg( &buf[STUB_APS_HDR_FRAME_CTRL], apsFrmCtrl, groupID, req );
   \   0000D3                ; Setup parameters for call to function StubAPS_BuildMsg
   \   0000D3   78..         MOV       R0,#?V4
   \   0000D5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D8   7403         MOV       A,#0x3
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   FC           MOV       R4,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   FD           MOV       R5,A
   \   0000E2   7402         MOV       A,#0x2
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   F9           MOV       R1,A
   \   0000E9   EA           MOV       A,R2
   \   0000EA   2402         ADD       A,#0x2
   \   0000EC   FA           MOV       R2,A
   \   0000ED   E4           CLR       A
   \   0000EE   3F           ADDC      A,R7
   \   0000EF   FB           MOV       R3,A
   \   0000F0   12....       LCALL     `??StubAPS_BuildMsg::?relay`; Banked call to: StubAPS_BuildMsg
   \   0000F3   7402         MOV       A,#0x2
   \   0000F5   12....       LCALL     ?DEALLOC_XSTACK8
    756          
    757              // Add Stub NWK header
    758              StubNWK_BuildMsg( buf );
   \   0000F8                ; Setup parameters for call to function StubNWK_BuildMsg
   \   0000F8   EE           MOV       A,R6
   \   0000F9   FA           MOV       R2,A
   \   0000FA   EF           MOV       A,R7
   \   0000FB   FB           MOV       R3,A
   \   0000FC   12....       LCALL     `??StubNWK_BuildMsg::?relay`; Banked call to: StubNWK_BuildMsg
    759          
    760              // Set ZMac data request
    761              dataReq.DstPANId = req->dstPanId;
   \   0000FF   85..82       MOV       DPL,?V0
   \   000102   85..83       MOV       DPH,?V1
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F8           MOV       R0,A
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F9           MOV       R1,A
   \   00010A   740C         MOV       A,#0xc
   \   00010C   12....       LCALL     ?XSTACK_DISP0_8
   \   00010F   E8           MOV       A,R0
   \   000110   F0           MOVX      @DPTR,A
   \   000111   A3           INC       DPTR
   \   000112   E9           MOV       A,R1
   \   000113   F0           MOVX      @DPTR,A
    762              dataReq.SrcAddrMode = Addr64Bit;
   \   000114   740E         MOV       A,#0xe
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   7403         MOV       A,#0x3
   \   00011B   F0           MOVX      @DPTR,A
    763              dataReq.Handle = req->transID;
   \   00011C   E5..         MOV       A,?V4
   \   00011E   2417         ADD       A,#0x17
   \   000120   F582         MOV       DPL,A
   \   000122   E4           CLR       A
   \   000123   35..         ADDC      A,?V5
   \   000125   F583         MOV       DPH,A
   \   000127   E0           MOVX      A,@DPTR
   \   000128   C0E0         PUSH      A
   \   00012A   740F         MOV       A,#0xf
   \   00012C   12....       LCALL     ?XSTACK_DISP0_8
   \   00012F   D0E0         POP       A
   \   000131   F0           MOVX      @DPTR,A
    764          
    765              if ( ( apsFrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_UNICAST )
   \   000132   85..82       MOV       DPL,?XSP + 0
   \   000135   85..83       MOV       DPH,?XSP + 1
   \   000138   E0           MOVX      A,@DPTR
   \   000139   540C         ANL       A,#0xc
   \   00013B   700C         JNZ       ??INTERP_DataReq_6
    766                dataReq.TxOptions = NWK_TXOPTIONS_ACK;
   \   00013D   7410         MOV       A,#0x10
   \   00013F   12....       LCALL     ?XSTACK_DISP0_8
   \   000142   7401         MOV       A,#0x1
   \   000144   F0           MOVX      @DPTR,A
   \   000145   A3           INC       DPTR
   \   000146   E4           CLR       A
   \   000147   8008         SJMP      ??INTERP_DataReq_7
    767              else
    768                dataReq.TxOptions = 0;
   \                     ??INTERP_DataReq_6:
   \   000149   7410         MOV       A,#0x10
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   E4           CLR       A
   \   00014F   F0           MOVX      @DPTR,A
   \   000150   A3           INC       DPTR
   \                     ??INTERP_DataReq_7:
   \   000151   F0           MOVX      @DPTR,A
    769          
    770              // send the frame
    771              status = ZMacDataReq( &dataReq );
   \   000152                ; Setup parameters for call to function ZMacDataReq
   \   000152   7403         MOV       A,#0x3
   \   000154   12....       LCALL     ?XSTACK_DISP101_8
   \   000157   12....       LCALL     `??ZMacDataReq::?relay`; Banked call to: ZMacDataReq
   \   00015A   E9           MOV       A,R1
   \   00015B   F5..         MOV       ?V2,A
    772          
    773              // free the frame
    774              osal_mem_free( buf );
   \   00015D                ; Setup parameters for call to function osal_mem_free
   \   00015D   EE           MOV       A,R6
   \   00015E   FA           MOV       R2,A
   \   00015F   EF           MOV       A,R7
   \   000160   FB           MOV       R3,A
   \   000161   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000164   8003         SJMP      ??INTERP_DataReq_3
    775            }
    776            else
    777            {
    778              // flag a memory error
    779              status = ZMemError;
   \                     ??INTERP_DataReq_5:
   \   000166   75..10       MOV       ?V2,#0x10
    780            }
    781          
    782            return ( status );
   \                     ??INTERP_DataReq_3:
   \   000169   A9..         MOV       R1,?V2
   \                     ??INTERP_DataReq_2:
   \   00016B   7424         MOV       A,#0x24
   \   00016D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000170   7F06         MOV       R7,#0x6
   \   000172   02....       LJMP      ?BANKED_LEAVE_XDATA
    783          
    784          } /* INTERP_DataReq */
    785          
    786          /******************************************************************************
    787           * @fn          INTERP_DataReqMTU
    788           *
    789           * @brief       This function requests the MTU (Max Transport Unit) of the
    790           *              Inter-PAN Data Service.
    791           *
    792           * @param       none
    793           *
    794           * @return      uint8 - MTU
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          uint8 INTERP_DataReqMTU( void )
   \                     INTERP_DataReqMTU:
    797          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    798            uint8 mtu;
    799            uint8 hdrLen;
    800          
    801            // Use maximum header size for Stub APS header
    802            hdrLen = APS_FRAME_CTRL_FIELD_LEN +
    803                     APS_GROUP_ID_FIELD_LEN   +
    804                     APS_CLUSTERID_FIELD_LEN  +
    805                     APS_PROFILEID_FIELD_LEN;
    806          
    807            mtu = MAC_A_MAX_FRAME_SIZE - STUB_NWK_HDR_LEN - hdrLen;
    808          
    809            return ( mtu );
   \   000000   795D         MOV       R1,#0x5d
   \   000002   02....       LJMP      ?BRET
    810          
    811          } /* INTERP_DataReqMTU */
    812          
    813          /****************************************************************************
    814           * @fn          INTERP_DataConfirm
    815           *
    816           * @brief       This function processes the data confirm from the MAC layer.
    817           *
    818           * @param       dataCnf - data confirm primitive
    819           *
    820           * @return      none
    821           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    822          void INTERP_DataConfirm( ZMacDataCnf_t *dataCnf )
   \                     INTERP_DataConfirm:
    823          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EB           MOV       A,R3
   \   000005   F9           MOV       R1,A
    824            afDataConfirm( appEndPoint, dataCnf->msduHandle, dataCnf->hdr.Status );
   \   000006                ; Setup parameters for call to function afDataConfirm
   \   000006   8A82         MOV       DPL,R2
   \   000008   F583         MOV       DPH,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FB           MOV       R3,A
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8983         MOV       DPH,R1
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FA           MOV       R2,A
   \   000015   90....       MOV       DPTR,#appEndPoint
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    825          
    826          } /* INTERP_DataConfirm */
   \   00001D   D083         POP       DPH
   \   00001F   D082         POP       DPL
   \   000021   02....       LJMP      ?BRET
    827          
    828          /****************************************************************************
    829           * @fn          INTERP_DataIndication
    830           *
    831           * @brief       This function indicates the transfer of a data SPDU (MSDU)
    832           *              from the MAC layer to the local application layer entity.
    833           *
    834           * @param       dataInd - data indicate primitive
    835           *
    836           * @return      none
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void INTERP_DataIndication( macMcpsDataInd_t *dataInd )
   \                     INTERP_DataIndication:
    839          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 73
   \   000005   74B7         MOV       A,#-0x49
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    840            NLDE_FrameFormat_t snff;
    841            aps_FrameFormat_t saff;
    842            zAddrType_t srcAddr;
    843            NLDE_Signal_t sig;
    844          
    845            // parse the Stub NWK header
    846            StubNWK_ParseMsg( dataInd->msdu.p, dataInd->msdu.len, &snff );
   \   00000E                ; Setup parameters for call to function StubNWK_ParseMsg
   \   00000E   7423         MOV       A,#0x23
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FA           MOV       R2,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FB           MOV       R3,A
   \   000028   12....       LCALL     `??StubNWK_ParseMsg::?relay`; Banked call to: StubNWK_ParseMsg
    847          
    848            // Fill in MAC destination address
    849            snff.macDstAddr = dataInd->mac.dstAddr.addr.shortAddr;
   \   00002B   EE           MOV       A,R6
   \   00002C   241C         ADD       A,#0x1c
   \   00002E   F582         MOV       DPL,A
   \   000030   E4           CLR       A
   \   000031   3F           ADDC      A,R7
   \   000032   F583         MOV       DPH,A
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F8           MOV       R0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F9           MOV       R1,A
   \   000039   7430         MOV       A,#0x30
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   E8           MOV       A,R0
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   A3           INC       DPTR
   \   000041   E9           MOV       A,R1
   \   000042   F0           MOVX      @DPTR,A
    850          
    851            // fill in MAC source address (Stub NWK frame doesn't have address fields)
    852            osal_copyAddress( &srcAddr, (zAddrType_t *)&(dataInd->mac.srcAddr) );
   \   000043                ; Setup parameters for call to function sAddrCpy
   \   000043   EE           MOV       A,R6
   \   000044   2413         ADD       A,#0x13
   \   000046   FC           MOV       R4,A
   \   000047   E4           CLR       A
   \   000048   3F           ADDC      A,R7
   \   000049   FD           MOV       R5,A
   \   00004A   741A         MOV       A,#0x1a
   \   00004C   12....       LCALL     ?XSTACK_DISP101_8
   \   00004F   12....       LCALL     `??sAddrCpy::?relay`; Banked call to: sAddrCpy
    853          
    854            // check if incoming frame is of the right type
    855            if ( snff.frameType != STUB_NWK_FRAME_TYPE )
   \   000052   7425         MOV       A,#0x25
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E0           MOVX      A,@DPTR
   \   000058   6403         XRL       A,#0x3
   \   00005A   6003         JZ        $+5
   \   00005C   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    856              return;
    857          
    858            // check if incoming frame is of the right version
    859            if ( snff.protocolVersion != NLME_GetProtocolVersion() )
   \   00005F                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00005F   12....       LCALL     `??NLME_GetProtocolVersion::?relay`; Banked call to: NLME_GetProtocolVersion
   \   000062   E9           MOV       A,R1
   \   000063   F8           MOV       R0,A
   \   000064   7426         MOV       A,#0x26
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   68           XRL       A,R0
   \   00006B   6003         JZ        $+5
   \   00006D   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    860              return;
    861          
    862            // check if the remaining sun-fields are zero
    863            if ( ( snff.discoverRoute != 0 ) || ( snff.multicast != 0 )   ||
    864                 ( snff.secure != 0 )        || ( snff.srcRouteSet != 0 ) ||
    865                 ( snff.dstExtAddrSet != 0 ) || ( snff.srcExtAddrSet != 0 ) )
   \   000070   7427         MOV       A,#0x27
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   7028         JNZ       ??INTERP_DataIndication_1
   \   000078   7428         MOV       A,#0x28
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   7020         JNZ       ??INTERP_DataIndication_1
   \   000080   7429         MOV       A,#0x29
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E0           MOVX      A,@DPTR
   \   000086   7018         JNZ       ??INTERP_DataIndication_1
   \   000088   743B         MOV       A,#0x3b
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   7010         JNZ       ??INTERP_DataIndication_1
   \   000090   742A         MOV       A,#0x2a
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   E0           MOVX      A,@DPTR
   \   000096   7008         JNZ       ??INTERP_DataIndication_1
   \   000098   742B         MOV       A,#0x2b
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   6003         JZ        ??INTERP_DataIndication_2
    866            {
    867              return;
   \                     ??INTERP_DataIndication_1:
   \   0000A0   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    868            }
    869          
    870            // parse the Stub APS header
    871            StubAPS_ParseMsg( &snff, &saff );
   \                     ??INTERP_DataIndication_2:
   \   0000A3                ; Setup parameters for call to function StubAPS_ParseMsg
   \   0000A3   7403         MOV       A,#0x3
   \   0000A5   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A8   7423         MOV       A,#0x23
   \   0000AA   12....       LCALL     ?XSTACK_DISP101_8
   \   0000AD   12....       LCALL     `??StubAPS_ParseMsg::?relay`; Banked call to: StubAPS_ParseMsg
    872          
    873            // check if incoming frame is of the right type
    874            if ( ( saff.FrmCtrl & APS_FRAME_TYPE_MASK ) != STUB_APS_FRAME )
   \   0000B0   7403         MOV       A,#0x3
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   5403         ANL       A,#0x3
   \   0000B8   6403         XRL       A,#0x3
   \   0000BA   6003         JZ        $+5
   \   0000BC   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    875              return;
    876          
    877            // check if delivery mode is of the right type
    878            if ( ( saff.FrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_INDIRECT )
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   540C         ANL       A,#0xc
   \   0000C2   6404         XRL       A,#0x4
   \   0000C4   7003         JNZ       $+5
   \   0000C6   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    879              return;
    880          
    881            // check if incoming frame is unsecured
    882            if ( saff.FrmCtrl & APS_FC_SECURITY )
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   A2E5         MOV       C,0xE0 /* A   */.5
   \   0000CC   5003         JNC       $+5
   \   0000CE   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    883              return;
    884          
    885            // check if there's no extended header
    886            if ( saff.FrmCtrl & APS_FC_EXTENDED )
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000D4   5003         JNC       $+5
   \   0000D6   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    887                return;
    888          
    889            // Set the endpoints
    890            saff.DstEndPoint = appEndPoint;
   \   0000D9   90....       MOV       DPTR,#appEndPoint
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   C0E0         PUSH      A
   \   0000DF   7405         MOV       A,#0x5
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   D0E0         POP       A
   \   0000E6   F0           MOVX      @DPTR,A
    891            saff.SrcEndPoint = STUBAPS_INTER_PAN_EP;
   \   0000E7   7406         MOV       A,#0x6
   \   0000E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EC   74FE         MOV       A,#-0x2
   \   0000EE   F0           MOVX      @DPTR,A
    892          
    893            // Set the signal strength information
    894            sig.LinkQuality = dataInd->mac.mpduLinkQuality;
   \   0000EF   EE           MOV       A,R6
   \   0000F0   242F         ADD       A,#0x2f
   \   0000F2   F582         MOV       DPL,A
   \   0000F4   E4           CLR       A
   \   0000F5   3F           ADDC      A,R7
   \   0000F6   F583         MOV       DPH,A
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   85..82       MOV       DPL,?XSP + 0
   \   0000FC   85..83       MOV       DPH,?XSP + 1
   \   0000FF   F0           MOVX      @DPTR,A
    895            sig.correlation = dataInd->mac.correlation;
   \   000100   EE           MOV       A,R6
   \   000101   2430         ADD       A,#0x30
   \   000103   F582         MOV       DPL,A
   \   000105   E4           CLR       A
   \   000106   3F           ADDC      A,R7
   \   000107   F583         MOV       DPH,A
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   C0E0         PUSH      A
   \   00010C   7401         MOV       A,#0x1
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   D0E0         POP       A
   \   000113   F0           MOVX      @DPTR,A
    896            sig.rssi = dataInd->mac.rssi;
   \   000114   EE           MOV       A,R6
   \   000115   2431         ADD       A,#0x31
   \   000117   F582         MOV       DPL,A
   \   000119   E4           CLR       A
   \   00011A   3F           ADDC      A,R7
   \   00011B   F583         MOV       DPH,A
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   C0E0         PUSH      A
   \   000120   7402         MOV       A,#0x2
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   D0E0         POP       A
   \   000127   F0           MOVX      @DPTR,A
    897          
    898            APSDE_DataIndication( &saff, &srcAddr, dataInd->mac.srcPanId,
    899                                  &sig, snff.broadcastId, FALSE, dataInd->mac.timestamp, 0 );
   \   000128                ; Setup parameters for call to function APSDE_DataIndication
   \   000128   75..00       MOV       ?V0,#0x0
   \   00012B   78..         MOV       R0,#?V0
   \   00012D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000130   EE           MOV       A,R6
   \   000131   2425         ADD       A,#0x25
   \   000133   F582         MOV       DPL,A
   \   000135   E4           CLR       A
   \   000136   3F           ADDC      A,R7
   \   000137   F583         MOV       DPH,A
   \   000139   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00013C   78..         MOV       R0,#?V0
   \   00013E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000141   7406         MOV       A,#0x6
   \   000143   12....       LCALL     ?XSTACK_DISP100_8
   \   000146   88..         MOV       ?V0,R0
   \   000148   89..         MOV       ?V1,R1
   \   00014A   78..         MOV       R0,#?V0
   \   00014C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014F   EE           MOV       A,R6
   \   000150   242B         ADD       A,#0x2b
   \   000152   F582         MOV       DPL,A
   \   000154   E4           CLR       A
   \   000155   3F           ADDC      A,R7
   \   000156   F583         MOV       DPH,A
   \   000158   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00015B   743F         MOV       A,#0x3f
   \   00015D   12....       LCALL     ?XSTACK_DISP0_8
   \   000160   E0           MOVX      A,@DPTR
   \   000161   F9           MOV       R1,A
   \   000162   7424         MOV       A,#0x24
   \   000164   12....       LCALL     ?XSTACK_DISP102_8
   \   000167   740D         MOV       A,#0xd
   \   000169   12....       LCALL     ?XSTACK_DISP101_8
   \   00016C   12....       LCALL     `??APSDE_DataIndication::?relay`; Banked call to: APSDE_DataIndication
   \   00016F   740A         MOV       A,#0xa
   \   000171   12....       LCALL     ?DEALLOC_XSTACK8
    900          
    901          } /* INTERP_DataIndication */
   \                     ??INTERP_DataIndication_0:
   \   000174   7449         MOV       A,#0x49
   \   000176   12....       LCALL     ?DEALLOC_XSTACK8
   \   000179   7F02         MOV       R7,#0x2
   \   00017B   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for StubAPS_TaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for appTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100
    902          
    903          
    904          /*********************************************************************
    905          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     13   INTERP_DataConfirm
        2      0   -> afDataConfirm
      1    106   INTERP_DataIndication
        0     93   -> APSDE_DataIndication
        0     83   -> NLME_GetProtocolVersion
        0     83   -> StubAPS_ParseMsg
        0     83   -> StubNWK_ParseMsg
        0     83   -> sAddrCpy
      1     54   INTERP_DataReq
        0     54   -> StubAPS_BuildFrameControl
        0     52   -> StubAPS_BuildMsg
        0     50   -> StubAPS_InterPan
        0     50   -> StubNWK_BuildMsg
        0     50   -> ZMacDataReq
        0     50   -> osal_mem_alloc
        0     50   -> osal_mem_free
        0     50   -> osal_memset
      0      0   INTERP_DataReqMTU
      1     65   StubAPS_BuildFrameControl
        0     11   -> sAddrExtCpy
      1     66   StubAPS_BuildMsg
        0     14   -> osal_memcpy
      2      0   StubAPS_Init
      0     50   StubAPS_InterPan
      1     23   StubAPS_NotifyApp
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_send
      1     97   StubAPS_ParseMsg
        0     14   -> osal_memset
      0     13   StubAPS_ProcessEvent
        0     13   -> INTERP_DataConfirm
        0     13   -> INTERP_DataIndication
        0     13   -> StubAPS_NotifyApp
        0     13   -> StubAPS_SetNewChannel
        0     13   -> ZMacSetReq
        0     13   -> nwk_setStateIdle
        0     13   -> osal_msg_deallocate
        0     13   -> osal_msg_receive
      2      0   StubAPS_RegisterApp
      0     15   StubAPS_SetInterPanChannel
        0     11   -> StubAPS_SetNewChannel
        0     11   -> ZMacGetReq
        0     11   -> ZMacSetReq
        0     11   -> nwk_setStateIdle
        0     15   -> osal_start_timerEx
      2      2   StubAPS_SetIntraPanChannel
        2      2   -> ZMacGetReq
        2      2   -> ZMacSetReq
        2      2   -> nwk_setStateIdle
      3     15   StubAPS_SetNewChannel
        2      2   -> ZMacSetReq
        2      2   -> ZMacStateIdle
        2      2   -> nwkDB_CountTypes
      2      0   StubAPS_ZMacCallback
        2      0   -> osal_msg_send
      1     60   StubNWK_BuildMsg
        0     10   -> NLME_GetProtocolVersion
      1     94   StubNWK_ParseMsg
        0     11   -> NLDE_ParseFrameControl
        0     11   -> osal_memset


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for StubAPS_TaskID>
       1  ?<Initializer for appTaskID>
      36  INTERP_DataConfirm
     382  INTERP_DataIndication
     373  INTERP_DataReq
       5  INTERP_DataReqMTU
     209  StubAPS_BuildFrameControl
     166  StubAPS_BuildMsg
      26  StubAPS_Init
      16  StubAPS_InterPan
      41  StubAPS_NotifyApp
     350  StubAPS_ParseMsg
     150  StubAPS_ProcessEvent
      39  StubAPS_RegisterApp
     120  StubAPS_SetInterPanChannel
     120  StubAPS_SetIntraPanChannel
      84  StubAPS_SetNewChannel
       1  StubAPS_TaskID
      87  StubAPS_ZMacCallback
      43  StubNWK_BuildMsg
     128  StubNWK_ParseMsg
       4  __Constant_64
       1  appEndPoint
       1  appTaskID
       1  channelChangeInProgress
       1  newChannel
     108  -- Other

 
 2 375 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
     3 bytes in segment XDATA_Z
 
   110 bytes of CODE     memory
     0 bytes of CONST    memory (+ 4 bytes shared)
 2 375 bytes of HUGECODE memory
     5 bytes of XDATA    memory

Errors: none
Warnings: none
