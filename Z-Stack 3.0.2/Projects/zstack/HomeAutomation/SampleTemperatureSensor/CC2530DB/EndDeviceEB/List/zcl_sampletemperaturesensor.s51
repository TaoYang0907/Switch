///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              21/Jul/2020  00:36:38
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EW2BB6.tmp ("D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c"
//        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        xNV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
//        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -D ZCL_ON_OFF -D ZCL_REPORT
//        -D ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
//        --no_cross_call)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\zcl_sampletemperaturesensor.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_sampletemperaturesensor

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??ControlMessage_Process::?relay`,0203H
        FUNCTION `??zclSampleApp_BatteryWarningCB::?relay`,0203H
        FUNCTION `??zclSampleTemperatureSensor_BasicResetCB::?rel`,0203H
        FUNCTION `??zclSampleTemperatureSensor_HandleKeys::?relay`,0203H
        PUBLIC `??zclSampleTemperatureSensor_Init::?relay`
        FUNCTION `??zclSampleTemperatureSensor_Init::?relay`,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessCommissioni,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessInDefaultRs,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessInDiscAttrs,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessInDiscAttrs_1,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessInDiscCmdsR,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessInReadRspCm,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessInWriteRspC,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessIncomingMsg,0203H
        PUBLIC `??zclSampleTemperatureSensor_event_loop::?relay`
        FUNCTION `??zclSampleTemperatureSensor_event_loop::?relay`,0203H
        FUNCTION ControlMessage_Process,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBWEAK __Constant_2710
        PUBLIC reportableChange
        PUBLIC reportableChangeTest
        FUNCTION zclSampleApp_BatteryWarningCB,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION zclSampleTemperatureSensor_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleTemperatureSensor_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclSampleTemperatureSensor_Init
        FUNCTION zclSampleTemperatureSensor_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC zclSampleTemperatureSensor_NwkState
        FUNCTION zclSampleTemperatureSensor_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        FUNCTION zclSampleTemperatureSensor_ProcessInDefaultRspCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleTemperatureSensor_ProcessInReadRspCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleTemperatureSensor_ProcessInWriteRspCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleTemperatureSensor_ProcessIncomingMsg,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclSampleTemperatureSensor_TaskID
        PUBLIC zclSampleTemperatureSensor_event_loop
        FUNCTION zclSampleTemperatureSensor_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
RegisterVoltageWarningCB SYMBOL "RegisterVoltageWarningCB"
`??RegisterVoltageWarningCB::?relay` SYMBOL "?relay", RegisterVoltageWarningCB
Uart0_Init          SYMBOL "Uart0_Init"
`??Uart0_Init::?relay` SYMBOL "?relay", Uart0_Init
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_RepAddAttrCfgRecordDefaultToList SYMBOL "bdb_RepAddAttrCfgRecordDefaultToList"
`??bdb_RepAddAttrCfgRecordDefaultToList::?relay` SYMBOL "?relay", bdb_RepAddAttrCfgRecordDefaultToList
bdb_RepChangedAttrValue SYMBOL "bdb_RepChangedAttrValue"
`??bdb_RepChangedAttrValue::?relay` SYMBOL "?relay", bdb_RepChangedAttrValue
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_ZedAttemptRecoverNwk SYMBOL "bdb_ZedAttemptRecoverNwk"
`??bdb_ZedAttemptRecoverNwk::?relay` SYMBOL "?relay", bdb_ZedAttemptRecoverNwk
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclSampleTemperatureSensor_ResetAttributesToDefaultValues SYMBOL "zclSampleTemperatureSensor_ResetAttributesToDefaultValues"
??zclSampleTemperatureSensor_ResetAttributesToD SYMBOL "?relay", zclSampleTemperatureSensor_ResetAttributesToDefaultValues
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zclSampleTemperatureSensor_Init SYMBOL "zclSampleTemperatureSensor_Init"
`??zclSampleTemperatureSensor_Init::?relay` SYMBOL "?relay", zclSampleTemperatureSensor_Init
zclSampleTemperatureSensor_event_loop SYMBOL "zclSampleTemperatureSensor_event_loop"
`??zclSampleTemperatureSensor_event_loop::?relay` SYMBOL "?relay", zclSampleTemperatureSensor_event_loop

        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??RegisterVoltageWarningCB::?relay`
        FUNCTION `??RegisterVoltageWarningCB::?relay`,00H
        EXTERN `??Uart0_Init::?relay`
        FUNCTION `??Uart0_Init::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`
        FUNCTION `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`,00H
        EXTERN `??bdb_RepChangedAttrValue::?relay`
        FUNCTION `??bdb_RepChangedAttrValue::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??bdb_ZedAttemptRecoverNwk::?relay`
        FUNCTION `??bdb_ZedAttemptRecoverNwk::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??printf::?relay`
        FUNCTION `??printf::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN ??zclSampleTemperatureSensor_ResetAttributesToD
        FUNCTION ??zclSampleTemperatureSensor_ResetAttributesToD,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterVoltageWarningCB
        FUNCTION RegisterVoltageWarningCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sw_Test
        EXTERN Uart0_Init
        FUNCTION Uart0_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepAddAttrCfgRecordDefaultToList
        FUNCTION bdb_RepAddAttrCfgRecordDefaultToList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepChangedAttrValue
        FUNCTION bdb_RepChangedAttrValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ZedAttemptRecoverNwk
        FUNCTION bdb_ZedAttemptRecoverNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleTemperatureSensor_Attrs
        EXTERN zclSampleTemperatureSensor_NumAttributes
        EXTERN zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        FUNCTION zclSampleTemperatureSensor_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleTemperatureSensor_SimpleDesc
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdpExternalStateTaskID

// D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampletemperaturesensor.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6   Description:    Zigbee Cluster Library - sample device application.
//    7 
//    8 
//    9   Copyright 2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application implements a ZigBee Temperature Sensor, based on Z-Stack 3.0.
//   42 
//   43   This application is based on the common sample-application user interface. Please see the main
//   44   comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
//   45   this sample applicetion.
//   46   
//   47   Application-specific UI peripherals being used:
//   48 
//   49   - LEDs:
//   50     LED1 is not used in this application
//   51 
//   52   Application-specific menu system:
//   53 
//   54     <SET LOCAL TEMP> Set the temperature of the local temperature sensor
//   55       Up/Down changes the temperature 
//   56       This screen shows the following information:
//   57         Line2:
//   58           Shows the temperature of the local temperature sensor
//   59 
//   60 *********************************************************************/
//   61 
//   62 /*********************************************************************
//   63  * INCLUDES
//   64  */
//   65 #include "ZComDef.h"
//   66 #include "OSAL.h"
//   67 #include "AF.h"
//   68 #include "ZDApp.h"
//   69 #include "ZDObject.h"
//   70 #include "ZDProfile.h"
//   71 #include "MT_SYS.h"
//   72 
//   73 #include "zcl.h"
//   74 #include "zcl_general.h"
//   75 #include "zcl_ha.h"
//   76 #include "zcl_ms.h"
//   77 
//   78 #include "zcl_sampletemperaturesensor.h"
//   79 
//   80 #include "onboard.h"
//   81 
//   82 /* HAL */
//   83 #include "hal_lcd.h"
//   84 #include "hal_led.h"
//   85 #include "hal_key.h"
//   86 
//   87 /* UART */
//   88 #include "uart0.h"
//   89 #include "user_printf.h"
//   90 
//   91 #include "bdb_interface.h"
//   92 #include "bdb_Reporting.h"
//   93 
//   94    
//   95 /*********************************************************************
//   96  * MACROS
//   97  */
//   98 
//   99 // how often to report temperature
//  100 #define SAMPLETEMPERATURESENSOR_REPORT_INTERVAL   10000
//  101 
//  102 #define GUI_LOCAL_TEMP    1
//  103 
//  104 #define APP_TITLE "   Temp Sensor  "
//  105 
//  106 #define HI_UINT16(a) (((a) >> 8) & 0xFF)
//  107 
//  108 #define LO_UINT16(a) ((a) & 0xFF)
//  109 /*********************************************************************
//  110  * CONSTANTS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * TYPEDEFS
//  115  */
//  116 
//  117 /*********************************************************************
//  118  * GLOBAL VARIABLES
//  119  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  120 byte zclSampleTemperatureSensor_TaskID;
zclSampleTemperatureSensor_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  121 
//  122 extern int16 zdpExternalStateTaskID;
//  123 
//  124 /*********************************************************************
//  125  * GLOBAL FUNCTIONS
//  126  */
//  127 extern uint16 NLME_GetShortAddr( void );
//  128 /*********************************************************************
//  129  * LOCAL VARIABLES
//  130  */
//  131 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  132 devStates_t zclSampleTemperatureSensor_NwkState = DEV_INIT;
zclSampleTemperatureSensor_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleTemperatureSensor_N`
        REQUIRE __INIT_XDATA_I
//  133 
//  134 //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
//  135 
//  136 // Test Endpoint to allow SYS_APP_MSGs
//  137 /*
//  138 static endPointDesc_t sampleTemperatureSensor_TestEp =
//  139 {
//  140   20,                                 // Test endpoint
//  141   0,
//  142   &zclSampleTemperatureSensor_TaskID,
//  143   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  144   (afNetworkLatencyReq_t)0            // No Network Latency req
//  145 };
//  146 */
//  147 #ifdef BDB_REPORTING
//  148 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
//  149   uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0x2C01 is 300 in int16
//  150 #endif
//  151 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4

        RSEG XDATA_I:XDATA:NOROOT(0)
//  152   uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00}; // 0x2C01 is 300 in int16   0x012c
reportableChange:
        DATA32
        DS 4
        REQUIRE `?<Initializer for reportableChange>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  153   uint8 reportableChangeTest[] = {0x00, 0x00, 0x00, 0x00};     
reportableChangeTest:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  154 #endif 
//  155 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
//  156   uint8 reportableChange[] = {0x2C, 0x01}; // 0x2C01 is 300 in int16
//  157 #endif 
//  158 #endif
//  159 
//  160 /*********************************************************************
//  161  * LOCAL FUNCTIONS
//  162  */
//  163 static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys );
//  164 static void zclSampleTemperatureSensor_BasicResetCB( void );
//  165 
//  166 static void zclSampleTemperatureSensor_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg);
//  167 
//  168 // Functions to process ZCL Foundation incoming Command/Response messages
//  169 static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  170 #ifdef ZCL_READ
//  171 static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  172 #endif
//  173 #ifdef ZCL_WRITE
//  174 static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  175 #endif
//  176 static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  177 #ifdef ZCL_DISCOVER
//  178 static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  179 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  180 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  181 #endif // ZCL_DISCOVER
//  182 
//  183 static void ControlMessage_Process( zclIncomingMsg_t *pInMsg );
//  184 
//  185 static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
//  186 
//  187 /*********************************************************************
//  188  * STATUS STRINGS
//  189  */
//  190 
//  191 /*********************************************************************
//  192  * CONSTANTS
//  193  */
//  194 /*********************************************************************
//  195  * ZCL General Profile Callback table
//  196  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  197 static zclGeneral_AppCallbacks_t zclSampleTemperatureSensor_CmdCallbacks =
zclSampleTemperatureSensor_CmdCallbacks:
        DATA8
        DS 18
        REQUIRE `?<Initializer for zclSampleTemperatureSensor_C`
        REQUIRE __INIT_XDATA_I
//  198 {
//  199   zclSampleTemperatureSensor_BasicResetCB,        // Basic Cluster Reset command
//  200   NULL,                                           // Identify Trigger Effect command
//  201   NULL,             				                      // On/Off cluster command
//  202   NULL,                                           // On/Off cluster enhanced command Off with Effect
//  203   NULL,                                           // On/Off cluster enhanced command On with Recall Global Scene
//  204   NULL,                                           // On/Off cluster enhanced command On with Timed Off
//  205 #ifdef ZCL_LEVEL_CTRL
//  206   NULL,                                           // Level Control Move to Level command
//  207   NULL,                                           // Level Control Move command
//  208   NULL,                                           // Level Control Step command
//  209   NULL,                                           // Level Control Stop command
//  210 #endif
//  211 #ifdef ZCL_GROUPS
//  212   NULL,                                           // Group Response commands
//  213 #endif
//  214 #ifdef ZCL_SCENES
//  215   NULL,                                           // Scene Store Request command
//  216   NULL,                                           // Scene Recall Request command
//  217   NULL,                                           // Scene Response command
//  218 #endif
//  219 #ifdef ZCL_ALARMS
//  220   NULL,                                           // Alarm (Response) commands
//  221 #endif
//  222 #ifdef SE_UK_EXT
//  223   NULL,                                           // Get Event Log command
//  224   NULL,                                           // Publish Event Log command
//  225 #endif
//  226   NULL,                                           // RSSI Location command
//  227   NULL                                            // RSSI Location Response command
//  228 };
//  229 
//  230 /*********************************************************************
//  231  * @fn          zclSampleTemperatureSensor_Init
//  232  *
//  233  * @brief       Initialization function for the zclGeneral layer.
//  234  *
//  235  * @param       none
//  236  *
//  237  * @return      none
//  238  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  239 void zclSampleTemperatureSensor_Init( byte task_id )
zclSampleTemperatureSensor_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_Init
        CODE
//  240 {
        FUNCALL zclSampleTemperatureSensor_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, Uart0_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, RegisterVoltageWarningCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, bdb_RepAddAttrCfgRecordDefaultToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, bdb_RepAddAttrCfgRecordDefaultToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
//  241   zclSampleTemperatureSensor_TaskID = task_id;
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      @DPTR,A
//  242 
//  243   // Register the Simple Descriptor for this application
//  244   bdb_RegisterSimpleDescriptor( &zclSampleTemperatureSensor_SimpleDesc ); 
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclSampleTemperatureSensor_SimpleDesc & 0xff
        MOV       R3,#(zclSampleTemperatureSensor_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  245 
//  246   //Initialize the Uart0
//  247   Uart0_Init(HAL_UART_BR_115200);
        ; Setup parameters for call to function Uart0_Init
        MOV       R1,#0x4
        LCALL     `??Uart0_Init::?relay`; Banked call to: Uart0_Init
//  248   
//  249   // Register the ZCL General Cluster Library callback functions
//  250   zclGeneral_RegisterCmdCallbacks( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleTemperatureSensor_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleTemperatureSensor_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x8
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  251 
//  252   // Register the application's attribute list
//  253   zclSampleTemperatureSensor_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        LCALL     ??zclSampleTemperatureSensor_ResetAttributesToD; Banked call to: zclSampleTemperatureSensor_ResetAttributesToDefaultValues
//  254   zcl_registerAttrList( SAMPLETEMPERATURESENSOR_ENDPOINT, zclSampleTemperatureSensor_NumAttributes, zclSampleTemperatureSensor_Attrs );   
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclSampleTemperatureSensor_Attrs & 0xff
        MOV       R5,#(zclSampleTemperatureSensor_Attrs >> 8) & 0xff
        MOV       DPTR,#zclSampleTemperatureSensor_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  255 
//  256   // Register the Application to receive the unprocessed Foundation command/response messages
//  257   zcl_registerForMsg( zclSampleTemperatureSensor_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  258 
//  259   // Register low voltage NV memory protection application callback
//  260   RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
        ; Setup parameters for call to function RegisterVoltageWarningCB
        MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
        MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
        LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
//  261 
//  262   // Register for all key events - This app will handle all key events
//  263   RegisterForKeys( zclSampleTemperatureSensor_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  264 
//  265   bdb_RegisterCommissioningStatusCB( zclSampleTemperatureSensor_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV       R2,#??zclSampleTemperatureSensor_ProcessCommissioni & 0xff
        MOV       R3,#(??zclSampleTemperatureSensor_ProcessCommissioni >> 8) & 0xff
        LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  266 
//  267 #ifdef BDB_REPORTING
//  268   //Adds the default configuration values for the temperature attribute of the ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT cluster, for endpoint SAMPLETEMPERATURESENSOR_ENDPOINT
//  269   //Default maxReportingInterval value is 10 seconds
//  270   //Default minReportingInterval value is 3 seconds 
//  271   //Default reportChange value is 300 (3 degrees)ZCL_CLUSTER_ID_GEN_ON_OFF
//  272   bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF, ATTRID_ON_OFF, 0, 5, reportableChangeTest);
        ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
        MOV       ?V0,#reportableChangeTest & 0xff
        MOV       ?V1,#(reportableChangeTest >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x5
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x6
        MOV       R3,#0x0
        MOV       R1,#0x8
        LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  273   bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG, TEST, 0, 7, reportableChangeTest/*reportableChange*/);
        ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
        MOV       ?V0,#reportableChangeTest & 0xff
        MOV       ?V1,#(reportableChangeTest >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x7
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R2,#0x7
        MOV       R3,#0x0
        MOV       R1,#0x8
        LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  274   //bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT, ATTRID_MS_TEMPERATURE_MEASURED_VALUE, 0, 10, reportableChange);
//  275 #endif
//  276   
//  277   zdpExternalStateTaskID = zclSampleTemperatureSensor_TaskID;
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      A,@DPTR
        MOV       DPTR,#zdpExternalStateTaskID
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  278 }
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  279 
//  280 /*********************************************************************
//  281  * @fn          zclSample_event_loop
//  282  *
//  283  * @brief       Event Loop Processor for zclGeneral.
//  284  *
//  285  * @param       none
//  286  *
//  287  * @return      none
//  288  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  289 uint16 zclSampleTemperatureSensor_event_loop( uint8 task_id, uint16 events )
zclSampleTemperatureSensor_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
        CODE
//  290 {
        FUNCALL zclSampleTemperatureSensor_event_loop, bdb_ZedAttemptRecoverNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_ProcessIncomingMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  291   afIncomingMSGPacket_t *MSGpkt;
//  292 
//  293   (void)task_id;  // Intentionally unreferenced parameter
//  294 
//  295   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclSampleTemperatureSensor_event_loop_0
//  296   {
//  297     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleTemperatureSensor_TaskID )) )
//  298     {
//  299       switch ( MSGpkt->hdr.event )
//  300       {
//  301         case ZCL_INCOMING_MSG:
//  302           // Incoming ZCL Foundation command/response messages
//  303           zclSampleTemperatureSensor_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  304           break;
//  305 
//  306         case KEY_CHANGE:
//  307           zclSampleTemperatureSensor_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  308           break;
//  309 
//  310         case ZDO_STATE_CHANGE:
//  311           break;
//  312 
//  313         default:
//  314           break;
//  315       }
//  316 
//  317       // Release the memory
//  318       osal_msg_deallocate( (uint8 *)MSGpkt );
//  319     }
//  320 
//  321     // return unprocessed events
//  322     return (events ^ SYS_EVENT_MSG);
//  323   }
//  324   
//  325 #if ZG_BUILD_ENDDEVICE_TYPE    
//  326   if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
        MOV       A,R2
        ANL       A,#0x2
        JZ        ??zclSampleTemperatureSensor_event_loop_1
//  327   {
//  328     bdb_ZedAttemptRecoverNwk();
        ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
        LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
//  329     return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
        MOV       A,R6
        XRL       A,#0x2
        MOV       R2,A
        MOV       A,R7
        SJMP      ??zclSampleTemperatureSensor_event_loop_2
//  330   }
??zclSampleTemperatureSensor_event_loop_3:
        ; Setup parameters for call to function zclSampleTemperatureSensor_HandleKeys
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclSampleTemperatureSensor_HandleKeys::?relay`; Banked call to: zclSampleTemperatureSensor_HandleKeys
??zclSampleTemperatureSensor_event_loop_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleTemperatureSensor_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleTemperatureSensor_event_loop_5
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x34
        JZ        ??zclSampleTemperatureSensor_event_loop_6
        ADD       A,#0x74
        JZ        ??zclSampleTemperatureSensor_event_loop_3
        SJMP      ??zclSampleTemperatureSensor_event_loop_4
??zclSampleTemperatureSensor_event_loop_6:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIncomingMsg
        LCALL     ??zclSampleTemperatureSensor_ProcessIncomingMsg; Banked call to: zclSampleTemperatureSensor_ProcessIncomingMsg
        SJMP      ??zclSampleTemperatureSensor_event_loop_4
??zclSampleTemperatureSensor_event_loop_5:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
??zclSampleTemperatureSensor_event_loop_2:
        MOV       R3,A
        SJMP      ??zclSampleTemperatureSensor_event_loop_7
//  331 #endif
//  332 
//  333   if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
??zclSampleTemperatureSensor_event_loop_1:
        MOV       A,R2
        ANL       A,#0x10
        JZ        ??zclSampleTemperatureSensor_event_loop_8
//  334   {
//  335     return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
        MOV       A,R2
        XRL       A,#0x10
        SJMP      ??zclSampleTemperatureSensor_event_loop_9
//  336   }
//  337 
//  338   if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
??zclSampleTemperatureSensor_event_loop_8:
        MOV       A,R2
        ANL       A,#0x20
        JZ        ??zclSampleTemperatureSensor_event_loop_10
//  339   {
//  340     return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
        MOV       A,R2
        XRL       A,#0x20
??zclSampleTemperatureSensor_event_loop_9:
        MOV       R2,A
        SJMP      ??zclSampleTemperatureSensor_event_loop_7
//  341   }
//  342 
//  343   // Discard unknown events
//  344   return 0;
??zclSampleTemperatureSensor_event_loop_10:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclSampleTemperatureSensor_event_loop_7:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  345 }
          CFI EndBlock cfiBlock1
//  346 
//  347 /*********************************************************************
//  348  * @fn      zclSampleTemperatureSensor_HandleKeys
//  349  *
//  350  * @brief   Handles all key events for this device.
//  351  *
//  352  * @param   shift - true if in shift/alt.
//  353  * @param   keys - bit field for key events. Valid entries:
//  354  *                 HAL_KEY_SW_5
//  355  *                 HAL_KEY_SW_4
//  356  *                 HAL_KEY_SW_3
//  357  *                 HAL_KEY_SW_2
//  358  *                 HAL_KEY_SW_1
//  359  *
//  360  * @return  none
//  361  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  362 static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys )
zclSampleTemperatureSensor_HandleKeys:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_HandleKeys
        CODE
//  363 {
        FUNCALL zclSampleTemperatureSensor_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, bdb_RepChangedAttrValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
//  364   if ( keys & HAL_KEY_SW_6 )  // Switch 6
        MOV       C,0xE0 /* A   */.5
        JNC       ??zclSampleTemperatureSensor_HandleKeys_0
//  365   {     
//  366     HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  367     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING  );
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xa
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  368   }
//  369   if ( keys & HAL_KEY_SW_5 )  // Switch 5
??zclSampleTemperatureSensor_HandleKeys_0:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.2
        JNC       ??zclSampleTemperatureSensor_HandleKeys_1
//  370   {     
//  371     HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x8
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  372     Sw_Test[0] = Sw_Test[0] + 1;
        MOV       DPTR,#Sw_Test
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  373     bdb_RepChangedAttrValue(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT, TEST);
        ; Setup parameters for call to function bdb_RepChangedAttrValue
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x4
        MOV       R1,#0x8
        LCALL     `??bdb_RepChangedAttrValue::?relay`; Banked call to: bdb_RepChangedAttrValue
//  374   }
//  375 }
??zclSampleTemperatureSensor_HandleKeys_1:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  376 
//  377 /*********************************************************************
//  378  * @fn      zclSampleTemperatureSensor_LcdDisplayMainMode
//  379  *
//  380  * @brief   Called to display the main screen on the LCD.
//  381  *
//  382  * @param   none
//  383  *
//  384  * @return  none
//  385  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  386 static void zclSampleTemperatureSensor_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg)
zclSampleTemperatureSensor_ProcessCommissioningStatus:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessCommissioningStatus
        CODE
//  387 {
        FUNCALL zclSampleTemperatureSensor_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessCommissioningStatus, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessCommissioningStatus, NLME_GetShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessCommissioningStatus, NLME_GetShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessCommissioningStatus, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  388     switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleTemperatureSensor_ProcessCommissioni_1
        DEC       A
        JZ        ??zclSampleTemperatureSensor_ProcessCommissioni_2
        ADD       A,#-0x3
        JZ        ??zclSampleTemperatureSensor_ProcessCommissioni_3
        SJMP      ??zclSampleTemperatureSensor_ProcessCommissioni_4
//  389     {
//  390       case BDB_COMMISSIONING_FORMATION:
//  391         if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
??zclSampleTemperatureSensor_ProcessCommissioni_2:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleTemperatureSensor_ProcessCommissioni_4
//  392         {
//  393           //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
//  394           bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x2
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
        SJMP      ??zclSampleTemperatureSensor_ProcessCommissioni_4
//  395         }
//  396         else
//  397         {
//  398           //Want to try other channels?
//  399           //try with bdb_setChannelAttribute
//  400         }
//  401       break;
//  402       case BDB_COMMISSIONING_NWK_STEERING:
//  403         if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
??zclSampleTemperatureSensor_ProcessCommissioni_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleTemperatureSensor_ProcessCommissioni_4
//  404         {
//  405           //YOUR JOB:
//  406           //We are on the nwk, what now?
//  407           HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  408           Sw_Test[1] =  LO_UINT16(NLME_GetShortAddr());
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       A,R2
        MOV       DPTR,#Sw_Test + 1
        MOVX      @DPTR,A
//  409           Sw_Test[2] =  HI_UINT16(NLME_GetShortAddr());
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       A,R3
        MOV       DPTR,#Sw_Test + 2
        MOVX      @DPTR,A
        SJMP      ??zclSampleTemperatureSensor_ProcessCommissioni_4
//  410         }
//  411         else
//  412         {
//  413           //See the possible errors for nwk steering procedure
//  414           //No suitable networks found
//  415           //Want to try other channels?
//  416           //try with bdb_setChannelAttribute
//  417         }
//  418       break;
//  419       case BDB_COMMISSIONING_FINDING_BINDING:
//  420         if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  421         {
//  422           //YOUR JOB:
//  423         }
//  424         else
//  425         {
//  426           //YOUR JOB:
//  427           //retry?, wait for user interaction?
//  428         }
//  429       break;
//  430       case BDB_COMMISSIONING_INITIALIZATION:
//  431         //Initialization notification can only be successful. Failure on initialization 
//  432         //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  433         
//  434         //YOUR JOB:
//  435         //We are on a network, what now?
//  436         
//  437       break;
//  438 #if ZG_BUILD_ENDDEVICE_TYPE    
//  439     case BDB_COMMISSIONING_PARENT_LOST:
//  440       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
??zclSampleTemperatureSensor_ProcessCommissioni_3:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0xd
        JZ        ??zclSampleTemperatureSensor_ProcessCommissioni_4
//  441       {
//  442         //We did recover from losing parent
//  443       }
//  444       else
//  445       {
//  446         //Parent not found, attempt to rejoin again after a fixed delay
//  447         osal_start_timerEx(zclSampleTemperatureSensor_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_2710
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  448       }
//  449     break;
//  450 #endif 
//  451     }
//  452 
//  453 }
??zclSampleTemperatureSensor_ProcessCommissioni_4:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock3
//  454 
//  455 /*********************************************************************
//  456  * @fn      zclSampleTemperatureSensor_BasicResetCB
//  457  *
//  458  * @brief   Callback from the ZCL General Cluster Library
//  459  *          to set all the Basic Cluster attributes to default values.
//  460  *
//  461  * @param   none
//  462  *
//  463  * @return  none
//  464  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  465 static void zclSampleTemperatureSensor_BasicResetCB( void )
zclSampleTemperatureSensor_BasicResetCB:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_BasicResetCB
        CODE
//  466 {
        FUNCALL zclSampleTemperatureSensor_BasicResetCB, zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  467   zclSampleTemperatureSensor_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        LCALL     ??zclSampleTemperatureSensor_ResetAttributesToD; Banked call to: zclSampleTemperatureSensor_ResetAttributesToDefaultValues
//  468 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock4
//  469 
//  470 /*********************************************************************
//  471  * @fn      zclSampleApp_BatteryWarningCB
//  472  *
//  473  * @brief   Called to handle battery-low situation.
//  474  *
//  475  * @param   voltLevel - level of severity
//  476  *
//  477  * @return  none
//  478  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  479 void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
zclSampleApp_BatteryWarningCB:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zclSampleApp_BatteryWarningCB
        CODE
//  480 {
        ; Saved register size: 0
        ; Auto size: 0
//  481   if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
//  482   {
//  483     // Send warning message to the gateway and blink LED
//  484   }
//  485   else if ( voltLevel == VOLT_LEVEL_BAD )
//  486   {
//  487     // Shut down the system
//  488   }
//  489 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock5
//  490 
//  491 /******************************************************************************
//  492  *
//  493  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  494  *
//  495  *****************************************************************************/
//  496 
//  497 /*********************************************************************
//  498  * @fn      zclSampleTemperatureSensor_ProcessIncomingMsg
//  499  *
//  500  * @brief   Process ZCL Foundation incoming message
//  501  *
//  502  * @param   pInMsg - pointer to the received message
//  503  *
//  504  * @return  none
//  505  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  506 static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
zclSampleTemperatureSensor_ProcessIncomingMsg:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessIncomingMsg
        CODE
//  507 {
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, zclSampleTemperatureSensor_ProcessInReadRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, zclSampleTemperatureSensor_ProcessInWriteRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, ControlMessage_Process
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, zclSampleTemperatureSensor_ProcessInDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIncomingMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  508   switch ( pInMsg->zclHdr.commandID )
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_1
        ADD       A,#-0x3
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_2
        ADD       A,#-0x6
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_3
        DEC       A
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_4
        ADD       A,#-0x2
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_5
        ADD       A,#-0x5
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
        ADD       A,#-0x2
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
        ADD       A,#-0x2
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_7
        SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_8
//  509   {
//  510 #ifdef ZCL_READ
//  511     case ZCL_CMD_READ_RSP:
//  512       zclSampleTemperatureSensor_ProcessInReadRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_1:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInReadRspCmd
        LCALL     ??zclSampleTemperatureSensor_ProcessInReadRspCm; Banked call to: zclSampleTemperatureSensor_ProcessInReadRspCmd
//  513       break;
        SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_8
//  514 #endif
//  515 #ifdef ZCL_WRITE
//  516     case ZCL_CMD_WRITE_RSP:
//  517       zclSampleTemperatureSensor_ProcessInWriteRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_2:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInWriteRspCmd
        LCALL     ??zclSampleTemperatureSensor_ProcessInWriteRspC; Banked call to: zclSampleTemperatureSensor_ProcessInWriteRspCmd
//  518       break;
        SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_8
//  519 #endif
//  520 #ifdef ZCL_REPORT
//  521     // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
//  522     case ZCL_CMD_CONFIG_REPORT:
//  523       //zclSampleTemperatureSensor_ProcessInConfigReportCmd( pInMsg );
//  524       break;
//  525       case ZCL_CMD_READ_REPORT_CFG:
//  526       //zclSampleTemperatureSensor_ProcessInReadReportCfgCmd( pInMsg );
//  527       break;
//  528     case ZCL_CMD_CONFIG_REPORT_RSP:
//  529       //zclSampleTemperatureSensor_ProcessInConfigReportRspCmd( pInMsg );
//  530       break;
//  531     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  532       //zclSampleTemperatureSensor_ProcessInReadReportCfgRspCmd( pInMsg );
//  533       break;
//  534 
//  535     case ZCL_CMD_REPORT:
//  536       ControlMessage_Process( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_3:
        ; Setup parameters for call to function ControlMessage_Process
        LCALL     `??ControlMessage_Process::?relay`; Banked call to: ControlMessage_Process
//  537       break;
        SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_8
//  538 #endif
//  539     case ZCL_CMD_DEFAULT_RSP:
//  540       zclSampleTemperatureSensor_ProcessInDefaultRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_4:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInDefaultRspCmd
        LCALL     ??zclSampleTemperatureSensor_ProcessInDefaultRs; Banked call to: zclSampleTemperatureSensor_ProcessInDefaultRspCmd
//  541       break;
        SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_8
//  542 #ifdef ZCL_DISCOVER
//  543     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  544       zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
//  545       break;
//  546 
//  547     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  548       zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_6:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
        LCALL     ??zclSampleTemperatureSensor_ProcessInDiscCmdsR; Banked call to: zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
//  549       break;
        SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_8
//  550 
//  551     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  552       zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_5:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd
        LCALL     ??zclSampleTemperatureSensor_ProcessInDiscAttrs; Banked call to: zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd
//  553       break;
        SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_8
//  554 
//  555     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  556       zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( pInMsg );
??zclSampleTemperatureSensor_ProcessIncomingMsg_7:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
        LCALL     ??zclSampleTemperatureSensor_ProcessInDiscAttrs_1; Banked call to: zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
//  557       break;
//  558 #endif
//  559     default:
//  560       break;
//  561   }
//  562 
//  563   if ( pInMsg->attrCmd )
??zclSampleTemperatureSensor_ProcessIncomingMsg_8:
        MOV       A,R6
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_9
//  564   {
//  565     osal_mem_free( pInMsg->attrCmd );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  566   }
//  567 }
??zclSampleTemperatureSensor_ProcessIncomingMsg_9:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  568 
//  569 #ifdef ZCL_READ
//  570 /*********************************************************************
//  571  * @fn      zclSampleTemperatureSensor_ProcessInReadRspCmd
//  572  *
//  573  * @brief   Process the "Profile" Read Response Command
//  574  *
//  575  * @param   pInMsg - incoming message to process
//  576  *
//  577  * @return  none
//  578  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  579 static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleTemperatureSensor_ProcessInReadRspCmd:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInReadRspCmd
        CODE
//  580 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  581   zclReadRspCmd_t *readRspCmd;
//  582   uint8 i;
//  583 
//  584   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
//  585   for ( i = 0; i < readRspCmd->numAttr; i++ )
        MOV       R0,#0x0
        SJMP      ??zclSampleTemperatureSensor_ProcessInReadRspCm_1
??zclSampleTemperatureSensor_ProcessInReadRspCm_2:
        INC       R0
??zclSampleTemperatureSensor_ProcessInReadRspCm_1:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JC        ??zclSampleTemperatureSensor_ProcessInReadRspCm_2
//  586   {
//  587     // Notify the originator of the results of the original read attributes
//  588     // attempt and, for each successfull request, the value of the requested
//  589     // attribute
//  590   }
//  591 
//  592   return ( TRUE );
        MOV       R1,#0x1
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
//  593 }
          CFI EndBlock cfiBlock7
//  594 #endif // ZCL_READ
//  595 
//  596 #ifdef ZCL_WRITE
//  597 /*********************************************************************
//  598  * @fn      zclSampleTemperatureSensor_ProcessInWriteRspCmd
//  599  *
//  600  * @brief   Process the "Profile" Write Response Command
//  601  *
//  602  * @param   pInMsg - incoming message to process
//  603  *
//  604  * @return  none
//  605  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  606 static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleTemperatureSensor_ProcessInWriteRspCmd:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInWriteRspCmd
        CODE
//  607 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  608   zclWriteRspCmd_t *writeRspCmd;
//  609   uint8 i;
//  610 
//  611   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
//  612   for ( i = 0; i < writeRspCmd->numAttr; i++ )
        MOV       R0,#0x0
        SJMP      ??zclSampleTemperatureSensor_ProcessInWriteRspC_1
??zclSampleTemperatureSensor_ProcessInWriteRspC_2:
        INC       R0
??zclSampleTemperatureSensor_ProcessInWriteRspC_1:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JC        ??zclSampleTemperatureSensor_ProcessInWriteRspC_2
//  613   {
//  614     // Notify the device of the results of the its original write attributes
//  615     // command.
//  616   }
//  617 
//  618   return ( TRUE );
        MOV       R1,#0x1
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
//  619 }
          CFI EndBlock cfiBlock8
//  620 #endif // ZCL_WRITE
//  621 
//  622 /*********************************************************************
//  623  * @fn      zclSampleTemperatureSensor_ProcessInDefaultRspCmd
//  624  *
//  625  * @brief   Process the "Profile" Default Response Command
//  626  *
//  627  * @param   pInMsg - incoming message to process
//  628  *
//  629  * @return  none
//  630  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  631 static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleTemperatureSensor_ProcessInDefaultRspCmd:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInDefaultRspCmd
        CODE
//  632 {
        ; Saved register size: 0
        ; Auto size: 0
//  633   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
//  634 
//  635   // Device is notified of the Default Response command.
//  636   (void)pInMsg;
//  637 
//  638   return ( TRUE );
        MOV       R1,#0x1
        LJMP      ?BRET
//  639 }
          CFI EndBlock cfiBlock9
//  640 
//  641 #ifdef ZCL_DISCOVER
//  642 /*********************************************************************
//  643  * @fn      zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
//  644  *
//  645  * @brief   Process the Discover Commands Response Command
//  646  *
//  647  * @param   pInMsg - incoming message to process
//  648  *
//  649  * @return  none
//  650  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  651 static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
        CODE
//  652 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  653   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
//  654   uint8 i;
//  655 
//  656   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
//  657   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
        MOV       R2,#0x0
        SJMP      ??zclSampleTemperatureSensor_ProcessInDiscCmdsR_1
??zclSampleTemperatureSensor_ProcessInDiscCmdsR_2:
        INC       R2
??zclSampleTemperatureSensor_ProcessInDiscCmdsR_1:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleTemperatureSensor_ProcessInDiscCmdsR_2
//  658   {
//  659     // Device is notified of the result of its attribute discovery command.
//  660   }
//  661 
//  662   return ( TRUE );
        MOV       R1,#0x1
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
//  663 }
          CFI EndBlock cfiBlock10
//  664 
//  665 /*********************************************************************
//  666  * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd
//  667  *
//  668  * @brief   Process the "Profile" Discover Attributes Response Command
//  669  *
//  670  * @param   pInMsg - incoming message to process
//  671  *
//  672  * @return  none
//  673  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  674 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd
        CODE
//  675 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  676   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
//  677   uint8 i;
//  678 
//  679   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
//  680   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
        MOV       R2,#0x0
        SJMP      ??zclSampleTemperatureSensor_ProcessInDiscAttrs_2
??zclSampleTemperatureSensor_ProcessInDiscAttrs_3:
        INC       R2
??zclSampleTemperatureSensor_ProcessInDiscAttrs_2:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleTemperatureSensor_ProcessInDiscAttrs_3
//  681   {
//  682     // Device is notified of the result of its attribute discovery command.
//  683   }
//  684 
//  685   return ( TRUE );
        MOV       R1,#0x1
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
//  686 }
          CFI EndBlock cfiBlock11
//  687 
//  688 /*********************************************************************
//  689  * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
//  690  *
//  691  * @brief   Process the "Profile" Discover Attributes Extended Response Command
//  692  *
//  693  * @param   pInMsg - incoming message to process
//  694  *
//  695  * @return  none
//  696  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  697 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
        CODE
//  698 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  699   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
//  700   uint8 i;
//  701 
//  702   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
//  703   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
        MOV       R2,#0x0
        SJMP      ??zclSampleTemperatureSensor_ProcessInDiscAttrs_4
??zclSampleTemperatureSensor_ProcessInDiscAttrs_5:
        INC       R2
??zclSampleTemperatureSensor_ProcessInDiscAttrs_4:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleTemperatureSensor_ProcessInDiscAttrs_5
//  704   {
//  705     // Device is notified of the result of its attribute discovery command.
//  706   }
//  707 
//  708   return ( TRUE );
        MOV       R1,#0x1
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
//  709 }
          CFI EndBlock cfiBlock12
//  710 #endif // ZCL_DISCOVER
//  711 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  712 static void ControlMessage_Process( zclIncomingMsg_t *pInMsg )
ControlMessage_Process:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function ControlMessage_Process
        CODE
//  713 {
        FUNCALL ControlMessage_Process, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ControlMessage_Process, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ControlMessage_Process, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  714   HalLedSet ( HAL_LED_3, HAL_LED_MODE_TOGGLE );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x8
        MOV       R1,#0x4
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  715   
//  716   zclReportCmd_t *pInReport;
//  717 
//  718   pInReport = (zclReportCmd_t *)pInMsg->attrCmd;
        MOV       A,R6
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
//  719   
//  720   uint8 data1 = pInReport->attrList[0].attrData[0];
//  721   uint8 data2 = pInReport->attrList[0].attrData[1];
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
//  722 //  printf("data: %04x \n", a);
//  723   printf("%d", data1);
        ; Setup parameters for call to function printf
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R2,#`?<Constant "%d">` & 0xff
        MOV       R3,#(`?<Constant "%d">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  724   printf(" %d\n", data2);
        ; Setup parameters for call to function printf
        MOV       A,R6
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R2,#`?<Constant " %d\\n">` & 0xff
        MOV       R3,#(`?<Constant " %d\\n">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  725 //  pInReport->attrList[0].attrID
//  726 }
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleTemperatureSensor_N`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for reportableChange>`:
        DATA8
        DB 44
        DB 1
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleTemperatureSensor_C`:
        DATA16
        DW `??zclSampleTemperatureSensor_BasicResetCB::?rel`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessCommissioni:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_BasicResetCB::?rel`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleApp_BatteryWarningCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleApp_BatteryWarningCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessIncomingMsg:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessIncomingMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessInReadRspCm:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessInReadRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessInWriteRspC:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessInWriteRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessInDefaultRs:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessInDefaultRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessInDiscCmdsR:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessInDiscAttrs:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessInDiscAttrs_1:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ControlMessage_Process::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ControlMessage_Process

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%d">`:
        DB "%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " %d\\n">`:
        DB " %d\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        END
//  727 
//  728 
//  729 /****************************************************************************
//  730 ****************************************************************************/
//  731 
//  732 
// 
// 939 bytes in segment BANKED_CODE
//  84 bytes in segment BANK_RELAYS
//  23 bytes in segment XDATA_I
//  23 bytes in segment XDATA_ID
//  12 bytes in segment XDATA_ROM_C
//   5 bytes in segment XDATA_Z
// 
// 107 bytes of CODE     memory
//   8 bytes of CONST    memory (+ 4 bytes shared)
// 939 bytes of HUGECODE memory
//  28 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
