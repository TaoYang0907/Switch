###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  17:08:02
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\mt\MT_AF.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW78A7.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\mt\MT_AF.c" -D BDB_REPORTING -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS
#        -D ZCL_ON_OFF -D ZCL_REPORT -D ZCL_REPORT_DESTINATION_DEVICE -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\MT_AF.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\MT_AF.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2015-01-26 08:25:50 -0800 (Mon, 26 Jan 2015) $
      4            Revision:       $Revision: 42025 $
      5          
      6            Description:    MonitorTest functions for the AF layer.
      7          
      8            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "MT.h"
     47          #include "MT_AF.h"
     48          #include "MT_ZDO.h"
     49          #include "nwk.h"
     50          #include "OnBoard.h"
     51          #include "MT_UART.h"
     52          
     53          #if defined INTER_PAN
     54          #include "stub_aps.h"
     55          #endif
     56          
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                          Constants
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          
     63          #if !defined MT_AF_EXEC_CNT
     64          #define MT_AF_EXEC_CNT  15
     65          #endif
     66          
     67          #if !defined MT_AF_EXEC_DLY
     68          #define MT_AF_EXEC_DLY  1000
     69          #endif
     70          
     71          /* ------------------------------------------------------------------------------------------------
     72           *                                           Typedefs
     73           * ------------------------------------------------------------------------------------------------
     74           */
     75          
     76          typedef struct
     77          {
     78            uint8 *data;
     79            afAddrType_t dstAddr;
     80            endPointDesc_t *epDesc;
     81            uint16 cId;
     82            uint16 dataLen;
     83            uint8 transId;
     84            uint8 txOpts;
     85            uint8 radius;
     86            uint8 tick;
     87          } mtAfDataReq_t;
     88          
     89          typedef struct _mtAfInMsgList_t
     90          {
     91            struct _mtAfInMsgList_t *next;
     92            uint8 *data;
     93            uint32 timestamp;         // Receipt timestamp from MAC.
     94            uint8 tick;
     95          } mtAfInMsgList_t;
     96          
     97          /* ------------------------------------------------------------------------------------------------
     98           *                                        Local Variables
     99           * ------------------------------------------------------------------------------------------------
    100           */
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    104          
    105          /* ------------------------------------------------------------------------------------------------
    106           *                                        Global Variables
    107           * ------------------------------------------------------------------------------------------------
    108           */
    109          
    110          #if defined ( MT_AF_CB_FUNC )
    111          uint16 _afCallbackSub;
    112          #endif
    113          
    114          /* ------------------------------------------------------------------------------------------------
    115           *                                        Local Functions
    116           * ------------------------------------------------------------------------------------------------
    117           */
    118          
    119          static void MT_AfRegister(uint8 *pBuf);
    120          static void MT_AfDelete(uint8 *pBuf);
    121          static void MT_AfDataRequest(uint8 *pBuf);
    122          
    123          #if defined ( ZIGBEEPRO )
    124          static void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    125          #endif
    126          
    127          #if defined INTER_PAN
    128          static void MT_AfInterPanCtl(uint8 *pBuf);
    129          #endif
    130          
    131          static void MT_AfDataRetrieve(uint8 *pBuf);
    132          static void MT_AfDataStore(uint8 *pBuf);
    133          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    134          static void MT_AfAPSF_ConfigGet(uint8 *pBuf);
    135          
    136          
    137          /**************************************************************************************************
    138           * @fn          MT_AfExec
    139           *
    140           * @brief       This function is invoked by an MT timer event.
    141           *
    142           * input parameters
    143           *
    144           * None.
    145           *
    146           * output parameters
    147           *
    148           * None.
    149           *
    150           * @return      None.
    151           **************************************************************************************************
    152           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          void MT_AfExec(void)
   \                     MT_AfExec:
    154          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    155            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV       DPTR,#pMtAfInMsgList
   \                     ??MT_AfExec_1:
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   8007         SJMP      ??MT_AfExec_2
    156          
    157            while (pItem != NULL)
    158            {
    159              if (--(pItem->tick) == 0)
    160              {
    161                if (pMtAfInMsgList == pItem)
    162                {
    163                  pMtAfInMsgList = pItem->next;
    164                  (void)osal_mem_free(pItem);
    165                  pItem = pMtAfInMsgList;
    166                }
    167                else
    168                {
    169                  pPrev->next = pItem->next;
    170                  (void)osal_mem_free(pItem);
    171                  pItem = pPrev->next;
    172                }
    173              }
    174              else
    175              {
    176                pPrev = pItem;
   \                     ??MT_AfExec_3:
   \   00000E   EA           MOV       A,R2
   \   00000F   FE           MOV       R6,A
   \   000010   EB           MOV       A,R3
   \   000011   FF           MOV       R7,A
    177                pItem = pItem->next;
   \   000012   E8           MOV       A,R0
   \   000013   FA           MOV       R2,A
   \   000014   E9           MOV       A,R1
   \                     ??MT_AfExec_2:
   \   000015   FB           MOV       R3,A
    178              }
   \   000016   EA           MOV       A,R2
   \   000017   4B           ORL       A,R3
   \   000018   6051         JZ        ??MT_AfExec_4
   \   00001A   EA           MOV       A,R2
   \   00001B   2408         ADD       A,#0x8
   \   00001D   F8           MOV       R0,A
   \   00001E   E4           CLR       A
   \   00001F   3B           ADDC      A,R3
   \   000020   F9           MOV       R1,A
   \   000021   E8           MOV       A,R0
   \   000022   FC           MOV       R4,A
   \   000023   E9           MOV       A,R1
   \   000024   FD           MOV       R5,A
   \   000025   8882         MOV       DPL,R0
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   14           DEC       A
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   8C82         MOV       DPL,R4
   \   000037   8D83         MOV       DPH,R5
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   70D2         JNZ       ??MT_AfExec_3
   \   00003C   90....       MOV       DPTR,#pMtAfInMsgList
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FC           MOV       R4,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FD           MOV       R5,A
   \   000044   EA           MOV       A,R2
   \   000045   6C           XRL       A,R4
   \   000046   7002         JNZ       ??MT_AfExec_5
   \   000048   EB           MOV       A,R3
   \   000049   6D           XRL       A,R5
   \                     ??MT_AfExec_5:
   \   00004A   700D         JNZ       ??MT_AfExec_6
   \   00004C   90....       MOV       DPTR,#pMtAfInMsgList
   \   00004F   E8           MOV       A,R0
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   E9           MOV       A,R1
   \   000053   F0           MOVX      @DPTR,A
   \   000054                ; Setup parameters for call to function osal_mem_free
   \   000054   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000057   80AC         SJMP      ??MT_AfExec_0
   \                     ??MT_AfExec_6:
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   E8           MOV       A,R0
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E9           MOV       A,R1
   \   000061   F0           MOVX      @DPTR,A
   \   000062                ; Setup parameters for call to function osal_mem_free
   \   000062   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   809D         SJMP      ??MT_AfExec_1
    179            }
    180          
    181            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_4:
   \   00006B   90....       MOV       DPTR,#pMtAfDataReq
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F8           MOV       R0,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F9           MOV       R1,A
   \   000073   E8           MOV       A,R0
   \   000074   49           ORL       A,R1
   \   000075   6038         JZ        ??MT_AfExec_7
    182            {
    183              if (--(pMtAfDataReq->tick) == 0)
   \   000077   90....       MOV       DPTR,#pMtAfDataReq
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F8           MOV       R0,A
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   C8           XCH       A,R0
   \   00007F   2417         ADD       A,#0x17
   \   000081   F582         MOV       DPL,A
   \   000083   E4           CLR       A
   \   000084   38           ADDC      A,R0
   \   000085   F583         MOV       DPH,A
   \   000087   E0           MOVX      A,@DPTR
   \   000088   14           DEC       A
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   90....       MOV       DPTR,#pMtAfDataReq
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F8           MOV       R0,A
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C8           XCH       A,R0
   \   000092   2417         ADD       A,#0x17
   \   000094   F582         MOV       DPL,A
   \   000096   E4           CLR       A
   \   000097   38           ADDC      A,R0
   \   000098   F583         MOV       DPH,A
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   7012         JNZ       ??MT_AfExec_7
    184              {
    185                (void)osal_mem_free(pMtAfDataReq);
   \   00009D                ; Setup parameters for call to function osal_mem_free
   \   00009D   90....       MOV       DPTR,#pMtAfDataReq
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   FA           MOV       R2,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   FB           MOV       R3,A
   \   0000A5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    186                pMtAfDataReq = NULL;
   \   0000A8   90....       MOV       DPTR,#pMtAfDataReq
   \   0000AB   E4           CLR       A
   \   0000AC   F0           MOVX      @DPTR,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   F0           MOVX      @DPTR,A
    187              }
    188            }
    189          
    190            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_7:
   \   0000AF   90....       MOV       DPTR,#pMtAfInMsgList
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F8           MOV       R0,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F9           MOV       R1,A
   \   0000B7   E8           MOV       A,R0
   \   0000B8   49           ORL       A,R1
   \   0000B9   700C         JNZ       ??MT_AfExec_8
   \   0000BB   90....       MOV       DPTR,#pMtAfDataReq
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F8           MOV       R0,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   F9           MOV       R1,A
   \   0000C3   E8           MOV       A,R0
   \   0000C4   49           ORL       A,R1
   \   0000C5   6026         JZ        ??MT_AfExec_9
    191            {
    192              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_8:
   \   0000C7                ; Setup parameters for call to function osal_start_timerEx
   \   0000C7   90....       MOV       DPTR,#__Constant_3e8
   \   0000CA   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000CD   7A08         MOV       R2,#0x8
   \   0000CF   7B00         MOV       R3,#0x0
   \   0000D1   90....       MOV       DPTR,#MT_TaskID
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F9           MOV       R1,A
   \   0000D6   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000D9   7404         MOV       A,#0x4
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DE   E9           MOV       A,R1
   \   0000DF   600C         JZ        ??MT_AfExec_9
    193              {
    194                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   0000E1                ; Setup parameters for call to function osal_set_event
   \   0000E1   7A08         MOV       R2,#0x8
   \   0000E3   7B00         MOV       R3,#0x0
   \   0000E5   90....       MOV       DPTR,#MT_TaskID
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   F9           MOV       R1,A
   \   0000EA   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    195              }
    196            }
    197          }
   \                     ??MT_AfExec_9:
   \   0000ED   7F01         MOV       R7,#0x1
   \   0000EF   02....       LJMP      ?BANKED_LEAVE_XDATA
    198          
    199          /***************************************************************************************************
    200           * @fn      MT_AfCommandProcessing
    201           *
    202           * @brief   Process all the AF commands that are issued by test tool
    203           *
    204           * @param   pBuf - pointer to the received buffer
    205           *
    206           * @return  status
    207           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    208          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    209          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    210            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV       R6,#0x0
    211          
    212            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   601B         JZ        ??MT_AfCommandProcessing_0
   \   000010   14           DEC       A
   \   000011   6022         JZ        ??MT_AfCommandProcessing_1
   \   000013   14           DEC       A
   \   000014   601F         JZ        ??MT_AfCommandProcessing_1
   \   000016   14           DEC       A
   \   000017   6021         JZ        ??MT_AfCommandProcessing_2
   \   000019   14           DEC       A
   \   00001A   6014         JZ        ??MT_AfCommandProcessing_3
   \   00001C   24F3         ADD       A,#-0xd
   \   00001E   6024         JZ        ??MT_AfCommandProcessing_4
   \   000020   14           DEC       A
   \   000021   601C         JZ        ??MT_AfCommandProcessing_5
   \   000023   14           DEC       A
   \   000024   6023         JZ        ??MT_AfCommandProcessing_6
   \   000026   14           DEC       A
   \   000027   6025         JZ        ??MT_AfCommandProcessing_7
   \   000029   8028         SJMP      ??MT_AfCommandProcessing_8
    213            {
    214              case MT_AF_REGISTER:
    215                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   00002B                ; Setup parameters for call to function MT_AfRegister
   \   00002B   12....       LCALL     `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
    216                break;
   \   00002E   8025         SJMP      ??MT_AfCommandProcessing_9
    217          
    218              case MT_AF_DELETE:
    219                MT_AfDelete( pBuf );
   \                     ??MT_AfCommandProcessing_3:
   \   000030                ; Setup parameters for call to function MT_AfDelete
   \   000030   12....       LCALL     `??MT_AfDelete::?relay`; Banked call to: MT_AfDelete
    220                break;
   \   000033   8020         SJMP      ??MT_AfCommandProcessing_9
    221          
    222              case MT_AF_DATA_REQUEST:
    223              case MT_AF_DATA_REQUEST_EXT:
    224                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000035                ; Setup parameters for call to function MT_AfDataRequest
   \   000035   12....       LCALL     `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    225                break;
   \   000038   801B         SJMP      ??MT_AfCommandProcessing_9
    226          
    227          #if defined( ZIGBEEPRO )
    228              case MT_AF_DATA_REQUEST_SRCRTG:
    229                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   00003A                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   00003A   12....       LCALL     `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    230                break;
   \   00003D   8016         SJMP      ??MT_AfCommandProcessing_9
    231          #endif
    232          
    233          #if defined INTER_PAN
    234              case MT_AF_INTER_PAN_CTL:
    235                MT_AfInterPanCtl(pBuf);
    236                break;
    237          #endif
    238          
    239              case MT_AF_DATA_RETRIEVE:
    240                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   00003F                ; Setup parameters for call to function MT_AfDataRetrieve
   \   00003F   12....       LCALL     `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    241                break;
   \   000042   8011         SJMP      ??MT_AfCommandProcessing_9
    242          
    243              case MT_AF_DATA_STORE:
    244                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   000044                ; Setup parameters for call to function MT_AfDataStore
   \   000044   12....       LCALL     `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    245                break;
   \   000047   800C         SJMP      ??MT_AfCommandProcessing_9
    246          
    247              case MT_AF_APSF_CONFIG_SET:
    248                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_6:
   \   000049                ; Setup parameters for call to function MT_AfAPSF_ConfigSet
   \   000049   12....       LCALL     `??MT_AfAPSF_ConfigSet::?relay`; Banked call to: MT_AfAPSF_ConfigSet
    249                break;
   \   00004C   8007         SJMP      ??MT_AfCommandProcessing_9
    250          
    251              case MT_AF_APSF_CONFIG_GET:
    252                MT_AfAPSF_ConfigGet(pBuf);
   \                     ??MT_AfCommandProcessing_7:
   \   00004E                ; Setup parameters for call to function MT_AfAPSF_ConfigGet
   \   00004E   12....       LCALL     `??MT_AfAPSF_ConfigGet::?relay`; Banked call to: MT_AfAPSF_ConfigGet
    253                break;
   \   000051   8002         SJMP      ??MT_AfCommandProcessing_9
    254          
    255              default:
    256                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_8:
   \   000053   7E02         MOV       R6,#0x2
    257                break;
    258            }
    259          
    260            return status;
   \                     ??MT_AfCommandProcessing_9:
   \   000055   EE           MOV       A,R6
   \   000056   F9           MOV       R1,A
   \   000057   7F01         MOV       R7,#0x1
   \   000059   02....       LJMP      ?BANKED_LEAVE_XDATA
    261          }
    262          
    263          /***************************************************************************************************
    264           * @fn      MT_AfRegister
    265           *
    266           * @brief   Process AF Register command
    267           *
    268           * @param   pBuf - pointer to the received buffer
    269           *
    270           * @return  none
    271           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    272          static void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    273          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    274            uint8 cmdId;
    275            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7410         MOV       A,#0x10
   \   000016   F0           MOVX      @DPTR,A
    276            endPointDesc_t *epDesc;
    277          
    278            /* parse header */
    279            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V2,A
    280            pBuf += MT_RPC_FRAME_HDR_SZ;
    281          
    282            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   7A07         MOV       R2,#0x7
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
   \   00002B   AE..         MOV       R6,?V4
   \   00002D   AF..         MOV       R7,?V5
    283            if ( epDesc )
   \   00002F   EA           MOV       A,R2
   \   000030   4F           ORL       A,R7
   \   000031   6041         JZ        ??MT_AfRegister_0
    284            {
    285              epDesc->task_id = &MT_TaskID;
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   74..         MOV       A,#MT_TaskID & 0xff
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   74..         MOV       A,#(MT_TaskID >> 8) & 0xff
   \   00003F   F0           MOVX      @DPTR,A
    286              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   000040                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   000040   EA           MOV       A,R2
   \   000041   FC           MOV       R4,A
   \   000042   EB           MOV       A,R3
   \   000043   FD           MOV       R5,A
   \   000044   E5..         MOV       A,?V0
   \   000046   2403         ADD       A,#0x3
   \   000048   FA           MOV       R2,A
   \   000049   E4           CLR       A
   \   00004A   35..         ADDC      A,?V1
   \   00004C   FB           MOV       R3,A
   \   00004D   12....       LCALL     `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   000050   E9           MOV       A,R1
   \   000051   85..82       MOV       DPL,?XSP + 0
   \   000054   85..83       MOV       DPH,?XSP + 1
   \   000057   F0           MOVX      @DPTR,A
    287              if ( retValue == ZSuccess )
   \   000058   E0           MOVX      A,@DPTR
   \   000059   700F         JNZ       ??MT_AfRegister_1
    288              {
    289                retValue = afRegister( epDesc );
   \   00005B                ; Setup parameters for call to function afRegister
   \   00005B   EE           MOV       A,R6
   \   00005C   FA           MOV       R2,A
   \   00005D   EF           MOV       A,R7
   \   00005E   FB           MOV       R3,A
   \   00005F   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   000062   E9           MOV       A,R1
   \   000063   85..82       MOV       DPL,?XSP + 0
   \   000066   85..83       MOV       DPH,?XSP + 1
   \   000069   F0           MOVX      @DPTR,A
    290              }
    291          
    292              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   6007         JZ        ??MT_AfRegister_0
    293              {
    294                osal_mem_free( epDesc );
   \   00006D                ; Setup parameters for call to function osal_mem_free
   \   00006D   EE           MOV       A,R6
   \   00006E   FA           MOV       R2,A
   \   00006F   EF           MOV       A,R7
   \   000070   FB           MOV       R3,A
   \   000071   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    295              }
    296            }
    297          
    298            /* Build and send back the response */
    299            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   000074                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000074   AC..         MOV       R4,?XSP + 0
   \   000076   AD..         MOV       R5,?XSP + 1
   \   000078   7B01         MOV       R3,#0x1
   \   00007A   AA..         MOV       R2,?V2
   \   00007C   7964         MOV       R1,#0x64
   \   00007E   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    300          }
   \   000081   7401         MOV       A,#0x1
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   \   000086   7F06         MOV       R7,#0x6
   \   000088   02....       LJMP      ?BANKED_LEAVE_XDATA
    301          
    302          /***************************************************************************************************
    303           * @fn      MT_AfDelete
    304           *
    305           * @brief   Process AF Delete Endpoint command
    306           *
    307           * @param   pBuf - pointer to the received buffer
    308           *
    309           * @return  none
    310           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    311          static void MT_AfDelete(uint8 *pBuf)
   \                     MT_AfDelete:
    312          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    313            uint8 cmdId;
    314            uint8 retValue = ZMemError;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7410         MOV       A,#0x10
   \   000012   F0           MOVX      @DPTR,A
    315          
    316            /* parse header */
    317            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FE           MOV       R6,A
    318            pBuf += MT_RPC_FRAME_HDR_SZ;
    319          
    320            retValue = afDelete( *pBuf );
   \   00001B                ; Setup parameters for call to function afDelete
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??afDelete::?relay`; Banked call to: afDelete
   \   000027   E9           MOV       A,R1
   \   000028   85..82       MOV       DPL,?XSP + 0
   \   00002B   85..83       MOV       DPH,?XSP + 1
   \   00002E   F0           MOVX      @DPTR,A
    321          
    322            /* Build and send back the response */
    323            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \   00002F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00002F   AC..         MOV       R4,?XSP + 0
   \   000031   AD..         MOV       R5,?XSP + 1
   \   000033   7B01         MOV       R3,#0x1
   \   000035   EE           MOV       A,R6
   \   000036   FA           MOV       R2,A
   \   000037   7964         MOV       R1,#0x64
   \   000039   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    324          }
   \   00003C   7401         MOV       A,#0x1
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   7F01         MOV       R7,#0x1
   \   000043   02....       LJMP      ?BANKED_LEAVE_XDATA
    325          
    326          /***************************************************************************************************
    327           * @fn      MT_AfDataRequest
    328           *
    329           * @brief   Process AF Register command
    330           *
    331           * @param   pBuf - pointer to the received buffer
    332           *
    333           * @return  none
    334           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    335          static void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    336          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV       A,#-0x15
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    337            #define MT_AF_REQ_MSG_LEN  10
    338            #define MT_AF_REQ_MSG_EXT  10
    339          
    340            endPointDesc_t *epDesc;
    341            afAddrType_t dstAddr;
    342            cId_t cId;
    343            uint8 transId, txOpts, radius;
    344            uint8 cmd0, cmd1;
    345            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
    346            uint16 dataLen, tempLen;
    347          
    348            /* Parse header */
    349            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V12,A
    350            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V9,A
    351            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000026   EA           MOV       A,R2
   \   000027   2403         ADD       A,#0x3
   \   000029   FE           MOV       R6,A
   \   00002A   5001         JNC       ??MT_AfDataRequest_0
   \   00002C   0F           INC       R7
    352          
    353            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002D   7402         MOV       A,#0x2
   \   00002F   65..         XRL       A,?V9
   \   000031   6003         JZ        $+5
   \   000033   02....       LJMP      ??MT_AfDataRequest_1 & 0xFFFF
    354            {
    355              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F8           MOV       R0,A
   \   00003C   C0E0         PUSH      A
   \   00003E   740A         MOV       A,#0xa
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   D0E0         POP       A
   \   000045   F0           MOVX      @DPTR,A
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   AE82         MOV       R6,DPL
   \   00004D   AF83         MOV       R7,DPH
    356          
    357              if (dstAddr.addrMode == afAddr64Bit)
   \   00004F   7403         MOV       A,#0x3
   \   000051   68           XRL       A,R0
   \   000052   701F         JNZ       ??MT_AfDataRequest_2
    358              {
    359                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   000054                ; Setup parameters for call to function osal_memcpy
   \   000054   8E..         MOV       ?V0,R6
   \   000056   8F..         MOV       ?V1,R7
   \   000058   75..00       MOV       ?V2,#0x0
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000060   7C08         MOV       R4,#0x8
   \   000062   7D00         MOV       R5,#0x0
   \   000064   7405         MOV       A,#0x5
   \   000066   12....       LCALL     ?XSTACK_DISP101_8
   \   000069   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006C   7403         MOV       A,#0x3
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   8011         SJMP      ??MT_AfDataRequest_3
    360              }
    361              else
    362              {
    363                dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequest_2:
   \   000073                ; Setup parameters for call to function osal_build_uint16
   \   000073   EE           MOV       A,R6
   \   000074   FA           MOV       R2,A
   \   000075   EF           MOV       A,R7
   \   000076   FB           MOV       R3,A
   \   000077   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00007A   7402         MOV       A,#0x2
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   EA           MOV       A,R2
   \   000080   F0           MOVX      @DPTR,A
   \   000081   A3           INC       DPTR
   \   000082   EB           MOV       A,R3
   \   000083   F0           MOVX      @DPTR,A
    364              }
    365              pBuf += Z_EXTADDR_LEN;
    366          
    367              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_3:
   \   000084   8E82         MOV       DPL,R6
   \   000086   8F83         MOV       DPH,R7
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C0E0         PUSH      A
   \   000093   740B         MOV       A,#0xb
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   D0E0         POP       A
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   EE           MOV       A,R6
   \   00009C   2409         ADD       A,#0x9
   \   00009E   FE           MOV       R6,A
   \   00009F   5001         JNC       ??MT_AfDataRequest_4
   \   0000A1   0F           INC       R7
    368              dstAddr.panId = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequest_4:
   \   0000A2                ; Setup parameters for call to function osal_build_uint16
   \   0000A2   FA           MOV       R2,A
   \   0000A3   EF           MOV       A,R7
   \   0000A4   FB           MOV       R3,A
   \   0000A5   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000A8   740C         MOV       A,#0xc
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   EA           MOV       A,R2
   \   0000AE   F0           MOVX      @DPTR,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   EB           MOV       A,R3
   \   0000B1   F0           MOVX      @DPTR,A
    369              pBuf += 2;
   \   0000B2   EE           MOV       A,R6
   \   0000B3   2402         ADD       A,#0x2
   \   0000B5   FE           MOV       R6,A
   \   0000B6   503E         JNC       ??MT_AfDataRequest_5
   \   0000B8   0F           INC       R7
   \   0000B9   803B         SJMP      ??MT_AfDataRequest_5
    370            }
    371            else
    372            {
    373              /* Destination address */
    374              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000BB   740A         MOV       A,#0xa
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   7402         MOV       A,#0x2
   \   0000C2   F0           MOVX      @DPTR,A
    375              dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   0000C3                ; Setup parameters for call to function osal_build_uint16
   \   0000C3   0A           INC       R2
   \   0000C4   0A           INC       R2
   \   0000C5   0A           INC       R2
   \   0000C6   EF           MOV       A,R7
   \   0000C7   FB           MOV       R3,A
   \   0000C8   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000CB   7402         MOV       A,#0x2
   \   0000CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D0   EA           MOV       A,R2
   \   0000D1   F0           MOVX      @DPTR,A
   \   0000D2   A3           INC       DPTR
   \   0000D3   EB           MOV       A,R3
   \   0000D4   F0           MOVX      @DPTR,A
    376              pBuf += 2;
    377          
    378              /* Destination endpoint */
    379              dstAddr.endPoint = *pBuf++;
   \   0000D5   8E82         MOV       DPL,R6
   \   0000D7   8F83         MOV       DPH,R7
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   C0E0         PUSH      A
   \   0000DE   740B         MOV       A,#0xb
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   D0E0         POP       A
   \   0000E5   F0           MOVX      @DPTR,A
   \   0000E6   EE           MOV       A,R6
   \   0000E7   2403         ADD       A,#0x3
   \   0000E9   FE           MOV       R6,A
   \   0000EA   5001         JNC       ??MT_AfDataRequest_6
   \   0000EC   0F           INC       R7
    380              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_6:
   \   0000ED   740C         MOV       A,#0xc
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   E4           CLR       A
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   F0           MOVX      @DPTR,A
    381            }
    382          
    383            /* Source endpoint */
    384            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_5:
   \   0000F6                ; Setup parameters for call to function afFindEndPointDesc
   \   0000F6   8E82         MOV       DPL,R6
   \   0000F8   8F83         MOV       DPH,R7
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   F9           MOV       R1,A
   \   0000FC   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000FF   8A..         MOV       ?V10,R2
   \   000101   8B..         MOV       ?V11,R3
   \   000103   8E82         MOV       DPL,R6
   \   000105   8F83         MOV       DPH,R7
   \   000107   A3           INC       DPTR
   \   000108   AE82         MOV       R6,DPL
   \   00010A   AF83         MOV       R7,DPH
    385          
    386            /* ClusterId */
    387            cId = osal_build_uint16( pBuf );
   \   00010C                ; Setup parameters for call to function osal_build_uint16
   \   00010C   EE           MOV       A,R6
   \   00010D   FA           MOV       R2,A
   \   00010E   EF           MOV       A,R7
   \   00010F   FB           MOV       R3,A
   \   000110   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000113   8A..         MOV       ?V2,R2
   \   000115   8B..         MOV       ?V3,R3
    388            pBuf +=2;
    389          
    390            /* TransId */
    391            transId = *pBuf++;
   \   000117   8E82         MOV       DPL,R6
   \   000119   8F83         MOV       DPH,R7
   \   00011B   A3           INC       DPTR
   \   00011C   A3           INC       DPTR
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   C0E0         PUSH      A
   \   000120   7401         MOV       A,#0x1
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   D0E0         POP       A
   \   000127   F0           MOVX      @DPTR,A
    392          
    393            /* TxOption */
    394            txOpts = *pBuf++;
   \   000128   8E82         MOV       DPL,R6
   \   00012A   8F83         MOV       DPH,R7
   \   00012C   A3           INC       DPTR
   \   00012D   A3           INC       DPTR
   \   00012E   A3           INC       DPTR
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   F5..         MOV       ?V8,A
    395          
    396            /* Radius */
    397            radius = *pBuf++;
   \   000132   8E82         MOV       DPL,R6
   \   000134   8F83         MOV       DPH,R7
   \   000136   A3           INC       DPTR
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   F5..         MOV       ?V7,A
   \   00013D   EE           MOV       A,R6
   \   00013E   2405         ADD       A,#0x5
   \   000140   FE           MOV       R6,A
   \   000141   5001         JNC       ??MT_AfDataRequest_7
   \   000143   0F           INC       R7
    398          
    399            /* Length */
    400            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_7:
   \   000144   7402         MOV       A,#0x2
   \   000146   65..         XRL       A,?V9
   \   000148   701C         JNZ       ??MT_AfDataRequest_8
    401            {
    402              dataLen = osal_build_uint16( pBuf );
   \   00014A                ; Setup parameters for call to function osal_build_uint16
   \   00014A   EE           MOV       A,R6
   \   00014B   FA           MOV       R2,A
   \   00014C   EF           MOV       A,R7
   \   00014D   FB           MOV       R3,A
   \   00014E   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000151   8A..         MOV       ?V0,R2
   \   000153   8B..         MOV       ?V1,R3
    403              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   000155   EA           MOV       A,R2
   \   000156   2414         ADD       A,#0x14
   \   000158   F8           MOV       R0,A
   \   000159   E4           CLR       A
   \   00015A   35..         ADDC      A,?V1
   \   00015C   F9           MOV       R1,A
    404              pBuf += 2;
   \   00015D   EE           MOV       A,R6
   \   00015E   2402         ADD       A,#0x2
   \   000160   FE           MOV       R6,A
   \   000161   5018         JNC       ??MT_AfDataRequest_9
   \   000163   0F           INC       R7
   \   000164   8015         SJMP      ??MT_AfDataRequest_9
    405            }
    406            else
    407            {
    408              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_8:
   \   000166   8E82         MOV       DPL,R6
   \   000168   8F83         MOV       DPH,R7
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   F5..         MOV       ?V0,A
   \   00016D   75..00       MOV       ?V1,#0x0
   \   000170   A3           INC       DPTR
   \   000171   0E           INC       R6
   \   000172   AF83         MOV       R7,DPH
    409              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   000174   240A         ADD       A,#0xa
   \   000176   F8           MOV       R0,A
   \   000177   E4           CLR       A
   \   000178   3400         ADDC      A,#0x0
   \   00017A   F9           MOV       R1,A
    410            }
    411          
    412            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_9:
   \   00017B   E5..         MOV       A,?V10
   \   00017D   45..         ORL       A,?V11
   \   00017F   6018         JZ        ??MT_AfDataRequest_10
    413            {
    414              retValue = afStatus_INVALID_PARAMETER;
    415            }
    416            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   000181   C3           CLR       C
   \   000182   E8           MOV       A,R0
   \   000183   94FB         SUBB      A,#-0x5
   \   000185   E9           MOV       A,R1
   \   000186   9400         SUBB      A,#0x0
   \   000188   5003         JNC       $+5
   \   00018A   02....       LJMP      ??MT_AfDataRequest_11 & 0xFFFF
    417            {
    418              if (pMtAfDataReq != NULL)
   \   00018D   90....       MOV       DPTR,#pMtAfDataReq
   \   000190   E0           MOVX      A,@DPTR
   \   000191   F8           MOV       R0,A
   \   000192   A3           INC       DPTR
   \   000193   E0           MOVX      A,@DPTR
   \   000194   F9           MOV       R1,A
   \   000195   E8           MOV       A,R0
   \   000196   49           ORL       A,R1
   \   000197   600B         JZ        ??MT_AfDataRequest_12
    419              {
    420                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_10:
   \   000199   85..82       MOV       DPL,?XSP + 0
   \   00019C   85..83       MOV       DPH,?XSP + 1
   \   00019F   7402         MOV       A,#0x2
   \   0001A1   02....       LJMP      ??MT_AfDataRequest_13 & 0xFFFF
    421              }
    422              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_12:
   \   0001A4                ; Setup parameters for call to function osal_mem_alloc
   \   0001A4   E5..         MOV       A,?V0
   \   0001A6   2418         ADD       A,#0x18
   \   0001A8   FA           MOV       R2,A
   \   0001A9   E4           CLR       A
   \   0001AA   35..         ADDC      A,?V1
   \   0001AC   FB           MOV       R3,A
   \   0001AD   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001B0   90....       MOV       DPTR,#pMtAfDataReq
   \   0001B3   EA           MOV       A,R2
   \   0001B4   F0           MOVX      @DPTR,A
   \   0001B5   A3           INC       DPTR
   \   0001B6   EB           MOV       A,R3
   \   0001B7   F0           MOVX      @DPTR,A
   \   0001B8   90....       MOV       DPTR,#pMtAfDataReq
   \   0001BB   E0           MOVX      A,@DPTR
   \   0001BC   F8           MOV       R0,A
   \   0001BD   A3           INC       DPTR
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   F9           MOV       R1,A
   \   0001C0   E8           MOV       A,R0
   \   0001C1   49           ORL       A,R1
   \   0001C2   85..82       MOV       DPL,?XSP + 0
   \   0001C5   85..83       MOV       DPH,?XSP + 1
   \   0001C8   7005         JNZ       ??MT_AfDataRequest_14
    423              {
    424                retValue = afStatus_MEM_FAIL;
   \   0001CA   7410         MOV       A,#0x10
   \   0001CC   02....       LJMP      ??MT_AfDataRequest_13 & 0xFFFF
    425              }
    426              else
    427              {
    428                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_14:
   \   0001CF   E4           CLR       A
   \   0001D0   F0           MOVX      @DPTR,A
    429          
    430                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   0001D1   90....       MOV       DPTR,#pMtAfDataReq
   \   0001D4   E0           MOVX      A,@DPTR
   \   0001D5   2418         ADD       A,#0x18
   \   0001D7   FA           MOV       R2,A
   \   0001D8   A3           INC       DPTR
   \   0001D9   E0           MOVX      A,@DPTR
   \   0001DA   3400         ADDC      A,#0x0
   \   0001DC   FB           MOV       R3,A
   \   0001DD   90....       MOV       DPTR,#pMtAfDataReq
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   F8           MOV       R0,A
   \   0001E2   A3           INC       DPTR
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   F583         MOV       DPH,A
   \   0001E6   8882         MOV       DPL,R0
   \   0001E8   EA           MOV       A,R2
   \   0001E9   F0           MOVX      @DPTR,A
   \   0001EA   A3           INC       DPTR
   \   0001EB   EB           MOV       A,R3
   \   0001EC   F0           MOVX      @DPTR,A
    431                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001ED                ; Setup parameters for call to function osal_memcpy
   \   0001ED   7402         MOV       A,#0x2
   \   0001EF   12....       LCALL     ?XSTACK_DISP100_8
   \   0001F2   88..         MOV       ?V4,R0
   \   0001F4   89..         MOV       ?V5,R1
   \   0001F6   75..00       MOV       ?V6,#0x0
   \   0001F9   78..         MOV       R0,#?V4
   \   0001FB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001FE   7C0C         MOV       R4,#0xc
   \   000200   7D00         MOV       R5,#0x0
   \   000202   90....       MOV       DPTR,#pMtAfDataReq
   \   000205   E0           MOVX      A,@DPTR
   \   000206   2402         ADD       A,#0x2
   \   000208   FA           MOV       R2,A
   \   000209   A3           INC       DPTR
   \   00020A   E0           MOVX      A,@DPTR
   \   00020B   3400         ADDC      A,#0x0
   \   00020D   FB           MOV       R3,A
   \   00020E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000211   7403         MOV       A,#0x3
   \   000213   12....       LCALL     ?DEALLOC_XSTACK8
    432                pMtAfDataReq->epDesc = epDesc;
   \   000216   90....       MOV       DPTR,#pMtAfDataReq
   \   000219   E0           MOVX      A,@DPTR
   \   00021A   F8           MOV       R0,A
   \   00021B   A3           INC       DPTR
   \   00021C   E0           MOVX      A,@DPTR
   \   00021D   C8           XCH       A,R0
   \   00021E   240E         ADD       A,#0xe
   \   000220   F582         MOV       DPL,A
   \   000222   E4           CLR       A
   \   000223   38           ADDC      A,R0
   \   000224   F583         MOV       DPH,A
   \   000226   E5..         MOV       A,?V10
   \   000228   F0           MOVX      @DPTR,A
   \   000229   A3           INC       DPTR
   \   00022A   E5..         MOV       A,?V11
   \   00022C   F0           MOVX      @DPTR,A
    433                pMtAfDataReq->cId = cId;
   \   00022D   90....       MOV       DPTR,#pMtAfDataReq
   \   000230   E0           MOVX      A,@DPTR
   \   000231   F8           MOV       R0,A
   \   000232   A3           INC       DPTR
   \   000233   E0           MOVX      A,@DPTR
   \   000234   C8           XCH       A,R0
   \   000235   2410         ADD       A,#0x10
   \   000237   F582         MOV       DPL,A
   \   000239   E4           CLR       A
   \   00023A   38           ADDC      A,R0
   \   00023B   F583         MOV       DPH,A
   \   00023D   E5..         MOV       A,?V2
   \   00023F   F0           MOVX      @DPTR,A
   \   000240   A3           INC       DPTR
   \   000241   E5..         MOV       A,?V3
   \   000243   F0           MOVX      @DPTR,A
    434                pMtAfDataReq->dataLen = dataLen;
   \   000244   90....       MOV       DPTR,#pMtAfDataReq
   \   000247   E0           MOVX      A,@DPTR
   \   000248   F8           MOV       R0,A
   \   000249   A3           INC       DPTR
   \   00024A   E0           MOVX      A,@DPTR
   \   00024B   C8           XCH       A,R0
   \   00024C   2412         ADD       A,#0x12
   \   00024E   F582         MOV       DPL,A
   \   000250   E4           CLR       A
   \   000251   38           ADDC      A,R0
   \   000252   F583         MOV       DPH,A
   \   000254   E5..         MOV       A,?V0
   \   000256   F0           MOVX      @DPTR,A
   \   000257   A3           INC       DPTR
   \   000258   E5..         MOV       A,?V1
   \   00025A   F0           MOVX      @DPTR,A
    435                pMtAfDataReq->transId = transId;
   \   00025B   7401         MOV       A,#0x1
   \   00025D   12....       LCALL     ?XSTACK_DISP0_8
   \   000260   E0           MOVX      A,@DPTR
   \   000261   C0E0         PUSH      A
   \   000263   90....       MOV       DPTR,#pMtAfDataReq
   \   000266   E0           MOVX      A,@DPTR
   \   000267   F8           MOV       R0,A
   \   000268   A3           INC       DPTR
   \   000269   E0           MOVX      A,@DPTR
   \   00026A   C8           XCH       A,R0
   \   00026B   2414         ADD       A,#0x14
   \   00026D   F582         MOV       DPL,A
   \   00026F   E4           CLR       A
   \   000270   38           ADDC      A,R0
   \   000271   F583         MOV       DPH,A
   \   000273   D0E0         POP       A
   \   000275   F0           MOVX      @DPTR,A
    436                pMtAfDataReq->txOpts = txOpts;
   \   000276   90....       MOV       DPTR,#pMtAfDataReq
   \   000279   E0           MOVX      A,@DPTR
   \   00027A   F8           MOV       R0,A
   \   00027B   A3           INC       DPTR
   \   00027C   E0           MOVX      A,@DPTR
   \   00027D   C8           XCH       A,R0
   \   00027E   2415         ADD       A,#0x15
   \   000280   F582         MOV       DPL,A
   \   000282   E4           CLR       A
   \   000283   38           ADDC      A,R0
   \   000284   F583         MOV       DPH,A
   \   000286   E5..         MOV       A,?V8
   \   000288   F0           MOVX      @DPTR,A
    437                pMtAfDataReq->radius = radius;
   \   000289   90....       MOV       DPTR,#pMtAfDataReq
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   F8           MOV       R0,A
   \   00028E   A3           INC       DPTR
   \   00028F   E0           MOVX      A,@DPTR
   \   000290   C8           XCH       A,R0
   \   000291   2416         ADD       A,#0x16
   \   000293   F582         MOV       DPL,A
   \   000295   E4           CLR       A
   \   000296   38           ADDC      A,R0
   \   000297   F583         MOV       DPH,A
   \   000299   E5..         MOV       A,?V7
   \   00029B   F0           MOVX      @DPTR,A
    438          
    439                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    440                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \   00029C   90....       MOV       DPTR,#pMtAfDataReq
   \   00029F   E0           MOVX      A,@DPTR
   \   0002A0   F8           MOV       R0,A
   \   0002A1   A3           INC       DPTR
   \   0002A2   E0           MOVX      A,@DPTR
   \   0002A3   C8           XCH       A,R0
   \   0002A4   2417         ADD       A,#0x17
   \   0002A6   F582         MOV       DPL,A
   \   0002A8   E4           CLR       A
   \   0002A9   38           ADDC      A,R0
   \   0002AA   F583         MOV       DPH,A
   \   0002AC   740F         MOV       A,#0xf
   \   0002AE   F0           MOVX      @DPTR,A
    441                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   0002AF                ; Setup parameters for call to function osal_start_timerEx
   \   0002AF   90....       MOV       DPTR,#__Constant_3e8
   \   0002B2   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0002B5   7A08         MOV       R2,#0x8
   \   0002B7   7B00         MOV       R3,#0x0
   \   0002B9   90....       MOV       DPTR,#MT_TaskID
   \   0002BC   E0           MOVX      A,@DPTR
   \   0002BD   F9           MOV       R1,A
   \   0002BE   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002C1   7404         MOV       A,#0x4
   \   0002C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002C6   E9           MOV       A,R1
   \   0002C7   6053         JZ        ??MT_AfDataRequest_15
    442                {
    443                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   0002C9                ; Setup parameters for call to function osal_set_event
   \   0002C9   7A08         MOV       R2,#0x8
   \   0002CB   7B00         MOV       R3,#0x0
   \   0002CD   90....       MOV       DPTR,#MT_TaskID
   \   0002D0   E0           MOVX      A,@DPTR
   \   0002D1   F9           MOV       R1,A
   \   0002D2   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0002D5   8045         SJMP      ??MT_AfDataRequest_15
    444                }
    445              }
    446            }
    447            else
    448            {
    449              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_11:
   \   0002D7                ; Setup parameters for call to function AF_DataRequest
   \   0002D7   E5..         MOV       A,?V7
   \   0002D9   F5..         MOV       ?V4,A
   \   0002DB   78..         MOV       R0,#?V4
   \   0002DD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002E0   7402         MOV       A,#0x2
   \   0002E2   12....       LCALL     ?XSTACK_DISP100_8
   \   0002E5   88..         MOV       ?V4,R0
   \   0002E7   89..         MOV       ?V5,R1
   \   0002E9   78..         MOV       R0,#?V4
   \   0002EB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002EE   8E..         MOV       ?V4,R6
   \   0002F0   8F..         MOV       ?V5,R7
   \   0002F2   78..         MOV       R0,#?V4
   \   0002F4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002F7   78..         MOV       R0,#?V0
   \   0002F9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002FC   78..         MOV       R0,#?V2
   \   0002FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000301   A9..         MOV       R1,?V8
   \   000303   AC..         MOV       R4,?V10
   \   000305   AD..         MOV       R5,?V11
   \   000307   740B         MOV       A,#0xb
   \   000309   12....       LCALL     ?XSTACK_DISP101_8
   \   00030C   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00030F   7409         MOV       A,#0x9
   \   000311   12....       LCALL     ?DEALLOC_XSTACK8
   \   000314   E9           MOV       A,R1
   \   000315   85..82       MOV       DPL,?XSP + 0
   \   000318   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequest_13:
   \   00031B   F0           MOVX      @DPTR,A
    450            }
    451          
    452            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_15:
   \   00031C   74E0         MOV       A,#-0x20
   \   00031E   55..         ANL       A,?V12
   \   000320   6420         XRL       A,#0x20
   \   000322   700D         JNZ       ??MT_AfDataRequest_16
    453            {
    454              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   000324                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000324   AC..         MOV       R4,?XSP + 0
   \   000326   AD..         MOV       R5,?XSP + 1
   \   000328   7B01         MOV       R3,#0x1
   \   00032A   AA..         MOV       R2,?V9
   \   00032C   7964         MOV       R1,#0x64
   \   00032E   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    455            }
    456          }
   \                     ??MT_AfDataRequest_16:
   \   000331   740E         MOV       A,#0xe
   \   000333   12....       LCALL     ?DEALLOC_XSTACK8
   \   000336   7F0D         MOV       R7,#0xd
   \   000338   02....       LJMP      ?BANKED_LEAVE_XDATA
    457          
    458          #if defined( ZIGBEEPRO )
    459          /***************************************************************************************************
    460           * @fn      MT_AfDataRequestSrcRtg
    461           *
    462           * @brief   Process AF Register command
    463           *
    464           * @param   pBuf - pointer to the received buffer
    465           *
    466           * @return  none
    467           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          static void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    469          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    470            uint8 cmdId, dataLen = 0;
    471            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
    472            endPointDesc_t *epDesc;
    473            byte transId;
    474            afAddrType_t dstAddr;
    475            cId_t cId;
    476            byte txOpts, radius, srcEP, relayCnt;
    477            uint16 *pRelayList;
    478            uint8 i;
    479          
    480            /* parse header */
    481            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V6,A
    482            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001E   EA           MOV       A,R2
   \   00001F   2403         ADD       A,#0x3
   \   000021   FE           MOV       R6,A
   \   000022   5001         JNC       ??MT_AfDataRequestSrcRtg_0
   \   000024   0F           INC       R7
    483          
    484            /* Destination address */
    485            /* Initialize the panID field to zero to avoid inter-pan */
    486            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   000025                ; Setup parameters for call to function osal_memset
   \   000025   7C0C         MOV       R4,#0xc
   \   000027   7D00         MOV       R5,#0x0
   \   000029   7900         MOV       R1,#0x0
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP101_8
   \   000030   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    487            dstAddr.addrMode = afAddr16Bit;
   \   000033   740A         MOV       A,#0xa
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   7402         MOV       A,#0x2
   \   00003A   F0           MOVX      @DPTR,A
    488            dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   00003B                ; Setup parameters for call to function osal_build_uint16
   \   00003B   EE           MOV       A,R6
   \   00003C   FA           MOV       R2,A
   \   00003D   EF           MOV       A,R7
   \   00003E   FB           MOV       R3,A
   \   00003F   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   EA           MOV       A,R2
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   EB           MOV       A,R3
   \   00004B   F0           MOVX      @DPTR,A
    489            pBuf += 2;
    490          
    491            /* Destination endpoint */
    492            dstAddr.endPoint = *pBuf++;
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   C0E0         PUSH      A
   \   000055   740B         MOV       A,#0xb
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   D0E0         POP       A
   \   00005C   F0           MOVX      @DPTR,A
    493          
    494            /* Source endpoint */
    495            srcEP = *pBuf++;
   \   00005D   8E82         MOV       DPL,R6
   \   00005F   8F83         MOV       DPH,R7
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F9           MOV       R1,A
   \   000066   EE           MOV       A,R6
   \   000067   2404         ADD       A,#0x4
   \   000069   FE           MOV       R6,A
   \   00006A   5001         JNC       ??MT_AfDataRequestSrcRtg_1
   \   00006C   0F           INC       R7
    496            epDesc = afFindEndPointDesc( srcEP );
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00006D                ; Setup parameters for call to function afFindEndPointDesc
   \   00006D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000070   8A..         MOV       ?V2,R2
   \   000072   8B..         MOV       ?V3,R3
    497          
    498            /* ClusterId */
    499            cId = osal_build_uint16( pBuf );
   \   000074                ; Setup parameters for call to function osal_build_uint16
   \   000074   EE           MOV       A,R6
   \   000075   FA           MOV       R2,A
   \   000076   EF           MOV       A,R7
   \   000077   FB           MOV       R3,A
   \   000078   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00007B   8A..         MOV       ?V4,R2
   \   00007D   8B..         MOV       ?V5,R3
    500            pBuf +=2;
    501          
    502            /* TransId */
    503            transId = *pBuf++;
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   C0E0         PUSH      A
   \   000088   7401         MOV       A,#0x1
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   D0E0         POP       A
   \   00008F   F0           MOVX      @DPTR,A
    504          
    505            /* TxOption */
    506            txOpts = *pBuf++;
   \   000090   8E82         MOV       DPL,R6
   \   000092   8F83         MOV       DPH,R7
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F5..         MOV       ?V7,A
    507          
    508            /* Radius */
    509            radius = *pBuf++;
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F5..         MOV       ?V8,A
    510          
    511            /* Source route relay count */
    512            relayCnt = *pBuf++;
   \   0000A5   8E82         MOV       DPL,R6
   \   0000A7   8F83         MOV       DPH,R7
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   F5..         MOV       ?V9,A
   \   0000B1   EE           MOV       A,R6
   \   0000B2   2406         ADD       A,#0x6
   \   0000B4   FE           MOV       R6,A
   \   0000B5   5001         JNC       ??MT_AfDataRequestSrcRtg_2
   \   0000B7   0F           INC       R7
    513          
    514            /* Convert the source route relay list */
    515            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   0000B8                ; Setup parameters for call to function osal_mem_alloc
   \   0000B8   AA..         MOV       R2,?V9
   \   0000BA   EA           MOV       A,R2
   \   0000BB   2A           ADD       A,R2
   \   0000BC   FA           MOV       R2,A
   \   0000BD   E4           CLR       A
   \   0000BE   33           RLC       A
   \   0000BF   FB           MOV       R3,A
   \   0000C0   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C3   8A..         MOV       ?V0,R2
   \   0000C5   8B..         MOV       ?V1,R3
   \   0000C7   EA           MOV       A,R2
   \   0000C8   4B           ORL       A,R3
   \   0000C9   7003         JNZ       $+5
   \   0000CB   02....       LJMP      ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    516            {
    517              for( i = 0; i < relayCnt; i++ )
   \   0000CE   75..00       MOV       ?V10,#0x0
   \   0000D1   8027         SJMP      ??MT_AfDataRequestSrcRtg_4
    518              {
    519                pRelayList[i] = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000D3                ; Setup parameters for call to function osal_build_uint16
   \   0000D3   EE           MOV       A,R6
   \   0000D4   FA           MOV       R2,A
   \   0000D5   EF           MOV       A,R7
   \   0000D6   FB           MOV       R3,A
   \   0000D7   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000DA   A8..         MOV       R0,?V10
   \   0000DC   E8           MOV       A,R0
   \   0000DD   28           ADD       A,R0
   \   0000DE   F8           MOV       R0,A
   \   0000DF   E4           CLR       A
   \   0000E0   33           RLC       A
   \   0000E1   F9           MOV       R1,A
   \   0000E2   E5..         MOV       A,?V0
   \   0000E4   28           ADD       A,R0
   \   0000E5   F582         MOV       DPL,A
   \   0000E7   E5..         MOV       A,?V1
   \   0000E9   39           ADDC      A,R1
   \   0000EA   F583         MOV       DPH,A
   \   0000EC   EA           MOV       A,R2
   \   0000ED   F0           MOVX      @DPTR,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   EB           MOV       A,R3
   \   0000F0   F0           MOVX      @DPTR,A
    520                pBuf += 2;
   \   0000F1   EE           MOV       A,R6
   \   0000F2   2402         ADD       A,#0x2
   \   0000F4   FE           MOV       R6,A
   \   0000F5   5001         JNC       ??MT_AfDataRequestSrcRtg_6
   \   0000F7   0F           INC       R7
    521              }
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0000F8   05..         INC       ?V10
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   0000FA   E5..         MOV       A,?V10
   \   0000FC   C3           CLR       C
   \   0000FD   95..         SUBB      A,?V9
   \   0000FF   40D2         JC        ??MT_AfDataRequestSrcRtg_5
    522          
    523              /* Data payload Length */
    524              dataLen = *pBuf++;
   \   000101   8E82         MOV       DPL,R6
   \   000103   8F83         MOV       DPH,R7
   \   000105   E0           MOVX      A,@DPTR
   \   000106   FA           MOV       R2,A
   \   000107   A3           INC       DPTR
   \   000108   AE82         MOV       R6,DPL
   \   00010A   AF83         MOV       R7,DPH
    525          
    526              if ( epDesc == NULL )
   \   00010C   E5..         MOV       A,?V2
   \   00010E   45..         ORL       A,?V3
   \   000110   700A         JNZ       ??MT_AfDataRequestSrcRtg_7
    527              {
    528                retValue = afStatus_INVALID_PARAMETER;
   \   000112   85..82       MOV       DPL,?XSP + 0
   \   000115   85..83       MOV       DPH,?XSP + 1
   \   000118   7402         MOV       A,#0x2
   \   00011A   8050         SJMP      ??MT_AfDataRequestSrcRtg_8
    529              }
    530              else
    531              {
    532                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    533                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   00011C                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   00011C   78..         MOV       R0,#?V0
   \   00011E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000121   78..         MOV       R0,#?V9
   \   000123   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000126   78..         MOV       R0,#?V8
   \   000128   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012B   7405         MOV       A,#0x5
   \   00012D   12....       LCALL     ?XSTACK_DISP100_8
   \   000130   88..         MOV       ?V8,R0
   \   000132   89..         MOV       ?V9,R1
   \   000134   78..         MOV       R0,#?V8
   \   000136   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000139   8E..         MOV       ?V8,R6
   \   00013B   8F..         MOV       ?V9,R7
   \   00013D   78..         MOV       R0,#?V8
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000142   EA           MOV       A,R2
   \   000143   F5..         MOV       ?V8,A
   \   000145   75..00       MOV       ?V9,#0x0
   \   000148   78..         MOV       R0,#?V8
   \   00014A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014D   78..         MOV       R0,#?V4
   \   00014F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000152   A9..         MOV       R1,?V7
   \   000154   AC..         MOV       R4,?V2
   \   000156   AD..         MOV       R5,?V3
   \   000158   740E         MOV       A,#0xe
   \   00015A   12....       LCALL     ?XSTACK_DISP101_8
   \   00015D   12....       LCALL     `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   000160   740C         MOV       A,#0xc
   \   000162   12....       LCALL     ?DEALLOC_XSTACK8
   \   000165   E9           MOV       A,R1
   \   000166   85..82       MOV       DPL,?XSP + 0
   \   000169   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   00016C   F0           MOVX      @DPTR,A
    534              }
    535          
    536              /* Free the memory allocated */
    537              osal_mem_free( pRelayList );
   \   00016D                ; Setup parameters for call to function osal_mem_free
   \   00016D   AA..         MOV       R2,?V0
   \   00016F   AB..         MOV       R3,?V1
   \   000171   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000174   8009         SJMP      ??MT_AfDataRequestSrcRtg_9
    538            }
    539            else
    540            {
    541              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   000176   85..82       MOV       DPL,?XSP + 0
   \   000179   85..83       MOV       DPH,?XSP + 1
   \   00017C   7410         MOV       A,#0x10
   \   00017E   F0           MOVX      @DPTR,A
    542            }
    543          
    544          
    545            /* Build and send back the response */
    546            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   00017F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00017F   AC..         MOV       R4,?XSP + 0
   \   000181   AD..         MOV       R5,?XSP + 1
   \   000183   7B01         MOV       R3,#0x1
   \   000185   AA..         MOV       R2,?V6
   \   000187   7964         MOV       R1,#0x64
   \   000189   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    547          }
   \   00018C   740E         MOV       A,#0xe
   \   00018E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000191   7F0C         MOV       R7,#0xc
   \   000193   02....       LJMP      ?BANKED_LEAVE_XDATA
    548          #endif
    549          
    550          #if defined INTER_PAN
    551          /***************************************************************************************************
    552           * @fn      MT_AfInterPanCtl
    553           *
    554           * @brief   Process the AF Inter Pan control command.
    555           *
    556           * @param   pBuf - pointer to the received buffer
    557           *
    558           * @return  none
    559           ***************************************************************************************************/
    560          static void MT_AfInterPanCtl(uint8 *pBuf)
    561          {
    562            uint8 cmd, rtrn;
    563            uint16 panId;
    564            endPointDesc_t *pEP;
    565          
    566            cmd = pBuf[MT_RPC_POS_CMD1];
    567            pBuf += MT_RPC_FRAME_HDR_SZ;
    568          
    569            switch (*pBuf++)  // Inter-pan request parameter.
    570            {
    571            case InterPanClr:
    572              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    573              break;
    574          
    575            case InterPanSet:
    576              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    577              break;
    578          
    579            case InterPanReg:
    580              if ((pEP = afFindEndPointDesc(*pBuf)))
    581              {
    582                StubAPS_RegisterApp(pEP);
    583                rtrn = SUCCESS;
    584              }
    585              else
    586              {
    587                rtrn = FAILURE;
    588              }
    589              break;
    590          
    591            case InterPanChk:
    592              panId = osal_build_uint16( pBuf );
    593              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    594              break;
    595          
    596            default:
    597              rtrn = afStatus_INVALID_PARAMETER;
    598              break;
    599            }
    600          
    601            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    602          }
    603          #endif
    604          
    605          /***************************************************************************************************
    606           * @fn      MT_AfDataConfirm
    607           *
    608           * @brief   Process
    609           *
    610           * @param   pBuf - pointer to the received buffer
    611           *
    612           * @return  none
    613           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    614          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    615          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    616            uint8 retArray[3];
    617          
    618            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   F0           MOVX      @DPTR,A
    619            retArray[1] = pMsg->endpoint;
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   C0E0         PUSH      A
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   D0E0         POP       A
   \   000026   F0           MOVX      @DPTR,A
    620            retArray[2] = pMsg->transID;
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   C0E0         PUSH      A
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   D0E0         POP       A
   \   000038   F0           MOVX      @DPTR,A
    621          
    622            /* Build and send back the response */
    623            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000039                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000039   AC..         MOV       R4,?XSP + 0
   \   00003B   AD..         MOV       R5,?XSP + 1
   \   00003D   7B03         MOV       R3,#0x3
   \   00003F   7A80         MOV       R2,#-0x80
   \   000041   7944         MOV       R1,#0x44
   \   000043   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    624          }
   \   000046   7403         MOV       A,#0x3
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   D083         POP       DPH
   \   00004D   D082         POP       DPL
   \   00004F   02....       LJMP      ?BRET
    625          
    626          /***************************************************************************************************
    627           * @fn      MT_AfReflectError
    628           *
    629           * @brief   Process
    630           *
    631           * @param   pBuf - pointer to the received buffer
    632           *
    633           * @return  none
    634           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    635          void MT_AfReflectError(afReflectError_t *pMsg)
   \                     MT_AfReflectError:
    636          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 6
   \   000004   74FA         MOV       A,#-0x6
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    637            uint8 retArray[6];
    638          
    639            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   F0           MOVX      @DPTR,A
    640            retArray[1] = pMsg->endpoint;
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   C0E0         PUSH      A
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   D0E0         POP       A
   \   000026   F0           MOVX      @DPTR,A
    641            retArray[2] = pMsg->transID;
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   C0E0         PUSH      A
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   D0E0         POP       A
   \   000038   F0           MOVX      @DPTR,A
    642            retArray[3] = pMsg->dstAddrMode;
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   C0E0         PUSH      A
   \   000044   7403         MOV       A,#0x3
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   D0E0         POP       A
   \   00004B   F0           MOVX      @DPTR,A
    643            retArray[4] = LO_UINT16( pMsg->dstAddr );
   \   00004C   EA           MOV       A,R2
   \   00004D   2405         ADD       A,#0x5
   \   00004F   F8           MOV       R0,A
   \   000050   E4           CLR       A
   \   000051   3B           ADDC      A,R3
   \   000052   F9           MOV       R1,A
   \   000053   8882         MOV       DPL,R0
   \   000055   F583         MOV       DPH,A
   \   000057   E0           MOVX      A,@DPTR
   \   000058   C0E0         PUSH      A
   \   00005A   7404         MOV       A,#0x4
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   D0E0         POP       A
   \   000061   F0           MOVX      @DPTR,A
    644            retArray[5] = HI_UINT16( pMsg->dstAddr );
   \   000062   8882         MOV       DPL,R0
   \   000064   8983         MOV       DPH,R1
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   C0E0         PUSH      A
   \   00006A   7405         MOV       A,#0x5
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   D0E0         POP       A
   \   000071   F0           MOVX      @DPTR,A
    645          
    646            /* Build and send back the response */
    647            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_REFLECT_ERROR, 6, retArray);
   \   000072                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000072   AC..         MOV       R4,?XSP + 0
   \   000074   AD..         MOV       R5,?XSP + 1
   \   000076   7B06         MOV       R3,#0x6
   \   000078   7A83         MOV       R2,#-0x7d
   \   00007A   7944         MOV       R1,#0x44
   \   00007C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    648          }
   \   00007F   7406         MOV       A,#0x6
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   D083         POP       DPH
   \   000086   D082         POP       DPL
   \   000088   02....       LJMP      ?BRET
    649          
    650          /***************************************************************************************************
    651           * @fn          MT_AfIncomingMsg
    652           *
    653           * @brief       Process the callback subscription for AF Incoming data.
    654           *
    655           * @param       pkt - Incoming AF data.
    656           *
    657           * @return      none
    658           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    659          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    660          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
    661            #define MT_AF_INC_MSG_LEN  20
    662            #define MT_AF_INC_MSG_EXT  10
    663          
    664            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   000009   EA           MOV       A,R2
   \   00000A   2420         ADD       A,#0x20
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V9
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V1,A
    665            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   00001A   E5..         MOV       A,?V0
   \   00001C   2414         ADD       A,#0x14
   \   00001E   FE           MOV       R6,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V1
   \   000022   FF           MOV       R7,A
    666            uint8 cmd = MT_AF_INCOMING_MSG;
   \   000023   75..81       MOV       ?V7,#-0x7f
    667            uint8 *pRsp, *pTmp;
    668            mtAfInMsgList_t *pItem = NULL;
   \   000026   75..00       MOV       ?V10,#0x0
   \   000029   75..00       MOV       ?V11,#0x0
    669          
    670          #if defined INTER_PAN
    671            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    672            {
    673              cmd = MT_AF_INCOMING_MSG_EXT;
    674            }
    675            else
    676          #endif
    677            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    678                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   00002C   EA           MOV       A,R2
   \   00002D   240E         ADD       A,#0xe
   \   00002F   F5..         MOV       ?V4,A
   \   000031   E4           CLR       A
   \   000032   35..         ADDC      A,?V9
   \   000034   F5..         MOV       ?V5,A
   \   000036   85..82       MOV       DPL,?V4
   \   000039   F583         MOV       DPH,A
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6403         XRL       A,#0x3
   \   00003E   6009         JZ        ??MT_AfIncomingMsg_0
   \   000040   C3           CLR       C
   \   000041   EE           MOV       A,R6
   \   000042   94F1         SUBB      A,#-0xf
   \   000044   EF           MOV       A,R7
   \   000045   9400         SUBB      A,#0x0
   \   000047   4003         JC        ??MT_AfIncomingMsg_1
    679            {
    680              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   000049   75..82       MOV       ?V7,#-0x7e
    681            }
    682          
    683            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \                     ??MT_AfIncomingMsg_1:
   \   00004C   7482         MOV       A,#-0x7e
   \   00004E   65..         XRL       A,?V7
   \   000050   7007         JNZ       ??MT_AfIncomingMsg_2
    684            {
    685              respLen += MT_AF_INC_MSG_EXT;
   \   000052   EE           MOV       A,R6
   \   000053   240A         ADD       A,#0xa
   \   000055   FE           MOV       R6,A
   \   000056   E4           CLR       A
   \   000057   3F           ADDC      A,R7
   \   000058   FF           MOV       R7,A
    686            }
    687          
    688            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_2:
   \   000059   C3           CLR       C
   \   00005A   EE           MOV       A,R6
   \   00005B   94FB         SUBB      A,#-0x5
   \   00005D   EF           MOV       A,R7
   \   00005E   9400         SUBB      A,#0x0
   \   000060   4033         JC        ??MT_AfIncomingMsg_3
    689            {
    690              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   000062                ; Setup parameters for call to function osal_mem_alloc
   \   000062   E5..         MOV       A,?V0
   \   000064   2409         ADD       A,#0x9
   \   000066   FA           MOV       R2,A
   \   000067   E4           CLR       A
   \   000068   35..         ADDC      A,?V1
   \   00006A   FB           MOV       R3,A
   \   00006B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006E   8A..         MOV       ?V10,R2
   \   000070   8B..         MOV       ?V11,R3
   \   000072   EA           MOV       A,R2
   \   000073   4B           ORL       A,R3
   \   000074   7003         JNZ       $+5
   \   000076   02....       LJMP      ??MT_AfIncomingMsg_4 & 0xFFFF
    691              {
    692                return;  // If cannot hold a huge message, cannot give indication at all.
    693              }
    694          
    695              pItem->data = (uint8 *)(pItem+1);
   \   000079   EA           MOV       A,R2
   \   00007A   2409         ADD       A,#0x9
   \   00007C   F8           MOV       R0,A
   \   00007D   E4           CLR       A
   \   00007E   35..         ADDC      A,?V11
   \   000080   F9           MOV       R1,A
   \   000081   8A82         MOV       DPL,R2
   \   000083   8B83         MOV       DPH,R3
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E8           MOV       A,R0
   \   000088   F0           MOVX      @DPTR,A
   \   000089   A3           INC       DPTR
   \   00008A   E9           MOV       A,R1
   \   00008B   F0           MOVX      @DPTR,A
    696              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \   00008C   C3           CLR       C
   \   00008D   EE           MOV       A,R6
   \   00008E   95..         SUBB      A,?V0
   \   000090   FE           MOV       R6,A
   \   000091   EF           MOV       A,R7
   \   000092   95..         SUBB      A,?V1
   \   000094   FF           MOV       R7,A
    697            }
    698          
    699            // Attempt to allocate memory for the response packet.
    700            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_3:
   \   000095                ; Setup parameters for call to function osal_mem_alloc
   \   000095   EE           MOV       A,R6
   \   000096   FA           MOV       R2,A
   \   000097   EF           MOV       A,R7
   \   000098   FB           MOV       R3,A
   \   000099   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009C   8A..         MOV       ?V12,R2
   \   00009E   8B..         MOV       ?V13,R3
   \   0000A0   EA           MOV       A,R2
   \   0000A1   4B           ORL       A,R3
   \   0000A2   7010         JNZ       ??MT_AfIncomingMsg_5
    701            {
    702              if (pItem != NULL)
   \   0000A4   E5..         MOV       A,?V10
   \   0000A6   45..         ORL       A,?V11
   \   0000A8   6007         JZ        ??MT_AfIncomingMsg_6
    703              {
    704                (void)osal_mem_free(pItem);
   \   0000AA                ; Setup parameters for call to function osal_mem_free
   \   0000AA   AA..         MOV       R2,?V10
   \   0000AC   AB..         MOV       R3,?V11
   \   0000AE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    705              }
    706              return;
   \                     ??MT_AfIncomingMsg_6:
   \   0000B1   02....       LJMP      ??MT_AfIncomingMsg_4 & 0xFFFF
    707            }
    708            pTmp = pRsp;
    709          
    710            /* Group ID */
    711            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_5:
   \   0000B4   E5..         MOV       A,?V8
   \   0000B6   2402         ADD       A,#0x2
   \   0000B8   F8           MOV       R0,A
   \   0000B9   E4           CLR       A
   \   0000BA   35..         ADDC      A,?V9
   \   0000BC   F9           MOV       R1,A
   \   0000BD   8882         MOV       DPL,R0
   \   0000BF   F583         MOV       DPH,A
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   8A82         MOV       DPL,R2
   \   0000C4   8B83         MOV       DPH,R3
   \   0000C6   F0           MOVX      @DPTR,A
    712            *pTmp++ = HI_UINT16(pMsg->groupId);
   \   0000C7   8882         MOV       DPL,R0
   \   0000C9   8983         MOV       DPH,R1
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   8A82         MOV       DPL,R2
   \   0000CF   8B83         MOV       DPH,R3
   \   0000D1   A3           INC       DPTR
   \   0000D2   F0           MOVX      @DPTR,A
    713          
    714            /* Cluster ID */
    715            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   0000D3   E5..         MOV       A,?V8
   \   0000D5   2404         ADD       A,#0x4
   \   0000D7   F8           MOV       R0,A
   \   0000D8   E4           CLR       A
   \   0000D9   35..         ADDC      A,?V9
   \   0000DB   F9           MOV       R1,A
   \   0000DC   8882         MOV       DPL,R0
   \   0000DE   F583         MOV       DPH,A
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   8A82         MOV       DPL,R2
   \   0000E3   8B83         MOV       DPH,R3
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   F0           MOVX      @DPTR,A
    716            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \   0000E8   8882         MOV       DPL,R0
   \   0000EA   8983         MOV       DPH,R1
   \   0000EC   A3           INC       DPTR
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   8A82         MOV       DPL,R2
   \   0000F0   8B83         MOV       DPH,R3
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   F0           MOVX      @DPTR,A
    717          
    718            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0000F6   EA           MOV       A,R2
   \   0000F7   2405         ADD       A,#0x5
   \   0000F9   F5..         MOV       ?V2,A
   \   0000FB   E4           CLR       A
   \   0000FC   35..         ADDC      A,?V13
   \   0000FE   F5..         MOV       ?V3,A
   \   000100   EA           MOV       A,R2
   \   000101   2404         ADD       A,#0x4
   \   000103   F8           MOV       R0,A
   \   000104   E4           CLR       A
   \   000105   35..         ADDC      A,?V13
   \   000107   F9           MOV       R1,A
   \   000108   E8           MOV       A,R0
   \   000109   FA           MOV       R2,A
   \   00010A   E9           MOV       A,R1
   \   00010B   FB           MOV       R3,A
   \   00010C   E5..         MOV       A,?V8
   \   00010E   2406         ADD       A,#0x6
   \   000110   F8           MOV       R0,A
   \   000111   E4           CLR       A
   \   000112   35..         ADDC      A,?V9
   \   000114   F9           MOV       R1,A
   \   000115   7482         MOV       A,#-0x7e
   \   000117   65..         XRL       A,?V7
   \   000119   6003         JZ        $+5
   \   00011B   02....       LJMP      ??MT_AfIncomingMsg_7 & 0xFFFF
    719            {
    720              *pTmp++ = pMsg->srcAddr.addrMode;
   \   00011E   85..82       MOV       DPL,?V4
   \   000121   85..83       MOV       DPH,?V5
   \   000124   E0           MOVX      A,@DPTR
   \   000125   8A82         MOV       DPL,R2
   \   000127   8B83         MOV       DPH,R3
   \   000129   F0           MOVX      @DPTR,A
    721          
    722              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   00012A   85..82       MOV       DPL,?V4
   \   00012D   85..83       MOV       DPH,?V5
   \   000130   E0           MOVX      A,@DPTR
   \   000131   6403         XRL       A,#0x3
   \   000133   701D         JNZ       ??MT_AfIncomingMsg_8
    723              {
    724                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   000135                ; Setup parameters for call to function osal_memcpy
   \   000135   88..         MOV       ?V4,R0
   \   000137   89..         MOV       ?V5,R1
   \   000139   75..00       MOV       ?V6,#0x0
   \   00013C   78..         MOV       R0,#?V4
   \   00013E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000141   7C08         MOV       R4,#0x8
   \   000143   7D00         MOV       R5,#0x0
   \   000145   0A           INC       R2
   \   000146   AB..         MOV       R3,?V3
   \   000148   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00014B   7403         MOV       A,#0x3
   \   00014D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000150   801A         SJMP      ??MT_AfIncomingMsg_9
    725              }
    726              else
    727              {
    728                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_8:
   \   000152   8882         MOV       DPL,R0
   \   000154   8983         MOV       DPH,R1
   \   000156   E0           MOVX      A,@DPTR
   \   000157   85..82       MOV       DPL,?V2
   \   00015A   85..83       MOV       DPH,?V3
   \   00015D   F0           MOVX      @DPTR,A
    729                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   00015E   8882         MOV       DPL,R0
   \   000160   8983         MOV       DPH,R1
   \   000162   A3           INC       DPTR
   \   000163   E0           MOVX      A,@DPTR
   \   000164   85..82       MOV       DPL,?V2
   \   000167   85..83       MOV       DPH,?V3
   \   00016A   A3           INC       DPTR
   \   00016B   F0           MOVX      @DPTR,A
    730              }
    731              pTmp += Z_EXTADDR_LEN;
    732          
    733              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??MT_AfIncomingMsg_9:
   \   00016C   E5..         MOV       A,?V8
   \   00016E   240F         ADD       A,#0xf
   \   000170   F582         MOV       DPL,A
   \   000172   E4           CLR       A
   \   000173   35..         ADDC      A,?V9
   \   000175   F583         MOV       DPH,A
   \   000177   E0           MOVX      A,@DPTR
   \   000178   85..82       MOV       DPL,?V2
   \   00017B   85..83       MOV       DPH,?V3
   \   00017E   A3           INC       DPTR
   \   00017F   A3           INC       DPTR
   \   000180   A3           INC       DPTR
   \   000181   A3           INC       DPTR
   \   000182   A3           INC       DPTR
   \   000183   A3           INC       DPTR
   \   000184   A3           INC       DPTR
   \   000185   A3           INC       DPTR
   \   000186   F0           MOVX      @DPTR,A
    734          #if defined INTER_PAN
    735              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    736              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    737          #else
    738              *pTmp++ = 0;
   \   000187   85..82       MOV       DPL,?V2
   \   00018A   85..83       MOV       DPH,?V3
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   A3           INC       DPTR
   \   000194   A3           INC       DPTR
   \   000195   A3           INC       DPTR
   \   000196   E4           CLR       A
   \   000197   F0           MOVX      @DPTR,A
    739              *pTmp++ = 0;
   \   000198   85..82       MOV       DPL,?V2
   \   00019B   85..83       MOV       DPH,?V3
   \   00019E   A3           INC       DPTR
   \   00019F   A3           INC       DPTR
   \   0001A0   A3           INC       DPTR
   \   0001A1   A3           INC       DPTR
   \   0001A2   A3           INC       DPTR
   \   0001A3   A3           INC       DPTR
   \   0001A4   A3           INC       DPTR
   \   0001A5   A3           INC       DPTR
   \   0001A6   A3           INC       DPTR
   \   0001A7   A3           INC       DPTR
   \   0001A8   F0           MOVX      @DPTR,A
   \   0001A9   E5..         MOV       A,?V2
   \   0001AB   240B         ADD       A,#0xb
   \   0001AD   F5..         MOV       ?V2,A
   \   0001AF   503F         JNC       ??MT_AfIncomingMsg_10
   \   0001B1   05..         INC       ?V3
   \   0001B3   803B         SJMP      ??MT_AfIncomingMsg_10
    740          #endif
    741            }
    742            else
    743            {
    744              /* Source Address */
    745              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   0001B5   8882         MOV       DPL,R0
   \   0001B7   8983         MOV       DPH,R1
   \   0001B9   E0           MOVX      A,@DPTR
   \   0001BA   8A82         MOV       DPL,R2
   \   0001BC   8B83         MOV       DPH,R3
   \   0001BE   F0           MOVX      @DPTR,A
    746              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   0001BF   8882         MOV       DPL,R0
   \   0001C1   8983         MOV       DPH,R1
   \   0001C3   A3           INC       DPTR
   \   0001C4   E0           MOVX      A,@DPTR
   \   0001C5   85..82       MOV       DPL,?V2
   \   0001C8   85..83       MOV       DPH,?V3
   \   0001CB   F0           MOVX      @DPTR,A
    747          
    748              /* Source EP */
    749              *pTmp++ = pMsg->srcAddr.endPoint;
   \   0001CC   E5..         MOV       A,?V8
   \   0001CE   240F         ADD       A,#0xf
   \   0001D0   F582         MOV       DPL,A
   \   0001D2   E4           CLR       A
   \   0001D3   35..         ADDC      A,?V9
   \   0001D5   F583         MOV       DPH,A
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   85..82       MOV       DPL,?V12
   \   0001DB   85..83       MOV       DPH,?V13
   \   0001DE   A3           INC       DPTR
   \   0001DF   A3           INC       DPTR
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   A3           INC       DPTR
   \   0001E4   F0           MOVX      @DPTR,A
   \   0001E5   E5..         MOV       A,?V12
   \   0001E7   2407         ADD       A,#0x7
   \   0001E9   F5..         MOV       ?V2,A
   \   0001EB   E4           CLR       A
   \   0001EC   35..         ADDC      A,?V13
   \   0001EE   F5..         MOV       ?V3,A
    750            }
    751          
    752            /* Destination EP */
    753            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_10:
   \   0001F0   E5..         MOV       A,?V8
   \   0001F2   2414         ADD       A,#0x14
   \   0001F4   F582         MOV       DPL,A
   \   0001F6   E4           CLR       A
   \   0001F7   35..         ADDC      A,?V9
   \   0001F9   F583         MOV       DPH,A
   \   0001FB   E0           MOVX      A,@DPTR
   \   0001FC   85..82       MOV       DPL,?V2
   \   0001FF   85..83       MOV       DPH,?V3
   \   000202   F0           MOVX      @DPTR,A
    754          
    755            /* WasBroadCast */
    756            *pTmp++ = pMsg->wasBroadcast;
   \   000203   E5..         MOV       A,?V8
   \   000205   2415         ADD       A,#0x15
   \   000207   F582         MOV       DPL,A
   \   000209   E4           CLR       A
   \   00020A   35..         ADDC      A,?V9
   \   00020C   F583         MOV       DPH,A
   \   00020E   E0           MOVX      A,@DPTR
   \   00020F   85..82       MOV       DPL,?V2
   \   000212   85..83       MOV       DPH,?V3
   \   000215   A3           INC       DPTR
   \   000216   F0           MOVX      @DPTR,A
    757          
    758            /* LinkQuality */
    759            *pTmp++ = pMsg->LinkQuality;
   \   000217   E5..         MOV       A,?V8
   \   000219   2416         ADD       A,#0x16
   \   00021B   F582         MOV       DPL,A
   \   00021D   E4           CLR       A
   \   00021E   35..         ADDC      A,?V9
   \   000220   F583         MOV       DPH,A
   \   000222   E0           MOVX      A,@DPTR
   \   000223   85..82       MOV       DPL,?V2
   \   000226   85..83       MOV       DPH,?V3
   \   000229   A3           INC       DPTR
   \   00022A   A3           INC       DPTR
   \   00022B   F0           MOVX      @DPTR,A
    760          
    761            /* SecurityUse */
    762            *pTmp++ = pMsg->SecurityUse;
   \   00022C   E5..         MOV       A,?V8
   \   00022E   2419         ADD       A,#0x19
   \   000230   F582         MOV       DPL,A
   \   000232   E4           CLR       A
   \   000233   35..         ADDC      A,?V9
   \   000235   F583         MOV       DPH,A
   \   000237   E0           MOVX      A,@DPTR
   \   000238   85..82       MOV       DPL,?V2
   \   00023B   85..83       MOV       DPH,?V3
   \   00023E   A3           INC       DPTR
   \   00023F   A3           INC       DPTR
   \   000240   A3           INC       DPTR
   \   000241   F0           MOVX      @DPTR,A
   \   000242   E5..         MOV       A,?V2
   \   000244   2404         ADD       A,#0x4
   \   000246   F5..         MOV       ?V2,A
   \   000248   5002         JNC       ??MT_AfIncomingMsg_11
   \   00024A   05..         INC       ?V3
    763          
    764            /* Timestamp */
    765            osal_buffer_uint32( pTmp, pMsg->timestamp );
   \                     ??MT_AfIncomingMsg_11:
   \   00024C   E5..         MOV       A,?V8
   \   00024E   241A         ADD       A,#0x1a
   \   000250   F5..         MOV       ?V4,A
   \   000252   E4           CLR       A
   \   000253   35..         ADDC      A,?V9
   \   000255   F5..         MOV       ?V5,A
   \   000257                ; Setup parameters for call to function osal_buffer_uint32
   \   000257   85..82       MOV       DPL,?V4
   \   00025A   F583         MOV       DPH,A
   \   00025C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00025F   AA..         MOV       R2,?V2
   \   000261   AB..         MOV       R3,?V3
   \   000263   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000266   7404         MOV       A,#0x4
   \   000268   12....       LCALL     ?DEALLOC_XSTACK8
    766            pTmp += 4;
    767          
    768            /* Data Length */
    769            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   00026B   E5..         MOV       A,?V2
   \   00026D   2406         ADD       A,#0x6
   \   00026F   F8           MOV       R0,A
   \   000270   E4           CLR       A
   \   000271   35..         ADDC      A,?V3
   \   000273   F9           MOV       R1,A
   \   000274   E5..         MOV       A,?V2
   \   000276   2405         ADD       A,#0x5
   \   000278   FA           MOV       R2,A
   \   000279   E4           CLR       A
   \   00027A   35..         ADDC      A,?V3
   \   00027C   FB           MOV       R3,A
   \   00027D   E5..         MOV       A,?V2
   \   00027F   2404         ADD       A,#0x4
   \   000281   FC           MOV       R4,A
   \   000282   E4           CLR       A
   \   000283   35..         ADDC      A,?V3
   \   000285   FD           MOV       R5,A
   \   000286   7482         MOV       A,#-0x7e
   \   000288   65..         XRL       A,?V7
   \   00028A   7020         JNZ       ??MT_AfIncomingMsg_12
    770            {
    771              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    772               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    773               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    774               */
    775              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   00028C   8C82         MOV       DPL,R4
   \   00028E   8D83         MOV       DPH,R5
   \   000290   E4           CLR       A
   \   000291   F0           MOVX      @DPTR,A
    776              *pTmp++ = LO_UINT16(dataLen);
   \   000292   8A82         MOV       DPL,R2
   \   000294   8B83         MOV       DPH,R3
   \   000296   E5..         MOV       A,?V0
   \   000298   F0           MOVX      @DPTR,A
    777              *pTmp++ = HI_UINT16(dataLen);
   \   000299   8882         MOV       DPL,R0
   \   00029B   8983         MOV       DPH,R1
   \   00029D   E5..         MOV       A,?V1
   \   00029F   F0           MOVX      @DPTR,A
   \   0002A0   E5..         MOV       A,?V2
   \   0002A2   2407         ADD       A,#0x7
   \   0002A4   F5..         MOV       ?V2,A
   \   0002A6   5020         JNC       ??MT_AfIncomingMsg_13
   \   0002A8   05..         INC       ?V3
   \   0002AA   801C         SJMP      ??MT_AfIncomingMsg_13
    778            }
    779            else
    780            {
    781              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_12:
   \   0002AC   E5..         MOV       A,?V8
   \   0002AE   241F         ADD       A,#0x1f
   \   0002B0   F582         MOV       DPL,A
   \   0002B2   E4           CLR       A
   \   0002B3   35..         ADDC      A,?V9
   \   0002B5   F583         MOV       DPH,A
   \   0002B7   E0           MOVX      A,@DPTR
   \   0002B8   8C82         MOV       DPL,R4
   \   0002BA   8D83         MOV       DPH,R5
   \   0002BC   F0           MOVX      @DPTR,A
    782              *pTmp++ = dataLen;
   \   0002BD   8A82         MOV       DPL,R2
   \   0002BF   8B83         MOV       DPH,R3
   \   0002C1   E5..         MOV       A,?V0
   \   0002C3   F0           MOVX      @DPTR,A
   \   0002C4   88..         MOV       ?V2,R0
   \   0002C6   89..         MOV       ?V3,R1
    783            }
    784          
    785            /* Data */
    786            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_13:
   \   0002C8   E5..         MOV       A,?V10
   \   0002CA   45..         ORL       A,?V11
   \   0002CC   7003         JNZ       $+5
   \   0002CE   02....       LJMP      ??MT_AfIncomingMsg_14 & 0xFFFF
    787            {
    788              // Enqueue the new huge incoming item.
    789              pItem->next = pMtAfInMsgList;
   \   0002D1   90....       MOV       DPTR,#pMtAfInMsgList
   \   0002D4   E0           MOVX      A,@DPTR
   \   0002D5   F8           MOV       R0,A
   \   0002D6   A3           INC       DPTR
   \   0002D7   E0           MOVX      A,@DPTR
   \   0002D8   F9           MOV       R1,A
   \   0002D9   85..82       MOV       DPL,?V10
   \   0002DC   85..83       MOV       DPH,?V11
   \   0002DF   E8           MOV       A,R0
   \   0002E0   F0           MOVX      @DPTR,A
   \   0002E1   A3           INC       DPTR
   \   0002E2   E9           MOV       A,R1
   \   0002E3   F0           MOVX      @DPTR,A
    790              pMtAfInMsgList = pItem;
   \   0002E4   90....       MOV       DPTR,#pMtAfInMsgList
   \   0002E7   E5..         MOV       A,?V10
   \   0002E9   F0           MOVX      @DPTR,A
   \   0002EA   A3           INC       DPTR
   \   0002EB   E5..         MOV       A,?V11
   \   0002ED   F0           MOVX      @DPTR,A
    791          
    792              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    793              pItem->tick = MT_AF_EXEC_CNT;
   \   0002EE   85..82       MOV       DPL,?V10
   \   0002F1   F583         MOV       DPH,A
   \   0002F3   A3           INC       DPTR
   \   0002F4   A3           INC       DPTR
   \   0002F5   A3           INC       DPTR
   \   0002F6   A3           INC       DPTR
   \   0002F7   A3           INC       DPTR
   \   0002F8   A3           INC       DPTR
   \   0002F9   A3           INC       DPTR
   \   0002FA   A3           INC       DPTR
   \   0002FB   740F         MOV       A,#0xf
   \   0002FD   F0           MOVX      @DPTR,A
    794              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   0002FE                ; Setup parameters for call to function osal_start_timerEx
   \   0002FE   90....       MOV       DPTR,#__Constant_3e8
   \   000301   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000304   7A08         MOV       R2,#0x8
   \   000306   7B00         MOV       R3,#0x0
   \   000308   90....       MOV       DPTR,#MT_TaskID
   \   00030B   E0           MOVX      A,@DPTR
   \   00030C   F9           MOV       R1,A
   \   00030D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000310   7404         MOV       A,#0x4
   \   000312   12....       LCALL     ?DEALLOC_XSTACK8
   \   000315   E9           MOV       A,R1
   \   000316   600C         JZ        ??MT_AfIncomingMsg_15
    795              {
    796                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000318                ; Setup parameters for call to function osal_set_event
   \   000318   7A08         MOV       R2,#0x8
   \   00031A   7B00         MOV       R3,#0x0
   \   00031C   90....       MOV       DPTR,#MT_TaskID
   \   00031F   E0           MOVX      A,@DPTR
   \   000320   F9           MOV       R1,A
   \   000321   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    797              }
    798          
    799              pItem->timestamp = pMsg->timestamp;
   \                     ??MT_AfIncomingMsg_15:
   \   000324   85..82       MOV       DPL,?V4
   \   000327   85..83       MOV       DPH,?V5
   \   00032A   12....       LCALL     ?XLOAD_R0123
   \   00032D   85..82       MOV       DPL,?V10
   \   000330   85..83       MOV       DPH,?V11
   \   000333   A3           INC       DPTR
   \   000334   A3           INC       DPTR
   \   000335   A3           INC       DPTR
   \   000336   A3           INC       DPTR
   \   000337   12....       LCALL     ?XSTORE_R0123
    800              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   00033A                ; Setup parameters for call to function osal_memcpy
   \   00033A   E5..         MOV       A,?V8
   \   00033C   2422         ADD       A,#0x22
   \   00033E   F582         MOV       DPL,A
   \   000340   E4           CLR       A
   \   000341   35..         ADDC      A,?V9
   \   000343   F583         MOV       DPH,A
   \   000345   E0           MOVX      A,@DPTR
   \   000346   F5..         MOV       ?V4,A
   \   000348   A3           INC       DPTR
   \   000349   E0           MOVX      A,@DPTR
   \   00034A   F5..         MOV       ?V5,A
   \   00034C   75..00       MOV       ?V6,#0x0
   \   00034F   78..         MOV       R0,#?V4
   \   000351   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000354   AC..         MOV       R4,?V0
   \   000356   AD..         MOV       R5,?V1
   \   000358   85..82       MOV       DPL,?V10
   \   00035B   85..83       MOV       DPH,?V11
   \   00035E   A3           INC       DPTR
   \   00035F   A3           INC       DPTR
   \   000360   E0           MOVX      A,@DPTR
   \   000361   FA           MOV       R2,A
   \   000362   A3           INC       DPTR
   \   000363   E0           MOVX      A,@DPTR
   \   000364   FB           MOV       R3,A
   \   000365   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000368   7403         MOV       A,#0x3
   \   00036A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00036D   8036         SJMP      ??MT_AfIncomingMsg_16
    801            }
    802            else
    803            {
    804              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_14:
   \   00036F                ; Setup parameters for call to function osal_memcpy
   \   00036F   E5..         MOV       A,?V8
   \   000371   2422         ADD       A,#0x22
   \   000373   F582         MOV       DPL,A
   \   000375   E4           CLR       A
   \   000376   35..         ADDC      A,?V9
   \   000378   F583         MOV       DPH,A
   \   00037A   E0           MOVX      A,@DPTR
   \   00037B   F5..         MOV       ?V4,A
   \   00037D   A3           INC       DPTR
   \   00037E   E0           MOVX      A,@DPTR
   \   00037F   F5..         MOV       ?V5,A
   \   000381   75..00       MOV       ?V6,#0x0
   \   000384   78..         MOV       R0,#?V4
   \   000386   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000389   AC..         MOV       R4,?V0
   \   00038B   AD..         MOV       R5,?V1
   \   00038D   AA..         MOV       R2,?V2
   \   00038F   AB..         MOV       R3,?V3
   \   000391   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000394   7403         MOV       A,#0x3
   \   000396   12....       LCALL     ?DEALLOC_XSTACK8
    805              pTmp += dataLen;
   \   000399   E5..         MOV       A,?V2
   \   00039B   25..         ADD       A,?V0
   \   00039D   F5..         MOV       ?V2,A
   \   00039F   E5..         MOV       A,?V3
   \   0003A1   35..         ADDC      A,?V1
   \   0003A3   F5..         MOV       ?V3,A
    806            }
    807          
    808            // MAC Source address
    809            *pTmp++ = LO_UINT16(pMsg->macSrcAddr);
   \                     ??MT_AfIncomingMsg_16:
   \   0003A5   E5..         MOV       A,?V8
   \   0003A7   2424         ADD       A,#0x24
   \   0003A9   F8           MOV       R0,A
   \   0003AA   E4           CLR       A
   \   0003AB   35..         ADDC      A,?V9
   \   0003AD   F9           MOV       R1,A
   \   0003AE   8882         MOV       DPL,R0
   \   0003B0   F583         MOV       DPH,A
   \   0003B2   E0           MOVX      A,@DPTR
   \   0003B3   85..82       MOV       DPL,?V2
   \   0003B6   85..83       MOV       DPH,?V3
   \   0003B9   F0           MOVX      @DPTR,A
    810            *pTmp++ = HI_UINT16(pMsg->macSrcAddr);
   \   0003BA   8882         MOV       DPL,R0
   \   0003BC   8983         MOV       DPH,R1
   \   0003BE   A3           INC       DPTR
   \   0003BF   E0           MOVX      A,@DPTR
   \   0003C0   85..82       MOV       DPL,?V2
   \   0003C3   85..83       MOV       DPH,?V3
   \   0003C6   A3           INC       DPTR
   \   0003C7   F0           MOVX      @DPTR,A
    811          
    812            // messages result radius
    813            *pTmp = pMsg->radius;
   \   0003C8   E5..         MOV       A,?V8
   \   0003CA   2426         ADD       A,#0x26
   \   0003CC   F582         MOV       DPL,A
   \   0003CE   E4           CLR       A
   \   0003CF   35..         ADDC      A,?V9
   \   0003D1   F583         MOV       DPH,A
   \   0003D3   E0           MOVX      A,@DPTR
   \   0003D4   85..82       MOV       DPL,?V2
   \   0003D7   85..83       MOV       DPH,?V3
   \   0003DA   A3           INC       DPTR
   \   0003DB   A3           INC       DPTR
   \   0003DC   F0           MOVX      @DPTR,A
    814          
    815            /* Build and send back the response */
    816            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \   0003DD                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0003DD   AC..         MOV       R4,?V12
   \   0003DF   AD..         MOV       R5,?V13
   \   0003E1   EE           MOV       A,R6
   \   0003E2   FB           MOV       R3,A
   \   0003E3   AA..         MOV       R2,?V7
   \   0003E5   7944         MOV       R1,#0x44
   \   0003E7   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    817          
    818            (void)osal_mem_free(pRsp);
   \   0003EA                ; Setup parameters for call to function osal_mem_free
   \   0003EA   AA..         MOV       R2,?V12
   \   0003EC   AB..         MOV       R3,?V13
   \   0003EE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    819          }
   \                     ??MT_AfIncomingMsg_4:
   \   0003F1   7F0E         MOV       R7,#0xe
   \   0003F3   02....       LJMP      ?BANKED_LEAVE_XDATA
    820          
    821          /**************************************************************************************************
    822           * @fn          MT_AfDataRetrieve
    823           *
    824           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    825           *          incoming AF message.
    826           *
    827           * input parameters
    828           *
    829           * @param pBuf - pointer to the received buffer
    830           *
    831           * output parameters
    832           *
    833           * @param rtrn - AF-Status of the operation.
    834           *
    835           * @return      None.
    836           **************************************************************************************************
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          static void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    839          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EB           MOV       A,R3
   \   000006   FF           MOV       R7,A
    840            #define MT_AF_RTV_HDR_SZ  2
    841          
    842            uint32 timestamp;
    843            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000007   90....       MOV       DPTR,#pMtAfInMsgList
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V2,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V3,A
    844            uint8 rtrn = afStatus_FAILED;
   \   000011   75..01       MOV       ?V1,#0x1
    845            uint8 len = 0;
   \   000014   75..00       MOV       ?V0,#0x0
    846          
    847            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EA           MOV       A,R2
   \   000018   2403         ADD       A,#0x3
   \   00001A   FE           MOV       R6,A
   \   00001B   5001         JNC       ??MT_AfDataRetrieve_0
   \   00001D   0F           INC       R7
    848            timestamp = osal_build_uint32( pBuf, 4 );
   \                     ??MT_AfDataRetrieve_0:
   \   00001E                ; Setup parameters for call to function osal_build_uint32
   \   00001E   7904         MOV       R1,#0x4
   \   000020   FA           MOV       R2,A
   \   000021   EF           MOV       A,R7
   \   000022   FB           MOV       R3,A
   \   000023   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000026   8A..         MOV       ?V4,R2
   \   000028   8B..         MOV       ?V5,R3
   \   00002A   8C..         MOV       ?V6,R4
   \   00002C   8D..         MOV       ?V7,R5
   \   00002E   800D         SJMP      ??MT_AfDataRetrieve_1
    849          
    850            while (pItem != NULL)
    851            {
    852              pPrev = pItem;
    853              if (pItem->timestamp == timestamp)
    854              {
    855                break;
    856              }
    857              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_2:
   \   000030   85..82       MOV       DPL,?V2
   \   000033   85..83       MOV       DPH,?V3
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F5..         MOV       ?V2,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F5..         MOV       ?V3,A
   \                     ??MT_AfDataRetrieve_1:
   \   00003D   E5..         MOV       A,?V2
   \   00003F   45..         ORL       A,?V3
   \   000041   6017         JZ        ??MT_AfDataRetrieve_3
   \   000043   85....       MOV       ?V8,?V2
   \   000046   85....       MOV       ?V9,?V3
   \   000049   85..82       MOV       DPL,?V2
   \   00004C   85..83       MOV       DPH,?V3
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   78..         MOV       R0,#?V4
   \   000055   12....       LCALL     ?L_EQ_X
   \   000058   70D6         JNZ       ??MT_AfDataRetrieve_2
    858            }
    859          
    860            if (pItem != NULL)
   \                     ??MT_AfDataRetrieve_3:
   \   00005A   E5..         MOV       A,?V2
   \   00005C   45..         ORL       A,?V3
   \   00005E   6053         JZ        ??MT_AfDataRetrieve_4
    861            {
    862              uint16 idx;
    863              uint8 *pRsp;
    864          
    865              pBuf += 4;
   \   000060   EE           MOV       A,R6
   \   000061   2404         ADD       A,#0x4
   \   000063   FE           MOV       R6,A
   \   000064   5001         JNC       ??MT_AfDataRetrieve_5
   \   000066   0F           INC       R7
    866              idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRetrieve_5:
   \   000067                ; Setup parameters for call to function osal_build_uint16
   \   000067   FA           MOV       R2,A
   \   000068   EF           MOV       A,R7
   \   000069   FB           MOV       R3,A
   \   00006A   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00006D   8A..         MOV       ?V6,R2
   \   00006F   8B..         MOV       ?V7,R3
    867              len = pBuf[2];
   \   000071   8E82         MOV       DPL,R6
   \   000073   8F83         MOV       DPH,R7
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F5..         MOV       ?V0,A
    868          
    869              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   00007A   7054         JNZ       ??MT_AfDataRetrieve_6
    870              {
    871                if (pMtAfInMsgList == pItem)
   \   00007C   85..82       MOV       DPL,?V2
   \   00007F   85..83       MOV       DPH,?V3
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F8           MOV       R0,A
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F9           MOV       R1,A
   \   000087   90....       MOV       DPTR,#pMtAfInMsgList
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   FA           MOV       R2,A
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   FB           MOV       R3,A
   \   00008F   E5..         MOV       A,?V2
   \   000091   6A           XRL       A,R2
   \   000092   7003         JNZ       ??MT_AfDataRetrieve_7
   \   000094   E5..         MOV       A,?V3
   \   000096   6B           XRL       A,R3
   \                     ??MT_AfDataRetrieve_7:
   \   000097   7005         JNZ       ??MT_AfDataRetrieve_8
    872                {
    873                  pMtAfInMsgList = pItem->next;
   \   000099   90....       MOV       DPTR,#pMtAfInMsgList
   \   00009C   8006         SJMP      ??MT_AfDataRetrieve_9
    874                }
    875                else
    876                {
    877                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_8:
   \   00009E   85..82       MOV       DPL,?V8
   \   0000A1   85..83       MOV       DPH,?V9
   \                     ??MT_AfDataRetrieve_9:
   \   0000A4   E8           MOV       A,R0
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E9           MOV       A,R1
   \   0000A8   F0           MOVX      @DPTR,A
    878                }
    879                (void)osal_mem_free(pItem);
   \   0000A9                ; Setup parameters for call to function osal_mem_free
   \   0000A9   AA..         MOV       R2,?V2
   \   0000AB   AB..         MOV       R3,?V3
   \   0000AD   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    880                rtrn = afStatus_SUCCESS;
   \   0000B0   75..00       MOV       ?V1,#0x0
    881              }
    882              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    883              {
    884                rtrn = afStatus_MEM_FAIL;
    885                len = 0;
    886              }
    887              else
    888              {
    889                pRsp[0] = ZSuccess;
    890                pRsp[1] = len;
    891                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    892                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    893                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    894                (void)osal_mem_free(pRsp);
    895                return;
    896              }
    897            }
    898          
    899            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_4:
   \   0000B3   8E82         MOV       DPL,R6
   \   0000B5   8F83         MOV       DPH,R7
   \   0000B7   E5..         MOV       A,?V1
   \   0000B9   F0           MOVX      @DPTR,A
    900            pBuf[1] = len;
   \   0000BA   A3           INC       DPTR
   \   0000BB   E5..         MOV       A,?V0
   \   0000BD   F0           MOVX      @DPTR,A
    901            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    902                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0000BE                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000BE   EE           MOV       A,R6
   \   0000BF   FC           MOV       R4,A
   \   0000C0   EF           MOV       A,R7
   \   0000C1   FD           MOV       R5,A
   \   0000C2   7B02         MOV       R3,#0x2
   \   0000C4   7A12         MOV       R2,#0x12
   \   0000C6   7964         MOV       R1,#0x64
   \   0000C8   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    903          }
   \                     ??MT_AfDataRetrieve_10:
   \   0000CB   7F0B         MOV       R7,#0xb
   \   0000CD   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??MT_AfDataRetrieve_6:
   \   0000D0                ; Setup parameters for call to function osal_mem_alloc
   \   0000D0   2402         ADD       A,#0x2
   \   0000D2   FA           MOV       R2,A
   \   0000D3   E4           CLR       A
   \   0000D4   3400         ADDC      A,#0x0
   \   0000D6   FB           MOV       R3,A
   \   0000D7   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000DA   8A..         MOV       ?V4,R2
   \   0000DC   8B..         MOV       ?V5,R3
   \   0000DE   EA           MOV       A,R2
   \   0000DF   4B           ORL       A,R3
   \   0000E0   7008         JNZ       ??MT_AfDataRetrieve_11
   \   0000E2   75..10       MOV       ?V1,#0x10
   \   0000E5   75..00       MOV       ?V0,#0x0
   \   0000E8   80C9         SJMP      ??MT_AfDataRetrieve_4
   \                     ??MT_AfDataRetrieve_11:
   \   0000EA   8A82         MOV       DPL,R2
   \   0000EC   8B83         MOV       DPH,R3
   \   0000EE   E4           CLR       A
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E5..         MOV       A,?V0
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   85..82       MOV       DPL,?V2
   \   0000F7   85..83       MOV       DPH,?V3
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   25..         ADD       A,?V6
   \   0000FF   F5..         MOV       ?V8,A
   \   000101   A3           INC       DPTR
   \   000102   E0           MOVX      A,@DPTR
   \   000103   35..         ADDC      A,?V7
   \   000105   F5..         MOV       ?V9,A
   \   000107   75..00       MOV       ?V10,#0x0
   \   00010A   78..         MOV       R0,#?V8
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00010F   AC..         MOV       R4,?V0
   \   000111   7D00         MOV       R5,#0x0
   \   000113   EA           MOV       A,R2
   \   000114   2402         ADD       A,#0x2
   \   000116   FA           MOV       R2,A
   \   000117   E4           CLR       A
   \   000118   35..         ADDC      A,?V5
   \   00011A   FB           MOV       R3,A
   \   00011B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00011E   7403         MOV       A,#0x3
   \   000120   12....       LCALL     ?DEALLOC_XSTACK8
   \   000123                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000123   AC..         MOV       R4,?V4
   \   000125   AD..         MOV       R5,?V5
   \   000127   7402         MOV       A,#0x2
   \   000129   25..         ADD       A,?V0
   \   00012B   FB           MOV       R3,A
   \   00012C   7A12         MOV       R2,#0x12
   \   00012E   7964         MOV       R1,#0x64
   \   000130   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000133                ; Setup parameters for call to function osal_mem_free
   \   000133   AA..         MOV       R2,?V4
   \   000135   AB..         MOV       R3,?V5
   \   000137   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00013A   808F         SJMP      ??MT_AfDataRetrieve_10
    904          
    905          /**************************************************************************************************
    906           * @fn          MT_AfDataStore
    907           *
    908           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    909           *          outgoing AF message.
    910           *
    911           * input parameters
    912           *
    913           * @param pBuf - pointer to the received buffer
    914           *
    915           * output parameters
    916           *
    917           * @param rtrn - AF-Status of the operation.
    918           *
    919           * @return      None.
    920           **************************************************************************************************
    921           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    922          static void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    923          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    924            uint16 idx;
    925            uint8 len, rtrn = afStatus_FAILED;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
    926          
    927            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000015   EA           MOV       A,R2
   \   000016   2403         ADD       A,#0x3
   \   000018   FE           MOV       R6,A
   \   000019   5001         JNC       ??MT_AfDataStore_0
   \   00001B   0F           INC       R7
    928            idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataStore_0:
   \   00001C                ; Setup parameters for call to function osal_build_uint16
   \   00001C   FA           MOV       R2,A
   \   00001D   EF           MOV       A,R7
   \   00001E   FB           MOV       R3,A
   \   00001F   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
    929            len = pBuf[2];
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FA           MOV       R2,A
    930            pBuf += 3;
   \   00002E   EE           MOV       A,R6
   \   00002F   2403         ADD       A,#0x3
   \   000031   FE           MOV       R6,A
   \   000032   5001         JNC       ??MT_AfDataStore_1
   \   000034   0F           INC       R7
    931          
    932            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   000035   90....       MOV       DPTR,#pMtAfDataReq
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   49           ORL       A,R1
   \   00003F   700B         JNZ       ??MT_AfDataStore_2
    933            {
    934              rtrn = afStatus_MEM_FAIL;
   \   000041   85..82       MOV       DPL,?XSP + 0
   \   000044   85..83       MOV       DPH,?XSP + 1
   \   000047   7410         MOV       A,#0x10
   \   000049   02....       LJMP      ??MT_AfDataStore_3 & 0xFFFF
    935            }
    936            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   00004C   90....       MOV       DPTR,#pMtAfDataReq
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F8           MOV       R0,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F583         MOV       DPH,A
   \   000055   8882         MOV       DPL,R0
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F5..         MOV       ?V6,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F5..         MOV       ?V7,A
   \   00005E   EA           MOV       A,R2
   \   00005F   6003         JZ        $+5
   \   000061   02....       LJMP      ??MT_AfDataStore_4 & 0xFFFF
    937            {
    938              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    939                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    940                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   000064                ; Setup parameters for call to function AF_DataRequest
   \   000064   90....       MOV       DPTR,#pMtAfDataReq
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F8           MOV       R0,A
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   C8           XCH       A,R0
   \   00006C   2416         ADD       A,#0x16
   \   00006E   F582         MOV       DPL,A
   \   000070   E4           CLR       A
   \   000071   38           ADDC      A,R0
   \   000072   F583         MOV       DPH,A
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F5..         MOV       ?V0,A
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007C   90....       MOV       DPTR,#pMtAfDataReq
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   2414         ADD       A,#0x14
   \   000082   F5..         MOV       ?V0,A
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   3400         ADDC      A,#0x0
   \   000088   F5..         MOV       ?V1,A
   \   00008A   78..         MOV       R0,#?V0
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008F   78..         MOV       R0,#?V6
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000094   90....       MOV       DPTR,#pMtAfDataReq
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F8           MOV       R0,A
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   C8           XCH       A,R0
   \   00009C   2412         ADD       A,#0x12
   \   00009E   F582         MOV       DPL,A
   \   0000A0   E4           CLR       A
   \   0000A1   38           ADDC      A,R0
   \   0000A2   F583         MOV       DPH,A
   \   0000A4   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A7   90....       MOV       DPTR,#pMtAfDataReq
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F8           MOV       R0,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   C8           XCH       A,R0
   \   0000AF   2410         ADD       A,#0x10
   \   0000B1   F582         MOV       DPL,A
   \   0000B3   E4           CLR       A
   \   0000B4   38           ADDC      A,R0
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000BA   90....       MOV       DPTR,#pMtAfDataReq
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F8           MOV       R0,A
   \   0000BF   A3           INC       DPTR
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   C8           XCH       A,R0
   \   0000C2   2415         ADD       A,#0x15
   \   0000C4   F582         MOV       DPL,A
   \   0000C6   E4           CLR       A
   \   0000C7   38           ADDC      A,R0
   \   0000C8   F583         MOV       DPH,A
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   F9           MOV       R1,A
   \   0000CC   90....       MOV       DPTR,#pMtAfDataReq
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   F8           MOV       R0,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   C8           XCH       A,R0
   \   0000D4   240E         ADD       A,#0xe
   \   0000D6   F582         MOV       DPL,A
   \   0000D8   E4           CLR       A
   \   0000D9   38           ADDC      A,R0
   \   0000DA   F583         MOV       DPH,A
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   FC           MOV       R4,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   FD           MOV       R5,A
   \   0000E1   90....       MOV       DPTR,#pMtAfDataReq
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   2402         ADD       A,#0x2
   \   0000E7   FA           MOV       R2,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   3400         ADDC      A,#0x0
   \   0000EC   FB           MOV       R3,A
   \   0000ED   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000F0   7409         MOV       A,#0x9
   \   0000F2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F5   E9           MOV       A,R1
   \   0000F6   85..82       MOV       DPL,?XSP + 0
   \   0000F9   85..83       MOV       DPH,?XSP + 1
   \   0000FC   F0           MOVX      @DPTR,A
    941              (void)osal_mem_free(pMtAfDataReq);
   \   0000FD                ; Setup parameters for call to function osal_mem_free
   \   0000FD   90....       MOV       DPTR,#pMtAfDataReq
   \   000100   E0           MOVX      A,@DPTR
   \   000101   FA           MOV       R2,A
   \   000102   A3           INC       DPTR
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FB           MOV       R3,A
   \   000105   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    942              pMtAfDataReq = NULL;
   \   000108   90....       MOV       DPTR,#pMtAfDataReq
   \   00010B   E4           CLR       A
   \   00010C   F0           MOVX      @DPTR,A
   \   00010D   A3           INC       DPTR
   \   00010E   8029         SJMP      ??MT_AfDataStore_3
    943            }
    944            else
    945            {
    946              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   000110                ; Setup parameters for call to function osal_memcpy
   \   000110   8E..         MOV       ?V0,R6
   \   000112   8F..         MOV       ?V1,R7
   \   000114   75..00       MOV       ?V2,#0x0
   \   000117   78..         MOV       R0,#?V0
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011C   EA           MOV       A,R2
   \   00011D   FC           MOV       R4,A
   \   00011E   7D00         MOV       R5,#0x0
   \   000120   E5..         MOV       A,?V6
   \   000122   25..         ADD       A,?V4
   \   000124   FA           MOV       R2,A
   \   000125   E5..         MOV       A,?V7
   \   000127   35..         ADDC      A,?V5
   \   000129   FB           MOV       R3,A
   \   00012A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012D   7403         MOV       A,#0x3
   \   00012F   12....       LCALL     ?DEALLOC_XSTACK8
    947              rtrn = afStatus_SUCCESS;
   \   000132   85..82       MOV       DPL,?XSP + 0
   \   000135   85..83       MOV       DPH,?XSP + 1
   \   000138   E4           CLR       A
   \                     ??MT_AfDataStore_3:
   \   000139   F0           MOVX      @DPTR,A
    948            }
    949          
    950            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    951                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \   00013A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00013A   AC..         MOV       R4,?XSP + 0
   \   00013C   AD..         MOV       R5,?XSP + 1
   \   00013E   7B01         MOV       R3,#0x1
   \   000140   7A11         MOV       R2,#0x11
   \   000142   7964         MOV       R1,#0x64
   \   000144   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    952          }
   \   000147   7401         MOV       A,#0x1
   \   000149   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014C   7F08         MOV       R7,#0x8
   \   00014E   02....       LJMP      ?BANKED_LEAVE_XDATA
    953          
    954          /**************************************************************************************************
    955           * @fn          MT_AfAPSF_ConfigSet
    956           *
    957           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    958           *
    959           * input parameters
    960           *
    961           * @param       pBuf - Pointer to the received buffer.
    962           *
    963           * output parameters
    964           *
    965           * None.
    966           *
    967           * @return      None.
    968           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    969          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
   \                     MT_AfAPSF_ConfigSet:
    970          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   EA           MOV       A,R2
   \   00000A   F8           MOV       R0,A
   \   00000B   EB           MOV       A,R3
   \   00000C   F9           MOV       R1,A
    971            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   F583         MOV       DPH,A
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   C0E0         PUSH      A
   \   000018   7401         MOV       A,#0x1
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   D0E0         POP       A
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   C0E0         PUSH      A
   \   00002C   7402         MOV       A,#0x2
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   D0E0         POP       A
   \   000033   F0           MOVX      @DPTR,A
    972            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
   \   000034                ; Setup parameters for call to function afAPSF_ConfigSet
   \   000034   7401         MOV       A,#0x1
   \   000036   12....       LCALL     ?XSTACK_DISP101_8
   \   000039   8882         MOV       DPL,R0
   \   00003B   8983         MOV       DPH,R1
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F9           MOV       R1,A
   \   000042   12....       LCALL     `??afAPSF_ConfigSet::?relay`; Banked call to: afAPSF_ConfigSet
   \   000045   E9           MOV       A,R1
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   F0           MOVX      @DPTR,A
    973          
    974            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    975                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
   \   00004D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004D   AC..         MOV       R4,?XSP + 0
   \   00004F   AD..         MOV       R5,?XSP + 1
   \   000051   7B01         MOV       R3,#0x1
   \   000053   7A13         MOV       R2,#0x13
   \   000055   7964         MOV       R1,#0x64
   \   000057   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    976          }
   \   00005A   7403         MOV       A,#0x3
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005F   D083         POP       DPH
   \   000061   D082         POP       DPL
   \   000063   02....       LJMP      ?BRET
    977          
    978          /**************************************************************************************************
    979           * @fn          MT_AfAPSF_ConfigGet
    980           *
    981           * @brief       This function is the MT proxy for afAPSF_ConfigGet().
    982           *
    983           * input parameters
    984           *
    985           * @param       pBuf - Pointer to the received buffer.
    986           *
    987           * output parameters
    988           *
    989           * None.
    990           *
    991           * @return      None.
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          static void MT_AfAPSF_ConfigGet(uint8 *pBuf)
   \                     MT_AfAPSF_ConfigGet:
    994          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 4
   \   000004   74FC         MOV       A,#-0x4
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   EA           MOV       A,R2
   \   00000A   F8           MOV       R0,A
   \   00000B   EB           MOV       A,R3
   \   00000C   F9           MOV       R1,A
    995            afAPSF_Config_t cfg = { 0, 0 };
   \   00000D   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   000010   7402         MOV       A,#0x2
   \   000012   12....       LCALL     ?XSTACK_DISP102_8
   \   000015   7402         MOV       A,#0x2
   \   000017   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    996            uint8 buf[2];
    997          
    998            afAPSF_ConfigGet( pBuf[MT_RPC_POS_DAT0], &cfg );
   \   00001A                ; Setup parameters for call to function afAPSF_ConfigGet
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP101_8
   \   00001F   8882         MOV       DPL,R0
   \   000021   8983         MOV       DPH,R1
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   12....       LCALL     `??afAPSF_ConfigGet::?relay`; Banked call to: afAPSF_ConfigGet
    999          
   1000            buf[0] = cfg.frameDelay;
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E0           MOVX      A,@DPTR
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   F0           MOVX      @DPTR,A
   1001            buf[1] = cfg.windowSize;
   \   000038   7403         MOV       A,#0x3
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   C0E0         PUSH      A
   \   000040   7401         MOV       A,#0x1
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   D0E0         POP       A
   \   000047   F0           MOVX      @DPTR,A
   1002          
   1003            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
   1004                                                 MT_AF_APSF_CONFIG_GET, 3, buf );
   \   000048                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000048   AC..         MOV       R4,?XSP + 0
   \   00004A   AD..         MOV       R5,?XSP + 1
   \   00004C   7B03         MOV       R3,#0x3
   \   00004E   7A14         MOV       R2,#0x14
   \   000050   7964         MOV       R1,#0x64
   \   000052   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1005          }
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   D083         POP       DPH
   \   00005C   D082         POP       DPL
   \   00005E   02....       LJMP      ?BRET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   1006          
   1007          /***************************************************************************************************
   1008          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      3     13   MT_AfAPSF_ConfigGet
        2      4   -> MT_BuildAndSendZToolResponse
        2      4   -> afAPSF_ConfigGet
      3     12   MT_AfAPSF_ConfigSet
        2      3   -> MT_BuildAndSendZToolResponse
        2      3   -> afAPSF_ConfigSet
      0      9   MT_AfCommandProcessing
        0      9   -> MT_AfAPSF_ConfigGet
        0      9   -> MT_AfAPSF_ConfigSet
        0      9   -> MT_AfDataRequest
        0      9   -> MT_AfDataRequestSrcRtg
        0      9   -> MT_AfDataRetrieve
        0      9   -> MT_AfDataStore
        0      9   -> MT_AfDelete
        0      9   -> MT_AfRegister
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     53   MT_AfDataRequest
        0     44   -> AF_DataRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     35   -> afFindEndPointDesc
        0     35   -> osal_build_uint16
        0     35   -> osal_mem_alloc
        0     38   -> osal_memcpy
        0     35   -> osal_set_event
        0     39   -> osal_start_timerEx
      1     55   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_build_uint16
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     31   MT_AfDataRetrieve
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> osal_build_uint16
        0     19   -> osal_build_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     35   MT_AfDataStore
        0     26   -> AF_DataRequest
        0     17   -> MT_BuildAndSendZToolResponse
        0     17   -> osal_build_uint16
        0     17   -> osal_mem_free
        0     20   -> osal_memcpy
      1     19   MT_AfDelete
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> afDelete
      0     13   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0     13   -> osal_start_timerEx
      1     26   MT_AfIncomingMsg
        0     22   -> MT_BuildAndSendZToolResponse
        0     26   -> osal_buffer_uint32
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     22   -> osal_set_event
        0     26   -> osal_start_timerEx
      3      6   MT_AfReflectError
        2      6   -> MT_BuildAndSendZToolResponse
      1     24   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
      97  MT_AfAPSF_ConfigGet
     102  MT_AfAPSF_ConfigSet
      92  MT_AfCommandProcessing
      82  MT_AfDataConfirm
     827  MT_AfDataRequest
     406  MT_AfDataRequestSrcRtg
     316  MT_AfDataRetrieve
     337  MT_AfDataStore
      70  MT_AfDelete
     242  MT_AfExec
    1014  MT_AfIncomingMsg
     139  MT_AfReflectError
     139  MT_AfRegister
       4  __Constant_3e8
       2  pMtAfDataReq
       2  pMtAfInMsgList
      78  -- Other

 
 3 863 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_ROM_C
     4 bytes in segment XDATA_Z
 
    78 bytes of CODE     memory
     2 bytes of CONST    memory (+ 4 bytes shared)
 3 863 bytes of HUGECODE memory
     4 bytes of XDATA    memory

Errors: none
Warnings: none
