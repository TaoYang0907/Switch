###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               17/Jul/2020  00:07:58
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW11AA.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c"
#        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        xNV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK
#        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\zcl_sampletemperaturesensor.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\zcl_sampletemperaturesensor.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampletemperaturesensor.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee Temperature Sensor, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - LEDs:
     50              LED1 is not used in this application
     51          
     52            Application-specific menu system:
     53          
     54              <SET LOCAL TEMP> Set the temperature of the local temperature sensor
     55                Up/Down changes the temperature 
     56                This screen shows the following information:
     57                  Line2:
     58                    Shows the temperature of the local temperature sensor
     59          
     60          *********************************************************************/
     61          
     62          /*********************************************************************
     63           * INCLUDES
     64           */
     65          #include "ZComDef.h"
     66          #include "OSAL.h"
     67          #include "AF.h"
     68          #include "ZDApp.h"
     69          #include "ZDObject.h"
     70          #include "ZDProfile.h"
     71          #include "MT_SYS.h"
     72          
     73          #include "zcl.h"
     74          #include "zcl_general.h"
     75          #include "zcl_ha.h"
     76          #include "zcl_ms.h"
     77          
     78          #include "zcl_sampletemperaturesensor.h"
     79          
     80          #include "onboard.h"
     81          
     82          /* HAL */
     83          #include "hal_lcd.h"
     84          #include "hal_led.h"
     85          #include "hal_key.h"
     86          
     87          #include "bdb_interface.h"
     88          #include "bdb_Reporting.h"
     89          
     90             
     91          /*********************************************************************
     92           * MACROS
     93           */
     94          
     95          // how often to report temperature
     96          #define SAMPLETEMPERATURESENSOR_REPORT_INTERVAL   10000
     97          
     98          #define GUI_LOCAL_TEMP    1
     99          
    100          #define APP_TITLE "   Temp Sensor  "
    101          
    102          /*********************************************************************
    103           * CONSTANTS
    104           */
    105          
    106          /*********************************************************************
    107           * TYPEDEFS
    108           */
    109          
    110          /*********************************************************************
    111           * GLOBAL VARIABLES
    112           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          byte zclSampleTemperatureSensor_TaskID;
   \                     zclSampleTemperatureSensor_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    114          
    115          extern int16 zdpExternalStateTaskID;
    116          
    117          /*********************************************************************
    118           * GLOBAL FUNCTIONS
    119           */
    120          
    121          /*********************************************************************
    122           * LOCAL VARIABLES
    123           */
    124          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    125          devStates_t zclSampleTemperatureSensor_NwkState = DEV_INIT;
   \                     zclSampleTemperatureSensor_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleTemperatureSensor_N`
   \   000001                REQUIRE __INIT_XDATA_I
    126          
    127          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    128          
    129          // Test Endpoint to allow SYS_APP_MSGs
    130          /*
    131          static endPointDesc_t sampleTemperatureSensor_TestEp =
    132          {
    133            20,                                 // Test endpoint
    134            0,
    135            &zclSampleTemperatureSensor_TaskID,
    136            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    137            (afNetworkLatencyReq_t)0            // No Network Latency req
    138          };
    139          */
    140          #ifdef BDB_REPORTING
    141          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
    142            uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0x2C01 is 300 in int16
    143          #endif
    144          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145            uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00}; // 0x2C01 is 300 in int16
   \                     reportableChange:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for reportableChange>`
   \   000004                REQUIRE __INIT_XDATA_I
    146          #endif 
    147          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
    148            uint8 reportableChange[] = {0x2C, 0x01}; // 0x2C01 is 300 in int16
    149          #endif 
    150          #endif
    151          
    152          /*********************************************************************
    153           * LOCAL FUNCTIONS
    154           */
    155          static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys );
    156          static void zclSampleTemperatureSensor_BasicResetCB( void );
    157          
    158          static void zclSampleTemperatureSensor_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg);
    159          
    160          // Functions to process ZCL Foundation incoming Command/Response messages
    161          static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    162          #ifdef ZCL_READ
    163          static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    164          #endif
    165          #ifdef ZCL_WRITE
    166          static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    167          #endif
    168          static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    169          #ifdef ZCL_DISCOVER
    170          static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    171          static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    172          static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    173          #endif // ZCL_DISCOVER
    174          
    175          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    176          
    177          /*********************************************************************
    178           * STATUS STRINGS
    179           */
    180          
    181          /*********************************************************************
    182           * CONSTANTS
    183           */
    184          /*********************************************************************
    185           * ZCL General Profile Callback table
    186           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    187          static zclGeneral_AppCallbacks_t zclSampleTemperatureSensor_CmdCallbacks =
   \                     zclSampleTemperatureSensor_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclSampleTemperatureSensor_C`
   \   000012                REQUIRE __INIT_XDATA_I
    188          {
    189            zclSampleTemperatureSensor_BasicResetCB,        // Basic Cluster Reset command
    190            NULL,                                           // Identify Trigger Effect command
    191            NULL,             				                      // On/Off cluster command
    192            NULL,                                           // On/Off cluster enhanced command Off with Effect
    193            NULL,                                           // On/Off cluster enhanced command On with Recall Global Scene
    194            NULL,                                           // On/Off cluster enhanced command On with Timed Off
    195          #ifdef ZCL_LEVEL_CTRL
    196            NULL,                                           // Level Control Move to Level command
    197            NULL,                                           // Level Control Move command
    198            NULL,                                           // Level Control Step command
    199            NULL,                                           // Level Control Stop command
    200          #endif
    201          #ifdef ZCL_GROUPS
    202            NULL,                                           // Group Response commands
    203          #endif
    204          #ifdef ZCL_SCENES
    205            NULL,                                           // Scene Store Request command
    206            NULL,                                           // Scene Recall Request command
    207            NULL,                                           // Scene Response command
    208          #endif
    209          #ifdef ZCL_ALARMS
    210            NULL,                                           // Alarm (Response) commands
    211          #endif
    212          #ifdef SE_UK_EXT
    213            NULL,                                           // Get Event Log command
    214            NULL,                                           // Publish Event Log command
    215          #endif
    216            NULL,                                           // RSSI Location command
    217            NULL                                            // RSSI Location Response command
    218          };
    219          
    220          /*********************************************************************
    221           * @fn          zclSampleTemperatureSensor_Init
    222           *
    223           * @brief       Initialization function for the zclGeneral layer.
    224           *
    225           * @param       none
    226           *
    227           * @return      none
    228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          void zclSampleTemperatureSensor_Init( byte task_id )
   \                     zclSampleTemperatureSensor_Init:
    230          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    231            zclSampleTemperatureSensor_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclSampleTemperatureSensor_TaskID
   \   000009   F0           MOVX      @DPTR,A
    232          
    233            // Register the Simple Descriptor for this application
    234            bdb_RegisterSimpleDescriptor( &zclSampleTemperatureSensor_SimpleDesc ); 
   \   00000A                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00000A   7A..         MOV       R2,#zclSampleTemperatureSensor_SimpleDesc & 0xff
   \   00000C   7B..         MOV       R3,#(zclSampleTemperatureSensor_SimpleDesc >> 8) & 0xff
   \   00000E   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    235            
    236            // Register the ZCL General Cluster Library callback functions
    237            zclGeneral_RegisterCmdCallbacks( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_CmdCallbacks );
   \   000011                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000011   7A..         MOV       R2,#zclSampleTemperatureSensor_CmdCallbacks & 0xff
   \   000013   7B..         MOV       R3,#(zclSampleTemperatureSensor_CmdCallbacks >> 8) & 0xff
   \   000015   7908         MOV       R1,#0x8
   \   000017   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    238          
    239            // Register the application's attribute list
    240            zclSampleTemperatureSensor_ResetAttributesToDefaultValues();
   \   00001A                ; Setup parameters for call to function zclSampleTemperatureSensor_ResetAttributesToDefaultValues
   \   00001A   12....       LCALL     ??zclSampleTemperatureSensor_ResetAttributesToD; Banked call to: zclSampleTemperatureSensor_ResetAttributesToDefaultValues
    241            zcl_registerAttrList( SAMPLETEMPERATURESENSOR_ENDPOINT, zclSampleTemperatureSensor_NumAttributes, zclSampleTemperatureSensor_Attrs );   
   \   00001D                ; Setup parameters for call to function zcl_registerAttrList
   \   00001D   7C..         MOV       R4,#zclSampleTemperatureSensor_Attrs & 0xff
   \   00001F   7D..         MOV       R5,#(zclSampleTemperatureSensor_Attrs >> 8) & 0xff
   \   000021   90....       MOV       DPTR,#zclSampleTemperatureSensor_NumAttributes
   \   000024   E4           CLR       A
   \   000025   93           MOVC      A,@A+DPTR
   \   000026   FA           MOV       R2,A
   \   000027   7908         MOV       R1,#0x8
   \   000029   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    242          
    243            // Register the Application to receive the unprocessed Foundation command/response messages
    244            zcl_registerForMsg( zclSampleTemperatureSensor_TaskID );
   \   00002C                ; Setup parameters for call to function zcl_registerForMsg
   \   00002C   90....       MOV       DPTR,#zclSampleTemperatureSensor_TaskID
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    245          
    246            // Register low voltage NV memory protection application callback
    247            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   000034                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000034   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   000036   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   000038   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    248          
    249            // Register for all key events - This app will handle all key events
    250            RegisterForKeys( zclSampleTemperatureSensor_TaskID );
   \   00003B                ; Setup parameters for call to function RegisterForKeys
   \   00003B   90....       MOV       DPTR,#zclSampleTemperatureSensor_TaskID
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    251          
    252            bdb_RegisterCommissioningStatusCB( zclSampleTemperatureSensor_ProcessCommissioningStatus );
   \   000043                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   000043   7A..         MOV       R2,#??zclSampleTemperatureSensor_ProcessCommissioni & 0xff
   \   000045   7B..         MOV       R3,#(??zclSampleTemperatureSensor_ProcessCommissioni >> 8) & 0xff
   \   000047   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    253          
    254          #ifdef BDB_REPORTING
    255            //Adds the default configuration values for the temperature attribute of the ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT cluster, for endpoint SAMPLETEMPERATURESENSOR_ENDPOINT
    256            //Default maxReportingInterval value is 10 seconds
    257            //Default minReportingInterval value is 3 seconds
    258            //Default reportChange value is 300 (3 degrees)
    259            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT, ATTRID_MS_TEMPERATURE_MEASURED_VALUE, 0, 10, reportableChange);
   \   00004A                ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
   \   00004A   75....       MOV       ?V0,#reportableChange & 0xff
   \   00004D   75....       MOV       ?V1,#(reportableChange >> 8) & 0xff
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..0A       MOV       ?V0,#0xa
   \   000058   75..00       MOV       ?V1,#0x0
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   E4           CLR       A
   \   000061   F5..         MOV       ?V0,A
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   7C00         MOV       R4,#0x0
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   7A02         MOV       R2,#0x2
   \   00006E   7B04         MOV       R3,#0x4
   \   000070   7908         MOV       R1,#0x8
   \   000072   12....       LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
   \   000075   7406         MOV       A,#0x6
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
    260          #endif
    261            
    262            zdpExternalStateTaskID = zclSampleTemperatureSensor_TaskID;
   \   00007A   90....       MOV       DPTR,#zclSampleTemperatureSensor_TaskID
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   000081   F0           MOVX      @DPTR,A
   \   000082   A3           INC       DPTR
   \   000083   E4           CLR       A
   \   000084   F0           MOVX      @DPTR,A
    263          }
   \   000085   7F02         MOV       R7,#0x2
   \   000087   02....       LJMP      ?BANKED_LEAVE_XDATA
    264          
    265          /*********************************************************************
    266           * @fn          zclSample_event_loop
    267           *
    268           * @brief       Event Loop Processor for zclGeneral.
    269           *
    270           * @param       none
    271           *
    272           * @return      none
    273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    274          uint16 zclSampleTemperatureSensor_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleTemperatureSensor_event_loop:
    275          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    276            afIncomingMSGPacket_t *MSGpkt;
    277          
    278            (void)task_id;  // Intentionally unreferenced parameter
    279          
    280            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   7052         JNZ       ??zclSampleTemperatureSensor_event_loop_0
    281            {
    282              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleTemperatureSensor_TaskID )) )
    283              {
    284                switch ( MSGpkt->hdr.event )
    285                {
    286                  case ZCL_INCOMING_MSG:
    287                    // Incoming ZCL Foundation command/response messages
    288                    zclSampleTemperatureSensor_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    289                    break;
    290          
    291                  case KEY_CHANGE:
    292                    zclSampleTemperatureSensor_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    293                    break;
    294          
    295                  case ZDO_STATE_CHANGE:
    296                    break;
    297          
    298                  default:
    299                    break;
    300                }
    301          
    302                // Release the memory
    303                osal_msg_deallocate( (uint8 *)MSGpkt );
    304              }
    305          
    306              // return unprocessed events
    307              return (events ^ SYS_EVENT_MSG);
    308            }
    309            
    310          #if ZG_BUILD_ENDDEVICE_TYPE    
    311            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
   \   00000D   EA           MOV       A,R2
   \   00000E   5402         ANL       A,#0x2
   \   000010   6079         JZ        ??zclSampleTemperatureSensor_event_loop_1
    312            {
    313              bdb_ZedAttemptRecoverNwk();
   \   000012                ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
   \   000012   12....       LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
    314              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
   \   000015   EE           MOV       A,R6
   \   000016   6402         XRL       A,#0x2
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   806C         SJMP      ??zclSampleTemperatureSensor_event_loop_2
    315            }
   \                     ??zclSampleTemperatureSensor_event_loop_3:
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V2,A
   \   000022   A2E5         MOV       C,0xE0 /* A   */.5
   \   000024   500C         JNC       ??zclSampleTemperatureSensor_event_loop_4
   \   000026                ; Setup parameters for call to function HalLedSet
   \   000026   7A01         MOV       R2,#0x1
   \   000028   7902         MOV       R1,#0x2
   \   00002A   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00002D                ; Setup parameters for call to function bdb_StartCommissioning
   \   00002D   790A         MOV       R1,#0xa
   \   00002F   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \                     ??zclSampleTemperatureSensor_event_loop_4:
   \   000032   E5..         MOV       A,?V2
   \   000034   A2E2         MOV       C,0xE0 /* A   */.2
   \   000036   5020         JNC       ??zclSampleTemperatureSensor_event_loop_5
   \   000038                ; Setup parameters for call to function HalLedSet
   \   000038   7A08         MOV       R2,#0x8
   \   00003A   7902         MOV       R1,#0x2
   \   00003C   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00003F   90....       MOV       DPTR,#zclSampleTemperatureSensor_MeasuredValue
   \   000042   E0           MOVX      A,@DPTR
   \   000043   245E         ADD       A,#0x5e
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   3401         ADDC      A,#0x1
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B                ; Setup parameters for call to function bdb_RepChangedAttrValue
   \   00004B   7C00         MOV       R4,#0x0
   \   00004D   7D00         MOV       R5,#0x0
   \   00004F   7A02         MOV       R2,#0x2
   \   000051   7B04         MOV       R3,#0x4
   \   000053   7908         MOV       R1,#0x8
   \   000055   12....       LCALL     `??bdb_RepChangedAttrValue::?relay`; Banked call to: bdb_RepChangedAttrValue
   \                     ??zclSampleTemperatureSensor_event_loop_5:
   \   000058                ; Setup parameters for call to function osal_msg_deallocate
   \   000058   AA..         MOV       R2,?V0
   \   00005A   AB..         MOV       R3,?V1
   \   00005C   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleTemperatureSensor_event_loop_0:
   \   00005F                ; Setup parameters for call to function osal_msg_receive
   \   00005F   90....       MOV       DPTR,#zclSampleTemperatureSensor_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000067   8A..         MOV       ?V0,R2
   \   000069   8B..         MOV       ?V1,R3
   \   00006B   EA           MOV       A,R2
   \   00006C   4B           ORL       A,R3
   \   00006D   6014         JZ        ??zclSampleTemperatureSensor_event_loop_6
   \   00006F   8A82         MOV       DPL,R2
   \   000071   8B83         MOV       DPH,R3
   \   000073   E0           MOVX      A,@DPTR
   \   000074   24CC         ADD       A,#-0x34
   \   000076   6006         JZ        ??zclSampleTemperatureSensor_event_loop_7
   \   000078   2474         ADD       A,#0x74
   \   00007A   60A0         JZ        ??zclSampleTemperatureSensor_event_loop_3
   \   00007C   80DA         SJMP      ??zclSampleTemperatureSensor_event_loop_5
   \                     ??zclSampleTemperatureSensor_event_loop_7:
   \   00007E                ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIncomingMsg
   \   00007E   12....       LCALL     ??zclSampleTemperatureSensor_ProcessIncomingMsg; Banked call to: zclSampleTemperatureSensor_ProcessIncomingMsg
   \   000081   80D5         SJMP      ??zclSampleTemperatureSensor_event_loop_5
   \                     ??zclSampleTemperatureSensor_event_loop_6:
   \   000083   EE           MOV       A,R6
   \   000084   FA           MOV       R2,A
   \   000085   EF           MOV       A,R7
   \   000086   6480         XRL       A,#0x80
   \                     ??zclSampleTemperatureSensor_event_loop_2:
   \   000088   FB           MOV       R3,A
   \   000089   8019         SJMP      ??zclSampleTemperatureSensor_event_loop_8
    316          #endif
    317          
    318            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \                     ??zclSampleTemperatureSensor_event_loop_1:
   \   00008B   EA           MOV       A,R2
   \   00008C   5410         ANL       A,#0x10
   \   00008E   6005         JZ        ??zclSampleTemperatureSensor_event_loop_9
    319            {
    320              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   000090   EA           MOV       A,R2
   \   000091   6410         XRL       A,#0x10
   \   000093   8008         SJMP      ??zclSampleTemperatureSensor_event_loop_10
    321            }
    322          
    323            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleTemperatureSensor_event_loop_9:
   \   000095   EA           MOV       A,R2
   \   000096   5420         ANL       A,#0x20
   \   000098   6006         JZ        ??zclSampleTemperatureSensor_event_loop_11
    324            {
    325              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   00009A   EA           MOV       A,R2
   \   00009B   6420         XRL       A,#0x20
   \                     ??zclSampleTemperatureSensor_event_loop_10:
   \   00009D   FA           MOV       R2,A
   \   00009E   8004         SJMP      ??zclSampleTemperatureSensor_event_loop_8
    326            }
    327          
    328            // Discard unknown events
    329            return 0;
   \                     ??zclSampleTemperatureSensor_event_loop_11:
   \   0000A0   7A00         MOV       R2,#0x0
   \   0000A2   7B00         MOV       R3,#0x0
   \                     ??zclSampleTemperatureSensor_event_loop_8:
   \   0000A4   7F04         MOV       R7,#0x4
   \   0000A6   02....       LJMP      ?BANKED_LEAVE_XDATA
    330          }
    331          
    332          /*********************************************************************
    333           * @fn      zclSampleTemperatureSensor_HandleKeys
    334           *
    335           * @brief   Handles all key events for this device.
    336           *
    337           * @param   shift - true if in shift/alt.
    338           * @param   keys - bit field for key events. Valid entries:
    339           *                 HAL_KEY_SW_5
    340           *                 HAL_KEY_SW_4
    341           *                 HAL_KEY_SW_3
    342           *                 HAL_KEY_SW_2
    343           *                 HAL_KEY_SW_1
    344           *
    345           * @return  none
    346           */
    347          static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys )
    348          {
    349            if ( keys & HAL_KEY_SW_6 )  // Switch 6
    350            {     
    351              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    352              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING  );
    353            }
    354            if ( keys & HAL_KEY_SW_5 )  // Switch 5
    355            {     
    356              HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
    357              zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MeasuredValue + 350;
    358              bdb_RepChangedAttrValue(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT, ATTRID_MS_TEMPERATURE_MEASURED_VALUE);
    359            }
    360          }
    361          
    362          /*********************************************************************
    363           * @fn      zclSampleTemperatureSensor_LcdDisplayMainMode
    364           *
    365           * @brief   Called to display the main screen on the LCD.
    366           *
    367           * @param   none
    368           *
    369           * @return  none
    370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          static void zclSampleTemperatureSensor_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg)
   \                     zclSampleTemperatureSensor_ProcessCommissioningStatus:
    372          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    373              switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   14           DEC       A
   \   00000B   601B         JZ        ??zclSampleTemperatureSensor_ProcessCommissioni_1
   \   00000D   14           DEC       A
   \   00000E   6006         JZ        ??zclSampleTemperatureSensor_ProcessCommissioni_2
   \   000010   24FD         ADD       A,#-0x3
   \   000012   6024         JZ        ??zclSampleTemperatureSensor_ProcessCommissioni_3
   \   000014   8042         SJMP      ??zclSampleTemperatureSensor_ProcessCommissioni_4
    374              {
    375                case BDB_COMMISSIONING_FORMATION:
    376                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclSampleTemperatureSensor_ProcessCommissioni_2:
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   703B         JNZ       ??zclSampleTemperatureSensor_ProcessCommissioni_4
    377                  {
    378                    //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    379                    bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   00001D                ; Setup parameters for call to function bdb_StartCommissioning
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   4402         ORL       A,#0x2
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   000026   8030         SJMP      ??zclSampleTemperatureSensor_ProcessCommissioni_4
    380                  }
    381                  else
    382                  {
    383                    //Want to try other channels?
    384                    //try with bdb_setChannelAttribute
    385                  }
    386                break;
    387                case BDB_COMMISSIONING_NWK_STEERING:
    388                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclSampleTemperatureSensor_ProcessCommissioni_1:
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   7029         JNZ       ??zclSampleTemperatureSensor_ProcessCommissioni_4
    389                  {
    390                    //YOUR JOB:
    391                    //We are on the nwk, what now?
    392                    HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00002F                ; Setup parameters for call to function HalLedSet
   \   00002F   7A01         MOV       R2,#0x1
   \   000031   7901         MOV       R1,#0x1
   \   000033   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000036   8020         SJMP      ??zclSampleTemperatureSensor_ProcessCommissioni_4
    393                  }
    394                  else
    395                  {
    396                    //See the possible errors for nwk steering procedure
    397                    //No suitable networks found
    398                    //Want to try other channels?
    399                    //try with bdb_setChannelAttribute
    400                  }
    401                break;
    402                case BDB_COMMISSIONING_FINDING_BINDING:
    403                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    404                  {
    405                    //YOUR JOB:
    406                  }
    407                  else
    408                  {
    409                    //YOUR JOB:
    410                    //retry?, wait for user interaction?
    411                  }
    412                break;
    413                case BDB_COMMISSIONING_INITIALIZATION:
    414                  //Initialization notification can only be successful. Failure on initialization 
    415                  //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    416                  
    417                  //YOUR JOB:
    418                  //We are on a network, what now?
    419                  
    420                break;
    421          #if ZG_BUILD_ENDDEVICE_TYPE    
    422              case BDB_COMMISSIONING_PARENT_LOST:
    423                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   \                     ??zclSampleTemperatureSensor_ProcessCommissioni_3:
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   640D         XRL       A,#0xd
   \   00003F   6017         JZ        ??zclSampleTemperatureSensor_ProcessCommissioni_4
    424                {
    425                  //We did recover from losing parent
    426                }
    427                else
    428                {
    429                  //Parent not found, attempt to rejoin again after a fixed delay
    430                  osal_start_timerEx(zclSampleTemperatureSensor_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
   \   000041                ; Setup parameters for call to function osal_start_timerEx
   \   000041   90....       MOV       DPTR,#__Constant_2710
   \   000044   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000047   7A02         MOV       R2,#0x2
   \   000049   7B00         MOV       R3,#0x0
   \   00004B   90....       MOV       DPTR,#zclSampleTemperatureSensor_TaskID
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F9           MOV       R1,A
   \   000050   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
    431                }
    432              break;
    433          #endif 
    434              }
    435          
    436          }
   \                     ??zclSampleTemperatureSensor_ProcessCommissioni_4:
   \   000058                REQUIRE ?Subroutine0
   \   000058                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    437          
    438          /*********************************************************************
    439           * @fn      zclSampleTemperatureSensor_BasicResetCB
    440           *
    441           * @brief   Callback from the ZCL General Cluster Library
    442           *          to set all the Basic Cluster attributes to default values.
    443           *
    444           * @param   none
    445           *
    446           * @return  none
    447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    448          static void zclSampleTemperatureSensor_BasicResetCB( void )
   \                     zclSampleTemperatureSensor_BasicResetCB:
    449          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    450            zclSampleTemperatureSensor_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleTemperatureSensor_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     ??zclSampleTemperatureSensor_ResetAttributesToD; Banked call to: zclSampleTemperatureSensor_ResetAttributesToDefaultValues
    451          }
   \   000007   80..         SJMP      ?Subroutine0
    452          
    453          /*********************************************************************
    454           * @fn      zclSampleApp_BatteryWarningCB
    455           *
    456           * @brief   Called to handle battery-low situation.
    457           *
    458           * @param   voltLevel - level of severity
    459           *
    460           * @return  none
    461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
    463          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    464            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    465            {
    466              // Send warning message to the gateway and blink LED
    467            }
    468            else if ( voltLevel == VOLT_LEVEL_BAD )
    469            {
    470              // Shut down the system
    471            }
    472          }
   \   000000   02....       LJMP      ?BRET
    473          
    474          /******************************************************************************
    475           *
    476           *  Functions for processing ZCL Foundation incoming Command/Response messages
    477           *
    478           *****************************************************************************/
    479          
    480          /*********************************************************************
    481           * @fn      zclSampleTemperatureSensor_ProcessIncomingMsg
    482           *
    483           * @brief   Process ZCL Foundation incoming message
    484           *
    485           * @param   pInMsg - pointer to the received message
    486           *
    487           * @return  none
    488           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
   \                     zclSampleTemperatureSensor_ProcessIncomingMsg:
    490          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    491            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   FE           MOV       R6,A
   \   00000E   E9           MOV       A,R1
   \   00000F   FF           MOV       R7,A
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   14           DEC       A
   \   00001D   6016         JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_1
   \   00001F   24FD         ADD       A,#-0x3
   \   000021   601F         JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_2
   \   000023   24F7         ADD       A,#-0x9
   \   000025   602D         JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_3
   \   000027   24FB         ADD       A,#-0x5
   \   000029   6024         JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_4
   \   00002B   24FE         ADD       A,#-0x2
   \   00002D   6020         JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_4
   \   00002F   24FE         ADD       A,#-0x2
   \   000031   6033         JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_5
   \   000033   8043         SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
    492            {
    493          #ifdef ZCL_READ
    494              case ZCL_CMD_READ_RSP:
    495                zclSampleTemperatureSensor_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleTemperatureSensor_ProcessIncomingMsg_1:
   \   000035   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   E8           MOV       A,R0
   \   00003B   C3           CLR       C
   \   00003C   99           SUBB      A,R1
   \   00003D   5039         JNC       ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
   \   00003F   08           INC       R0
   \   000040   80F6         SJMP      ??CrossCallReturnLabel_0
    496                break;
    497          #endif
    498          #ifdef ZCL_WRITE
    499              case ZCL_CMD_WRITE_RSP:
    500                zclSampleTemperatureSensor_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleTemperatureSensor_ProcessIncomingMsg_2:
   \   000042   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   E8           MOV       A,R0
   \   000048   C3           CLR       C
   \   000049   99           SUBB      A,R1
   \   00004A   502C         JNC       ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
   \   00004C   08           INC       R0
   \   00004D   80F6         SJMP      ??CrossCallReturnLabel_1
    501                break;
    502          #endif
    503          #ifdef ZCL_REPORT
    504              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    505              case ZCL_CMD_CONFIG_REPORT:
    506                //zclSampleTemperatureSensor_ProcessInConfigReportCmd( pInMsg );
    507                break;
    508                case ZCL_CMD_READ_REPORT_CFG:
    509                //zclSampleTemperatureSensor_ProcessInReadReportCfgCmd( pInMsg );
    510                break;
    511              case ZCL_CMD_CONFIG_REPORT_RSP:
    512                //zclSampleTemperatureSensor_ProcessInConfigReportRspCmd( pInMsg );
    513                break;
    514              case ZCL_CMD_READ_REPORT_CFG_RSP:
    515                //zclSampleTemperatureSensor_ProcessInReadReportCfgRspCmd( pInMsg );
    516                break;
    517          
    518              case ZCL_CMD_REPORT:
    519                //zclSampleTemperatureSensor_ProcessInReportCmd( pInMsg );
    520                break;
    521          #endif
    522              case ZCL_CMD_DEFAULT_RSP:
    523                zclSampleTemperatureSensor_ProcessInDefaultRspCmd( pInMsg );
    524                break;
    525          #ifdef ZCL_DISCOVER
    526              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    527                zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleTemperatureSensor_ProcessIncomingMsg_4:
   \   00004F                ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
    528                break;
    529          
    530              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    531                zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
   \   00004F                ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
   \   00004F   12....       LCALL     ??zclSampleTemperatureSensor_ProcessInDiscCmdsR; Banked call to: zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
    532                break;
   \   000052   8024         SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
    533          
    534              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    535                zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleTemperatureSensor_ProcessIncomingMsg_3:
   \   000054   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000057   8882         MOV       DPL,R0
   \   000059   8983         MOV       DPH,R1
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FB           MOV       R3,A
   \   00005E   EA           MOV       A,R2
   \   00005F   C3           CLR       C
   \   000060   9B           SUBB      A,R3
   \   000061   5015         JNC       ??zclSampleTemperatureSensor_ProcessIncomingMsg_6
   \   000063   0A           INC       R2
   \   000064   80F1         SJMP      ??CrossCallReturnLabel_3
    536                break;
    537          
    538              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    539                zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleTemperatureSensor_ProcessIncomingMsg_5:
   \   000066   12....       LCALL     ?Subroutine1 & 0xFFFF
    540                break;
    541          #endif
    542              default:
    543                break;
    544            }
   \                     ??CrossCallReturnLabel_4:
   \   000069   8001         SJMP      ??zclSampleTemperatureSensor_ProcessIncomingMsg_7
   \                     ??zclSampleTemperatureSensor_ProcessIncomingMsg_8:
   \   00006B   0A           INC       R2
   \                     ??zclSampleTemperatureSensor_ProcessIncomingMsg_7:
   \   00006C   8882         MOV       DPL,R0
   \   00006E   8983         MOV       DPH,R1
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FB           MOV       R3,A
   \   000073   EA           MOV       A,R2
   \   000074   C3           CLR       C
   \   000075   9B           SUBB      A,R3
   \   000076   40F3         JC        ??zclSampleTemperatureSensor_ProcessIncomingMsg_8
    545          
    546            if ( pInMsg->attrCmd )
   \                     ??zclSampleTemperatureSensor_ProcessIncomingMsg_6:
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FB           MOV       R3,A
   \   000081   EA           MOV       A,R2
   \   000082   4B           ORL       A,R3
   \   000083   6003         JZ        ??zclSampleTemperatureSensor_ProcessIncomingMsg_9
    547            {
    548              osal_mem_free( pInMsg->attrCmd );
   \   000085                ; Setup parameters for call to function osal_mem_free
   \   000085   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    549            }
    550          }
   \                     ??zclSampleTemperatureSensor_ProcessIncomingMsg_9:
   \   000088   7F01         MOV       R7,#0x1
   \   00008A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine3_0
   \   000004                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   7A00         MOV       R2,#0x0
   \   000007   22           RET
    551          
    552          #ifdef ZCL_READ
    553          /*********************************************************************
    554           * @fn      zclSampleTemperatureSensor_ProcessInReadRspCmd
    555           *
    556           * @brief   Process the "Profile" Read Response Command
    557           *
    558           * @param   pInMsg - incoming message to process
    559           *
    560           * @return  none
    561           */
    562          static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    563          {
    564            zclReadRspCmd_t *readRspCmd;
    565            uint8 i;
    566          
    567            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    568            for ( i = 0; i < readRspCmd->numAttr; i++ )
    569            {
    570              // Notify the originator of the results of the original read attributes
    571              // attempt and, for each successfull request, the value of the requested
    572              // attribute
    573            }
    574          
    575            return ( TRUE );
    576          }
    577          #endif // ZCL_READ
    578          
    579          #ifdef ZCL_WRITE
    580          /*********************************************************************
    581           * @fn      zclSampleTemperatureSensor_ProcessInWriteRspCmd
    582           *
    583           * @brief   Process the "Profile" Write Response Command
    584           *
    585           * @param   pInMsg - incoming message to process
    586           *
    587           * @return  none
    588           */
    589          static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    590          {
    591            zclWriteRspCmd_t *writeRspCmd;
    592            uint8 i;
    593          
    594            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    595            for ( i = 0; i < writeRspCmd->numAttr; i++ )
    596            {
    597              // Notify the device of the results of the its original write attributes
    598              // command.
    599            }
    600          
    601            return ( TRUE );
    602          }
    603          #endif // ZCL_WRITE
    604          
    605          /*********************************************************************
    606           * @fn      zclSampleTemperatureSensor_ProcessInDefaultRspCmd
    607           *
    608           * @brief   Process the "Profile" Default Response Command
    609           *
    610           * @param   pInMsg - incoming message to process
    611           *
    612           * @return  none
    613           */
    614          static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    615          {
    616            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    617          
    618            // Device is notified of the Default Response command.
    619            (void)pInMsg;
    620          
    621            return ( TRUE );
    622          }
    623          
    624          #ifdef ZCL_DISCOVER
    625          /*********************************************************************
    626           * @fn      zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
    627           *
    628           * @brief   Process the Discover Commands Response Command
    629           *
    630           * @param   pInMsg - incoming message to process
    631           *
    632           * @return  none
    633           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    634          static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd:
    635          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    636            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    637            uint8 i;
    638          
    639            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   EA           MOV       A,R2
   \   000005   2417         ADD       A,#0x17
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine3_0 & 0xFFFF
    640            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_2:
   \   000010   8001         SJMP      ??zclSampleTemperatureSensor_ProcessInDiscCmdsR_1
   \                     ??zclSampleTemperatureSensor_ProcessInDiscCmdsR_2:
   \   000012   0A           INC       R2
   \                     ??zclSampleTemperatureSensor_ProcessInDiscCmdsR_1:
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   C3           CLR       C
   \   00001D   9B           SUBB      A,R3
   \   00001E   40F2         JC        ??zclSampleTemperatureSensor_ProcessInDiscCmdsR_2
    641            {
    642              // Device is notified of the result of its attribute discovery command.
    643            }
    644          
    645            return ( TRUE );
   \   000020   7901         MOV       R1,#0x1
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
    646          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleTemperatureSensor_N`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for reportableChange>`:
   \   000000   2C           DB 44
   \   000001   01           DB 1
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleTemperatureSensor_C`:
   \   000000   ....         DW `??zclSampleTemperatureSensor_BasicResetCB::?rel`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
    647          
    648          /*********************************************************************
    649           * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd
    650           *
    651           * @brief   Process the "Profile" Discover Attributes Response Command
    652           *
    653           * @param   pInMsg - incoming message to process
    654           *
    655           * @return  none
    656           */
    657          static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
    658          {
    659            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    660            uint8 i;
    661          
    662            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    663            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    664            {
    665              // Device is notified of the result of its attribute discovery command.
    666            }
    667          
    668            return ( TRUE );
    669          }
    670          
    671          /*********************************************************************
    672           * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
    673           *
    674           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    675           *
    676           * @param   pInMsg - incoming message to process
    677           *
    678           * @return  none
    679           */
    680          static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
    681          {
    682            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    683            uint8 i;
    684          
    685            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
    686            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    687            {
    688              // Device is notified of the result of its attribute discovery command.
    689            }
    690          
    691            return ( TRUE );
    692          }
    693          #endif // ZCL_DISCOVER
    694          
    695          // GUI_LOCAL_TEMP
    696          //static void zclSampleTemperatureSensor_UiActionChangeTemp(uint16 keys)
    697          //{
    698          //  if ( keys & HAL_KEY_SW_1 )
    699          //  {
    700          //    // increase the temperature
    701          //    if ( zclSampleTemperatureSensor_MeasuredValue < zclSampleTemperatureSensor_MaxMeasuredValue )
    702          //    {
    703          //      zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MeasuredValue + 100;  // considering using whole number value
    704          //#ifdef BDB_REPORTING      
    705          //      uint8 status = bdb_RepChangedAttrValue(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT, ATTRID_MS_TEMPERATURE_MEASURED_VALUE);
    706          //#endif
    707          //    }
    708          //    else if ( zclSampleTemperatureSensor_MeasuredValue >= zclSampleTemperatureSensor_MaxMeasuredValue )
    709          //    {
    710          //      zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MaxMeasuredValue;
    711          //    }
    712          //  }
    713          //  
    714          //  if ( keys & HAL_KEY_SW_3 )
    715          //  {
    716          //    // decrease the temperature
    717          //    if ( zclSampleTemperatureSensor_MeasuredValue > zclSampleTemperatureSensor_MinMeasuredValue )
    718          //    {
    719          //      zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MeasuredValue - 100;  // considering using whole number value
    720          //#ifdef BDB_REPORTING
    721          //      uint8 status = bdb_RepChangedAttrValue(SAMPLETEMPERATURESENSOR_ENDPOINT, ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT, ATTRID_MS_TEMPERATURE_MEASURED_VALUE);
    722          //#endif
    723          //    }
    724          //    else if ( zclSampleTemperatureSensor_MeasuredValue <= zclSampleTemperatureSensor_MinMeasuredValue )
    725          //    {
    726          //      zclSampleTemperatureSensor_MeasuredValue = zclSampleTemperatureSensor_MinMeasuredValue;
    727          //    }
    728          //  }
    729          //  
    730          //  UI_UpdateLcd();
    731          //}
    732          
    733          /****************************************************************************
    734          ****************************************************************************/
    735          
    736          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   zclSampleApp_BatteryWarningCB
      2      0   zclSampleTemperatureSensor_BasicResetCB
        2      0   -> zclSampleTemperatureSensor_ResetAttributesToDefaultValues
      0     16   zclSampleTemperatureSensor_Init
        0     10   -> RegisterForKeys
        0     10   -> RegisterVoltageWarningCB
        0     10   -> bdb_RegisterCommissioningStatusCB
        0     10   -> bdb_RegisterSimpleDescriptor
        0     16   -> bdb_RepAddAttrCfgRecordDefaultToList
        0     10   -> zclGeneral_RegisterCmdCallbacks
        0     10   -> zclSampleTemperatureSensor_ResetAttributesToDefaultValues
        0     10   -> zcl_registerAttrList
        0     10   -> zcl_registerForMsg
      2      4   zclSampleTemperatureSensor_ProcessCommissioningStatus
        2      0   -> HalLedSet
        2      0   -> bdb_StartCommissioning
        2      4   -> osal_start_timerEx
      2      9   zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
      0     21   zclSampleTemperatureSensor_ProcessIncomingMsg
        0      9   -> osal_mem_free
        0      9   -> zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
      0     12   zclSampleTemperatureSensor_event_loop
        0     12   -> HalLedSet
        0     12   -> bdb_RepChangedAttrValue
        0     12   -> bdb_StartCommissioning
        0     12   -> bdb_ZedAttemptRecoverNwk
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> zclSampleTemperatureSensor_ProcessIncomingMsg


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for reportableChange>
      18  ?<Initializer for zclSampleTemperatureSensor_C
       1  ?<Initializer for zclSampleTemperatureSensor_N
       8  ??Subroutine3_0
       7  ?Subroutine0
       4  ?Subroutine1
      15  ?Subroutine2
       4  __Constant_2710
       4  reportableChange
       3  zclSampleApp_BatteryWarningCB
       9  zclSampleTemperatureSensor_BasicResetCB
      18  zclSampleTemperatureSensor_CmdCallbacks
     138  zclSampleTemperatureSensor_Init
       1  zclSampleTemperatureSensor_NwkState
      88  zclSampleTemperatureSensor_ProcessCommissioningStatus
      37  zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
     141  zclSampleTemperatureSensor_ProcessIncomingMsg
       1  zclSampleTemperatureSensor_TaskID
     169  zclSampleTemperatureSensor_event_loop
      42  -- Other

 
 619 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  23 bytes in segment XDATA_I
  23 bytes in segment XDATA_ID
   4 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
  65 bytes of CODE     memory
   0 bytes of CONST    memory (+ 4 bytes shared)
 619 bytes of HUGECODE memory
  24 bytes of XDATA    memory

Errors: none
Warnings: none
