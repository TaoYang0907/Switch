###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               21/Jul/2020  00:36:30
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\af\AF.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWBB8.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\af\AF.c" -D BDB_REPORTING -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS
#        -D ZCL_ON_OFF -D ZCL_REPORT -D ZCL_REPORT_DESTINATION_DEVICE -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\AF.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\AF.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-11-04 10:53:36 -0800 (Tue, 04 Nov 2014) $
      4            Revision:       $Revision: 40974 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          #include "bdb.h" 
     62          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED==1)
     63            #include "bdb_tlCommissioning.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          /*********************************************************************
     71           * @fn      afSend
     72           *
     73           * @brief   Helper macro for V1 API to invoke V2 API.
     74           *
     75           * input parameters
     76           *
     77           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     78           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     79           * @param   cID - A valid cluster ID as specified by the Profile.
     80           * @param   len - Number of bytes of data pointed to by next param.
     81           * @param  *buf - A pointer to the data bytes to send.
     82           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     83           * @param  *transID - A pointer to a byte which can be modified and which will
     84           *                    be used as the transaction sequence number of the msg.
     85           *
     86           * output parameters
     87           *
     88           * @param  *transID - Incremented by one if the return value is success.
     89           *
     90           * @return  afStatus_t - See previous definition of afStatus_... types.
     91           */
     92          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     93                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     94                                    (cID), (len), (buf), (transID), (options), (radius) )
     95          
     96          /*********************************************************************
     97           * GLOBAL VARIABLES
     98           */
     99          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    101          
    102          /*********************************************************************
    103           * LOCAL FUNCTIONS
    104           */
    105          
    106          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    107                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    108                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    109          
    110          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    111          
    112          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    113          
    114          /*********************************************************************
    115           * PUBLIC FUNCTIONS
    116           */
    117          
    118          /*********************************************************************
    119           * @fn      afInit
    120           *
    121           * @brief   Initialization function for the AF.
    122           *
    123           * @param   none
    124           *
    125           * @return  none
    126          void afInit( void )
    127          {
    128          }
    129           */
    130          
    131          /*********************************************************************
    132           * @fn      afRegisterExtended
    133           *
    134           * @brief   Register an Application's EndPoint description.
    135           *
    136           * @param   epDesc - pointer to the Application's endpoint descriptor.
    137           * @param   descFn - pointer to descriptor callback function
    138           * @param   applFn - pointer to the Application callback function
    139           *
    140           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    141           *
    142           * @return  Pointer to epList_t on success, NULL otherwise.
    143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    144          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    146            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0B         MOV       R2,#0xb
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V4,R2
   \   000016   8B..         MOV       ?V5,R3
   \   000018   AE..         MOV       R6,?V4
   \   00001A   AF..         MOV       R7,?V5
    147          
    148            if (ep != NULL)
   \   00001C   EA           MOV       A,R2
   \   00001D   4F           ORL       A,R7
   \   00001E   7003         JNZ       $+5
   \   000020   02....       LJMP      ??afRegisterExtended_0 & 0xFFFF
    149            {
    150              ep->nextDesc = epList;
   \   000023   90....       MOV       DPTR,#epList
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   \   00002B   8A82         MOV       DPL,R2
   \   00002D   8B83         MOV       DPH,R3
   \   00002F   E8           MOV       A,R0
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   E9           MOV       A,R1
   \   000033   F0           MOVX      @DPTR,A
    151              epList = ep;
   \   000034   90....       MOV       DPTR,#epList
   \   000037   EA           MOV       A,R2
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   EB           MOV       A,R3
   \   00003B   F0           MOVX      @DPTR,A
    152              ep->epDesc = epDesc;
   \   00003C   EA           MOV       A,R2
   \   00003D   2402         ADD       A,#0x2
   \   00003F   F5..         MOV       ?V4,A
   \   000041   E4           CLR       A
   \   000042   3F           ADDC      A,R7
   \   000043   F5..         MOV       ?V5,A
   \   000045   85..82       MOV       DPL,?V4
   \   000048   F583         MOV       DPH,A
   \   00004A   E5..         MOV       A,?V0
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   E5..         MOV       A,?V1
   \   000050   F0           MOVX      @DPTR,A
    153              ep->pfnDescCB = descFn;
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E5..         MOV       A,?V2
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   E5..         MOV       A,?V3
   \   00005F   F0           MOVX      @DPTR,A
    154              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000060   8A82         MOV       DPL,R2
   \   000062   8B83         MOV       DPH,R3
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   7432         MOV       A,#0x32
   \   00006C   F0           MOVX      @DPTR,A
    155              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00006D   8A82         MOV       DPL,R2
   \   00006F   8B83         MOV       DPH,R3
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   7401         MOV       A,#0x1
   \   00007A   F0           MOVX      @DPTR,A
    156              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \   00007B   8A82         MOV       DPL,R2
   \   00007D   8B83         MOV       DPH,R3
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   F0           MOVX      @DPTR,A
    157              ep->pfnApplCB = applFn;
   \   000088   740E         MOV       A,#0xe
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F8           MOV       R0,A
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   F9           MOV       R1,A
   \   000092   8A82         MOV       DPL,R2
   \   000094   8B83         MOV       DPH,R3
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   E8           MOV       A,R0
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E9           MOV       A,R1
   \   0000A3   F0           MOVX      @DPTR,A
    158              
    159            #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    160              //Make sure we add at least one application endpoint
    161              if ((epDesc->endPoint != 0)  || (epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   \   0000A4   85..82       MOV       DPL,?V0
   \   0000A7   85..83       MOV       DPH,?V1
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   7005         JNZ       ??afRegisterExtended_1
   \   0000AD   C3           CLR       C
   \   0000AE   94F1         SUBB      A,#-0xf
   \   0000B0   5034         JNC       ??afRegisterExtended_0
    162              {
    163                bdb_HeadEpDescriptorList = epList;
   \                     ??afRegisterExtended_1:
   \   0000B2   90....       MOV       DPTR,#epList
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F8           MOV       R0,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F9           MOV       R1,A
   \   0000BA   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   0000BD   E8           MOV       A,R0
   \   0000BE   F0           MOVX      @DPTR,A
   \   0000BF   A3           INC       DPTR
   \   0000C0   E9           MOV       A,R1
   \   0000C1   F0           MOVX      @DPTR,A
    164                ep->epDesc->epType = bdb_zclFindingBindingEpType(ep->epDesc);
   \   0000C2                ; Setup parameters for call to function bdb_zclFindingBindingEpType
   \   0000C2   85..82       MOV       DPL,?V4
   \   0000C5   85..83       MOV       DPH,?V5
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   FA           MOV       R2,A
   \   0000CA   A3           INC       DPTR
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   FB           MOV       R3,A
   \   0000CD   12....       LCALL     `??bdb_zclFindingBindingEpType::?relay`; Banked call to: bdb_zclFindingBindingEpType
   \   0000D0   E9           MOV       A,R1
   \   0000D1   F8           MOV       R0,A
   \   0000D2   C0E0         PUSH      A
   \   0000D4   85..82       MOV       DPL,?V4
   \   0000D7   85..83       MOV       DPH,?V5
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F8           MOV       R0,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   F583         MOV       DPH,A
   \   0000E0   8882         MOV       DPL,R0
   \   0000E2   A3           INC       DPTR
   \   0000E3   D0E0         POP       A
   \   0000E5   F0           MOVX      @DPTR,A
    165              }
    166          
    167            #endif
    168          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
    169              // find the first empty entry in the device info table
    170              for ( uint8 i = 0; i < 5; i++ )
    171              {
    172                if ( touchLinkSubDevicesTbl[i] == NULL )
    173                {
    174                  touchLinkSubDevicesTbl[i] = osal_mem_alloc(sizeof(bdbTLDeviceInfo_t));
    175                  if ( touchLinkSubDevicesTbl[i] != NULL )
    176                  {
    177                    touchLinkSubDevicesTbl[i]->deviceID = epDesc->simpleDesc->AppDeviceId;
    178                    touchLinkSubDevicesTbl[i]->endpoint = epDesc->simpleDesc->EndPoint;
    179                    touchLinkSubDevicesTbl[i]->profileID = epDesc->simpleDesc->AppProfId;
    180                    touchLinkSubDevicesTbl[i]->version = epDesc->simpleDesc->AppDevVer;
    181                    break;
    182                  }
    183                }
    184              }
    185          #endif  // BDB_TL_INITIATOR || BDB_TL_TARGET
    186            }
    187           
    188            return ep;
   \                     ??afRegisterExtended_0:
   \   0000E6   EE           MOV       A,R6
   \   0000E7   FA           MOV       R2,A
   \   0000E8   EF           MOV       A,R7
   \   0000E9   FB           MOV       R3,A
   \   0000EA   7F06         MOV       R7,#0x6
   \   0000EC   02....       LJMP      ?BANKED_LEAVE_XDATA
    189          }
    190          
    191          /*********************************************************************
    192           * @fn      afRegister
    193           *
    194           * @brief   Register an Application's EndPoint description.
    195           *
    196           * @param   epDesc - pointer to the Application's endpoint descriptor.
    197           *
    198           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    199           *
    200           * @return  afStatus_SUCCESS - Registered
    201           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    202           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    205          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    206            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   6004         JZ        ??afRegister_0
    207            {
    208              return afStatus_INVALID_PARAMETER;
   \   000016   7902         MOV       R1,#0x2
   \   000018   8024         SJMP      ??afRegister_1
    209            }
    210          
    211            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001A                ; Setup parameters for call to function afRegisterExtended
   \   00001A   E4           CLR       A
   \   00001B   F5..         MOV       ?V0,A
   \   00001D   F5..         MOV       ?V1,A
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   7C00         MOV       R4,#0x0
   \   000026   7D00         MOV       R5,#0x0
   \   000028   EE           MOV       A,R6
   \   000029   FA           MOV       R2,A
   \   00002A   EF           MOV       A,R7
   \   00002B   FB           MOV       R3,A
   \   00002C   12....       LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   EA           MOV       A,R2
   \   000035   4B           ORL       A,R3
   \   000036   7004         JNZ       ??afRegister_2
   \   000038   7910         MOV       R1,#0x10
   \   00003A   8002         SJMP      ??afRegister_1
   \                     ??afRegister_2:
   \   00003C   7900         MOV       R1,#0x0
   \                     ??afRegister_1:
   \   00003E   7F02         MOV       R7,#0x2
   \   000040   02....       LJMP      ?BANKED_LEAVE_XDATA
    212          }
    213          
    214          /*********************************************************************
    215           * @fn      afDelete
    216           *
    217           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    218           *
    219           * @param   EndPoint - Application Endpoint to delete
    220           *
    221           * @return  afStatus_SUCCESS - endpoint deleted
    222           *          afStatus_INVALID_PARAMETER - endpoint not found
    223           *          afStatus_FAILED - endpoint list empty
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    226          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    227            epList_t *epCurrent;
    228            epList_t *epPrevious;
    229          
    230            if ( epList != NULL )
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   E8           MOV       A,R0
   \   000010   49           ORL       A,R1
   \   000011   6067         JZ        ??afDelete_0
    231            {
    232              epPrevious = epCurrent = epList;
   \   000013   90....       MOV       DPTR,#epList
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FA           MOV       R2,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   F8           MOV       R0,A
   \   00001D   EB           MOV       A,R3
   \   00001E   F9           MOV       R1,A
    233          
    234              // first element of the list matches
    235              if ( epCurrent->epDesc->endPoint == EndPoint )
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FC           MOV       R4,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FD           MOV       R5,A
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FF           MOV       R7,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F583         MOV       DPH,A
   \   000034   8F82         MOV       DPL,R7
   \   000036   E0           MOVX      A,@DPTR
   \   000037   6E           XRL       A,R6
   \   000038   7009         JNZ       ??afDelete_1
    236              {
    237                epList = epCurrent->nextDesc;
   \   00003A   90....       MOV       DPTR,#epList
   \   00003D   802B         SJMP      ??afDelete_2
    238                osal_mem_free( epCurrent );
    239          
    240                return ( afStatus_SUCCESS );
    241              }
    242              else
    243              {
    244                // search the list
    245                for ( epCurrent = epPrevious->nextDesc;
    246                      epCurrent != NULL;
    247                      epCurrent = epCurrent->nextDesc )
    248                {
    249                  if ( epCurrent->epDesc->endPoint == EndPoint )
    250                  {
    251                    epPrevious->nextDesc = epCurrent->nextDesc;
    252                    osal_mem_free( epCurrent );
    253          
    254                    // delete the entry and free the memory
    255                    return ( afStatus_SUCCESS );
    256                  }
    257                  epPrevious = epCurrent;
   \                     ??afDelete_3:
   \   00003F   EA           MOV       A,R2
   \   000040   F8           MOV       R0,A
   \   000041   EB           MOV       A,R3
   \   000042   F9           MOV       R1,A
   \                     ??afDelete_1:
   \   000043   EC           MOV       A,R4
   \   000044   FA           MOV       R2,A
   \   000045   ED           MOV       A,R5
   \   000046   FB           MOV       R3,A
   \   000047   EA           MOV       A,R2
   \   000048   4B           ORL       A,R3
   \   000049   602B         JZ        ??afDelete_4
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FC           MOV       R4,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   FD           MOV       R5,A
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FF           MOV       R7,A
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F583         MOV       DPH,A
   \   000060   8F82         MOV       DPL,R7
   \   000062   E0           MOVX      A,@DPTR
   \   000063   6E           XRL       A,R6
   \   000064   70D9         JNZ       ??afDelete_3
   \   000066   8882         MOV       DPL,R0
   \   000068   8983         MOV       DPH,R1
   \                     ??afDelete_2:
   \   00006A   EC           MOV       A,R4
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   ED           MOV       A,R5
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F                ; Setup parameters for call to function osal_mem_free
   \   00006F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000072   7900         MOV       R1,#0x0
   \   000074   8006         SJMP      ??afDelete_5
    258                }
    259              }
    260          
    261              // no endpoint found
    262              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_4:
   \   000076   7902         MOV       R1,#0x2
   \   000078   8002         SJMP      ??afDelete_5
    263            }
    264            else
    265            {
    266              // epList is empty
    267              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   00007A   7901         MOV       R1,#0x1
   \                     ??afDelete_5:
   \   00007C   7F01         MOV       R7,#0x1
   \   00007E   02....       LJMP      ?BANKED_LEAVE_XDATA
    268            }
    269          }
    270          
    271          /*********************************************************************
    272           * @fn          afDataConfirm
    273           *
    274           * @brief       This function will generate the Data Confirm back to
    275           *              the application.
    276           *
    277           * @param       endPoint - confirm end point
    278           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    279           * @param       status - status of APSDE_DATA_REQUEST
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   8B..         MOV       ?V2,R3
    285            endPointDesc_t *epDesc;
    286            afDataConfirm_t *msgPtr;
    287          
    288            // Find the endpoint description
    289            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
   \   000012   AE..         MOV       R6,?V4
   \   000014   AF..         MOV       R7,?V5
    290            if ( epDesc == NULL )
   \   000016   EA           MOV       A,R2
   \   000017   4F           ORL       A,R7
   \   000018   603C         JZ        ??afDataConfirm_0
    291              return;
    292          
    293            // Determine the incoming command type
    294            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001A                ; Setup parameters for call to function osal_msg_allocate
   \   00001A   7A04         MOV       R2,#0x4
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    295            if ( msgPtr )
   \   000021   EA           MOV       A,R2
   \   000022   4B           ORL       A,R3
   \   000023   6031         JZ        ??afDataConfirm_0
    296            {
    297              // Build the Data Confirm message
    298              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   74FD         MOV       A,#-0x3
   \   00002B   F0           MOVX      @DPTR,A
    299              msgPtr->hdr.status = status;
   \   00002C   A3           INC       DPTR
   \   00002D   E5..         MOV       A,?V2
   \   00002F   F0           MOVX      @DPTR,A
    300              msgPtr->endpoint = endPoint;
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E5..         MOV       A,?V0
   \   000038   F0           MOVX      @DPTR,A
    301              msgPtr->transID = transID;
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E5..         MOV       A,?V1
   \   000042   F0           MOVX      @DPTR,A
    302          
    303          #if defined ( MT_AF_CB_FUNC )
    304              /* If MT has subscribed for this callback, don't send as a message. */
    305              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    306              {
    307                /* Send callback if it's subscribed */
    308                MT_AfDataConfirm ((void *)msgPtr);
    309                /* Release the memory. */
    310                osal_msg_deallocate( (void *)msgPtr );
    311              }
    312              else
    313          #endif
    314              {
    315                /* send message through task message */
    316                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   000043                ; Setup parameters for call to function osal_msg_send
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F8           MOV       R0,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F583         MOV       DPH,A
   \   00004F   8882         MOV       DPL,R0
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F9           MOV       R1,A
   \   000053   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    317              }
    318            }
    319          }
   \                     ??afDataConfirm_0:
   \   000056   7F06         MOV       R7,#0x6
   \   000058   02....       LJMP      ?BANKED_LEAVE_XDATA
    320          
    321          /*********************************************************************
    322           * @fn          afReflectError
    323           *
    324           * @brief       This function will generate the Reflect Error message to
    325           *              the application.
    326           *
    327           * @param       srcEP - Source Endpoint
    328           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    329           * @param       dstAddr - intended destination
    330           * @param       dstEP - Destination Endpoint
    331           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    332           * @param       status - status of APSDE_DATA_REQUEST
    333           *
    334           * @return      none
    335           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          void afReflectError( uint8 srcEP, uint8 dstAddrMode, uint16 dstAddr, uint8 dstEP,
   \                     afReflectError:
    337                               uint8 transID, ZStatus_t status )
    338          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V3,R2
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
   \   00000B   8B..         MOV       ?V4,R3
    339            endPointDesc_t *epDesc;
    340            afReflectError_t *msgPtr;
    341          
    342            // Find the endpoint description
    343            epDesc = afFindEndPointDesc( srcEP );
   \   00000D                ; Setup parameters for call to function afFindEndPointDesc
   \   00000D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
    344            if ( epDesc == NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   6063         JZ        ??afReflectError_0
    345              return;
    346          
    347            // Determine the incoming command type
    348            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   000018                ; Setup parameters for call to function osal_msg_allocate
   \   000018   7A07         MOV       R2,#0x7
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    349            if ( msgPtr )
   \   00001F   EA           MOV       A,R2
   \   000020   4B           ORL       A,R3
   \   000021   6058         JZ        ??afReflectError_0
    350            {
    351              // Build the Data Confirm message
    352              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   74FE         MOV       A,#-0x2
   \   000029   F0           MOVX      @DPTR,A
    353              msgPtr->hdr.status = status;
   \   00002A   7411         MOV       A,#0x11
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   A3           INC       DPTR
   \   000035   F0           MOVX      @DPTR,A
    354              msgPtr->endpoint = dstEP;
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E5..         MOV       A,?V4
   \   00003E   F0           MOVX      @DPTR,A
    355              msgPtr->transID = transID;
   \   00003F   7410         MOV       A,#0x10
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   E0           MOVX      A,@DPTR
   \   000045   8A82         MOV       DPL,R2
   \   000047   8B83         MOV       DPH,R3
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
    356              msgPtr->dstAddrMode = dstAddrMode;
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   E5..         MOV       A,?V3
   \   000057   F0           MOVX      @DPTR,A
    357              msgPtr->dstAddr = dstAddr;
   \   000058   8A82         MOV       DPL,R2
   \   00005A   8B83         MOV       DPH,R3
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   EE           MOV       A,R6
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   EF           MOV       A,R7
   \   000065   F0           MOVX      @DPTR,A
    358          
    359          #if defined ( MT_AF_CB_FUNC )
    360              /* If MT has subscribed for this callback, don't send as a message. */
    361              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    362              {
    363                /* Send callback if it's subscribed */
    364                MT_AfReflectError( (void *)msgPtr );
    365                /* Release the memory. */
    366                osal_msg_deallocate( (void *)msgPtr );
    367              }
    368              else
    369          #endif
    370              {
    371                /* send message through task message */
    372                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   000066                ; Setup parameters for call to function osal_msg_send
   \   000066   85..82       MOV       DPL,?V0
   \   000069   85..83       MOV       DPH,?V1
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F8           MOV       R0,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F583         MOV       DPH,A
   \   000074   8882         MOV       DPL,R0
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F9           MOV       R1,A
   \   000078   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    373              }
    374            }
    375          }
   \                     ??afReflectError_0:
   \   00007B   7F08         MOV       R7,#0x8
   \   00007D   02....       LJMP      ?BANKED_LEAVE_XDATA
    376          
    377          /*********************************************************************
    378           * @fn          afIncomingData
    379           *
    380           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    381           *
    382           * @param       aff  - pointer to APS frame format
    383           * @param       SrcAddress  - Source address
    384           * @param       SrcPanId  - Source PAN ID
    385           * @param       sig - incoming message's link quality
    386           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    387           * @param       SecurityUse - Security enable/disable
    388           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    389           * @param       radius - incoming messages received radius
    390           *
    391           * @return      none
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    394                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    395                               uint32 timestamp, uint8 radius )
    396          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   E9           MOV       A,R1
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   8A..         MOV       ?V14,R2
   \   00001E   8B..         MOV       ?V15,R3
    397            endPointDesc_t *epDesc = NULL;
   \   000020   75..00       MOV       ?V0,#0x0
   \   000023   75..00       MOV       ?V1,#0x0
    398            epList_t *pList = epList;
   \   000026   90....       MOV       DPTR,#epList
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V2,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V3,A
    399          #if !defined ( APS_NO_GROUPS )
    400            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000030   7EFE         MOV       R6,#-0x2
    401          #endif
    402          
    403            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   E0           MOVX      A,@DPTR
   \   000037   540C         ANL       A,#0xc
   \   000039   640C         XRL       A,#0xc
   \   00003B   7026         JNZ       ??afIncomingData_0
    404            {
    405          #if !defined ( APS_NO_GROUPS )
    406              // Find the first endpoint for this group
    407              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   00003D                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00003D   79FE         MOV       R1,#-0x2
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   FA           MOV       R2,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   FB           MOV       R3,A
   \   000048   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00004B   E9           MOV       A,R1
   \   00004C   FE           MOV       R6,A
    408              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   00004D   74FE         MOV       A,#-0x2
   \   00004F   6E           XRL       A,R6
   \   000050   7003         JNZ       $+5
   \   000052   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    409                return;   // No endpoint found
    410          
    411              epDesc = afFindEndPointDesc( grpEp );
   \   000055                ; Setup parameters for call to function afFindEndPointDesc
   \   000055   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000058   8A..         MOV       ?V0,R2
   \   00005A   8B..         MOV       ?V1,R3
    412              if ( epDesc == NULL )
   \   00005C   EA           MOV       A,R2
   \   00005D   4B           ORL       A,R3
   \   00005E   7051         JNZ       ??afIncomingData_2
    413                return;   // Endpoint descriptor not found
   \   000060   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    414          
    415              pList = afFindEndPointDescList( epDesc->endPoint );
    416          #else
    417              return; // Not supported
    418          #endif
    419            }
    420            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   000063   EA           MOV       A,R2
   \   000064   2402         ADD       A,#0x2
   \   000066   F5..         MOV       ?V8,A
   \   000068   E4           CLR       A
   \   000069   35..         ADDC      A,?V15
   \   00006B   85..82       MOV       DPL,?V8
   \   00006E   F583         MOV       DPH,A
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   74FF         MOV       A,#-0x1
   \   000074   69           XRL       A,R1
   \   000075   702D         JNZ       ??afIncomingData_3
    421            {
    422              // Set the list
    423              if ( pList != NULL )
   \   000077   E5..         MOV       A,?V2
   \   000079   45..         ORL       A,?V3
   \   00007B   600F         JZ        ??afIncomingData_4
    424              {
    425                epDesc = pList->epDesc;
   \   00007D   85..82       MOV       DPL,?V2
   \   000080   85..83       MOV       DPH,?V3
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F5..         MOV       ?V0,A
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F5..         MOV       ?V1,A
   \                     ??afIncomingData_4:
   \   00008C   741B         MOV       A,#0x1b
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F5..         MOV       ?V10,A
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F5..         MOV       ?V11,A
   \   000098   7420         MOV       A,#0x20
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   78..         MOV       R0,#?V4
   \   00009F   12....       LCALL     ?L_MOV_X
   \   0000A2   802B         SJMP      ??afIncomingData_5
    426              }
    427            }
    428            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   0000A4                ; Setup parameters for call to function afFindEndPointDesc
   \   0000A4   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000A7   8A..         MOV       ?V0,R2
   \   0000A9   8B..         MOV       ?V1,R3
   \   0000AB   A9..         MOV       R1,?V1
   \   0000AD   EA           MOV       A,R2
   \   0000AE   49           ORL       A,R1
   \   0000AF   60DB         JZ        ??afIncomingData_4
    429            {
    430              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   0000B1                ; Setup parameters for call to function afFindEndPointDescList
   \   0000B1   85..82       MOV       DPL,?V0
   \   0000B4   85..83       MOV       DPH,?V1
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   F9           MOV       R1,A
   \   0000B9   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000BC   8A..         MOV       ?V2,R2
   \   0000BE   8B..         MOV       ?V3,R3
   \   0000C0   80CA         SJMP      ??afIncomingData_4
    431            }
    432          
    433            while ( epDesc )
    434            {
    435              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
    436          
    437              if ( pList->pfnDescCB )
    438              {
    439                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    440                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    441                if ( pID )
    442                {
    443                  epProfileID = *pID;
    444                  osal_mem_free( pID );
    445                }
    446              }
    447              else if ( epDesc->simpleDesc )
    448              {
    449                epProfileID = epDesc->simpleDesc->AppProfId;
    450              }
    451          
    452              // First part of verification is to make sure that:
    453              // the local Endpoint ProfileID matches the received ProfileID OR
    454              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    455              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    456              if ( (aff->ProfileID == epProfileID) ||
    457                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    458                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    459              {
    460                // Save original endpoint
    461                uint8 endpoint = aff->DstEndPoint;
    462          
    463                // overwrite with descriptor's endpoint
    464                aff->DstEndPoint = epDesc->endPoint;
    465          
    466                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    467                                   nwkSeqNum, SecurityUse, timestamp, radius );
    468          
    469                // Restore with original endpoint
    470                aff->DstEndPoint = endpoint;
    471              }
    472          
    473              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    474              {
    475          #if !defined ( APS_NO_GROUPS )
    476                // Find the next endpoint for this group
    477                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    478                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    479                  return;   // No endpoint found
    480          
    481                epDesc = afFindEndPointDesc( grpEp );
    482                if ( epDesc == NULL )
    483                  return;   // Endpoint descriptor not found
    484          
    485                pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_6:
   \   0000C2                ; Setup parameters for call to function afFindEndPointDescList
   \   0000C2   8A82         MOV       DPL,R2
   \   0000C4   8B83         MOV       DPH,R3
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   F9           MOV       R1,A
   \   0000C8   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000CB   8A..         MOV       ?V2,R2
   \   0000CD   8B..         MOV       ?V3,R3
   \                     ??afIncomingData_5:
   \   0000CF   E5..         MOV       A,?V0
   \   0000D1   45..         ORL       A,?V1
   \   0000D3   7003         JNZ       $+5
   \   0000D5   02....       LJMP      ??afIncomingData_1 & 0xFFFF
   \   0000D8   75..FE       MOV       ?V8,#-0x2
   \   0000DB   75..FF       MOV       ?V9,#-0x1
   \   0000DE   85..82       MOV       DPL,?V2
   \   0000E1   85..83       MOV       DPH,?V3
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   F8           MOV       R0,A
   \   0000EA   A3           INC       DPTR
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   FD           MOV       R5,A
   \   0000ED   E8           MOV       A,R0
   \   0000EE   4D           ORL       A,R5
   \   0000EF   85..82       MOV       DPL,?V0
   \   0000F2   85..83       MOV       DPH,?V1
   \   0000F5   601F         JZ        ??afIncomingData_7
   \   0000F7                ; Setup parameters for indirect call
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   FA           MOV       R2,A
   \   0000F9   7902         MOV       R1,#0x2
   \   0000FB   8882         MOV       DPL,R0
   \   0000FD   8D83         MOV       DPH,R5
   \   0000FF   12....       LCALL     ?CALL_IND
   \   000102   EA           MOV       A,R2
   \   000103   4B           ORL       A,R3
   \   000104   602A         JZ        ??afIncomingData_8
   \   000106   8A82         MOV       DPL,R2
   \   000108   8B83         MOV       DPH,R3
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   F5..         MOV       ?V8,A
   \   00010D   A3           INC       DPTR
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   F5..         MOV       ?V9,A
   \   000111                ; Setup parameters for call to function osal_mem_free
   \   000111   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000114   801A         SJMP      ??afIncomingData_8
   \                     ??afIncomingData_7:
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   A3           INC       DPTR
   \   000119   A3           INC       DPTR
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   F8           MOV       R0,A
   \   00011C   A3           INC       DPTR
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   8882         MOV       DPL,R0
   \   000120   F583         MOV       DPH,A
   \   000122   E582         MOV       A,DPL
   \   000124   4583         ORL       A,DPH
   \   000126   6008         JZ        ??afIncomingData_8
   \   000128   A3           INC       DPTR
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   F5..         MOV       ?V8,A
   \   00012C   A3           INC       DPTR
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   F5..         MOV       ?V9,A
   \                     ??afIncomingData_8:
   \   000130   85..82       MOV       DPL,?V14
   \   000133   85..83       MOV       DPH,?V15
   \   000136   A3           INC       DPTR
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   A3           INC       DPTR
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   F8           MOV       R0,A
   \   000140   A3           INC       DPTR
   \   000141   E0           MOVX      A,@DPTR
   \   000142   F9           MOV       R1,A
   \   000143   85..82       MOV       DPL,?V0
   \   000146   85..83       MOV       DPH,?V1
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   FA           MOV       R2,A
   \   00014B   E5..         MOV       A,?V8
   \   00014D   68           XRL       A,R0
   \   00014E   7003         JNZ       ??afIncomingData_9
   \   000150   E5..         MOV       A,?V9
   \   000152   69           XRL       A,R1
   \                     ??afIncomingData_9:
   \   000153   6014         JZ        ??afIncomingData_10
   \   000155   EA           MOV       A,R2
   \   000156   7004         JNZ       ??afIncomingData_11
   \   000158   E8           MOV       A,R0
   \   000159   49           ORL       A,R1
   \   00015A   600D         JZ        ??afIncomingData_10
   \                     ??afIncomingData_11:
   \   00015C   EA           MOV       A,R2
   \   00015D   6071         JZ        ??afIncomingData_12
   \   00015F   74FF         MOV       A,#-0x1
   \   000161   68           XRL       A,R0
   \   000162   7003         JNZ       ??afIncomingData_13
   \   000164   74FF         MOV       A,#-0x1
   \   000166   69           XRL       A,R1
   \                     ??afIncomingData_13:
   \   000167   7067         JNZ       ??afIncomingData_12
   \                     ??afIncomingData_10:
   \   000169   E5..         MOV       A,?V14
   \   00016B   2402         ADD       A,#0x2
   \   00016D   F5..         MOV       ?V8,A
   \   00016F   E4           CLR       A
   \   000170   35..         ADDC      A,?V15
   \   000172   F5..         MOV       ?V9,A
   \   000174   85..82       MOV       DPL,?V8
   \   000177   F583         MOV       DPH,A
   \   000179   E0           MOVX      A,@DPTR
   \   00017A   FF           MOV       R7,A
   \   00017B   EA           MOV       A,R2
   \   00017C   F0           MOVX      @DPTR,A
   \   00017D                ; Setup parameters for call to function afBuildMSGIncoming
   \   00017D   7424         MOV       A,#0x24
   \   00017F   12....       LCALL     ?XSTACK_DISP0_8
   \   000182   E0           MOVX      A,@DPTR
   \   000183   F5..         MOV       ?V12,A
   \   000185   78..         MOV       R0,#?V12
   \   000187   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018A   78..         MOV       R0,#?V4
   \   00018C   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00018F   7424         MOV       A,#0x24
   \   000191   12....       LCALL     ?XSTACK_DISP0_8
   \   000194   E0           MOVX      A,@DPTR
   \   000195   F5..         MOV       ?V12,A
   \   000197   78..         MOV       R0,#?V12
   \   000199   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019C   7423         MOV       A,#0x23
   \   00019E   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A1   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001A4   78..         MOV       R0,#?V10
   \   0001A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A9   740B         MOV       A,#0xb
   \   0001AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AE   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001B1   740C         MOV       A,#0xc
   \   0001B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   F9           MOV       R1,A
   \   0001B8   AC..         MOV       R4,?V0
   \   0001BA   AD..         MOV       R5,?V1
   \   0001BC   AA..         MOV       R2,?V14
   \   0001BE   AB..         MOV       R3,?V15
   \   0001C0   12....       LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   0001C3   740C         MOV       A,#0xc
   \   0001C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C8   EF           MOV       A,R7
   \   0001C9   85..82       MOV       DPL,?V8
   \   0001CC   85..83       MOV       DPH,?V9
   \   0001CF   F0           MOVX      @DPTR,A
   \                     ??afIncomingData_12:
   \   0001D0   85..82       MOV       DPL,?V14
   \   0001D3   85..83       MOV       DPH,?V15
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   540C         ANL       A,#0xc
   \   0001D9   640C         XRL       A,#0xc
   \   0001DB   7025         JNZ       ??afIncomingData_14
   \   0001DD                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0001DD   EE           MOV       A,R6
   \   0001DE   F9           MOV       R1,A
   \   0001DF   A3           INC       DPTR
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   FA           MOV       R2,A
   \   0001E5   A3           INC       DPTR
   \   0001E6   E0           MOVX      A,@DPTR
   \   0001E7   FB           MOV       R3,A
   \   0001E8   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   0001EB   E9           MOV       A,R1
   \   0001EC   FE           MOV       R6,A
   \   0001ED   74FE         MOV       A,#-0x2
   \   0001EF   6E           XRL       A,R6
   \   0001F0   6044         JZ        ??afIncomingData_1
   \   0001F2                ; Setup parameters for call to function afFindEndPointDesc
   \   0001F2   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0001F5   8A..         MOV       ?V0,R2
   \   0001F7   8B..         MOV       ?V1,R3
   \   0001F9   EA           MOV       A,R2
   \   0001FA   4B           ORL       A,R3
   \   0001FB   6003         JZ        $+5
   \   0001FD   02....       LJMP      ??afIncomingData_6 & 0xFFFF
   \   000200   8034         SJMP      ??afIncomingData_1
    486          #else
    487                return;
    488          #endif
    489              }
    490              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_14:
   \   000202   A3           INC       DPTR
   \   000203   A3           INC       DPTR
   \   000204   E0           MOVX      A,@DPTR
   \   000205   F4           CPL       A
   \   000206   7025         JNZ       ??afIncomingData_15
    491              {
    492                pList = pList->nextDesc;
   \   000208   85..82       MOV       DPL,?V2
   \   00020B   85..83       MOV       DPH,?V3
   \   00020E   E0           MOVX      A,@DPTR
   \   00020F   F5..         MOV       ?V2,A
   \   000211   A3           INC       DPTR
   \   000212   E0           MOVX      A,@DPTR
   \   000213   F5..         MOV       ?V3,A
    493                if ( pList )
   \   000215   E5..         MOV       A,?V2
   \   000217   45..         ORL       A,?V3
   \   000219   6012         JZ        ??afIncomingData_15
    494                  epDesc = pList->epDesc;
   \   00021B   85..82       MOV       DPL,?V2
   \   00021E   85..83       MOV       DPH,?V3
   \   000221   A3           INC       DPTR
   \   000222   A3           INC       DPTR
   \   000223   E0           MOVX      A,@DPTR
   \   000224   F5..         MOV       ?V0,A
   \   000226   A3           INC       DPTR
   \   000227   E0           MOVX      A,@DPTR
   \   000228   F5..         MOV       ?V1,A
   \   00022A   02....       LJMP      ??afIncomingData_5 & 0xFFFF
    495                else
    496                  epDesc = NULL;
    497              }
    498              else
    499                epDesc = NULL;
   \                     ??afIncomingData_15:
   \   00022D   75..00       MOV       ?V0,#0x0
   \   000230   75..00       MOV       ?V1,#0x0
   \   000233   02....       LJMP      ??afIncomingData_5 & 0xFFFF
    500            }
    501          }
   \                     ??afIncomingData_1:
   \   000236   7403         MOV       A,#0x3
   \   000238   12....       LCALL     ?DEALLOC_XSTACK8
   \   00023B   7F10         MOV       R7,#0x10
   \   00023D   02....       LJMP      ?BANKED_LEAVE_XDATA
    502          
    503          /*********************************************************************
    504           * @fn          afBuildMSGIncoming
    505           *
    506           * @brief       Build the message for the app
    507           *
    508           * @param
    509           *
    510           * @return      pointer to next in data buffer
    511           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    512          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    513                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    514                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V6,R1
    516            afIncomingMSGPacket_t *MSGpkt;
    517            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    518            uint8 *asdu = aff->asdu;
   \   00000F   EA           MOV       A,R2
   \   000010   240E         ADD       A,#0xe
   \   000012   F582         MOV       DPL,A
   \   000014   E4           CLR       A
   \   000015   35..         ADDC      A,?V1
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V8,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V9,A
    519            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   000020   EA           MOV       A,R2
   \   000021   2410         ADD       A,#0x10
   \   000023   F5..         MOV       ?V2,A
   \   000025   E4           CLR       A
   \   000026   35..         ADDC      A,?V1
   \   000028   F5..         MOV       ?V3,A
   \   00002A                ; Setup parameters for call to function osal_msg_allocate
   \   00002A   85..82       MOV       DPL,?V2
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   2427         ADD       A,#0x27
   \   000032   FA           MOV       R2,A
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000038   8A..         MOV       ?V10,R2
   \   00003A   8B..         MOV       ?V11,R3
   \   00003C   AE..         MOV       R6,?V10
   \   00003E   AF..         MOV       R7,?V11
    520          
    521            if ( MSGpkt == NULL )
   \   000040   EA           MOV       A,R2
   \   000041   4F           ORL       A,R7
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??afBuildMSGIncoming_0 & 0xFFFF
    522            {
    523              return;
    524            }
    525          
    526            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   741A         MOV       A,#0x1a
   \   00004D   F0           MOVX      @DPTR,A
    527            MSGpkt->groupId = aff->GroupID;
   \   00004E   85..82       MOV       DPL,?V0
   \   000051   85..83       MOV       DPH,?V1
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F8           MOV       R0,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F9           MOV       R1,A
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8B83         MOV       DPH,R3
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   E8           MOV       A,R0
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   E9           MOV       A,R1
   \   000067   F0           MOVX      @DPTR,A
    528            MSGpkt->clusterId = aff->ClusterID;
   \   000068   85..82       MOV       DPL,?V0
   \   00006B   85..83       MOV       DPH,?V1
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F8           MOV       R0,A
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F9           MOV       R1,A
   \   000079   8A82         MOV       DPL,R2
   \   00007B   8B83         MOV       DPH,R3
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   E8           MOV       A,R0
   \   000082   F0           MOVX      @DPTR,A
   \   000083   A3           INC       DPTR
   \   000084   E9           MOV       A,R1
   \   000085   F0           MOVX      @DPTR,A
    529            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \   000086                ; Setup parameters for call to function afCopyAddress
   \   000086   7414         MOV       A,#0x14
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   FC           MOV       R4,A
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   FD           MOV       R5,A
   \   000090   EA           MOV       A,R2
   \   000091   2406         ADD       A,#0x6
   \   000093   FA           MOV       R2,A
   \   000094   E4           CLR       A
   \   000095   3F           ADDC      A,R7
   \   000096   FB           MOV       R3,A
   \   000097   12....       LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    530            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   00009A   85..82       MOV       DPL,?V0
   \   00009D   85..83       MOV       DPH,?V1
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   C0E0         PUSH      A
   \   0000A6   EE           MOV       A,R6
   \   0000A7   240F         ADD       A,#0xf
   \   0000A9   F582         MOV       DPL,A
   \   0000AB   E4           CLR       A
   \   0000AC   3F           ADDC      A,R7
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   D0E0         POP       A
   \   0000B1   F0           MOVX      @DPTR,A
    531            MSGpkt->endPoint = epDesc->endPoint;
   \   0000B2   85..82       MOV       DPL,?V4
   \   0000B5   85..83       MOV       DPH,?V5
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   C0E0         PUSH      A
   \   0000BB   EE           MOV       A,R6
   \   0000BC   2414         ADD       A,#0x14
   \   0000BE   F582         MOV       DPL,A
   \   0000C0   E4           CLR       A
   \   0000C1   3F           ADDC      A,R7
   \   0000C2   F583         MOV       DPH,A
   \   0000C4   D0E0         POP       A
   \   0000C6   F0           MOVX      @DPTR,A
    532            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000C7   E5..         MOV       A,?V0
   \   0000C9   240C         ADD       A,#0xc
   \   0000CB   F582         MOV       DPL,A
   \   0000CD   E4           CLR       A
   \   0000CE   35..         ADDC      A,?V1
   \   0000D0   F583         MOV       DPH,A
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   C0E0         PUSH      A
   \   0000D5   EE           MOV       A,R6
   \   0000D6   2415         ADD       A,#0x15
   \   0000D8   F582         MOV       DPL,A
   \   0000DA   E4           CLR       A
   \   0000DB   3F           ADDC      A,R7
   \   0000DC   F583         MOV       DPH,A
   \   0000DE   D0E0         POP       A
   \   0000E0   F0           MOVX      @DPTR,A
   \   0000E1   7418         MOV       A,#0x18
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   F8           MOV       R0,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   F9           MOV       R1,A
    533            MSGpkt->LinkQuality = sig->LinkQuality;
   \   0000EB   8882         MOV       DPL,R0
   \   0000ED   F583         MOV       DPH,A
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   C0E0         PUSH      A
   \   0000F2   EE           MOV       A,R6
   \   0000F3   2416         ADD       A,#0x16
   \   0000F5   F582         MOV       DPL,A
   \   0000F7   E4           CLR       A
   \   0000F8   3F           ADDC      A,R7
   \   0000F9   F583         MOV       DPH,A
   \   0000FB   D0E0         POP       A
   \   0000FD   F0           MOVX      @DPTR,A
    534            MSGpkt->correlation = sig->correlation;
   \   0000FE   8882         MOV       DPL,R0
   \   000100   8983         MOV       DPH,R1
   \   000102   A3           INC       DPTR
   \   000103   E0           MOVX      A,@DPTR
   \   000104   C0E0         PUSH      A
   \   000106   EE           MOV       A,R6
   \   000107   2417         ADD       A,#0x17
   \   000109   F582         MOV       DPL,A
   \   00010B   E4           CLR       A
   \   00010C   3F           ADDC      A,R7
   \   00010D   F583         MOV       DPH,A
   \   00010F   D0E0         POP       A
   \   000111   F0           MOVX      @DPTR,A
    535            MSGpkt->rssi = sig->rssi;
   \   000112   8882         MOV       DPL,R0
   \   000114   8983         MOV       DPH,R1
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   E0           MOVX      A,@DPTR
   \   000119   C0E0         PUSH      A
   \   00011B   EE           MOV       A,R6
   \   00011C   2418         ADD       A,#0x18
   \   00011E   F582         MOV       DPL,A
   \   000120   E4           CLR       A
   \   000121   3F           ADDC      A,R7
   \   000122   F583         MOV       DPH,A
   \   000124   D0E0         POP       A
   \   000126   F0           MOVX      @DPTR,A
    536            MSGpkt->SecurityUse = SecurityUse;
   \   000127   741A         MOV       A,#0x1a
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   C0E0         PUSH      A
   \   00012F   EE           MOV       A,R6
   \   000130   2419         ADD       A,#0x19
   \   000132   F582         MOV       DPL,A
   \   000134   E4           CLR       A
   \   000135   3F           ADDC      A,R7
   \   000136   F583         MOV       DPH,A
   \   000138   D0E0         POP       A
   \   00013A   F0           MOVX      @DPTR,A
    537            MSGpkt->timestamp = timestamp;
   \   00013B   741B         MOV       A,#0x1b
   \   00013D   12....       LCALL     ?XSTACK_DISP0_8
   \   000140   12....       LCALL     ?XLOAD_R0123
   \   000143   EE           MOV       A,R6
   \   000144   241A         ADD       A,#0x1a
   \   000146   F582         MOV       DPL,A
   \   000148   E4           CLR       A
   \   000149   3F           ADDC      A,R7
   \   00014A   F583         MOV       DPH,A
   \   00014C   12....       LCALL     ?XSTORE_R0123
    538            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   00014F   EE           MOV       A,R6
   \   000150   241E         ADD       A,#0x1e
   \   000152   F582         MOV       DPL,A
   \   000154   E4           CLR       A
   \   000155   3F           ADDC      A,R7
   \   000156   F583         MOV       DPH,A
   \   000158   E5..         MOV       A,?V6
   \   00015A   F0           MOVX      @DPTR,A
    539            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   00015B   E5..         MOV       A,?V0
   \   00015D   2415         ADD       A,#0x15
   \   00015F   F582         MOV       DPL,A
   \   000161   E4           CLR       A
   \   000162   35..         ADDC      A,?V1
   \   000164   F583         MOV       DPH,A
   \   000166   E0           MOVX      A,@DPTR
   \   000167   F8           MOV       R0,A
   \   000168   A3           INC       DPTR
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   F9           MOV       R1,A
   \   00016B   EE           MOV       A,R6
   \   00016C   2424         ADD       A,#0x24
   \   00016E   F582         MOV       DPL,A
   \   000170   E4           CLR       A
   \   000171   3F           ADDC      A,R7
   \   000172   F583         MOV       DPH,A
   \   000174   E8           MOV       A,R0
   \   000175   F0           MOVX      @DPTR,A
   \   000176   A3           INC       DPTR
   \   000177   E9           MOV       A,R1
   \   000178   F0           MOVX      @DPTR,A
    540            MSGpkt->macDestAddr = aff->macDestAddr;
   \   000179   85..82       MOV       DPL,?V0
   \   00017C   85..83       MOV       DPH,?V1
   \   00017F   A3           INC       DPTR
   \   000180   A3           INC       DPTR
   \   000181   A3           INC       DPTR
   \   000182   A3           INC       DPTR
   \   000183   A3           INC       DPTR
   \   000184   A3           INC       DPTR
   \   000185   A3           INC       DPTR
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   A3           INC       DPTR
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   F8           MOV       R0,A
   \   00018B   A3           INC       DPTR
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   F9           MOV       R1,A
   \   00018E   EE           MOV       A,R6
   \   00018F   2412         ADD       A,#0x12
   \   000191   F582         MOV       DPL,A
   \   000193   E4           CLR       A
   \   000194   3F           ADDC      A,R7
   \   000195   F583         MOV       DPH,A
   \   000197   E8           MOV       A,R0
   \   000198   F0           MOVX      @DPTR,A
   \   000199   A3           INC       DPTR
   \   00019A   E9           MOV       A,R1
   \   00019B   F0           MOVX      @DPTR,A
    541            MSGpkt->srcAddr.panId = SrcPanId;
   \   00019C   7416         MOV       A,#0x16
   \   00019E   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   F8           MOV       R0,A
   \   0001A3   A3           INC       DPTR
   \   0001A4   E0           MOVX      A,@DPTR
   \   0001A5   F9           MOV       R1,A
   \   0001A6   EE           MOV       A,R6
   \   0001A7   2410         ADD       A,#0x10
   \   0001A9   F582         MOV       DPL,A
   \   0001AB   E4           CLR       A
   \   0001AC   3F           ADDC      A,R7
   \   0001AD   F583         MOV       DPH,A
   \   0001AF   E8           MOV       A,R0
   \   0001B0   F0           MOVX      @DPTR,A
   \   0001B1   A3           INC       DPTR
   \   0001B2   E9           MOV       A,R1
   \   0001B3   F0           MOVX      @DPTR,A
    542            MSGpkt->cmd.TransSeqNumber = 0;
   \   0001B4   EE           MOV       A,R6
   \   0001B5   241F         ADD       A,#0x1f
   \   0001B7   F582         MOV       DPL,A
   \   0001B9   E4           CLR       A
   \   0001BA   3F           ADDC      A,R7
   \   0001BB   F583         MOV       DPH,A
   \   0001BD   E4           CLR       A
   \   0001BE   F0           MOVX      @DPTR,A
    543            MSGpkt->cmd.DataLength = aff->asduLength;
   \   0001BF   EE           MOV       A,R6
   \   0001C0   2420         ADD       A,#0x20
   \   0001C2   FC           MOV       R4,A
   \   0001C3   E4           CLR       A
   \   0001C4   3F           ADDC      A,R7
   \   0001C5   FD           MOV       R5,A
   \   0001C6   85..82       MOV       DPL,?V2
   \   0001C9   85..83       MOV       DPH,?V3
   \   0001CC   E0           MOVX      A,@DPTR
   \   0001CD   8C82         MOV       DPL,R4
   \   0001CF   8D83         MOV       DPH,R5
   \   0001D1   F0           MOVX      @DPTR,A
   \   0001D2   A3           INC       DPTR
   \   0001D3   E4           CLR       A
   \   0001D4   F0           MOVX      @DPTR,A
    544            MSGpkt->radius = radius;
   \   0001D5   741F         MOV       A,#0x1f
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   C0E0         PUSH      A
   \   0001DD   EE           MOV       A,R6
   \   0001DE   2426         ADD       A,#0x26
   \   0001E0   F582         MOV       DPL,A
   \   0001E2   E4           CLR       A
   \   0001E3   3F           ADDC      A,R7
   \   0001E4   F583         MOV       DPH,A
   \   0001E6   D0E0         POP       A
   \   0001E8   F0           MOVX      @DPTR,A
    545          
    546            if ( MSGpkt->cmd.DataLength )
   \   0001E9   EE           MOV       A,R6
   \   0001EA   2422         ADD       A,#0x22
   \   0001EC   F8           MOV       R0,A
   \   0001ED   E4           CLR       A
   \   0001EE   3F           ADDC      A,R7
   \   0001EF   F9           MOV       R1,A
   \   0001F0   8C82         MOV       DPL,R4
   \   0001F2   8D83         MOV       DPH,R5
   \   0001F4   E0           MOVX      A,@DPTR
   \   0001F5   FA           MOV       R2,A
   \   0001F6   A3           INC       DPTR
   \   0001F7   E0           MOVX      A,@DPTR
   \   0001F8   FB           MOV       R3,A
   \   0001F9   EA           MOV       A,R2
   \   0001FA   4B           ORL       A,R3
   \   0001FB   602B         JZ        ??afBuildMSGIncoming_1
    547            {
    548              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   0001FD   EE           MOV       A,R6
   \   0001FE   2427         ADD       A,#0x27
   \   000200   FA           MOV       R2,A
   \   000201   E4           CLR       A
   \   000202   3F           ADDC      A,R7
   \   000203   FB           MOV       R3,A
   \   000204   8882         MOV       DPL,R0
   \   000206   8983         MOV       DPH,R1
   \   000208   EA           MOV       A,R2
   \   000209   F0           MOVX      @DPTR,A
   \   00020A   A3           INC       DPTR
   \   00020B   EB           MOV       A,R3
   \   00020C   F0           MOVX      @DPTR,A
    549              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   00020D                ; Setup parameters for call to function osal_memcpy
   \   00020D   75..00       MOV       ?V10,#0x0
   \   000210   78..         MOV       R0,#?V8
   \   000212   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000215   8C82         MOV       DPL,R4
   \   000217   8D83         MOV       DPH,R5
   \   000219   E0           MOVX      A,@DPTR
   \   00021A   FC           MOV       R4,A
   \   00021B   A3           INC       DPTR
   \   00021C   E0           MOVX      A,@DPTR
   \   00021D   FD           MOV       R5,A
   \   00021E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000221   7403         MOV       A,#0x3
   \   000223   12....       LCALL     ?DEALLOC_XSTACK8
   \   000226   8008         SJMP      ??afBuildMSGIncoming_2
    550            }
    551            else
    552            {
    553              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   000228   8882         MOV       DPL,R0
   \   00022A   8983         MOV       DPH,R1
   \   00022C   E4           CLR       A
   \   00022D   F0           MOVX      @DPTR,A
   \   00022E   A3           INC       DPTR
   \   00022F   F0           MOVX      @DPTR,A
    554            }
    555          
    556          #if defined ( MT_AF_CB_FUNC )
    557            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    558            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    559            {
    560              MT_AfIncomingMsg( (void *)MSGpkt );
    561              // Release the memory.
    562              osal_msg_deallocate( (void *)MSGpkt );
    563            }
    564            else
    565          #endif
    566            {
    567              // Send message through task message.
    568              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   000230                ; Setup parameters for call to function osal_msg_send
   \   000230   EE           MOV       A,R6
   \   000231   FA           MOV       R2,A
   \   000232   EF           MOV       A,R7
   \   000233   FB           MOV       R3,A
   \   000234   85..82       MOV       DPL,?V4
   \   000237   85..83       MOV       DPH,?V5
   \   00023A   A3           INC       DPTR
   \   00023B   A3           INC       DPTR
   \   00023C   E0           MOVX      A,@DPTR
   \   00023D   F8           MOV       R0,A
   \   00023E   A3           INC       DPTR
   \   00023F   E0           MOVX      A,@DPTR
   \   000240   F583         MOV       DPH,A
   \   000242   8882         MOV       DPL,R0
   \   000244   E0           MOVX      A,@DPTR
   \   000245   F9           MOV       R1,A
   \   000246   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    569            }
    570          }
   \                     ??afBuildMSGIncoming_0:
   \   000249   7F0C         MOV       R7,#0xc
   \   00024B   02....       LJMP      ?BANKED_LEAVE_XDATA
    571          
    572          /*********************************************************************
    573           * @fn      AF_DataRequest
    574           *
    575           * @brief   Common functionality for invoking APSDE_DataReq() for both
    576           *          SendMulti and MSG-Send.
    577           *
    578           * input parameters
    579           *
    580           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    581           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    582           * @param   cID - A valid cluster ID as specified by the Profile.
    583           * @param   len - Number of bytes of data pointed to by next param.
    584           * @param  *buf - A pointer to the data bytes to send.
    585           * @param  *transID - A pointer to a byte which can be modified and which will
    586           *                    be used as the transaction sequence number of the msg.
    587           * @param   options - Valid bit mask of Tx options.
    588           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    589           *
    590           * output parameters
    591           *
    592           * @param  *transID - Incremented by one if the return value is success.
    593           *
    594           * @return  afStatus_t - See previous definition of afStatus_... types.
    595           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    596          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    597          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    598                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    599                                     uint8 options, uint8 radius )
    600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V2,R1
    601            pDescCB pfnDescCB;
    602            ZStatus_t stat;
    603            APSDE_DataReq_t req;
    604            afDataReqMTU_t mtu;
    605            epList_t *pList;
    606          
    607            // Verify source end point
    608            if ( srcEP == NULL )
   \   000014   EC           MOV       A,R4
   \   000015   4F           ORL       A,R7
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    609            {
    610              return afStatus_INVALID_PARAMETER;
    611            }
    612          
    613          #if !defined( REFLECTOR )
    614            if ( dstAddr->addrMode == afAddrNotPresent )
    615            {
    616              return afStatus_INVALID_PARAMETER;
    617            }
    618          #endif
    619            
    620            // copy the addressing mode, to get the length of the packet
    621            mtu.aps.addressingMode = dstAddr->addrMode; 
   \   00001B   EA           MOV       A,R2
   \   00001C   2408         ADD       A,#0x8
   \   00001E   F5..         MOV       ?V0,A
   \   000020   E4           CLR       A
   \   000021   35..         ADDC      A,?V5
   \   000023   F5..         MOV       ?V1,A
   \   000025   85..82       MOV       DPL,?V0
   \   000028   F583         MOV       DPH,A
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   C0E0         PUSH      A
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   D0E0         POP       A
   \   000034   F0           MOVX      @DPTR,A
    622          
    623            // Check if route is available before sending data
    624            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   000035   E9           MOV       A,R1
   \   000036   A2E3         MOV       C,0xE0 /* A   */.3
   \   000038   5039         JNC       ??AF_DataRequest_1
    625            {
    626              if ( dstAddr->addrMode != afAddr16Bit )
   \   00003A   85..82       MOV       DPL,?V0
   \   00003D   85..83       MOV       DPH,?V1
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6402         XRL       A,#0x2
   \   000043   6003         JZ        $+5
   \   000045   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    627              {
    628                return ( afStatus_INVALID_PARAMETER );
    629              }
    630          
    631              // First, make sure the destination is not its self, then check for an existing route.
    632              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    633                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000048                ; Setup parameters for call to function NLME_GetShortAddr
   \   000048   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00004B   8A..         MOV       ?V6,R2
   \   00004D   8B..         MOV       ?V7,R3
   \   00004F   85..82       MOV       DPL,?V4
   \   000052   85..83       MOV       DPH,?V5
   \   000055   E0           MOVX      A,@DPTR
   \   000056   FA           MOV       R2,A
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   FB           MOV       R3,A
   \   00005A   E5..         MOV       A,?V6
   \   00005C   6A           XRL       A,R2
   \   00005D   7003         JNZ       ??AF_DataRequest_2
   \   00005F   E5..         MOV       A,?V7
   \   000061   6B           XRL       A,R3
   \                     ??AF_DataRequest_2:
   \   000062   600F         JZ        ??AF_DataRequest_1
   \   000064                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000064   7C03         MOV       R4,#0x3
   \   000066   7901         MOV       R1,#0x1
   \   000068   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   00006B   E9           MOV       A,R1
   \   00006C   6005         JZ        ??AF_DataRequest_1
    634              {
    635                // A valid route to a concentrator wasn't found
    636                return ( afStatus_NO_ROUTE );
   \   00006E   79CD         MOV       R1,#-0x33
   \   000070   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    637              }
    638            }
    639          
    640            // Validate broadcasting
    641            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    642                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000073   85..82       MOV       DPL,?V0
   \   000076   85..83       MOV       DPH,?V1
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F8           MOV       R0,A
   \   00007B   7402         MOV       A,#0x2
   \   00007D   68           XRL       A,R0
   \   00007E   6005         JZ        ??AF_DataRequest_4
   \   000080   740F         MOV       A,#0xf
   \   000082   68           XRL       A,R0
   \   000083   7045         JNZ       ??AF_DataRequest_5
    643            {
    644              // Check for valid broadcast values
    645              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   000085                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000085   85..82       MOV       DPL,?V4
   \   000088   85..83       MOV       DPH,?V5
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   FA           MOV       R2,A
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   FB           MOV       R3,A
   \   000090   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000093   E9           MOV       A,R1
   \   000094   85..82       MOV       DPL,?V0
   \   000097   85..83       MOV       DPH,?V1
   \   00009A   6027         JZ        ??AF_DataRequest_6
    646              {
    647                // Force mode to broadcast
    648                dstAddr->addrMode = afAddrBroadcast;
   \   00009C   740F         MOV       A,#0xf
   \   00009E   F0           MOVX      @DPTR,A
    649              }
    650              else
    651              {
    652                // Address is not a valid broadcast type
    653                if ( dstAddr->addrMode == afAddrBroadcast )
    654                {
    655                  return afStatus_INVALID_PARAMETER;
    656                }
    657              }
    658            }
    659            else if ( dstAddr->addrMode != afAddr64Bit &&
    660                      dstAddr->addrMode != afAddrGroup &&
    661                      dstAddr->addrMode != afAddrNotPresent )
    662            {
    663              return afStatus_INVALID_PARAMETER;
    664            }
    665          
    666            // Set destination address
    667            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   C0E0         PUSH      A
   \   0000A2   740B         MOV       A,#0xb
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   D0E0         POP       A
   \   0000A9   F0           MOVX      @DPTR,A
    668            if ( dstAddr->addrMode == afAddr64Bit )
   \   0000AA   85..82       MOV       DPL,?V0
   \   0000AD   85..83       MOV       DPH,?V1
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   6403         XRL       A,#0x3
   \   0000B3   7027         JNZ       ??AF_DataRequest_8
    669            {
    670              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000B5                ; Setup parameters for call to function sAddrExtCpy
   \   0000B5   AC..         MOV       R4,?V4
   \   0000B7   AD..         MOV       R5,?V5
   \   0000B9   7403         MOV       A,#0x3
   \   0000BB   12....       LCALL     ?XSTACK_DISP101_8
   \   0000BE   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000C1   802E         SJMP      ??AF_DataRequest_9
    671            }
   \                     ??AF_DataRequest_6:
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   640F         XRL       A,#0xf
   \   0000C6   70D7         JNZ       ??AF_DataRequest_7
   \   0000C8   800D         SJMP      ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000CA   7403         MOV       A,#0x3
   \   0000CC   68           XRL       A,R0
   \   0000CD   60D0         JZ        ??AF_DataRequest_7
   \   0000CF   7401         MOV       A,#0x1
   \   0000D1   68           XRL       A,R0
   \   0000D2   60CB         JZ        ??AF_DataRequest_7
   \   0000D4   E8           MOV       A,R0
   \   0000D5   60C8         JZ        ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   0000D7   7902         MOV       R1,#0x2
   \   0000D9   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    672            else
    673            {
    674              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000DC   85..82       MOV       DPL,?V4
   \   0000DF   85..83       MOV       DPH,?V5
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F8           MOV       R0,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F9           MOV       R1,A
   \   0000E7   7403         MOV       A,#0x3
   \   0000E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EC   E8           MOV       A,R0
   \   0000ED   F0           MOVX      @DPTR,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   E9           MOV       A,R1
   \   0000F0   F0           MOVX      @DPTR,A
    675            }
    676          
    677            // This option is to use Wildcard ProfileID in outgoing packets
    678            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??AF_DataRequest_9:
   \   0000F1   E5..         MOV       A,?V2
   \   0000F3   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000F5   7412         MOV       A,#0x12
   \   0000F7   5009         JNC       ??AF_DataRequest_10
    679            {
    680              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   74FF         MOV       A,#-0x1
   \   0000FE   F0           MOVX      @DPTR,A
   \   0000FF   A3           INC       DPTR
   \   000100   8063         SJMP      ??AF_DataRequest_11
    681            }
    682            else
    683            {
    684              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_10:
   \   000102   12....       LCALL     ?XSTACK_DISP0_8
   \   000105   E4           CLR       A
   \   000106   F0           MOVX      @DPTR,A
   \   000107   A3           INC       DPTR
   \   000108   F0           MOVX      @DPTR,A
    685          
    686              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   000109                ; Setup parameters for call to function afGetDescCB
   \   000109   EE           MOV       A,R6
   \   00010A   FA           MOV       R2,A
   \   00010B   EF           MOV       A,R7
   \   00010C   FB           MOV       R3,A
   \   00010D   12....       LCALL     `??afGetDescCB::?relay`; Banked call to: afGetDescCB
   \   000110   8B..         MOV       ?V1,R3
   \   000112   A9..         MOV       R1,?V1
   \   000114   EA           MOV       A,R2
   \   000115   FC           MOV       R4,A
   \   000116   49           ORL       A,R1
   \   000117   8E82         MOV       DPL,R6
   \   000119   8F83         MOV       DPH,R7
   \   00011B   6027         JZ        ??AF_DataRequest_12
    687              {
    688                uint16 *pID = (uint16 *)(pfnDescCB(
    689                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   00011D                ; Setup parameters for indirect call
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   FA           MOV       R2,A
   \   00011F   7902         MOV       R1,#0x2
   \   000121   8C82         MOV       DPL,R4
   \   000123   8B83         MOV       DPH,R3
   \   000125   12....       LCALL     ?CALL_IND
    690                if ( pID )
   \   000128   EA           MOV       A,R2
   \   000129   4B           ORL       A,R3
   \   00012A   603A         JZ        ??AF_DataRequest_13
    691                {
    692                  req.profileID = *pID;
   \   00012C   8A82         MOV       DPL,R2
   \   00012E   8B83         MOV       DPH,R3
   \   000130   E0           MOVX      A,@DPTR
   \   000131   F8           MOV       R0,A
   \   000132   A3           INC       DPTR
   \   000133   E0           MOVX      A,@DPTR
   \   000134   F9           MOV       R1,A
   \   000135   7412         MOV       A,#0x12
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   E8           MOV       A,R0
   \   00013B   F0           MOVX      @DPTR,A
   \   00013C   A3           INC       DPTR
   \   00013D   E9           MOV       A,R1
   \   00013E   F0           MOVX      @DPTR,A
    693                  osal_mem_free( pID );
   \   00013F                ; Setup parameters for call to function osal_mem_free
   \   00013F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000142   8022         SJMP      ??AF_DataRequest_13
    694                }
    695              }
    696              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   000144   A3           INC       DPTR
   \   000145   A3           INC       DPTR
   \   000146   A3           INC       DPTR
   \   000147   A3           INC       DPTR
   \   000148   E0           MOVX      A,@DPTR
   \   000149   F8           MOV       R0,A
   \   00014A   A3           INC       DPTR
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   8882         MOV       DPL,R0
   \   00014E   F583         MOV       DPH,A
   \   000150   E582         MOV       A,DPL
   \   000152   4583         ORL       A,DPH
   \   000154   6010         JZ        ??AF_DataRequest_13
    697              {
    698                req.profileID = srcEP->simpleDesc->AppProfId;
   \   000156   A3           INC       DPTR
   \   000157   E0           MOVX      A,@DPTR
   \   000158   F8           MOV       R0,A
   \   000159   A3           INC       DPTR
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   F9           MOV       R1,A
   \   00015C   7412         MOV       A,#0x12
   \   00015E   12....       LCALL     ?XSTACK_DISP0_8
   \   000161   E8           MOV       A,R0
   \   000162   F0           MOVX      @DPTR,A
   \   000163   A3           INC       DPTR
   \   000164   E9           MOV       A,R1
   \                     ??AF_DataRequest_11:
   \   000165   F0           MOVX      @DPTR,A
    699              }
    700            }
    701          
    702            req.txOptions = 0;
   \                     ??AF_DataRequest_13:
   \   000166   7418         MOV       A,#0x18
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   E4           CLR       A
   \   00016C   F0           MOVX      @DPTR,A
   \   00016D   A3           INC       DPTR
   \   00016E   F0           MOVX      @DPTR,A
    703          
    704            if ( ( options & AF_ACK_REQUEST              ) &&
    705                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    706                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   00016F   E5..         MOV       A,?V2
   \   000171   A2E4         MOV       C,0xE0 /* A   */.4
   \   000173   501C         JNC       ??AF_DataRequest_14
   \   000175   740B         MOV       A,#0xb
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   F8           MOV       R0,A
   \   00017C   740F         MOV       A,#0xf
   \   00017E   68           XRL       A,R0
   \   00017F   6010         JZ        ??AF_DataRequest_14
   \   000181   7401         MOV       A,#0x1
   \   000183   68           XRL       A,R0
   \   000184   600B         JZ        ??AF_DataRequest_14
    707            {
    708              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000186   7418         MOV       A,#0x18
   \   000188   12....       LCALL     ?XSTACK_DISP0_8
   \   00018B   7404         MOV       A,#0x4
   \   00018D   F0           MOVX      @DPTR,A
   \   00018E   A3           INC       DPTR
   \   00018F   E4           CLR       A
   \   000190   F0           MOVX      @DPTR,A
    709            }
    710          
    711            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_14:
   \   000191   E5..         MOV       A,?V2
   \   000193   A2E7         MOV       C,0xE0 /* A   */.7
   \   000195   5009         JNC       ??AF_DataRequest_15
    712            {
    713              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000197   7418         MOV       A,#0x18
   \   000199   12....       LCALL     ?XSTACK_DISP0_8
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   4410         ORL       A,#0x10
   \   00019F   F0           MOVX      @DPTR,A
    714            }
    715          
    716            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_15:
   \   0001A0   E5..         MOV       A,?V2
   \   0001A2   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001A4   5012         JNC       ??AF_DataRequest_16
    717            {
    718              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   0001A6   7418         MOV       A,#0x18
   \   0001A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AB   E0           MOVX      A,@DPTR
   \   0001AC   4401         ORL       A,#0x1
   \   0001AE   F0           MOVX      @DPTR,A
    719              mtu.aps.secure = TRUE;
   \   0001AF   7401         MOV       A,#0x1
   \   0001B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B4   7401         MOV       A,#0x1
   \   0001B6   8006         SJMP      ??AF_DataRequest_17
    720            }
    721            else
    722            {
    723              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_16:
   \   0001B8   7401         MOV       A,#0x1
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   E4           CLR       A
   \                     ??AF_DataRequest_17:
   \   0001BE   F0           MOVX      @DPTR,A
    724            }
    725          
    726            if ( options & AF_PREPROCESS )
   \   0001BF   E5..         MOV       A,?V2
   \   0001C1   A2E2         MOV       C,0xE0 /* A   */.2
   \   0001C3   5009         JNC       ??AF_DataRequest_18
    727            {
    728              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   0001C5   7418         MOV       A,#0x18
   \   0001C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CA   E0           MOVX      A,@DPTR
   \   0001CB   4440         ORL       A,#0x40
   \   0001CD   F0           MOVX      @DPTR,A
    729            }
    730          
    731            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_18:
   \   0001CE   85..82       MOV       DPL,?XSP + 0
   \   0001D1   85..83       MOV       DPH,?XSP + 1
   \   0001D4   E4           CLR       A
   \   0001D5   F0           MOVX      @DPTR,A
    732          
    733            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   0001D6   E5..         MOV       A,?V2
   \   0001D8   A2E5         MOV       C,0xE0 /* A   */.5
   \   0001DA   5009         JNC       ??AF_DataRequest_19
    734            {
    735              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   0001DC   741B         MOV       A,#0x1b
   \   0001DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E1   7404         MOV       A,#0x4
   \   0001E3   800D         SJMP      ??AF_DataRequest_20
    736            }
    737            else
    738            {
    739              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_19:
   \   0001E5   90....       MOV       DPTR,#AF_DataRequestDiscoverRoute
   \   0001E8   E0           MOVX      A,@DPTR
   \   0001E9   C0E0         PUSH      A
   \   0001EB   741B         MOV       A,#0x1b
   \   0001ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F0   D0E0         POP       A
   \                     ??AF_DataRequest_20:
   \   0001F2   F0           MOVX      @DPTR,A
   \   0001F3   7437         MOV       A,#0x37
   \   0001F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F8   E0           MOVX      A,@DPTR
   \   0001F9   F5..         MOV       ?V0,A
   \   0001FB   A3           INC       DPTR
   \   0001FC   E0           MOVX      A,@DPTR
   \   0001FD   F5..         MOV       ?V1,A
    740            }
    741          
    742            req.transID       = *transID;
   \   0001FF   85..82       MOV       DPL,?V0
   \   000202   F583         MOV       DPH,A
   \   000204   E0           MOVX      A,@DPTR
   \   000205   C0E0         PUSH      A
   \   000207   741A         MOV       A,#0x1a
   \   000209   12....       LCALL     ?XSTACK_DISP0_8
   \   00020C   D0E0         POP       A
   \   00020E   F0           MOVX      @DPTR,A
    743            req.srcEP         = srcEP->endPoint;
   \   00020F   8E82         MOV       DPL,R6
   \   000211   8F83         MOV       DPH,R7
   \   000213   E0           MOVX      A,@DPTR
   \   000214   C0E0         PUSH      A
   \   000216   740C         MOV       A,#0xc
   \   000218   12....       LCALL     ?XSTACK_DISP0_8
   \   00021B   D0E0         POP       A
   \   00021D   F0           MOVX      @DPTR,A
    744            req.dstEP         = dstAddr->endPoint;
   \   00021E   85..82       MOV       DPL,?V4
   \   000221   85..83       MOV       DPH,?V5
   \   000224   A3           INC       DPTR
   \   000225   A3           INC       DPTR
   \   000226   A3           INC       DPTR
   \   000227   A3           INC       DPTR
   \   000228   A3           INC       DPTR
   \   000229   A3           INC       DPTR
   \   00022A   A3           INC       DPTR
   \   00022B   A3           INC       DPTR
   \   00022C   A3           INC       DPTR
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   C0E0         PUSH      A
   \   000230   740D         MOV       A,#0xd
   \   000232   12....       LCALL     ?XSTACK_DISP0_8
   \   000235   D0E0         POP       A
   \   000237   F0           MOVX      @DPTR,A
    745            req.clusterID     = cID;
   \   000238   7431         MOV       A,#0x31
   \   00023A   12....       LCALL     ?XSTACK_DISP0_8
   \   00023D   E0           MOVX      A,@DPTR
   \   00023E   F8           MOV       R0,A
   \   00023F   A3           INC       DPTR
   \   000240   E0           MOVX      A,@DPTR
   \   000241   F9           MOV       R1,A
   \   000242   7410         MOV       A,#0x10
   \   000244   12....       LCALL     ?XSTACK_DISP0_8
   \   000247   E8           MOV       A,R0
   \   000248   F0           MOVX      @DPTR,A
   \   000249   A3           INC       DPTR
   \   00024A   E9           MOV       A,R1
   \   00024B   F0           MOVX      @DPTR,A
   \   00024C   7433         MOV       A,#0x33
   \   00024E   12....       LCALL     ?XSTACK_DISP0_8
   \   000251   E0           MOVX      A,@DPTR
   \   000252   F5..         MOV       ?V4,A
   \   000254   A3           INC       DPTR
   \   000255   E0           MOVX      A,@DPTR
   \   000256   F5..         MOV       ?V5,A
    746            req.asduLen       = len;
   \   000258   7414         MOV       A,#0x14
   \   00025A   12....       LCALL     ?XSTACK_DISP0_8
   \   00025D   E5..         MOV       A,?V4
   \   00025F   F0           MOVX      @DPTR,A
   \   000260   A3           INC       DPTR
   \   000261   E5..         MOV       A,?V5
   \   000263   F0           MOVX      @DPTR,A
    747            req.asdu          = buf;
   \   000264   7435         MOV       A,#0x35
   \   000266   12....       LCALL     ?XSTACK_DISP0_8
   \   000269   E0           MOVX      A,@DPTR
   \   00026A   F8           MOV       R0,A
   \   00026B   A3           INC       DPTR
   \   00026C   E0           MOVX      A,@DPTR
   \   00026D   F9           MOV       R1,A
   \   00026E   7416         MOV       A,#0x16
   \   000270   12....       LCALL     ?XSTACK_DISP0_8
   \   000273   E8           MOV       A,R0
   \   000274   F0           MOVX      @DPTR,A
   \   000275   A3           INC       DPTR
   \   000276   E9           MOV       A,R1
   \   000277   F0           MOVX      @DPTR,A
    748            req.radiusCounter = radius;
   \   000278   7439         MOV       A,#0x39
   \   00027A   12....       LCALL     ?XSTACK_DISP0_8
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   C0E0         PUSH      A
   \   000280   741C         MOV       A,#0x1c
   \   000282   12....       LCALL     ?XSTACK_DISP0_8
   \   000285   D0E0         POP       A
   \   000287   F0           MOVX      @DPTR,A
    749          #if defined ( INTER_PAN )
    750            req.dstPanId      = dstAddr->panId;
    751          #endif // INTER_PAN
    752          
    753            // Look if there is a Callback function registered for this endpoint
    754            // The callback is used to control the AF Transaction ID used when sending messages
    755            pList = afFindEndPointDescList( srcEP->endPoint );
   \   000288                ; Setup parameters for call to function afFindEndPointDescList
   \   000288   8E82         MOV       DPL,R6
   \   00028A   8F83         MOV       DPH,R7
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   F9           MOV       R1,A
   \   00028E   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000291   8A82         MOV       DPL,R2
   \   000293   8B83         MOV       DPH,R3
    756          
    757            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   000295   E582         MOV       A,DPL
   \   000297   4583         ORL       A,DPH
   \   000299   601F         JZ        ??AF_DataRequest_21
   \   00029B   A3           INC       DPTR
   \   00029C   A3           INC       DPTR
   \   00029D   A3           INC       DPTR
   \   00029E   A3           INC       DPTR
   \   00029F   A3           INC       DPTR
   \   0002A0   A3           INC       DPTR
   \   0002A1   A3           INC       DPTR
   \   0002A2   A3           INC       DPTR
   \   0002A3   A3           INC       DPTR
   \   0002A4   E0           MOVX      A,@DPTR
   \   0002A5   F8           MOV       R0,A
   \   0002A6   A3           INC       DPTR
   \   0002A7   E0           MOVX      A,@DPTR
   \   0002A8   8882         MOV       DPL,R0
   \   0002AA   F583         MOV       DPH,A
   \   0002AC   E582         MOV       A,DPL
   \   0002AE   4583         ORL       A,DPH
   \   0002B0   6008         JZ        ??AF_DataRequest_21
    758            {
    759              pList->pfnApplCB( &req );
   \   0002B2                ; Setup parameters for indirect call
   \   0002B2   7403         MOV       A,#0x3
   \   0002B4   12....       LCALL     ?XSTACK_DISP101_8
   \   0002B7   12....       LCALL     ?CALL_IND
    760            }
    761          
    762          #if defined ( INTER_PAN )
    763            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    764            {
    765              if ( len > INTERP_DataReqMTU() )
    766              {
    767                stat = afStatus_INVALID_PARAMETER;
    768              }
    769              else
    770              {
    771                stat = INTERP_DataReq( &req );
    772              }
    773            }
    774            else
    775          #endif // INTER_PAN
    776            {
    777              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_21:
   \   0002BA                ; Setup parameters for call to function afDataReqMTU
   \   0002BA   AA..         MOV       R2,?XSP + 0
   \   0002BC   AB..         MOV       R3,?XSP + 1
   \   0002BE   12....       LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   0002C1   E9           MOV       A,R1
   \   0002C2   C3           CLR       C
   \   0002C3   95..         SUBB      A,?V4
   \   0002C5   E4           CLR       A
   \   0002C6   95..         SUBB      A,?V5
   \   0002C8   5026         JNC       ??AF_DataRequest_22
    778              {
    779                if (apsfSendFragmented)
   \   0002CA   90....       MOV       DPTR,#apsfSendFragmented
   \   0002CD   E0           MOVX      A,@DPTR
   \   0002CE   F8           MOV       R0,A
   \   0002CF   A3           INC       DPTR
   \   0002D0   E0           MOVX      A,@DPTR
   \   0002D1   F9           MOV       R1,A
   \   0002D2   E8           MOV       A,R0
   \   0002D3   49           ORL       A,R1
   \   0002D4   6015         JZ        ??AF_DataRequest_23
    780                {
    781                  stat = (*apsfSendFragmented)( &req );
   \   0002D6                ; Setup parameters for indirect call
   \   0002D6   7403         MOV       A,#0x3
   \   0002D8   12....       LCALL     ?XSTACK_DISP101_8
   \   0002DB   90....       MOV       DPTR,#apsfSendFragmented
   \   0002DE   E0           MOVX      A,@DPTR
   \   0002DF   F8           MOV       R0,A
   \   0002E0   A3           INC       DPTR
   \   0002E1   E0           MOVX      A,@DPTR
   \   0002E2   F583         MOV       DPH,A
   \   0002E4   8882         MOV       DPL,R0
   \   0002E6   12....       LCALL     ?CALL_IND
   \   0002E9   800D         SJMP      ??AF_DataRequest_24
    782                }
    783                else
    784                {
    785                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_23:
   \   0002EB   75..02       MOV       ?V3,#0x2
   \   0002EE   800B         SJMP      ??AF_DataRequest_25
    786                }
    787              }
    788              else
    789              {
    790                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_22:
   \   0002F0                ; Setup parameters for call to function APSDE_DataReq
   \   0002F0   7403         MOV       A,#0x3
   \   0002F2   12....       LCALL     ?XSTACK_DISP101_8
   \   0002F5   12....       LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_24:
   \   0002F8   E9           MOV       A,R1
   \   0002F9   F5..         MOV       ?V3,A
    791              }
    792            }
    793          
    794            /*
    795             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    796             * get added to the NWK databufs. So it will not go OTA and it will not get
    797             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    798             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    799             * message with the first in line TransSeqNumber, even on a multi message.
    800             * Also note that a reflected msg will not have its confirmation generated
    801             * here.
    802             */
    803            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    804                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_25:
   \   0002FB   740B         MOV       A,#0xb
   \   0002FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000300   E0           MOVX      A,@DPTR
   \   000301   6402         XRL       A,#0x2
   \   000303   702C         JNZ       ??AF_DataRequest_26
   \   000305                ; Setup parameters for call to function NLME_GetShortAddr
   \   000305   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000308   8A..         MOV       ?V4,R2
   \   00030A   8B..         MOV       ?V5,R3
   \   00030C   A8..         MOV       R0,?V4
   \   00030E   A9..         MOV       R1,?V5
   \   000310   7403         MOV       A,#0x3
   \   000312   12....       LCALL     ?XSTACK_DISP0_8
   \   000315   E0           MOVX      A,@DPTR
   \   000316   68           XRL       A,R0
   \   000317   7003         JNZ       ??AF_DataRequest_27
   \   000319   A3           INC       DPTR
   \   00031A   E0           MOVX      A,@DPTR
   \   00031B   69           XRL       A,R1
   \                     ??AF_DataRequest_27:
   \   00031C   7013         JNZ       ??AF_DataRequest_26
    805            {
    806              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   00031E                ; Setup parameters for call to function afDataConfirm
   \   00031E   AB..         MOV       R3,?V3
   \   000320   85..82       MOV       DPL,?V0
   \   000323   85..83       MOV       DPH,?V1
   \   000326   E0           MOVX      A,@DPTR
   \   000327   FA           MOV       R2,A
   \   000328   8E82         MOV       DPL,R6
   \   00032A   8F83         MOV       DPH,R7
   \   00032C   E0           MOVX      A,@DPTR
   \   00032D   F9           MOV       R1,A
   \   00032E   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    807            }
    808          
    809            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_26:
   \   000331   E5..         MOV       A,?V3
   \   000333   7009         JNZ       ??AF_DataRequest_28
    810            {
    811              (*transID)++;
   \   000335   85..82       MOV       DPL,?V0
   \   000338   85..83       MOV       DPH,?V1
   \   00033B   E0           MOVX      A,@DPTR
   \   00033C   04           INC       A
   \   00033D   F0           MOVX      @DPTR,A
    812            }
    813          
    814            return (afStatus_t)stat;
   \                     ??AF_DataRequest_28:
   \   00033E   A9..         MOV       R1,?V3
   \                     ??AF_DataRequest_3:
   \   000340   7421         MOV       A,#0x21
   \   000342   12....       LCALL     ?DEALLOC_XSTACK8
   \   000345   7F08         MOV       R7,#0x8
   \   000347   02....       LJMP      ?BANKED_LEAVE_XDATA
    815          }
    816          
    817          #if defined ( ZIGBEEPRO )
    818          /*********************************************************************
    819           * @fn      AF_DataRequestSrcRtg
    820           *
    821           * @brief   Common functionality for invoking APSDE_DataReq() for both
    822           *          SendMulti and MSG-Send.
    823           *
    824           * input parameters
    825           *
    826           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    827           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    828           * @param   cID - A valid cluster ID as specified by the Profile.
    829           * @param   len - Number of bytes of data pointed to by next param.
    830           * @param  *buf - A pointer to the data bytes to send.
    831           * @param  *transID - A pointer to a byte which can be modified and which will
    832           *                    be used as the transaction sequence number of the msg.
    833           * @param   options - Valid bit mask of Tx options.
    834           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    835           * @param   relayCnt - Number of devices in the relay list
    836           * @param   pRelayList - Pointer to the relay list
    837           *
    838           * output parameters
    839           *
    840           * @param  *transID - Incremented by one if the return value is success.
    841           *
    842           * @return  afStatus_t - See previous definition of afStatus_... types.
    843           */
    844          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    845          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    846                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    847                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    848          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V2,R1
    849            uint8 status;
    850          
    851            /* Add the source route to the source routing table */
    852            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    853                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FC           MOV       R4,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FD           MOV       R5,A
   \   000019   7415         MOV       A,#0x15
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   E0           MOVX      A,@DPTR
   \   000025   FA           MOV       R2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   00002C   E9           MOV       A,R1
   \   00002D   F9           MOV       R1,A
    854          
    855            if( status == RTG_SUCCESS)
   \   00002E   7043         JNZ       ??AF_DataRequestSrcRtg_0
    856            {
    857              /* Call AF_DataRequest to send the data */
    858              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   000030                ; Setup parameters for call to function AF_DataRequest
   \   000030   7414         MOV       A,#0x14
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F5..         MOV       ?V3,A
   \   000038   78..         MOV       R0,#?V3
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003D   7413         MOV       A,#0x13
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000045   7413         MOV       A,#0x13
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00004D   7413         MOV       A,#0x13
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000055   7413         MOV       A,#0x13
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00005D   A9..         MOV       R1,?V2
   \   00005F   AC..         MOV       R4,?V0
   \   000061   AD..         MOV       R5,?V1
   \   000063   EE           MOV       A,R6
   \   000064   FA           MOV       R2,A
   \   000065   EF           MOV       A,R7
   \   000066   FB           MOV       R3,A
   \   000067   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00006A   7409         MOV       A,#0x9
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006F   E9           MOV       A,R1
   \   000070   F9           MOV       R1,A
   \   000071   800B         SJMP      ??AF_DataRequestSrcRtg_1
    859            }
    860            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   000073   7405         MOV       A,#0x5
   \   000075   69           XRL       A,R1
   \   000076   7004         JNZ       ??AF_DataRequestSrcRtg_2
    861            {
    862              /* The source route relay count is exceeding the network limit */
    863              status = afStatus_INVALID_PARAMETER;
   \   000078   7902         MOV       R1,#0x2
   \   00007A   8002         SJMP      ??AF_DataRequestSrcRtg_1
    864            }
    865            else
    866            {
    867              /* The guaranteed adding entry fails due to memory failure */
    868              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   00007C   7910         MOV       R1,#0x10
    869            }
    870            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   00007E   7F04         MOV       R7,#0x4
   \   000080   02....       LJMP      ?BANKED_LEAVE_XDATA
    871          }
    872          
    873          #endif // ZIGBEEPRO
    874          
    875          /*********************************************************************
    876           * @fn      afFindEndPointDescList
    877           *
    878           * @brief   Find the endpoint description entry from the endpoint
    879           *          number.
    880           *
    881           * @param   EndPoint - Application Endpoint to look for
    882           *
    883           * @return  the address to the endpoint/interface description entry
    884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    885          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    886          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    887            epList_t *epSearch;
    888          
    889            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8004         SJMP      ??afFindEndPointDescList_0
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??afFindEndPointDescList_0:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FB           MOV       R3,A
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   6012         JZ        ??afFindEndPointDescList_2
    890            {
    891              if (epSearch->epDesc->endPoint == EndPoint)
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F8           MOV       R0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F583         MOV       DPH,A
   \   000022   8882         MOV       DPL,R0
   \   000024   E0           MOVX      A,@DPTR
   \   000025   69           XRL       A,R1
   \   000026   70E1         JNZ       ??afFindEndPointDescList_1
    892              {
    893                break;
    894              }
    895            }
    896          
    897            return epSearch;
   \                     ??afFindEndPointDescList_2:
   \   000028   D083         POP       DPH
   \   00002A   D082         POP       DPL
   \   00002C   02....       LJMP      ?BRET
    898          }
    899          
    900          /*********************************************************************
    901           * @fn      afFindEndPointDesc
    902           *
    903           * @brief   Find the endpoint description entry from the endpoint
    904           *          number.
    905           *
    906           * @param   EndPoint - Application Endpoint to look for
    907           *
    908           * @return  the address to the endpoint/interface description entry
    909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    910          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    911          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    912            epList_t *epSearch;
    913          
    914            // Look for the endpoint
    915            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
    916          
    917            if ( epSearch )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6009         JZ        ??afFindEndPointDesc_0
    918              return ( epSearch->epDesc );
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FA           MOV       R2,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FB           MOV       R3,A
   \   000019   8004         SJMP      ??afFindEndPointDesc_1
    919            else
    920              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   00001B   7A00         MOV       R2,#0x0
   \   00001D   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   00001F   7F02         MOV       R7,#0x2
   \   000021   02....       LJMP      ?BANKED_LEAVE_XDATA
    921          }
    922          
    923          /*********************************************************************
    924           * @fn      afFindSimpleDesc
    925           *
    926           * @brief   Find the Simple Descriptor from the endpoint number.
    927           *
    928           * @param   EP - Application Endpoint to look for.
    929           *
    930           * @return  Non-zero to indicate that the descriptor memory must be freed.
    931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    932          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    933          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
    934            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   \   000012   AC..         MOV       R4,?V2
   \   000014   AD..         MOV       R5,?V3
    935            uint8 rtrn = FALSE;
   \   000016   7900         MOV       R1,#0x0
    936          
    937            if ( epItem )
   \   000018   EA           MOV       A,R2
   \   000019   4D           ORL       A,R5
   \   00001A   604A         JZ        ??afFindSimpleDesc_0
    938            {
    939              if ( epItem->pfnDescCB )
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   FA           MOV       R2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   8A82         MOV       DPL,R2
   \   00002A   F583         MOV       DPH,A
   \   00002C   E582         MOV       A,DPL
   \   00002E   4583         ORL       A,DPH
   \   000030   6013         JZ        ??afFindSimpleDesc_1
    940              {
    941                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000032                ; Setup parameters for indirect call
   \   000032   AA..         MOV       R2,?V0
   \   000034   09           INC       R1
   \   000035   12....       LCALL     ?CALL_IND
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   EA           MOV       A,R2
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   EB           MOV       A,R3
   \   000040   F0           MOVX      @DPTR,A
    942                rtrn = TRUE;
   \   000041   7901         MOV       R1,#0x1
   \   000043   8029         SJMP      ??afFindSimpleDesc_2
    943              }
    944              else
    945              {
    946                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000045   8C82         MOV       DPL,R4
   \   000047   8B83         MOV       DPH,R3
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F8           MOV       R0,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F583         MOV       DPH,A
   \   000051   8882         MOV       DPL,R0
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   FA           MOV       R2,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FB           MOV       R3,A
   \   00005C   8E82         MOV       DPL,R6
   \   00005E   8F83         MOV       DPH,R7
   \   000060   EA           MOV       A,R2
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   EB           MOV       A,R3
   \   000064   8007         SJMP      ??afFindSimpleDesc_3
    947              }
    948            }
    949            else
    950            {
    951              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   E4           CLR       A
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \                     ??afFindSimpleDesc_3:
   \   00006D   F0           MOVX      @DPTR,A
    952            }
    953          
    954            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   00006E   7F04         MOV       R7,#0x4
   \   000070   02....       LJMP      ?BANKED_LEAVE_XDATA
    955          }
    956          
    957          /*********************************************************************
    958           * @fn      afGetDescCB
    959           *
    960           * @brief   Get the Descriptor callback function.
    961           *
    962           * @param   epDesc - pointer to the endpoint descriptor
    963           *
    964           * @return  function pointer or NULL
    965           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    966          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
   \                     afGetDescCB:
    967          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    968            epList_t *epSearch;
    969          
    970            // Start at the beginning
    971            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
    972          
    973            // Look through the list until the end
    974            while ( epSearch )
    975            {
    976              // Is there a match?
    977              if ( epSearch->epDesc == epDesc )
    978              {
    979                return ( epSearch->pfnDescCB );
    980              }
    981              else
    982                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afGetDescCB_0:
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   6022         JZ        ??afGetDescCB_1
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FC           MOV       R4,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FD           MOV       R5,A
   \   00001B   EA           MOV       A,R2
   \   00001C   6C           XRL       A,R4
   \   00001D   7002         JNZ       ??afGetDescCB_2
   \   00001F   EB           MOV       A,R3
   \   000020   6D           XRL       A,R5
   \                     ??afGetDescCB_2:
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   70E0         JNZ       ??afGetDescCB_0
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FA           MOV       R2,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FB           MOV       R3,A
   \   000030   8004         SJMP      ??afGetDescCB_3
    983            }
    984          
    985            return ( (pDescCB)NULL );
   \                     ??afGetDescCB_1:
   \   000032   7A00         MOV       R2,#0x0
   \   000034   7B00         MOV       R3,#0x0
   \                     ??afGetDescCB_3:
   \   000036   D083         POP       DPH
   \   000038   D082         POP       DPL
   \   00003A   02....       LJMP      ?BRET
    986          }
    987          
    988          /*********************************************************************
    989           * @fn      afDataReqMTU
    990           *
    991           * @brief   Get the Data Request MTU(Max Transport Unit).
    992           *
    993           * @param   fields - afDataReqMTU_t
    994           *
    995           * @return  uint8(MTU)
    996           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    997          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    998          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    999            uint8 len;
   1000            uint8 hdr;
   1001          
   1002            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6401         XRL       A,#0x1
   \   00000C   7004         JNZ       ??afDataReqMTU_0
   1003            {
   1004              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV       R6,#0x8
   \   000010   8002         SJMP      ??afDataReqMTU_1
   1005            }
   1006            else
   1007            {
   1008              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV       R6,#0x0
   1009            }
   1010          
   1011            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   12....       LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV       A,R1
   \   00001D   C3           CLR       C
   \   00001E   9E           SUBB      A,R6
   \   00001F   F9           MOV       R1,A
   1012          
   1013            return len;
   \   000020   7F01         MOV       R7,#0x1
   \   000022   02....       LJMP      ?BANKED_LEAVE_XDATA
   1014          }
   1015          
   1016          /*********************************************************************
   1017           * @fn      afGetMatch
   1018           *
   1019           * @brief   Set the allow response flag.
   1020           *
   1021           * @param   ep - Application Endpoint to look for
   1022           * @param   action - true - allow response, false - no response
   1023           *
   1024           * @return  TRUE allow responses, FALSE no response
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
   1027          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1028            epList_t *epSearch;
   1029          
   1030            // Look for the endpoint
   1031            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   1032          
   1033            if ( epSearch )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6011         JZ        ??afGetMatch_0
   1034            {
   1035              if ( epSearch->flags & eEP_AllowMatch )
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001D   5004         JNC       ??afGetMatch_0
   1036                return ( TRUE );
   \   00001F   7901         MOV       R1,#0x1
   \   000021   8002         SJMP      ??afGetMatch_1
   1037              else
   1038                return ( FALSE );
   1039            }
   1040            else
   1041              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000023   7900         MOV       R1,#0x0
   \                     ??afGetMatch_1:
   \   000025   7F02         MOV       R7,#0x2
   \   000027   02....       LJMP      ?BANKED_LEAVE_XDATA
   1042          }
   1043          
   1044          /*********************************************************************
   1045           * @fn      afSetMatch
   1046           *
   1047           * @brief   Set the allow response flag.
   1048           *
   1049           * @param   ep - Application Endpoint to look for
   1050           * @param   action - true - allow response, false - no response
   1051           *
   1052           * @return  TRUE if success, FALSE if endpoint not found
   1053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1055          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
   1056            epList_t *epSearch;
   1057          
   1058            // Look for the endpoint
   1059            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   A9..         MOV       R1,?V1
   1060          
   1061            if ( epSearch )
   \   00000E   EA           MOV       A,R2
   \   00000F   49           ORL       A,R1
   \   000010   6019         JZ        ??afSetMatch_0
   1062            {
   1063              if ( action )
   \   000012   EA           MOV       A,R2
   \   000013   2408         ADD       A,#0x8
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   39           ADDC      A,R1
   \   000019   F583         MOV       DPH,A
   \   00001B   EF           MOV       A,R7
   \   00001C   6005         JZ        ??afSetMatch_1
   1064              {
   1065                epSearch->flags |= eEP_AllowMatch;
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   D2E0         SETB      0xE0 /* A   */.0
   \   000021   8003         SJMP      ??afSetMatch_2
   1066              }
   1067              else
   1068              {
   1069                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C2E0         CLR       0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   000026   F0           MOVX      @DPTR,A
   1070              }
   1071              return ( TRUE );
   \   000027   7901         MOV       R1,#0x1
   \   000029   8002         SJMP      ??afSetMatch_3
   1072            }
   1073            else
   1074              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002B   7900         MOV       R1,#0x0
   \                     ??afSetMatch_3:
   \   00002D   7F02         MOV       R7,#0x2
   \   00002F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1075          }
   1076          
   1077          /*********************************************************************
   1078           * @fn      afNumEndPoints
   1079           *
   1080           * @brief   Returns the number of endpoints defined (including 0)
   1081           *
   1082           * @param   none
   1083           *
   1084           * @return  number of endpoints
   1085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1086          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1087          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1088            epList_t *epSearch;
   1089            uint8 endpoints;
   1090          
   1091            // Start at the beginning
   1092            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   8882         MOV       DPL,R0
   \   00000D   F583         MOV       DPH,A
   1093            endpoints = 0;
   \   00000F   7900         MOV       R1,#0x0
   \   000011   8009         SJMP      ??afNumEndPoints_0
   1094          
   1095            while ( epSearch )
   1096            {
   1097              endpoints++;
   \                     ??afNumEndPoints_1:
   \   000013   09           INC       R1
   1098              epSearch = epSearch->nextDesc;
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FA           MOV       R2,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   8A82         MOV       DPL,R2
   \   00001A   F583         MOV       DPH,A
   1099            }
   \                     ??afNumEndPoints_0:
   \   00001C   E582         MOV       A,DPL
   \   00001E   4583         ORL       A,DPH
   \   000020   70F1         JNZ       ??afNumEndPoints_1
   1100          
   1101            return ( endpoints );
   \   000022   D083         POP       DPH
   \   000024   D082         POP       DPL
   \   000026   02....       LJMP      ?BRET
   1102          }
   1103          
   1104          /*********************************************************************
   1105           * @fn      afEndPoints
   1106           *
   1107           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1108           *          Use afNumEndPoints to find out how big a buffer to supply.
   1109           *
   1110           * @param   epBuf - pointer to mem used
   1111           *
   1112           * @return  void
   1113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1114          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1115          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1116            epList_t *epSearch;
   1117            uint8 endPoint;
   1118          
   1119            // Start at the beginning
   1120            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8025         SJMP      ??afEndPoints_0
   1121          
   1122            while ( epSearch )
   1123            {
   1124              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   000009   8C82         MOV       DPL,R4
   \   00000B   8D83         MOV       DPH,R5
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F583         MOV       DPH,A
   \   000015   8882         MOV       DPL,R0
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   1125          
   1126              if ( !skipZDO || endPoint != 0 )
   \   000019   E9           MOV       A,R1
   \   00001A   6003         JZ        ??afEndPoints_2
   \   00001C   E8           MOV       A,R0
   \   00001D   600B         JZ        ??afEndPoints_3
   1127                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00001F   E8           MOV       A,R0
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   AA82         MOV       R2,DPL
   \   000028   AB83         MOV       R3,DPH
   1128          
   1129              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00002A   8C82         MOV       DPL,R4
   \   00002C   8D83         MOV       DPH,R5
   \                     ??afEndPoints_0:
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FC           MOV       R4,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   FD           MOV       R5,A
   1130            }
   \   000033   EC           MOV       A,R4
   \   000034   4D           ORL       A,R5
   \   000035   70D2         JNZ       ??afEndPoints_1
   1131          }
   \   000037   D083         POP       DPH
   \   000039   D082         POP       DPL
   \   00003B   02....       LJMP      ?BRET
   1132          
   1133          /*********************************************************************
   1134           * @fn      afCopyAddress
   1135           *
   1136           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1137           *          from the zAddrType_t parameter.
   1138           *
   1139           * @param   epBuf - pointer to mem used
   1140           *
   1141           * @return  void
   1142           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1143          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1144          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1145            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV       A,R4
   \   00000A   2408         ADD       A,#0x8
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   F0           MOVX      @DPTR,A
   1146            if ( zAddr->addrMode == Addr64Bit )
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6403         XRL       A,#0x3
   \   000029   7005         JNZ       ??afCopyAddress_0
   1147            {
   1148              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00002B                ; Setup parameters for call to function sAddrExtCpy
   \   00002B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00002E   8012         SJMP      ??afCopyAddress_1
   1149            }
   1150            else
   1151            {
   1152              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F8           MOV       R0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F9           MOV       R1,A
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   E8           MOV       A,R0
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E9           MOV       A,R1
   \   000041   F0           MOVX      @DPTR,A
   1153            }
   1154          
   1155            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1156            afAddr->panId = 0;
   \                     ??afCopyAddress_1:
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   E4           CLR       A
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   F0           MOVX      @DPTR,A
   1157          }
   \   000054   7F01         MOV       R7,#0x1
   \   000056   02....       LJMP      ?BANKED_LEAVE_XDATA
   1158          
   1159          /**************************************************************************************************
   1160           * @fn          afAPSF_ConfigGet
   1161           *
   1162           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1163           *              the specified EndPoint.
   1164           *
   1165           * input parameters
   1166           *
   1167           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1168           *
   1169           * output parameters
   1170           *
   1171           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1172           *
   1173           * @return      None.
   1174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1175          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1177            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A9..         MOV       R1,?V1
   1178          
   1179            if (pList == NULL)
   \   000010   EA           MOV       A,R2
   \   000011   49           ORL       A,R1
   \   000012   700D         JNZ       ??afAPSF_ConfigGet_0
   1180            {
   1181              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   7432         MOV       A,#0x32
   \   00001A   F0           MOVX      @DPTR,A
   1182              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00001B   A3           INC       DPTR
   \   00001C   7401         MOV       A,#0x1
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   8021         SJMP      ??afAPSF_ConfigGet_1
   1183            }
   1184            else
   1185            {
   1186              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000021                ; Setup parameters for call to function osal_memcpy
   \   000021   EA           MOV       A,R2
   \   000022   2406         ADD       A,#0x6
   \   000024   F5..         MOV       ?V0,A
   \   000026   E4           CLR       A
   \   000027   39           ADDC      A,R1
   \   000028   F5..         MOV       ?V1,A
   \   00002A   75..00       MOV       ?V2,#0x0
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000032   7C02         MOV       R4,#0x2
   \   000034   7D00         MOV       R5,#0x0
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003D   7403         MOV       A,#0x3
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   1187            }
   1188          }
   \                     ??afAPSF_ConfigGet_1:
   \   000042   7F04         MOV       R7,#0x4
   \   000044   02....       LJMP      ?BANKED_LEAVE_XDATA
   1189          
   1190          /**************************************************************************************************
   1191           * @fn          afAPSF_ConfigSet
   1192           *
   1193           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1194           *              the specified EndPoint.
   1195           *
   1196           * input parameters
   1197           *
   1198           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1199           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1200           *
   1201           * output parameters
   1202           *
   1203           * None.
   1204           *
   1205           * @return      afStatus_SUCCESS for success.
   1206           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1207           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1208          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1209          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1210            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   1211          
   1212            if (pList == NULL)
   \   00000C   EA           MOV       A,R2
   \   00000D   4B           ORL       A,R3
   \   00000E   7004         JNZ       ??afAPSF_ConfigSet_0
   1213            {
   1214              return afStatus_INVALID_PARAMETER;
   \   000010   7902         MOV       R1,#0x2
   \   000012   8021         SJMP      ??afAPSF_ConfigSet_1
   1215            }
   1216          
   1217            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   8E..         MOV       ?V0,R6
   \   000016   8F..         MOV       ?V1,R7
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000020   7C02         MOV       R4,#0x2
   \   000022   7D00         MOV       R5,#0x0
   \   000024   EA           MOV       A,R2
   \   000025   2406         ADD       A,#0x6
   \   000027   FA           MOV       R2,A
   \   000028   5001         JNC       ??afAPSF_ConfigSet_2
   \   00002A   0B           INC       R3
   \                     ??afAPSF_ConfigSet_2:
   \   00002B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1218            return afStatus_SUCCESS;
   \   000033   7900         MOV       R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000035   7F04         MOV       R7,#0x4
   \   000037   02....       LJMP      ?BANKED_LEAVE_XDATA
   1219          }
   1220          
   1221          /**************************************************************************************************
   1222           * @fn          afSetApplCB
   1223           *
   1224           * @brief       Sets the pointer to the Application Callback function for a
   1225           *              specific EndPoint.
   1226           *
   1227           * input parameters
   1228           *
   1229           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1230           * @param       pApplFn - A pointer to the Application Callback function.
   1231           *
   1232           * output parameters
   1233           *
   1234           * None.
   1235           *
   1236           * @return      TRUE if success, FALSE if endpoint not found
   1237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1238          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1239          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1240            if ( pApplFn != NULL )
   \   000009   EA           MOV       A,R2
   \   00000A   4F           ORL       A,R7
   \   00000B   601F         JZ        ??afSetApplCB_0
   1241            {
   1242              epList_t *epSearch;
   1243          
   1244              // Look for the endpoint
   1245              epSearch = afFindEndPointDescList( endPoint );
   \   00000D                ; Setup parameters for call to function afFindEndPointDescList
   \   00000D   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   1246          
   1247              if ( epSearch )
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   6012         JZ        ??afSetApplCB_0
   1248              {
   1249                epSearch->pfnApplCB = pApplFn;
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   EE           MOV       A,R6
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   EF           MOV       A,R7
   \   000027   F0           MOVX      @DPTR,A
   1250          
   1251                return ( TRUE );
   \   000028   7901         MOV       R1,#0x1
   \   00002A   8002         SJMP      ??afSetApplCB_1
   1252              }
   1253            }
   1254          
   1255            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   00002C   7900         MOV       R1,#0x0
   \                     ??afSetApplCB_1:
   \   00002E   7F04         MOV       R7,#0x4
   \   000030   02....       LJMP      ?BANKED_LEAVE_XDATA
   1256          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1
   1257          
   1258          /**************************************************************************************************
   1259          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     70   AF_DataRequest
        0     49   -> APSDE_DataReq
        0     49   -> NLME_GetShortAddr
        0     49   -> NLME_IsAddressBroadcast
        0     49   -> RTG_CheckRtStatus
        0     49   -> afDataConfirm
        0     49   -> afDataReqMTU
        0     49   -> afFindEndPointDescList
        0     49   -> afGetDescCB
        0     49   -> osal_mem_free
        0     49   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     15   afAPSF_ConfigGet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      0     15   afAPSF_ConfigSet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      1     62   afBuildMSGIncoming
        0     20   -> afCopyAddress
        0     23   -> osal_memcpy
        0     20   -> osal_msg_allocate
        0     20   -> osal_msg_send
      1     29   afCopyAddress
        0      9   -> sAddrExtCpy
      1     63   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     58   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      0     37   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     49   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      2     49   afGetDescCB
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     49   afIncomingData
        0     39   -> afBuildMSGIncoming
        0     27   -> afFindEndPointDesc
        0     27   -> afFindEndPointDescList
        0     27   -> aps_FindGroupForEndpoint
        0     27   -> osal_mem_free
      2      0   afNumEndPoints
      1     18   afReflectError
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      1     26   afRegisterExtended
        0     14   -> bdb_zclFindingBindingEpType
        0     14   -> osal_mem_alloc
      0     12   afSetApplCB
        0     12   -> afFindEndPointDescList
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
     842  AF_DataRequest
       1  AF_DataRequestDiscoverRoute
     131  AF_DataRequestSrcRtg
      71  afAPSF_ConfigGet
      58  afAPSF_ConfigSet
     590  afBuildMSGIncoming
      89  afCopyAddress
      91  afDataConfirm
      37  afDataReqMTU
     129  afDelete
      62  afEndPoints
      36  afFindEndPointDesc
      47  afFindEndPointDescList
     115  afFindSimpleDesc
      61  afGetDescCB
      42  afGetMatch
     576  afIncomingData
      41  afNumEndPoints
     128  afReflectError
      67  afRegister
     239  afRegisterExtended
      51  afSetApplCB
      50  afSetMatch
       2  epList
     132  -- Other

 
 3 553 bytes in segment BANKED_CODE
   132 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
   133 bytes of CODE     memory
 3 553 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
