###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  15:06:51
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\osal\common\OSAL_Timers.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW86C2.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\osal\common\OSAL_Timers.c" -D BDB_REPORTING -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING
#        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -D ZCL_ON_OFF -D ZCL_REPORT
#        -D ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\OSAL_Timers.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\OSAL_Timers.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\osal\common\OSAL_Timers.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Timers.c
      3            Revised:        $Date: 2014-06-16 15:12:16 -0700 (Mon, 16 Jun 2014) $
      4            Revision:       $Revision: 39036 $
      5          
      6            Description:    OSAL Timer definition and manipulation functions.
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "comdef.h"
     45          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     46          #include "OSAL.h"
     47          #include "OSAL_Timers.h"
     48          #include "hal_timer.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          
     62          typedef union {
     63            uint32 time32;
     64            uint16 time16[2];
     65            uint8 time8[4];
     66          } osalTime_t;
     67          
     68          typedef struct
     69          {
     70            void   *next;
     71            osalTime_t timeout;
     72            uint16 event_flag;
     73            uint8  task_id;
     74            uint32 reloadTimeout;
     75          } osalTimerRec_t;
     76          
     77          /*********************************************************************
     78           * GLOBAL VARIABLES
     79           */
     80          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          osalTimerRec_t *timerHead;
   \                     timerHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          
     91          /*********************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          // Milliseconds since last reboot

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static uint32 osal_systemClock;
   \                     osal_systemClock:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTION PROTOTYPES
     99           */
    100          osalTimerRec_t  *osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout );
    101          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag );
    102          void osalDeleteTimer( osalTimerRec_t *rmTimer );
    103          
    104          /*********************************************************************
    105           * FUNCTIONS
    106           *********************************************************************/
    107          
    108          /*********************************************************************
    109           * @fn      osalTimerInit
    110           *
    111           * @brief   Initialization for the OSAL Timer System.
    112           *
    113           * @param   none
    114           *
    115           * @return
    116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          void osalTimerInit( void )
   \                     osalTimerInit:
    118          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    119            osal_systemClock = 0;
   \   000004   90....       MOV       DPTR,#osal_systemClock
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   F0           MOVX      @DPTR,A
    120          }
   \   00000F   D083         POP       DPH
   \   000011   D082         POP       DPL
   \   000013   02....       LJMP      ?BRET
    121          
    122          /*********************************************************************
    123           * @fn      osalAddTimer
    124           *
    125           * @brief   Add a timer to the timer list.
    126           *          Ints must be disabled.
    127           *
    128           * @param   task_id
    129           * @param   event_flag
    130           * @param   timeout
    131           *
    132           * @return  osalTimerRec_t * - pointer to newly created timer
    133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout )
   \                     osalAddTimer:
    135          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
    136            osalTimerRec_t *newTimer;
    137            osalTimerRec_t *srchTimer;
    138          
    139            // Look for an existing timer first
    140            newTimer = osalFindTimer( task_id, event_flag );
   \   00000B                ; Setup parameters for call to function osalFindTimer
   \   00000B   12....       LCALL     `??osalFindTimer::?relay`; Banked call to: osalFindTimer
   \   00000E   7410         MOV       A,#0x10
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   78..         MOV       R0,#?V4
   \   000015   12....       LCALL     ?L_MOV_X
    141            if ( newTimer )
   \   000018   EA           MOV       A,R2
   \   000019   4B           ORL       A,R3
   \   00001A   600E         JZ        ??osalAddTimer_0
    142            {
    143              // Timer is found - update it.
    144              newTimer->timeout.time32 = timeout;
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?L_MOV_TO_X
    145          
    146              return ( newTimer );
   \   000027   02....       LJMP      ??osalAddTimer_1 & 0xFFFF
    147            }
    148            else
    149            {
    150              // New Timer
    151              newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
   \                     ??osalAddTimer_0:
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   7A0D         MOV       R2,#0xd
   \   00002C   7B00         MOV       R3,#0x0
   \   00002E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    152          
    153              if ( newTimer )
   \   000031   EA           MOV       A,R2
   \   000032   4B           ORL       A,R3
   \   000033   6077         JZ        ??osalAddTimer_2
    154              {
    155                // Fill in new timer
    156                newTimer->task_id = task_id;
   \   000035   EE           MOV       A,R6
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   F0           MOVX      @DPTR,A
    157                newTimer->event_flag = event_flag;
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E5..         MOV       A,?V0
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   E5..         MOV       A,?V1
   \   000053   F0           MOVX      @DPTR,A
    158                newTimer->timeout.time32 = timeout;
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   78..         MOV       R0,#?V4
   \   00005C   12....       LCALL     ?L_MOV_TO_X
    159                newTimer->next = (void *)NULL;
   \   00005F   8A82         MOV       DPL,R2
   \   000061   8B83         MOV       DPH,R3
   \   000063   E4           CLR       A
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   F0           MOVX      @DPTR,A
    160                newTimer->reloadTimeout = 0;
   \   000067   8A82         MOV       DPL,R2
   \   000069   8B83         MOV       DPH,R3
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   F0           MOVX      @DPTR,A
   \   000077   A3           INC       DPTR
   \   000078   F0           MOVX      @DPTR,A
   \   000079   A3           INC       DPTR
   \   00007A   F0           MOVX      @DPTR,A
    161          
    162                // Does the timer list already exist
    163                if ( timerHead == NULL )
   \   00007B   90....       MOV       DPTR,#timerHead
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F8           MOV       R0,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F9           MOV       R1,A
   \   000083   E8           MOV       A,R0
   \   000084   49           ORL       A,R1
   \   000085   90....       MOV       DPTR,#timerHead
   \   000088   601B         JZ        ??osalAddTimer_3
    164                {
    165                  // Start task list
    166                  timerHead = newTimer;
    167                }
    168                else
    169                {
    170                  // Add it to the end of the timer list
    171                  srchTimer = timerHead;
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   FC           MOV       R4,A
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   8003         SJMP      ??osalAddTimer_4
    172          
    173                  // Stop at the last record
    174                  while ( srchTimer->next )
    175                    srchTimer = srchTimer->next;
   \                     ??osalAddTimer_5:
   \   000090   E8           MOV       A,R0
   \   000091   FC           MOV       R4,A
   \   000092   E9           MOV       A,R1
   \                     ??osalAddTimer_4:
   \   000093   FD           MOV       R5,A
   \   000094   8C82         MOV       DPL,R4
   \   000096   8D83         MOV       DPH,R5
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F8           MOV       R0,A
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F9           MOV       R1,A
   \   00009D   E8           MOV       A,R0
   \   00009E   49           ORL       A,R1
   \   00009F   70EF         JNZ       ??osalAddTimer_5
    176          
    177                  // Add to the list
    178                  srchTimer->next = newTimer;
   \   0000A1   8C82         MOV       DPL,R4
   \   0000A3   8D83         MOV       DPH,R5
   \                     ??osalAddTimer_3:
   \   0000A5   EA           MOV       A,R2
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   EB           MOV       A,R3
   \   0000A9   F0           MOVX      @DPTR,A
    179                }
    180          
    181                return ( newTimer );
   \   0000AA   8004         SJMP      ??osalAddTimer_1
    182              }
    183              else
    184              {
    185                return ( (osalTimerRec_t *)NULL );
   \                     ??osalAddTimer_2:
   \   0000AC   7A00         MOV       R2,#0x0
   \   0000AE   7B00         MOV       R3,#0x0
   \                     ??osalAddTimer_1:
   \   0000B0   7F08         MOV       R7,#0x8
   \   0000B2   02....       LJMP      ?BANKED_LEAVE_XDATA
    186              }
    187            }
    188          }
    189          
    190          /*********************************************************************
    191           * @fn      osalFindTimer
    192           *
    193           * @brief   Find a timer in a timer list.
    194           *          Ints must be disabled.
    195           *
    196           * @param   task_id
    197           * @param   event_flag
    198           *
    199           * @return  osalTimerRec_t *
    200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    201          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
   \                     osalFindTimer:
    202          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    203            osalTimerRec_t *srchTimer;
    204          
    205            // Head of the timer list
    206            srchTimer = timerHead;
   \   000004   90....       MOV       DPTR,#timerHead
   \   000007   8004         SJMP      ??osalFindTimer_0
    207          
    208            // Stop when found or at the end
    209            while ( srchTimer )
    210            {
    211              if ( srchTimer->event_flag == event_flag &&
    212                   srchTimer->task_id == task_id )
    213              {
    214                break;
    215              }
    216          
    217              // Not this one, check another
    218              srchTimer = srchTimer->next;
   \                     ??osalFindTimer_1:
   \   000009   8C82         MOV       DPL,R4
   \   00000B   8D83         MOV       DPH,R5
   \                     ??osalFindTimer_0:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FC           MOV       R4,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FD           MOV       R5,A
   \   000012   EC           MOV       A,R4
   \   000013   4D           ORL       A,R5
   \   000014   6023         JZ        ??osalFindTimer_2
   \   000016   8C82         MOV       DPL,R4
   \   000018   8D83         MOV       DPH,R5
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   6A           XRL       A,R2
   \   000022   7003         JNZ       ??osalFindTimer_3
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6B           XRL       A,R3
   \                     ??osalFindTimer_3:
   \   000027   70E0         JNZ       ??osalFindTimer_1
   \   000029   8C82         MOV       DPL,R4
   \   00002B   8D83         MOV       DPH,R5
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   69           XRL       A,R1
   \   000037   70D0         JNZ       ??osalFindTimer_1
    219            }
    220          
    221            return ( srchTimer );
   \                     ??osalFindTimer_2:
   \   000039   EC           MOV       A,R4
   \   00003A   FA           MOV       R2,A
   \   00003B   ED           MOV       A,R5
   \   00003C   FB           MOV       R3,A
   \   00003D   D083         POP       DPH
   \   00003F   D082         POP       DPL
   \   000041   02....       LJMP      ?BRET
    222          }
    223          
    224          /*********************************************************************
    225           * @fn      osalDeleteTimer
    226           *
    227           * @brief   Delete a timer from a timer list.
    228           *
    229           * @param   table
    230           * @param   rmTimer
    231           *
    232           * @return  none
    233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          void osalDeleteTimer( osalTimerRec_t *rmTimer )
   \                     osalDeleteTimer:
    235          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    236            // Does the timer list really exist
    237            if ( rmTimer )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   600E         JZ        ??osalDeleteTimer_0
    238            {
    239              // Clear the event flag and osalTimerUpdate() will delete
    240              // the timer from the list.
    241              rmTimer->event_flag = 0;
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
    242            }
    243          }
   \                     ??osalDeleteTimer_0:
   \   000016   D083         POP       DPH
   \   000018   D082         POP       DPL
   \   00001A   02....       LJMP      ?BRET
    244          
    245          /*********************************************************************
    246           * @fn      osal_start_timerEx
    247           *
    248           * @brief
    249           *
    250           *   This function is called to start a timer to expire in n mSecs.
    251           *   When the timer expires, the calling task will get the specified event.
    252           *
    253           * @param   uint8 taskID - task id to set timer for
    254           * @param   uint16 event_id - event to be notified with
    255           * @param   uint32 timeout_value - in milliseconds.
    256           *
    257           * @return  SUCCESS, or NO_TIMER_AVAIL.
    258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint32 timeout_value )
   \                     osal_start_timerEx:
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    261            halIntState_t intState;
    262            osalTimerRec_t *newTimer;
    263          
    264            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FE           MOV       R6,A
   \   00000A   C2AF         CLR       0xa8.7
    265          
    266            // Add timer
    267            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   00000C                ; Setup parameters for call to function osalAddTimer
   \   00000C   740A         MOV       A,#0xa
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000014   12....       LCALL     `??osalAddTimer::?relay`; Banked call to: osalAddTimer
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001C   8B..         MOV       ?V1,R3
   \   00001E   A9..         MOV       R1,?V1
    268          
    269            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000020   EE           MOV       A,R6
   \   000021   A2E0         MOV       C,0xE0 /* A   */.0
   \   000023   92AF         MOV       0xa8.7,C
    270          
    271            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   000025   EA           MOV       A,R2
   \   000026   49           ORL       A,R1
   \   000027   6004         JZ        ??osal_start_timerEx_0
   \   000029   7900         MOV       R1,#0x0
   \   00002B   8002         SJMP      ??osal_start_timerEx_1
   \                     ??osal_start_timerEx_0:
   \   00002D   7908         MOV       R1,#0x8
   \                     ??osal_start_timerEx_1:
   \   00002F   7F02         MOV       R7,#0x2
   \   000031   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000034                REQUIRE _A_IEN0
    272          }
    273          
    274          /*********************************************************************
    275           * @fn      osal_start_reload_timer
    276           *
    277           * @brief
    278           *
    279           *   This function is called to start a timer to expire in n mSecs.
    280           *   When the timer expires, the calling task will get the specified event
    281           *   and the timer will be reloaded with the timeout value.
    282           *
    283           * @param   uint8 taskID - task id to set timer for
    284           * @param   uint16 event_id - event to be notified with
    285           * @param   UNINT16 timeout_value - in milliseconds.
    286           *
    287           * @return  SUCCESS, or NO_TIMER_AVAIL.
    288           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    289          uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint32 timeout_value )
   \                     osal_start_reload_timer:
    290          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    291            halIntState_t intState;
    292            osalTimerRec_t *newTimer;
    293          
    294            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FE           MOV       R6,A
   \   00000A   C2AF         CLR       0xa8.7
   \   00000C   740E         MOV       A,#0xe
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?L_MOV_X
    295          
    296            // Add timer
    297            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   000016                ; Setup parameters for call to function osalAddTimer
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00001B   12....       LCALL     `??osalAddTimer::?relay`; Banked call to: osalAddTimer
   \   00001E   7404         MOV       A,#0x4
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
    298            if ( newTimer )
   \   000023   EA           MOV       A,R2
   \   000024   4B           ORL       A,R3
   \   000025   6012         JZ        ??osal_start_reload_timer_0
    299            {
    300              // Load the reload timeout value
    301              newTimer->reloadTimeout = timeout_value;
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   78..         MOV       R0,#?V0
   \   000036   12....       LCALL     ?L_MOV_TO_X
    302            }
    303          
    304            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_start_reload_timer_0:
   \   000039   EE           MOV       A,R6
   \   00003A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00003C   92AF         MOV       0xa8.7,C
    305          
    306            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   00003E   EA           MOV       A,R2
   \   00003F   4B           ORL       A,R3
   \   000040   6004         JZ        ??osal_start_reload_timer_1
   \   000042   7900         MOV       R1,#0x0
   \   000044   8002         SJMP      ??osal_start_reload_timer_2
   \                     ??osal_start_reload_timer_1:
   \   000046   7908         MOV       R1,#0x8
   \                     ??osal_start_reload_timer_2:
   \   000048   7F06         MOV       R7,#0x6
   \   00004A   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00004D                REQUIRE _A_IEN0
    307          }
    308          
    309          /*********************************************************************
    310           * @fn      osal_stop_timerEx
    311           *
    312           * @brief
    313           *
    314           *   This function is called to stop a timer that has already been started.
    315           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    316           *   associated with the timer from being set for the calling task.
    317           *
    318           * @param   uint8 task_id - task id of timer to stop
    319           * @param   uint16 event_id - identifier of the timer that is to be stopped
    320           *
    321           * @return  SUCCESS or INVALID_EVENT_ID
    322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    323          uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
   \                     osal_stop_timerEx:
    324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    325            halIntState_t intState;
    326            osalTimerRec_t *foundTimer;
    327          
    328            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   F5..         MOV       ?V0,A
   \   00000B   C2AF         CLR       0xa8.7
    329          
    330            // Find the timer to stop
    331            foundTimer = osalFindTimer( task_id, event_id );
   \   00000D                ; Setup parameters for call to function osalFindTimer
   \   00000D   12....       LCALL     `??osalFindTimer::?relay`; Banked call to: osalFindTimer
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   AF..         MOV       R7,?V3
    332            if ( foundTimer )
   \   000016   EA           MOV       A,R2
   \   000017   4F           ORL       A,R7
   \   000018   6003         JZ        ??osal_stop_timerEx_0
    333            {
    334              osalDeleteTimer( foundTimer );
   \   00001A                ; Setup parameters for call to function osalDeleteTimer
   \   00001A   12....       LCALL     `??osalDeleteTimer::?relay`; Banked call to: osalDeleteTimer
    335            }
    336          
    337            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_stop_timerEx_0:
   \   00001D   E5..         MOV       A,?V0
   \   00001F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000021   92AF         MOV       0xa8.7,C
    338          
    339            return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
   \   000023   E5..         MOV       A,?V2
   \   000025   4F           ORL       A,R7
   \   000026   6004         JZ        ??osal_stop_timerEx_1
   \   000028   7900         MOV       R1,#0x0
   \   00002A   8002         SJMP      ??osal_stop_timerEx_2
   \                     ??osal_stop_timerEx_1:
   \   00002C   7906         MOV       R1,#0x6
   \                     ??osal_stop_timerEx_2:
   \   00002E   7F04         MOV       R7,#0x4
   \   000030   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000033                REQUIRE _A_IEN0
    340          }
    341          
    342          /*********************************************************************
    343           * @fn      osal_get_timeoutEx
    344           *
    345           * @brief
    346           *
    347           * @param   uint8 task_id - task id of timer to check
    348           * @param   uint16 event_id - identifier of timer to be checked
    349           *
    350           * @return  Return the timer's tick count if found, zero otherwise.
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          uint32 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
   \                     osal_get_timeoutEx:
    353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    354            halIntState_t intState;
    355            uint32 rtrn = 0;
   \   000005   75..00       MOV       ?V0,#0x0
   \   000008   75..00       MOV       ?V1,#0x0
   \   00000B   75..00       MOV       ?V2,#0x0
   \   00000E   75..00       MOV       ?V3,#0x0
    356            osalTimerRec_t *tmr;
    357          
    358            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000011   A2AF         MOV       C,0xa8.7
   \   000013   E4           CLR       A
   \   000014   33           RLC       A
   \   000015   FE           MOV       R6,A
   \   000016   C2AF         CLR       0xa8.7
    359          
    360            tmr = osalFindTimer( task_id, event_id );
   \   000018                ; Setup parameters for call to function osalFindTimer
   \   000018   12....       LCALL     `??osalFindTimer::?relay`; Banked call to: osalFindTimer
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
    361          
    362            if ( tmr )
   \   00001F   E582         MOV       A,DPL
   \   000021   4583         ORL       A,DPH
   \   000023   6007         JZ        ??osal_get_timeoutEx_0
    363            {
    364              rtrn = tmr->timeout.time32;
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?L_MOV_X
    365            }
    366          
    367            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_get_timeoutEx_0:
   \   00002C   EE           MOV       A,R6
   \   00002D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00002F   92AF         MOV       0xa8.7,C
    368          
    369            return rtrn;
   \   000031   AA..         MOV       R2,?V0
   \   000033   AB..         MOV       R3,?V1
   \   000035   AC..         MOV       R4,?V2
   \   000037   AD..         MOV       R5,?V3
   \   000039   7F06         MOV       R7,#0x6
   \   00003B   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00003E                REQUIRE _A_IEN0
    370          }
    371          
    372          /*********************************************************************
    373           * @fn      osal_timer_num_active
    374           *
    375           * @brief
    376           *
    377           *   This function counts the number of active timers.
    378           *
    379           * @return  uint8 - number of timers
    380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          uint8 osal_timer_num_active( void )
   \                     osal_timer_num_active:
    382          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    383            halIntState_t intState;
    384            uint8 num_timers = 0;
   \   000004   7900         MOV       R1,#0x0
    385            osalTimerRec_t *srchTimer;
    386          
    387            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000006   A2AF         MOV       C,0xa8.7
   \   000008   E4           CLR       A
   \   000009   33           RLC       A
   \   00000A   F8           MOV       R0,A
   \   00000B   C2AF         CLR       0xa8.7
    388          
    389            // Head of the timer list
    390            srchTimer = timerHead;
   \   00000D   90....       MOV       DPTR,#timerHead
   \   000010   8001         SJMP      ??osal_timer_num_active_0
    391          
    392            // Count timers in the list
    393            while ( srchTimer != NULL )
    394            {
    395              num_timers++;
   \                     ??osal_timer_num_active_1:
   \   000012   09           INC       R1
    396              srchTimer = srchTimer->next;
   \                     ??osal_timer_num_active_0:
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FA           MOV       R2,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   8A82         MOV       DPL,R2
   \   000019   F583         MOV       DPH,A
    397            }
   \   00001B   E582         MOV       A,DPL
   \   00001D   4583         ORL       A,DPH
   \   00001F   70F1         JNZ       ??osal_timer_num_active_1
    398          
    399            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000021   E8           MOV       A,R0
   \   000022   A2E0         MOV       C,0xE0 /* A   */.0
   \   000024   92AF         MOV       0xa8.7,C
    400          
    401            return num_timers;
   \   000026   D083         POP       DPH
   \   000028   D082         POP       DPL
   \   00002A   02....       LJMP      ?BRET
   \   00002D                REQUIRE _A_IEN0
    402          }
    403          
    404          /*********************************************************************
    405           * @fn      osalTimerUpdate
    406           *
    407           * @brief   Update the timer structures for a timer tick.
    408           *
    409           * @param   none
    410           *
    411           * @return  none
    412           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          void osalTimerUpdate( uint32 updateTime )
   \                     osalTimerUpdate:
    414          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   EC           MOV       A,R4
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
    415            halIntState_t intState;
    416            osalTimerRec_t *srchTimer;
    417            osalTimerRec_t *prevTimer;
    418          
    419            osalTime_t timeUnion;
    420            timeUnion.time32 = updateTime;
    421          
    422            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00001B   A2AF         MOV       C,0xa8.7
   \   00001D   E4           CLR       A
   \   00001E   33           RLC       A
   \   00001F   F5..         MOV       ?V8,A
   \   000021   C2AF         CLR       0xa8.7
    423            // Update the system time
    424            osal_systemClock += updateTime;
   \   000023   85..82       MOV       DPL,?XSP + 0
   \   000026   85..83       MOV       DPH,?XSP + 1
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?L_MOV_X
   \   00002E   90....       MOV       DPTR,#osal_systemClock
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?L_ADD_TO_X
    425            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000036   E5..         MOV       A,?V8
   \   000038   A2E0         MOV       C,0xE0 /* A   */.0
   \   00003A   92AF         MOV       0xa8.7,C
    426          
    427            // Look for open timer slot
    428            if ( timerHead != NULL )
   \   00003C   90....       MOV       DPTR,#timerHead
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F8           MOV       R0,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   E8           MOV       A,R0
   \   000045   49           ORL       A,R1
   \   000046   7003         JNZ       $+5
   \   000048   02....       LJMP      ??osalTimerUpdate_0 & 0xFFFF
    429            {
    430              // Add it to the end of the timer list
    431              srchTimer = timerHead;
   \   00004B   90....       MOV       DPTR,#timerHead
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   FE           MOV       R6,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FF           MOV       R7,A
    432              prevTimer = (void *)NULL;
   \   000053   75..00       MOV       ?V10,#0x0
   \   000056   75..00       MOV       ?V11,#0x0
   \   000059   8068         SJMP      ??osalTimerUpdate_1
    433          
    434              // Look for open timer slot
    435              while ( srchTimer )
    436              {
    437                osalTimerRec_t *freeTimer = NULL;
    438          
    439                HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    440          
    441                // To minimize time in this critical section, avoid 32-bit math
    442                if ((timeUnion.time16[1] == 0) && (timeUnion.time8[1] == 0))
    443                {
    444                  // If upper 24 bits are zero, check lower 8 bits for roll over
    445                  if (srchTimer->timeout.time8[0] >= timeUnion.time8[0])
    446                  {
    447                    // 8-bit math
    448                    srchTimer->timeout.time8[0] -= timeUnion.time8[0];
    449                  }
    450                  else
    451                  {
    452                    // 32-bit math
    453                    if (srchTimer->timeout.time32 > timeUnion.time32)
    454                    {
    455                      srchTimer->timeout.time32 -= timeUnion.time32;
    456                    }
    457                    else
    458                    {
    459                      srchTimer->timeout.time32 = 0;
    460                    }
    461                  }
    462                }
    463                else
    464                {
    465                    // 32-bit math
    466                  if (srchTimer->timeout.time32 > timeUnion.time32)
    467                  {
    468                    srchTimer->timeout.time32 -= timeUnion.time32;
    469                  }
    470                  else
    471                  {
    472                    srchTimer->timeout.time32 = 0;
    473                  }
    474                }
    475          
    476                // Check for reloading
    477                if ( (srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0) &&
    478                     (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
    479                {
    480                  // Notify the task of a timeout
    481                  osal_set_event( srchTimer->task_id, srchTimer->event_flag );
    482          
    483                  // Reload the timer timeout value
    484                  srchTimer->timeout.time32 = srchTimer->reloadTimeout;
    485                }
    486          
    487                // When timeout or delete (event_flag == 0)
    488                if ( ((srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0)) ||
    489                      (srchTimer->event_flag == 0) )
    490                {
    491                  // Take out of list
    492                  if ( prevTimer == NULL )
    493                  {
    494                    timerHead = srchTimer->next;
    495                  }
    496                  else
    497                  {
    498                    prevTimer->next = srchTimer->next;
    499                  }
    500          
    501                  // Setup to free memory
    502                  freeTimer = srchTimer;
    503          
    504                  // Next
    505                  srchTimer = srchTimer->next;
    506                }
    507                else
    508                {
    509                  // Get next
    510                  prevTimer = srchTimer;
   \                     ??osalTimerUpdate_2:
   \   00005B   8E..         MOV       ?V10,R6
   \   00005D   8F..         MOV       ?V11,R7
    511                  srchTimer = srchTimer->next;
   \                     ??osalTimerUpdate_3:
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   E0           MOVX      A,@DPTR
   \   000064   FE           MOV       R6,A
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   FF           MOV       R7,A
    512                }
    513          
    514                HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000068   E5..         MOV       A,?V8
   \   00006A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00006C   92AF         MOV       0xa8.7,C
    515          
    516                if ( freeTimer )
   \   00006E   E5..         MOV       A,?V2
   \   000070   45..         ORL       A,?V3
   \   000072   604F         JZ        ??osalTimerUpdate_1
    517                {
    518                  if ( (freeTimer->timeout.time16[0] == 0) && (freeTimer->timeout.time16[1] == 0) )
   \   000074   85..82       MOV       DPL,?V2
   \   000077   85..83       MOV       DPH,?V3
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F8           MOV       R0,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F9           MOV       R1,A
   \   000081   E8           MOV       A,R0
   \   000082   49           ORL       A,R1
   \   000083   7037         JNZ       ??osalTimerUpdate_4
   \   000085   85..82       MOV       DPL,?V2
   \   000088   85..83       MOV       DPH,?V3
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F8           MOV       R0,A
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F9           MOV       R1,A
   \   000094   E8           MOV       A,R0
   \   000095   49           ORL       A,R1
   \   000096   7024         JNZ       ??osalTimerUpdate_4
    519                  {
    520                    osal_set_event( freeTimer->task_id, freeTimer->event_flag );
   \   000098                ; Setup parameters for call to function osal_set_event
   \   000098   85..82       MOV       DPL,?V2
   \   00009B   85..83       MOV       DPH,?V3
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   FA           MOV       R2,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   FB           MOV       R3,A
   \   0000A9   85..82       MOV       DPL,?V2
   \   0000AC   85..83       MOV       DPH,?V3
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   F9           MOV       R1,A
   \   0000B9   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    521                  }
    522                  osal_mem_free( freeTimer );
   \                     ??osalTimerUpdate_4:
   \   0000BC                ; Setup parameters for call to function osal_mem_free
   \   0000BC   AA..         MOV       R2,?V2
   \   0000BE   AB..         MOV       R3,?V3
   \   0000C0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    523                }
   \                     ??osalTimerUpdate_1:
   \   0000C3   EE           MOV       A,R6
   \   0000C4   4F           ORL       A,R7
   \   0000C5   7003         JNZ       $+5
   \   0000C7   02....       LJMP      ??osalTimerUpdate_0 & 0xFFFF
   \   0000CA   75..00       MOV       ?V2,#0x0
   \   0000CD   75..00       MOV       ?V3,#0x0
   \   0000D0   A2AF         MOV       C,0xa8.7
   \   0000D2   E4           CLR       A
   \   0000D3   33           RLC       A
   \   0000D4   F5..         MOV       ?V8,A
   \   0000D6   C2AF         CLR       0xa8.7
   \   0000D8   EE           MOV       A,R6
   \   0000D9   2402         ADD       A,#0x2
   \   0000DB   F5..         MOV       ?V0,A
   \   0000DD   E4           CLR       A
   \   0000DE   3F           ADDC      A,R7
   \   0000DF   F5..         MOV       ?V1,A
   \   0000E1   7402         MOV       A,#0x2
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   F8           MOV       R0,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   F9           MOV       R1,A
   \   0000EB   E8           MOV       A,R0
   \   0000EC   49           ORL       A,R1
   \   0000ED   702E         JNZ       ??osalTimerUpdate_5
   \   0000EF   7401         MOV       A,#0x1
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   7026         JNZ       ??osalTimerUpdate_5
   \   0000F7   85..82       MOV       DPL,?XSP + 0
   \   0000FA   85..83       MOV       DPH,?XSP + 1
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F8           MOV       R0,A
   \   0000FF   85..82       MOV       DPL,?V0
   \   000102   85..83       MOV       DPH,?V1
   \   000105   E0           MOVX      A,@DPTR
   \   000106   C3           CLR       C
   \   000107   98           SUBB      A,R0
   \   000108   4013         JC        ??osalTimerUpdate_5
   \   00010A   85..82       MOV       DPL,?XSP + 0
   \   00010D   85..83       MOV       DPH,?XSP + 1
   \   000110   E0           MOVX      A,@DPTR
   \   000111   F8           MOV       R0,A
   \   000112   85..82       MOV       DPL,?V0
   \   000115   85..83       MOV       DPH,?V1
   \   000118   E0           MOVX      A,@DPTR
   \   000119   C3           CLR       C
   \   00011A   98           SUBB      A,R0
   \   00011B   803D         SJMP      ??osalTimerUpdate_6
   \                     ??osalTimerUpdate_5:
   \   00011D   85..82       MOV       DPL,?V0
   \   000120   85..83       MOV       DPH,?V1
   \   000123   78..         MOV       R0,#?V4
   \   000125   12....       LCALL     ?L_MOV_X
   \   000128   85..82       MOV       DPL,?XSP + 0
   \   00012B   85..83       MOV       DPH,?XSP + 1
   \   00012E   78..         MOV       R0,#?V4
   \   000130   12....       LCALL     ?UL_GT_X
   \   000133   5018         JNC       ??osalTimerUpdate_7
   \   000135   85..82       MOV       DPL,?XSP + 0
   \   000138   85..83       MOV       DPH,?XSP + 1
   \   00013B   78..         MOV       R0,#?V4
   \   00013D   12....       LCALL     ?L_MOV_X
   \   000140   85..82       MOV       DPL,?V0
   \   000143   85..83       MOV       DPH,?V1
   \   000146   78..         MOV       R0,#?V4
   \   000148   12....       LCALL     ?L_SUB_FROM_X
   \   00014B   800E         SJMP      ??osalTimerUpdate_8
   \                     ??osalTimerUpdate_7:
   \   00014D   85..82       MOV       DPL,?V0
   \   000150   85..83       MOV       DPH,?V1
   \   000153   E4           CLR       A
   \   000154   F0           MOVX      @DPTR,A
   \   000155   A3           INC       DPTR
   \   000156   F0           MOVX      @DPTR,A
   \   000157   A3           INC       DPTR
   \   000158   F0           MOVX      @DPTR,A
   \   000159   A3           INC       DPTR
   \                     ??osalTimerUpdate_6:
   \   00015A   F0           MOVX      @DPTR,A
   \                     ??osalTimerUpdate_8:
   \   00015B   85..82       MOV       DPL,?V0
   \   00015E   85..83       MOV       DPH,?V1
   \   000161   E0           MOVX      A,@DPTR
   \   000162   F8           MOV       R0,A
   \   000163   A3           INC       DPTR
   \   000164   E0           MOVX      A,@DPTR
   \   000165   F9           MOV       R1,A
   \   000166   E8           MOV       A,R0
   \   000167   49           ORL       A,R1
   \   000168   705E         JNZ       ??osalTimerUpdate_9
   \   00016A   8E82         MOV       DPL,R6
   \   00016C   8F83         MOV       DPH,R7
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   E0           MOVX      A,@DPTR
   \   000173   F8           MOV       R0,A
   \   000174   A3           INC       DPTR
   \   000175   E0           MOVX      A,@DPTR
   \   000176   F9           MOV       R1,A
   \   000177   E8           MOV       A,R0
   \   000178   49           ORL       A,R1
   \   000179   704D         JNZ       ??osalTimerUpdate_9
   \   00017B   EE           MOV       A,R6
   \   00017C   2409         ADD       A,#0x9
   \   00017E   F5..         MOV       ?V4,A
   \   000180   E4           CLR       A
   \   000181   3F           ADDC      A,R7
   \   000182   F5..         MOV       ?V5,A
   \   000184   85..82       MOV       DPL,?V4
   \   000187   F583         MOV       DPH,A
   \   000189   12....       LCALL     ?XLOAD_R0123
   \   00018C   E8           MOV       A,R0
   \   00018D   49           ORL       A,R1
   \   00018E   4A           ORL       A,R2
   \   00018F   4B           ORL       A,R3
   \   000190   6036         JZ        ??osalTimerUpdate_9
   \   000192   8E82         MOV       DPL,R6
   \   000194   8F83         MOV       DPH,R7
   \   000196   A3           INC       DPTR
   \   000197   A3           INC       DPTR
   \   000198   A3           INC       DPTR
   \   000199   A3           INC       DPTR
   \   00019A   A3           INC       DPTR
   \   00019B   A3           INC       DPTR
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   FA           MOV       R2,A
   \   00019E   A3           INC       DPTR
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   FB           MOV       R3,A
   \   0001A1   EA           MOV       A,R2
   \   0001A2   4B           ORL       A,R3
   \   0001A3   6023         JZ        ??osalTimerUpdate_9
   \   0001A5                ; Setup parameters for call to function osal_set_event
   \   0001A5   8E82         MOV       DPL,R6
   \   0001A7   8F83         MOV       DPH,R7
   \   0001A9   A3           INC       DPTR
   \   0001AA   A3           INC       DPTR
   \   0001AB   A3           INC       DPTR
   \   0001AC   A3           INC       DPTR
   \   0001AD   A3           INC       DPTR
   \   0001AE   A3           INC       DPTR
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   E0           MOVX      A,@DPTR
   \   0001B2   F9           MOV       R1,A
   \   0001B3   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0001B6   85..82       MOV       DPL,?V4
   \   0001B9   85..83       MOV       DPH,?V5
   \   0001BC   12....       LCALL     ?XLOAD_R0123
   \   0001BF   85..82       MOV       DPL,?V0
   \   0001C2   85..83       MOV       DPH,?V1
   \   0001C5   12....       LCALL     ?XSTORE_R0123
   \                     ??osalTimerUpdate_9:
   \   0001C8   85..82       MOV       DPL,?V0
   \   0001CB   85..83       MOV       DPH,?V1
   \   0001CE   E0           MOVX      A,@DPTR
   \   0001CF   F8           MOV       R0,A
   \   0001D0   A3           INC       DPTR
   \   0001D1   E0           MOVX      A,@DPTR
   \   0001D2   F9           MOV       R1,A
   \   0001D3   E8           MOV       A,R0
   \   0001D4   49           ORL       A,R1
   \   0001D5   7011         JNZ       ??osalTimerUpdate_10
   \   0001D7   8E82         MOV       DPL,R6
   \   0001D9   8F83         MOV       DPH,R7
   \   0001DB   A3           INC       DPTR
   \   0001DC   A3           INC       DPTR
   \   0001DD   A3           INC       DPTR
   \   0001DE   A3           INC       DPTR
   \   0001DF   E0           MOVX      A,@DPTR
   \   0001E0   F8           MOV       R0,A
   \   0001E1   A3           INC       DPTR
   \   0001E2   E0           MOVX      A,@DPTR
   \   0001E3   F9           MOV       R1,A
   \   0001E4   E8           MOV       A,R0
   \   0001E5   49           ORL       A,R1
   \   0001E6   6016         JZ        ??osalTimerUpdate_11
   \                     ??osalTimerUpdate_10:
   \   0001E8   8E82         MOV       DPL,R6
   \   0001EA   8F83         MOV       DPH,R7
   \   0001EC   A3           INC       DPTR
   \   0001ED   A3           INC       DPTR
   \   0001EE   A3           INC       DPTR
   \   0001EF   A3           INC       DPTR
   \   0001F0   A3           INC       DPTR
   \   0001F1   A3           INC       DPTR
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   F8           MOV       R0,A
   \   0001F4   A3           INC       DPTR
   \   0001F5   E0           MOVX      A,@DPTR
   \   0001F6   F9           MOV       R1,A
   \   0001F7   E8           MOV       A,R0
   \   0001F8   49           ORL       A,R1
   \   0001F9   6003         JZ        $+5
   \   0001FB   02....       LJMP      ??osalTimerUpdate_2 & 0xFFFF
   \                     ??osalTimerUpdate_11:
   \   0001FE   8E82         MOV       DPL,R6
   \   000200   8F83         MOV       DPH,R7
   \   000202   E0           MOVX      A,@DPTR
   \   000203   F8           MOV       R0,A
   \   000204   A3           INC       DPTR
   \   000205   E0           MOVX      A,@DPTR
   \   000206   F9           MOV       R1,A
   \   000207   E5..         MOV       A,?V10
   \   000209   45..         ORL       A,?V11
   \   00020B   7005         JNZ       ??osalTimerUpdate_12
   \   00020D   90....       MOV       DPTR,#timerHead
   \   000210   8006         SJMP      ??osalTimerUpdate_13
   \                     ??osalTimerUpdate_12:
   \   000212   85..82       MOV       DPL,?V10
   \   000215   85..83       MOV       DPH,?V11
   \                     ??osalTimerUpdate_13:
   \   000218   E8           MOV       A,R0
   \   000219   F0           MOVX      @DPTR,A
   \   00021A   A3           INC       DPTR
   \   00021B   E9           MOV       A,R1
   \   00021C   F0           MOVX      @DPTR,A
   \   00021D   8E..         MOV       ?V2,R6
   \   00021F   8F..         MOV       ?V3,R7
   \   000221   02....       LJMP      ??osalTimerUpdate_3 & 0xFFFF
    524              }
    525            }
    526          }
   \                     ??osalTimerUpdate_0:
   \   000224   7404         MOV       A,#0x4
   \   000226   12....       LCALL     ?DEALLOC_XSTACK8
   \   000229   7F0C         MOV       R7,#0xc
   \   00022B   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00022E                REQUIRE _A_IEN0
    527          
    528          #ifdef POWER_SAVING
    529          /*********************************************************************
    530           * @fn      osal_adjust_timers
    531           *
    532           * @brief   Update the timer structures for elapsed ticks.
    533           *
    534           * @param   none
    535           *
    536           * @return  none
    537           *********************************************************************/
    538          void osal_adjust_timers( void )
    539          {
    540            uint32 eTime;
    541          
    542            if ( timerHead != NULL )
    543            {
    544              // Compute elapsed time (msec)
    545              eTime = TimerElapsed() / TICK_COUNT;
    546          
    547              if ( eTime )
    548              {
    549                osalTimerUpdate( eTime );
    550              }
    551            }
    552          }
    553          #endif /* POWER_SAVING */
    554          
    555          #if defined POWER_SAVING || defined USE_ICALL
    556          /*********************************************************************
    557           * @fn      osal_next_timeout
    558           *
    559           * @brief
    560           *
    561           *   Search timer table to return the lowest timeout value. If the
    562           *   timer list is empty, then the returned timeout will be zero.
    563           *
    564           * @param   none
    565           *
    566           * @return  none
    567           *********************************************************************/
    568          uint32 osal_next_timeout( void )
    569          {
    570            uint32 nextTimeout;
    571            osalTimerRec_t *srchTimer;
    572          
    573            if ( timerHead != NULL )
    574            {
    575              // Head of the timer list
    576              srchTimer = timerHead;
    577              nextTimeout = OSAL_TIMERS_MAX_TIMEOUT;
    578          
    579              // Look for the next timeout timer
    580              while ( srchTimer != NULL )
    581              {
    582                if (srchTimer->timeout.time32 < nextTimeout)
    583                {
    584                  nextTimeout = srchTimer->timeout.time32;
    585                }
    586                // Check next timer
    587                srchTimer = srchTimer->next;
    588              }
    589            }
    590            else
    591            {
    592              // No timers
    593              nextTimeout = 0;
    594            }
    595          
    596            return ( nextTimeout );
    597          }
    598          #endif // POWER_SAVING || USE_ICALL
    599          
    600          /*********************************************************************
    601           * @fn      osal_GetSystemClock()
    602           *
    603           * @brief   Read the local system clock.
    604           *
    605           * @param   none
    606           *
    607           * @return  local clock in milliseconds
    608           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    609          uint32 osal_GetSystemClock( void )
   \                     osal_GetSystemClock:
    610          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    611            return ( osal_systemClock );
   \   000004   90....       MOV       DPTR,#osal_systemClock
   \   000007   12....       LCALL     ?XLOAD_R2345
   \   00000A   D083         POP       DPH
   \   00000C   D082         POP       DPL
   \   00000E   02....       LJMP      ?BRET
    612          }
    613          
    614          /*********************************************************************
    615          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     34   osalAddTimer
        0     16   -> osalFindTimer
        0     16   -> osal_mem_alloc
      2     12   osalDeleteTimer
      2     16   osalFindTimer
      2      0   osalTimerInit
      0     24   osalTimerUpdate
        0     24   -> osal_mem_free
        0     24   -> osal_set_event
      2      0   osal_GetSystemClock
      0     14   osal_get_timeoutEx
        0     14   -> osalFindTimer
      0     22   osal_start_reload_timer
        0     18   -> osalAddTimer
      0     18   osal_start_timerEx
        0     14   -> osalAddTimer
      0     12   osal_stop_timerEx
        0     12   -> osalDeleteTimer
        0     12   -> osalFindTimer
      2      0   osal_timer_num_active


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_IEN0
     181  osalAddTimer
      29  osalDeleteTimer
      68  osalFindTimer
      22  osalTimerInit
     558  osalTimerUpdate
      17  osal_GetSystemClock
      62  osal_get_timeoutEx
      77  osal_start_reload_timer
      52  osal_start_timerEx
      51  osal_stop_timerEx
       4  osal_systemClock
      45  osal_timer_num_active
       2  timerHead
      66  -- Other

 
 1 162 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     6 bytes in segment XDATA_Z
 
    66 bytes of CODE     memory
     0 bytes of DATA     memory (+ 1 byte shared)
 1 162 bytes of HUGECODE memory
     6 bytes of XDATA    memory

Errors: none
Warnings: none
