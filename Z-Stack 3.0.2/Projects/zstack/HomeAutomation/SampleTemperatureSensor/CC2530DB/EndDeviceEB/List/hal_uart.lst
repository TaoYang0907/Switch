###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  15:06:42
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_uart.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW624B.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\hal\target\CC2530EB\hal_uart.c" -D BDB_REPORTING -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING
#        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -D ZCL_ON_OFF -D ZCL_REPORT
#        -D ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\hal_uart.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\hal_uart.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 78
   \   00004E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint8 findTail(void)
   \                     findTail:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   90....       MOV       DPTR,#dmaCfg + 32
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   F9           MOV       R1,A
   \                     ??findTail_0:
   \   00000A   E5C2         MOV       A,0xc2
   \   00000C   FC           MOV       R4,A
   \   00000D   E9           MOV       A,R1
   \   00000E   25E0         ADD       A,0xE0 /* A   */
   \   000010   FA           MOV       R2,A
   \   000011   E4           CLR       A
   \   000012   33           RLC       A
   \   000013   FB           MOV       R3,A
   \   000014   74..         MOV       A,#dmaCfg & 0xff
   \   000016   2A           ADD       A,R2
   \   000017   F582         MOV       DPL,A
   \   000019   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   00001B   3B           ADDC      A,R3
   \   00001C   F583         MOV       DPH,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6C           XRL       A,R4
   \   000021   7001         JNZ       ??findTail_1
   \   000023   E4           CLR       A
   \                     ??findTail_1:
   \   000024   700D         JNZ       ??findTail_2
   \   000026   09           INC       R1
   \   000027   E9           MOV       A,R1
   \   000028   C3           CLR       C
   \   000029   9410         SUBB      A,#0x10
   \   00002B   4002         JC        ??findTail_3
   \   00002D   7900         MOV       R1,#0x0
   \                     ??findTail_3:
   \   00002F   E8           MOV       A,R0
   \   000030   69           XRL       A,R1
   \   000031   70D7         JNZ       ??findTail_0
   \                     ??findTail_2:
   \   000033   D083         POP       DPH
   \   000035   D082         POP       DPL
   \   000037   02....       LJMP      ?BRET
   \   00003A                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL       0xff,#0x3f
   \   000007   85FFFF       MOV       0xff,0xff
   \   00000A   53F1FE       ANL       0xf1,#0xfe
   \   00000D   43F30C       ORL       0xf3,#0xc
   \   000010   53F2F3       ANL       0xf2,#0xf3
   \   000013   758680       MOV       0x86,#-0x80
   \   000016   75C480       MOV       0xc4,#-0x80
   \   000019   90....       MOV       DPTR,#dmaCh1234 + 26
   \   00001C   7470         MOV       A,#0x70
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   74C1         MOV       A,#-0x3f
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   541F         ANL       A,#0x1f
   \   000027   F0           MOVX      @DPTR,A
   \   000028   90....       MOV       DPTR,#dmaCh1234 + 30
   \   00002B   740F         MOV       A,#0xf
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   744A         MOV       A,#0x4a
   \   000031   F0           MOVX      @DPTR,A
   \   000032   90....       MOV       DPTR,#dmaCh1234 + 16
   \   000035   7470         MOV       A,#0x70
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   74C1         MOV       A,#-0x3f
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   90....       MOV       DPTR,#dmaCh1234 + 20
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   541F         ANL       A,#0x1f
   \   000042   F0           MOVX      @DPTR,A
   \   000043   90....       MOV       DPTR,#dmaCh1234 + 22
   \   000046   74CE         MOV       A,#-0x32
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   540F         ANL       A,#0xf
   \   00004D   4410         ORL       A,#0x10
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000052   90....       MOV       DPTR,#dmaCh1234 + 18
   \   000055   F0           MOVX      @DPTR,A
   \   000056   74..         MOV       A,#dmaCfg & 0xff
   \   000058   A3           INC       DPTR
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   90....       MOV       DPTR,#dmaCh1234 + 21
   \   00005D   7410         MOV       A,#0x10
   \   00005F   F0           MOVX      @DPTR,A
   \   000060   90....       MOV       DPTR,#dmaCh1234 + 20
   \   000063   E4           CLR       A
   \   000064   F0           MOVX      @DPTR,A
   \   000065   90....       MOV       DPTR,#dmaCh1234 + 23
   \   000068   7412         MOV       A,#0x12
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   D083         POP       DPH
   \   00006D   D082         POP       DPL
   \   00006F   02....       LJMP      ?BRET
   \   000072                REQUIRE P2DIR
   \   000072                REQUIRE PERCFG
   \   000072                REQUIRE P0SEL
   \   000072                REQUIRE ADCCFG
   \   000072                REQUIRE U0CSR
   \   000072                REQUIRE U0UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   241B         ADD       A,#0x1b
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   90....       MOV       DPTR,#dmaCfg + 76
   \   000015   E8           MOV       A,R0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   E9           MOV       A,R1
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   7403         MOV       A,#0x3
   \   000023   68           XRL       A,R0
   \   000024   6005         JZ        ??HalUARTOpenDMA_0
   \   000026   7404         MOV       A,#0x4
   \   000028   68           XRL       A,R0
   \   000029   7005         JNZ       ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002B   75C2D8       MOV       0xc2,#-0x28
   \   00002E   8003         SJMP      ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000030   75C23B       MOV       0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000033   E0           MOVX      A,@DPTR
   \   000034   600B         JZ        ??HalUARTOpenDMA_3
   \   000036   14           DEC       A
   \   000037   6012         JZ        ??HalUARTOpenDMA_4
   \   000039   14           DEC       A
   \   00003A   6019         JZ        ??HalUARTOpenDMA_5
   \   00003C   14           DEC       A
   \   00003D   6020         JZ        ??HalUARTOpenDMA_6
   \   00003F   8028         SJMP      ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   000041   75C508       MOV       0xc5,#0x8
   \   000044   90....       MOV       DPTR,#dmaCfg + 72
   \   000047   7423         MOV       A,#0x23
   \   000049   8026         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   00004B   75C509       MOV       0xc5,#0x9
   \   00004E   90....       MOV       DPTR,#dmaCfg + 72
   \   000051   7412         MOV       A,#0x12
   \   000053   801C         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   000055   75C50A       MOV       0xc5,#0xa
   \   000058   90....       MOV       DPTR,#dmaCfg + 72
   \   00005B   7409         MOV       A,#0x9
   \   00005D   8012         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   00005F   75C50A       MOV       0xc5,#0xa
   \   000062   90....       MOV       DPTR,#dmaCfg + 72
   \   000065   7406         MOV       A,#0x6
   \   000067   8008         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000069   75C50B       MOV       0xc5,#0xb
   \   00006C   90....       MOV       DPTR,#dmaCfg + 72
   \   00006F   7403         MOV       A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000071   F0           MOVX      @DPTR,A
   \   000072   8A82         MOV       DPL,R2
   \   000074   8B83         MOV       DPH,R3
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   600D         JZ        ??HalUARTOpenDMA_9
   \   00007B   75C442       MOV       0xc4,#0x42
   \   00007E   43F310       ORL       0xf3,#0x10
   \   000081   C285         CLR       0x80.5
   \   000083   43FD20       ORL       0xfd,#0x20
   \   000086   8003         SJMP      ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000088   75C402       MOV       0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   00008B   9070C1       MOV       DPTR,#0x70c1
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   90....       MOV       DPTR,#dmaCfg
   \   000092   F0           MOVX      @DPTR,A
   \   000093   A3           INC       DPTR
   \   000094   E4           CLR       A
   \   000095   F0           MOVX      @DPTR,A
   \   000096   75D1F7       MOV       0xd1,#-0x9
   \   000099   75D608       MOV       0xd6,#0x8
   \   00009C                ; Setup parameters for call to function osal_memset
   \   00009C   7C20         MOV       R4,#0x20
   \   00009E   FD           MOV       R5,A
   \   00009F   E5C2         MOV       A,0xc2
   \   0000A1   F4           CPL       A
   \   0000A2   F9           MOV       R1,A
   \   0000A3   7A..         MOV       R2,#dmaCfg & 0xff
   \   0000A5   7B..         MOV       R3,#(dmaCfg >> 8) & 0xff
   \   0000A7   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000AA   438640       ORL       0x86,#0x40
   \   0000AD   90....       MOV       DPTR,#dmaCfg + 75
   \   0000B0   E4           CLR       A
   \   0000B1   F0           MOVX      @DPTR,A
   \   0000B2   90....       MOV       DPTR,#dmaCfg + 74
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   D083         POP       DPH
   \   0000B8   D082         POP       DPL
   \   0000BA   02....       LJMP      ?BRET
   \   0000BD                REQUIRE U0BAUD
   \   0000BD                REQUIRE U0GCR
   \   0000BD                REQUIRE U0UCR
   \   0000BD                REQUIRE P0SEL
   \   0000BD                REQUIRE _A_P0
   \   0000BD                REQUIRE P0DIR
   \   0000BD                REQUIRE DMAIRQ
   \   0000BD                REQUIRE DMAARM
   \   0000BD                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTReadDMA(uint8 *, uint16)
   \                     HalUARTReadDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   7800         MOV       R0,#0x0
   \   000007   7900         MOV       R1,#0x0
   \   000009   803F         SJMP      ??HalUARTReadDMA_0
   \                     ??HalUARTReadDMA_1:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   E5..         MOV       A,?V0
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   AA82         MOV       R2,DPL
   \   000015   AB83         MOV       R3,DPH
   \   000017   AFC2         MOV       R7,0xc2
   \   000019   EF           MOV       A,R7
   \   00001A   F4           CPL       A
   \   00001B   F5..         MOV       ?V1,A
   \   00001D   90....       MOV       DPTR,#dmaCfg + 32
   \   000020   E0           MOVX      A,@DPTR
   \   000021   25E0         ADD       A,0xE0 /* A   */
   \   000023   FE           MOV       R6,A
   \   000024   E4           CLR       A
   \   000025   33           RLC       A
   \   000026   FF           MOV       R7,A
   \   000027   74..         MOV       A,#dmaCfg & 0xff
   \   000029   2E           ADD       A,R6
   \   00002A   F582         MOV       DPL,A
   \   00002C   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   00002E   3F           ADDC      A,R7
   \   00002F   F583         MOV       DPH,A
   \   000031   E4           CLR       A
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   E5..         MOV       A,?V1
   \   000036   F0           MOVX      @DPTR,A
   \   000037   90....       MOV       DPTR,#dmaCfg + 32
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   04           INC       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   C3           CLR       C
   \   00003F   9410         SUBB      A,#0x10
   \   000041   4002         JC        ??HalUARTReadDMA_2
   \   000043   E4           CLR       A
   \   000044   F0           MOVX      @DPTR,A
   \                     ??HalUARTReadDMA_2:
   \   000045   08           INC       R0
   \   000046   E8           MOV       A,R0
   \   000047   7001         JNZ       ??HalUARTReadDMA_0
   \   000049   09           INC       R1
   \                     ??HalUARTReadDMA_0:
   \   00004A   C3           CLR       C
   \   00004B   E8           MOV       A,R0
   \   00004C   9C           SUBB      A,R4
   \   00004D   E9           MOV       A,R1
   \   00004E   9D           SUBB      A,R5
   \   00004F   5028         JNC       ??HalUARTReadDMA_3
   \   000051   90....       MOV       DPTR,#dmaCfg + 32
   \   000054   E0           MOVX      A,@DPTR
   \   000055   25E0         ADD       A,0xE0 /* A   */
   \   000057   FE           MOV       R6,A
   \   000058   E4           CLR       A
   \   000059   33           RLC       A
   \   00005A   FF           MOV       R7,A
   \   00005B   74..         MOV       A,#dmaCfg & 0xff
   \   00005D   2E           ADD       A,R6
   \   00005E   F582         MOV       DPL,A
   \   000060   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000062   3F           ADDC      A,R7
   \   000063   F583         MOV       DPH,A
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F5..         MOV       ?V0,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F5..         MOV       ?V1,A
   \   00006C   E5C2         MOV       A,0xc2
   \   00006E   F5..         MOV       ?V2,A
   \   000070   E5..         MOV       A,?V1
   \   000072   65..         XRL       A,?V2
   \   000074   7001         JNZ       ??HalUARTReadDMA_4
   \   000076   E4           CLR       A
   \                     ??HalUARTReadDMA_4:
   \   000077   6092         JZ        ??HalUARTReadDMA_1
   \                     ??HalUARTReadDMA_3:
   \   000079   C285         CLR       0x80.5
   \   00007B   E8           MOV       A,R0
   \   00007C   FA           MOV       R2,A
   \   00007D   E9           MOV       A,R1
   \   00007E   FB           MOV       R3,A
   \   00007F   7F04         MOV       R7,#0x4
   \   000081   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000084                REQUIRE U0BAUD
   \   000084                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(uint8 *, uint16)
   \                     HalUARTWriteDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   90....       MOV       DPTR,#dmaCfg + 70
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   74..         MOV       A,#(dmaCfg + 68) & 0xff
   \   000010   28           ADD       A,R0
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   34..         ADDC      A,#((dmaCfg + 68) >> 8) & 0xff
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   EC           MOV       A,R4
   \   00001B   28           ADD       A,R0
   \   00001C   F8           MOV       R0,A
   \   00001D   E4           CLR       A
   \   00001E   3D           ADDC      A,R5
   \   00001F   F9           MOV       R1,A
   \   000020   C3           CLR       C
   \   000021   E8           MOV       A,R0
   \   000022   9411         SUBB      A,#0x11
   \   000024   E9           MOV       A,R1
   \   000025   9400         SUBB      A,#0x0
   \   000027   4007         JC        ??HalUARTWriteDMA_0
   \   000029   7A00         MOV       R2,#0x0
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   02....       LJMP      ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   000030   A2AF         MOV       C,0xa8.7
   \   000032   E4           CLR       A
   \   000033   33           RLC       A
   \   000034   F8           MOV       R0,A
   \   000035   C2AF         CLR       0xa8.7
   \   000037   90....       MOV       DPTR,#dmaCfg + 70
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F5..         MOV       ?V2,A
   \   00003D   F5..         MOV       ?V0,A
   \   00003F   75..00       MOV       ?V1,#0x0
   \   000042   74..         MOV       A,#(dmaCfg + 68) & 0xff
   \   000044   25..         ADD       A,?V0
   \   000046   F582         MOV       DPL,A
   \   000048   E4           CLR       A
   \   000049   34..         ADDC      A,#((dmaCfg + 68) >> 8) & 0xff
   \   00004B   F583         MOV       DPH,A
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   E8           MOV       A,R0
   \   000050   A2E0         MOV       C,0xE0 /* A   */.0
   \   000052   92AF         MOV       0xa8.7,C
   \   000054   7A00         MOV       R2,#0x0
   \   000056   7B00         MOV       R3,#0x0
   \   000058   8037         SJMP      ??HalUARTWriteDMA_2
   \                     ??HalUARTWriteDMA_3:
   \   00005A   EE           MOV       A,R6
   \   00005B   2A           ADD       A,R2
   \   00005C   F582         MOV       DPL,A
   \   00005E   EF           MOV       A,R7
   \   00005F   3B           ADDC      A,R3
   \   000060   F583         MOV       DPH,A
   \   000062   E0           MOVX      A,@DPTR
   \   000063   C0E0         PUSH      A
   \   000065   85....       MOV       ?V6,?V0
   \   000068   85....       MOV       ?V7,?V1
   \   00006B   7404         MOV       A,#0x4
   \   00006D   78..         MOV       R0,#?V6
   \   00006F   12....       LCALL     ?S_SHL
   \   000072   74..         MOV       A,#(dmaCfg + 36) & 0xff
   \   000074   29           ADD       A,R1
   \   000075   F5..         MOV       ?V4,A
   \   000077   E4           CLR       A
   \   000078   34..         ADDC      A,#((dmaCfg + 36) >> 8) & 0xff
   \   00007A   F5..         MOV       ?V5,A
   \   00007C   E5..         MOV       A,?V4
   \   00007E   25..         ADD       A,?V6
   \   000080   F582         MOV       DPL,A
   \   000082   E5..         MOV       A,?V5
   \   000084   35..         ADDC      A,?V7
   \   000086   F583         MOV       DPH,A
   \   000088   D0E0         POP       A
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   09           INC       R1
   \   00008C   0A           INC       R2
   \   00008D   EA           MOV       A,R2
   \   00008E   7001         JNZ       ??HalUARTWriteDMA_2
   \   000090   0B           INC       R3
   \                     ??HalUARTWriteDMA_2:
   \   000091   C3           CLR       C
   \   000092   EA           MOV       A,R2
   \   000093   9C           SUBB      A,R4
   \   000094   EB           MOV       A,R3
   \   000095   9D           SUBB      A,R5
   \   000096   40C2         JC        ??HalUARTWriteDMA_3
   \   000098   A2AF         MOV       C,0xa8.7
   \   00009A   E4           CLR       A
   \   00009B   33           RLC       A
   \   00009C   F8           MOV       R0,A
   \   00009D   C2AF         CLR       0xa8.7
   \   00009F   90....       MOV       DPTR,#dmaCfg + 70
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   65..         XRL       A,?V2
   \   0000A5   6062         JZ        ??HalUARTWriteDMA_4
   \   0000A7   E8           MOV       A,R0
   \   0000A8   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000AA   92AF         MOV       0xa8.7,C
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F5..         MOV       ?V2,A
   \   0000AF   F5..         MOV       ?V0,A
   \   0000B1   74..         MOV       A,#(dmaCfg + 68) & 0xff
   \   0000B3   25..         ADD       A,?V0
   \   0000B5   F582         MOV       DPL,A
   \   0000B7   E4           CLR       A
   \   0000B8   34..         ADDC      A,#((dmaCfg + 68) >> 8) & 0xff
   \   0000BA   F583         MOV       DPH,A
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   F9           MOV       R1,A
   \   0000BE   7A00         MOV       R2,#0x0
   \   0000C0   7B00         MOV       R3,#0x0
   \   0000C2   8037         SJMP      ??HalUARTWriteDMA_5
   \                     ??HalUARTWriteDMA_6:
   \   0000C4   EE           MOV       A,R6
   \   0000C5   2A           ADD       A,R2
   \   0000C6   F582         MOV       DPL,A
   \   0000C8   EF           MOV       A,R7
   \   0000C9   3B           ADDC      A,R3
   \   0000CA   F583         MOV       DPH,A
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   C0E0         PUSH      A
   \   0000CF   85....       MOV       ?V6,?V0
   \   0000D2   85....       MOV       ?V7,?V1
   \   0000D5   7404         MOV       A,#0x4
   \   0000D7   78..         MOV       R0,#?V6
   \   0000D9   12....       LCALL     ?S_SHL
   \   0000DC   74..         MOV       A,#(dmaCfg + 36) & 0xff
   \   0000DE   29           ADD       A,R1
   \   0000DF   F5..         MOV       ?V4,A
   \   0000E1   E4           CLR       A
   \   0000E2   34..         ADDC      A,#((dmaCfg + 36) >> 8) & 0xff
   \   0000E4   F5..         MOV       ?V5,A
   \   0000E6   E5..         MOV       A,?V4
   \   0000E8   25..         ADD       A,?V6
   \   0000EA   F582         MOV       DPL,A
   \   0000EC   E5..         MOV       A,?V5
   \   0000EE   35..         ADDC      A,?V7
   \   0000F0   F583         MOV       DPH,A
   \   0000F2   D0E0         POP       A
   \   0000F4   F0           MOVX      @DPTR,A
   \   0000F5   09           INC       R1
   \   0000F6   0A           INC       R2
   \   0000F7   EA           MOV       A,R2
   \   0000F8   7001         JNZ       ??HalUARTWriteDMA_5
   \   0000FA   0B           INC       R3
   \                     ??HalUARTWriteDMA_5:
   \   0000FB   C3           CLR       C
   \   0000FC   EA           MOV       A,R2
   \   0000FD   9C           SUBB      A,R4
   \   0000FE   EB           MOV       A,R3
   \   0000FF   9D           SUBB      A,R5
   \   000100   40C2         JC        ??HalUARTWriteDMA_6
   \   000102   A2AF         MOV       C,0xa8.7
   \   000104   E4           CLR       A
   \   000105   33           RLC       A
   \   000106   F8           MOV       R0,A
   \   000107   C2AF         CLR       0xa8.7
   \                     ??HalUARTWriteDMA_4:
   \   000109   E9           MOV       A,R1
   \   00010A   C0E0         PUSH      A
   \   00010C   AC..         MOV       R4,?V2
   \   00010E   74..         MOV       A,#(dmaCfg + 68) & 0xff
   \   000110   2C           ADD       A,R4
   \   000111   F582         MOV       DPL,A
   \   000113   E4           CLR       A
   \   000114   34..         ADDC      A,#((dmaCfg + 68) >> 8) & 0xff
   \   000116   F583         MOV       DPH,A
   \   000118   D0E0         POP       A
   \   00011A   F0           MOVX      @DPTR,A
   \   00011B   7401         MOV       A,#0x1
   \   00011D   6C           XRL       A,R4
   \   00011E   FC           MOV       R4,A
   \   00011F   74..         MOV       A,#(dmaCfg + 68) & 0xff
   \   000121   2C           ADD       A,R4
   \   000122   F582         MOV       DPL,A
   \   000124   E4           CLR       A
   \   000125   34..         ADDC      A,#((dmaCfg + 68) >> 8) & 0xff
   \   000127   F583         MOV       DPH,A
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   7006         JNZ       ??HalUARTWriteDMA_7
   \   00012C   90....       MOV       DPTR,#dmaCfg + 75
   \   00012F   7401         MOV       A,#0x1
   \   000131   F0           MOVX      @DPTR,A
   \                     ??HalUARTWriteDMA_7:
   \   000132   E8           MOV       A,R0
   \   000133   A2E0         MOV       C,0xE0 /* A   */.0
   \   000135   92AF         MOV       0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   000137   7F08         MOV       R7,#0x8
   \   000139   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00013C                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7A00         MOV       R2,#0x0
   \   000007   7B00         MOV       R3,#0x0
   \   000009   7E00         MOV       R6,#0x0
   \   00000B   E5C2         MOV       A,0xc2
   \   00000D   FC           MOV       R4,A
   \   00000E   90....       MOV       DPTR,#dmaCfg + 32
   \   000011   E0           MOVX      A,@DPTR
   \   000012   25E0         ADD       A,0xE0 /* A   */
   \   000014   F8           MOV       R0,A
   \   000015   E4           CLR       A
   \   000016   33           RLC       A
   \   000017   F9           MOV       R1,A
   \   000018   74..         MOV       A,#dmaCfg & 0xff
   \   00001A   28           ADD       A,R0
   \   00001B   F582         MOV       DPL,A
   \   00001D   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   00001F   39           ADDC      A,R1
   \   000020   F583         MOV       DPH,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6C           XRL       A,R4
   \   000025   7001         JNZ       ??HalUARTPollDMA_0
   \   000027   E4           CLR       A
   \                     ??HalUARTPollDMA_0:
   \   000028   7041         JNZ       ??HalUARTPollDMA_1
   \   00002A                ; Setup parameters for call to function findTail
   \   00002A   12....       LCALL     `??findTail::?relay`; Banked call to: findTail
   \   00002D   E9           MOV       A,R1
   \   00002E   F8           MOV       R0,A
   \   00002F   90....       MOV       DPTR,#dmaCfg + 33
   \   000032   E0           MOVX      A,@DPTR
   \   000033   68           XRL       A,R0
   \   000034   6011         JZ        ??HalUARTPollDMA_2
   \   000036   E9           MOV       A,R1
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   7004         JNZ       ??HalUARTPollDMA_3
   \   00003C   E595         MOV       A,0x95
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_3:
   \   000040   90....       MOV       DPTR,#dmaCfg + 34
   \   000043   7421         MOV       A,#0x21
   \   000045   801E         SJMP      ??HalUARTPollDMA_4
   \                     ??HalUARTPollDMA_2:
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F9           MOV       R1,A
   \   00004A   601A         JZ        ??HalUARTPollDMA_5
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F8           MOV       R0,A
   \   00004F   E595         MOV       A,0x95
   \   000051   C3           CLR       C
   \   000052   98           SUBB      A,R0
   \   000053   F8           MOV       R0,A
   \   000054   C3           CLR       C
   \   000055   99           SUBB      A,R1
   \   000056   90....       MOV       DPTR,#dmaCfg + 34
   \   000059   5009         JNC       ??HalUARTPollDMA_6
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   C3           CLR       C
   \   00005D   98           SUBB      A,R0
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   E595         MOV       A,0x95
   \   000061   A3           INC       DPTR
   \   000062   8001         SJMP      ??HalUARTPollDMA_4
   \                     ??HalUARTPollDMA_6:
   \   000064   E4           CLR       A
   \                     ??HalUARTPollDMA_4:
   \   000065   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_5:
   \   000066                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000066   12....       LCALL     `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   000069   8005         SJMP      ??HalUARTPollDMA_7
   \                     ??HalUARTPollDMA_1:
   \   00006B   90....       MOV       DPTR,#dmaCfg + 34
   \   00006E   E4           CLR       A
   \   00006F   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_7:
   \   000070   C3           CLR       C
   \   000071   EA           MOV       A,R2
   \   000072   940A         SUBB      A,#0xa
   \   000074   EB           MOV       A,R3
   \   000075   9400         SUBB      A,#0x0
   \   000077   4004         JC        ??HalUARTPollDMA_8
   \   000079   7E01         MOV       R6,#0x1
   \   00007B   801B         SJMP      ??HalUARTPollDMA_9
   \                     ??HalUARTPollDMA_8:
   \   00007D   C3           CLR       C
   \   00007E   EA           MOV       A,R2
   \   00007F   9402         SUBB      A,#0x2
   \   000081   EB           MOV       A,R3
   \   000082   9400         SUBB      A,#0x0
   \   000084   4006         JC        ??HalUARTPollDMA_10
   \   000086   7E02         MOV       R6,#0x2
   \   000088   D285         SETB      0x80.5
   \   00008A   800C         SJMP      ??HalUARTPollDMA_9
   \                     ??HalUARTPollDMA_10:
   \   00008C   EA           MOV       A,R2
   \   00008D   4B           ORL       A,R3
   \   00008E   6008         JZ        ??HalUARTPollDMA_9
   \   000090   90....       MOV       DPTR,#dmaCfg + 34
   \   000093   E0           MOVX      A,@DPTR
   \   000094   7002         JNZ       ??HalUARTPollDMA_9
   \   000096   7E04         MOV       R6,#0x4
   \                     ??HalUARTPollDMA_9:
   \   000098   90....       MOV       DPTR,#dmaCfg + 71
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   6006         JZ        ??HalUARTPollDMA_11
   \   00009E   E4           CLR       A
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   EE           MOV       A,R6
   \   0000A1   D2E4         SETB      0xE0 /* A   */.4
   \   0000A3   FE           MOV       R6,A
   \                     ??HalUARTPollDMA_11:
   \   0000A4   90....       MOV       DPTR,#dmaCfg + 74
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   6017         JZ        ??HalUARTPollDMA_12
   \   0000AA   A895         MOV       R0,0x95+0x0
   \   0000AC   90....       MOV       DPTR,#dmaCfg + 73
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   C8           XCH       A,R0
   \   0000B1   C3           CLR       C
   \   0000B2   98           SUBB      A,R0
   \   0000B3   F8           MOV       R0,A
   \   0000B4   90....       MOV       DPTR,#dmaCfg + 72
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   C3           CLR       C
   \   0000B9   98           SUBB      A,R0
   \   0000BA   5005         JNC       ??HalUARTPollDMA_12
   \   0000BC   90....       MOV       DPTR,#dmaCfg + 74
   \   0000BF   E4           CLR       A
   \   0000C0   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_12:
   \   0000C1   90....       MOV       DPTR,#dmaCfg + 75
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   6079         JZ        ??HalUARTPollDMA_13
   \   0000C7   90....       MOV       DPTR,#dmaCfg + 74
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   7073         JNZ       ??HalUARTPollDMA_13
   \   0000CD   A3           INC       DPTR
   \   0000CE   E4           CLR       A
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0   90....       MOV       DPTR,#dmaCfg + 70
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F5..         MOV       ?V0,A
   \   0000D6   75..00       MOV       ?V1,#0x0
   \   0000D9   7404         MOV       A,#0x4
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?S_SHL
   \   0000E0   74..         MOV       A,#(dmaCfg + 36) & 0xff
   \   0000E2   25..         ADD       A,?V0
   \   0000E4   74..         MOV       A,#((dmaCfg + 36) >> 8) & 0xff
   \   0000E6   35..         ADDC      A,?V1
   \   0000E8   90....       MOV       DPTR,#dmaCh1234 + 24
   \   0000EB   F0           MOVX      @DPTR,A
   \   0000EC   90....       MOV       DPTR,#dmaCfg + 70
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   F5..         MOV       ?V0,A
   \   0000F2   75..00       MOV       ?V1,#0x0
   \   0000F5   7404         MOV       A,#0x4
   \   0000F7   78..         MOV       R0,#?V0
   \   0000F9   12....       LCALL     ?S_SHL
   \   0000FC   74..         MOV       A,#(dmaCfg + 36) & 0xff
   \   0000FE   25..         ADD       A,?V0
   \   000100   90....       MOV       DPTR,#dmaCh1234 + 25
   \   000103   F0           MOVX      @DPTR,A
   \   000104   90....       MOV       DPTR,#dmaCfg + 70
   \   000107   E0           MOVX      A,@DPTR
   \   000108   F8           MOV       R0,A
   \   000109   74..         MOV       A,#(dmaCfg + 68) & 0xff
   \   00010B   28           ADD       A,R0
   \   00010C   F582         MOV       DPL,A
   \   00010E   E4           CLR       A
   \   00010F   34..         ADDC      A,#((dmaCfg + 68) >> 8) & 0xff
   \   000111   F583         MOV       DPH,A
   \   000113   E0           MOVX      A,@DPTR
   \   000114   90....       MOV       DPTR,#dmaCh1234 + 29
   \   000117   F0           MOVX      @DPTR,A
   \   000118   90....       MOV       DPTR,#dmaCh1234 + 28
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   54E0         ANL       A,#0xe0
   \   00011E   F0           MOVX      @DPTR,A
   \   00011F   90....       MOV       DPTR,#dmaCfg + 70
   \   000122   E0           MOVX      A,@DPTR
   \   000123   E0           MOVX      A,@DPTR
   \   000124   6401         XRL       A,#0x1
   \   000126   F0           MOVX      @DPTR,A
   \   000127   A2AF         MOV       C,0xa8.7
   \   000129   E4           CLR       A
   \   00012A   33           RLC       A
   \   00012B   F8           MOV       R0,A
   \   00012C   C2AF         CLR       0xa8.7
   \   00012E   75D610       MOV       0xd6,#0x10
   \                     ??HalUARTPollDMA_14:
   \   000131   00           NOP
   \   000132   E5D6         MOV       A,0xd6
   \   000134   A2E4         MOV       C,0xE0 /* A   */.4
   \   000136   50F9         JNC       ??HalUARTPollDMA_14
   \   000138   75D1EF       MOV       0xd1,#-0x11
   \   00013B   75D710       MOV       0xd7,#0x10
   \   00013E   802F         SJMP      ??HalUARTPollDMA_15
   \                     ??HalUARTPollDMA_13:
   \   000140   A2AF         MOV       C,0xa8.7
   \   000142   E4           CLR       A
   \   000143   33           RLC       A
   \   000144   F8           MOV       R0,A
   \   000145   C2AF         CLR       0xa8.7
   \   000147   90....       MOV       DPTR,#dmaCfg + 70
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   FA           MOV       R2,A
   \   00014C   74..         MOV       A,#(dmaCfg + 68) & 0xff
   \   00014E   2A           ADD       A,R2
   \   00014F   F582         MOV       DPL,A
   \   000151   E4           CLR       A
   \   000152   34..         ADDC      A,#((dmaCfg + 68) >> 8) & 0xff
   \   000154   F583         MOV       DPH,A
   \   000156   E0           MOVX      A,@DPTR
   \   000157   6016         JZ        ??HalUARTPollDMA_15
   \   000159   E5D6         MOV       A,0xd6
   \   00015B   A2E4         MOV       C,0xE0 /* A   */.4
   \   00015D   4010         JC        ??HalUARTPollDMA_15
   \   00015F   E5D1         MOV       A,0xd1
   \   000161   A2E4         MOV       C,0xE0 /* A   */.4
   \   000163   400A         JC        ??HalUARTPollDMA_15
   \   000165   E8           MOV       A,R0
   \   000166   A2E0         MOV       C,0xE0 /* A   */.0
   \   000168   92AF         MOV       0xa8.7,C
   \   00016A                ; Setup parameters for call to function HalUARTIsrDMA
   \   00016A   12....       LCALL     `??HalUARTIsrDMA::?relay`; Banked call to: HalUARTIsrDMA
   \   00016D   8005         SJMP      ??HalUARTPollDMA_16
   \                     ??HalUARTPollDMA_15:
   \   00016F   E8           MOV       A,R0
   \   000170   A2E0         MOV       C,0xE0 /* A   */.0
   \   000172   92AF         MOV       0xa8.7,C
   \                     ??HalUARTPollDMA_16:
   \   000174   EE           MOV       A,R6
   \   000175   6018         JZ        ??HalUARTPollDMA_17
   \   000177   90....       MOV       DPTR,#dmaCfg + 76
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   F8           MOV       R0,A
   \   00017C   A3           INC       DPTR
   \   00017D   E0           MOVX      A,@DPTR
   \   00017E   8882         MOV       DPL,R0
   \   000180   F583         MOV       DPH,A
   \   000182   E582         MOV       A,DPL
   \   000184   4583         ORL       A,DPH
   \   000186   6007         JZ        ??HalUARTPollDMA_17
   \   000188                ; Setup parameters for indirect call
   \   000188   EE           MOV       A,R6
   \   000189   FA           MOV       R2,A
   \   00018A   7900         MOV       R1,#0x0
   \   00018C   12....       LCALL     ?CALL_IND
   \                     ??HalUARTPollDMA_17:
   \   00018F   7F02         MOV       R7,#0x2
   \   000191   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000194                REQUIRE U0BAUD
   \   000194                REQUIRE ST0
   \   000194                REQUIRE _A_P0
   \   000194                REQUIRE _A_IEN0
   \   000194                REQUIRE DMAARM
   \   000194                REQUIRE DMAIRQ
   \   000194                REQUIRE DMAREQ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7A00         MOV       R2,#0x0
   \   000007   7B00         MOV       R3,#0x0
   \   000009   E5C2         MOV       A,0xc2
   \   00000B   FC           MOV       R4,A
   \   00000C   90....       MOV       DPTR,#dmaCfg + 32
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   25E0         ADD       A,0xE0 /* A   */
   \   000012   F8           MOV       R0,A
   \   000013   E4           CLR       A
   \   000014   33           RLC       A
   \   000015   F9           MOV       R1,A
   \   000016   74..         MOV       A,#dmaCfg & 0xff
   \   000018   28           ADD       A,R0
   \   000019   F582         MOV       DPL,A
   \   00001B   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   00001D   39           ADDC      A,R1
   \   00001E   F583         MOV       DPH,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   E4           CLR       A
   \   000024   C9           XCH       A,R1
   \   000025   6C           XRL       A,R4
   \   000026   7001         JNZ       ??HalUARTRxAvailDMA_0
   \   000028   E4           CLR       A
   \                     ??HalUARTRxAvailDMA_0:
   \   000029   7036         JNZ       ??HalUARTRxAvailDMA_1
   \   00002B   7800         MOV       R0,#0x0
   \   00002D   8029         SJMP      ??HalUARTRxAvailDMA_2
   \                     ??HalUARTRxAvailDMA_3:
   \   00002F   E5C2         MOV       A,0xc2
   \   000031   FE           MOV       R6,A
   \   000032   E8           MOV       A,R0
   \   000033   FC           MOV       R4,A
   \   000034   E9           MOV       A,R1
   \   000035   FD           MOV       R5,A
   \   000036   EC           MOV       A,R4
   \   000037   2C           ADD       A,R4
   \   000038   FC           MOV       R4,A
   \   000039   ED           MOV       A,R5
   \   00003A   33           RLC       A
   \   00003B   FD           MOV       R5,A
   \   00003C   74..         MOV       A,#dmaCfg & 0xff
   \   00003E   2C           ADD       A,R4
   \   00003F   F582         MOV       DPL,A
   \   000041   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000043   3D           ADDC      A,R5
   \   000044   F583         MOV       DPH,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6E           XRL       A,R6
   \   000049   7001         JNZ       ??HalUARTRxAvailDMA_4
   \   00004B   E4           CLR       A
   \                     ??HalUARTRxAvailDMA_4:
   \   00004C   7005         JNZ       ??HalUARTRxAvailDMA_5
   \   00004E   0A           INC       R2
   \   00004F   EA           MOV       A,R2
   \   000050   7001         JNZ       ??HalUARTRxAvailDMA_5
   \   000052   0B           INC       R3
   \                     ??HalUARTRxAvailDMA_5:
   \   000053   08           INC       R0
   \   000054   E8           MOV       A,R0
   \   000055   7001         JNZ       ??HalUARTRxAvailDMA_2
   \   000057   09           INC       R1
   \                     ??HalUARTRxAvailDMA_2:
   \   000058   C3           CLR       C
   \   000059   E8           MOV       A,R0
   \   00005A   9410         SUBB      A,#0x10
   \   00005C   E9           MOV       A,R1
   \   00005D   9400         SUBB      A,#0x0
   \   00005F   40CE         JC        ??HalUARTRxAvailDMA_3
   \                     ??HalUARTRxAvailDMA_1:
   \   000061   7F01         MOV       R7,#0x1
   \   000063   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000066                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTSuspendDMA(void)
   \                     HalUARTSuspendDMA:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   D285         SETB      0x80.5
   \   000002   5386BF       ANL       0x86,#0xbf
   \   000005   43AB10       ORL       0xab,#0x10
   \   000008   02....       LJMP      ?BRET
   \   00000B                REQUIRE _A_P0
   \   00000B                REQUIRE U0CSR
   \   00000B                REQUIRE P0IEN

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTResumeDMA(void)
   \                     HalUARTResumeDMA:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   53ABEF       ANL       0xab,#0xef
   \   000003   43C480       ORL       0xc4,#0x80
   \   000006   438640       ORL       0x86,#0x40
   \   000009   C285         CLR       0x80.5
   \   00000B   02....       LJMP      ?BRET
   \   00000E                REQUIRE P0IEN
   \   00000E                REQUIRE U0UCR
   \   00000E                REQUIRE U0CSR
   \   00000E                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV       0xd1,#-0x11
   \   000007   90....       MOV       DPTR,#dmaCfg + 70
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6401         XRL       A,#0x1
   \   00000D   F8           MOV       R0,A
   \   00000E   74..         MOV       A,#(dmaCfg + 68) & 0xff
   \   000010   28           ADD       A,R0
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   34..         ADDC      A,#((dmaCfg + 68) >> 8) & 0xff
   \   000016   F583         MOV       DPH,A
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   90....       MOV       DPTR,#dmaCfg + 71
   \   00001D   04           INC       A
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   E595         MOV       A,0x95
   \   000021   90....       MOV       DPTR,#dmaCfg + 73
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   7401         MOV       A,#0x1
   \   000028   F0           MOVX      @DPTR,A
   \   000029   90....       MOV       DPTR,#dmaCfg + 70
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F8           MOV       R0,A
   \   00002E   74..         MOV       A,#(dmaCfg + 68) & 0xff
   \   000030   28           ADD       A,R0
   \   000031   F582         MOV       DPL,A
   \   000033   E4           CLR       A
   \   000034   34..         ADDC      A,#((dmaCfg + 68) >> 8) & 0xff
   \   000036   F583         MOV       DPH,A
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6006         JZ        ??HalUARTIsrDMA_0
   \   00003B   90....       MOV       DPTR,#dmaCfg + 75
   \   00003E   7401         MOV       A,#0x1
   \   000040   F0           MOVX      @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   000041   D083         POP       DPH
   \   000043   D082         POP       DPL
   \   000045   02....       LJMP      ?BRET
   \   000048                REQUIRE DMAIRQ
   \   000048                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     98          #if HAL_UART_DMA
     99            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL     `??HalUARTInitDMA::?relay`; Banked call to: HalUARTInitDMA
    100          #endif
    101          #if HAL_UART_ISR
    102            HalUARTInitISR();
    103          #endif
    104          #if HAL_UART_USB
    105            HalUARTInitUSB();
    106          #endif
    107          }
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
    108          
    109          /******************************************************************************
    110           * @fn      HalUARTOpen
    111           *
    112           * @brief   Open a port according tp the configuration specified by parameter.
    113           *
    114           * @param   port   - UART port
    115           *          config - contains configuration information
    116           *
    117           * @return  Status of the function call
    118           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    120          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    121            (void)port;
    122            (void)config;
    123          
    124          #if (HAL_UART_DMA == 1)
    125            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ       ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL     `??HalUARTOpenDMA::?relay`; Banked call to: HalUARTOpenDMA
    126          #endif
    127          #if (HAL_UART_DMA == 2)
    128            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    129          #endif
    130          #if (HAL_UART_ISR == 1)
    131            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    132          #endif
    133          #if (HAL_UART_ISR == 2)
    134            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    135          #endif
    136          #if (HAL_UART_USB)
    137            HalUARTOpenUSB(config);
    138          #endif
    139            
    140            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   7F01         MOV       R7,#0x1
   \   00000F   02....       LJMP      ?BANKED_LEAVE_XDATA
    141          }
    142          
    143          /*****************************************************************************
    144           * @fn      HalUARTRead
    145           *
    146           * @brief   Read a buffer from the UART
    147           *
    148           * @param   port - USART module designation
    149           *          buf  - valid data buffer at least 'len' bytes in size
    150           *          len  - max length number of bytes to copy to 'buf'
    151           *
    152           * @return  length of buffer that was read
    153           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    155          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    156            (void)port;
    157            (void)buf;
    158            (void)len;
    159          
    160          #if (HAL_UART_DMA == 1)
    161            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   000006   7005         JNZ       ??HalUARTRead_0
   \   000008                ; Setup parameters for call to function HalUARTReadDMA
   \   000008   12....       LCALL     `??HalUARTReadDMA::?relay`; Banked call to: HalUARTReadDMA
   \   00000B   8004         SJMP      ??HalUARTRead_1
    162          #endif
    163          #if (HAL_UART_DMA == 2)
    164            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    165          #endif
    166          #if (HAL_UART_ISR == 1)
    167            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    168          #endif
    169          #if (HAL_UART_ISR == 2)
    170            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    171          #endif
    172          
    173          #if HAL_UART_USB
    174            return HalUARTRx(buf, len);
    175          #else
    176            return 0;
   \                     ??HalUARTRead_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??HalUARTRead_1:
   \   000011   7F01         MOV       R7,#0x1
   \   000013   02....       LJMP      ?BANKED_LEAVE_XDATA
    177          #endif
    178          }
    179          
    180          /******************************************************************************
    181           * @fn      HalUARTWrite
    182           *
    183           * @brief   Write a buffer to the UART.
    184           *
    185           * @param   port - UART port
    186           *          buf  - pointer to the buffer that will be written, not freed
    187           *          len  - length of
    188           *
    189           * @return  length of the buffer that was sent
    190           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    192          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    193            (void)port;
    194            (void)buf;
    195            (void)len;
    196          
    197          #if (HAL_UART_DMA == 1)
    198            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ       ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL     `??HalUARTWriteDMA::?relay`; Banked call to: HalUARTWriteDMA
   \   00000B   8004         SJMP      ??HalUARTWrite_1
    199          #endif
    200          #if (HAL_UART_DMA == 2)
    201            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    202          #endif
    203          #if (HAL_UART_ISR == 1)
    204            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    205          #endif
    206          #if (HAL_UART_ISR == 2)
    207            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    208          #endif
    209          
    210          #if HAL_UART_USB
    211            HalUARTTx(buf, len);
    212            return len;
    213          #else
    214            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011   7F01         MOV       R7,#0x1
   \   000013   02....       LJMP      ?BANKED_LEAVE_XDATA
    215          #endif
    216          }
    217          
    218          /******************************************************************************
    219           * @fn      HalUARTSuspend
    220           *
    221           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    222           *
    223           * @param   None
    224           *
    225           * @return  None
    226           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    228          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    229          #if HAL_UART_DMA
    230            HalUARTSuspendDMA();
   \   000004                ; Setup parameters for call to function HalUARTSuspendDMA
   \   000004   12....       LCALL     `??HalUARTSuspendDMA::?relay`; Banked call to: HalUARTSuspendDMA
    231          #endif
    232          #if HAL_UART_ISR
    233            HalUARTSuspendISR();
    234          #endif
    235          }
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
    236          
    237          /******************************************************************************
    238           * @fn      HalUARTResume
    239           *
    240           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    241           *
    242           * @param   None
    243           *
    244           * @return  None
    245           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void HalUARTResume( void )
   \                     HalUARTResume:
    247          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    248          #if HAL_UART_DMA
    249            HalUARTResumeDMA();
   \   000004                ; Setup parameters for call to function HalUARTResumeDMA
   \   000004   12....       LCALL     `??HalUARTResumeDMA::?relay`; Banked call to: HalUARTResumeDMA
    250          #endif
    251          #if HAL_UART_ISR
    252            HalUARTResumeISR();
    253          #endif
    254          }
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
    255          
    256          /***************************************************************************************************
    257           * @fn      HalUARTPoll
    258           *
    259           * @brief   Poll the UART.
    260           *
    261           * @param   none
    262           *
    263           * @return  none
    264           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void HalUARTPoll(void)
   \                     HalUARTPoll:
    266          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267          #if HAL_UART_DMA
    268            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL     `??HalUARTPollDMA::?relay`; Banked call to: HalUARTPollDMA
    269          #endif
    270          #if HAL_UART_ISR
    271            HalUARTPollISR();
    272          #endif
    273          #if HAL_UART_USB
    274            HalUARTPollUSB();
    275          #endif
    276          }
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
    277          
    278          /**************************************************************************************************
    279           * @fn      Hal_UART_RxBufLen()
    280           *
    281           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    282           *
    283           * @param   port - UART port
    284           *
    285           * @return  length of current Rx Buffer
    286           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    288          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    289            (void)port;
    290          
    291          #if (HAL_UART_DMA == 1)
    292            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ       ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL     `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00000B   8004         SJMP      ??Hal_UART_RxBufLen_1
    293          #endif
    294          #if (HAL_UART_DMA == 2)
    295            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    296          #endif
    297          #if (HAL_UART_ISR == 1)
    298            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    299          #endif
    300          #if (HAL_UART_ISR == 2)
    301            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    302          #endif
    303          #if HAL_UART_USB
    304            return HalUARTRxAvailUSB();
    305          #else
    306            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   7F01         MOV       R7,#0x1
   \   000013   02....       LJMP      ?BANKED_LEAVE_XDATA
    307          #endif
    308          }
    309          
    310          /******************************************************************************
    311          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
        2      0   -> HalUARTInitDMA
      2      0   HalUARTInitDMA
      2     10   HalUARTIsrDMA
      0      9   HalUARTOpen
        0      9   -> HalUARTOpenDMA
      2      9   HalUARTOpenDMA
        2      0   -> osal_memset
      2      0   HalUARTPoll
        2      0   -> HalUARTPollDMA
      0     10   HalUARTPollDMA
        0     10   -> HalUARTIsrDMA
        0     10   -> HalUARTRxAvailDMA
        0     10   -> findTail
      0      9   HalUARTRead
        0      9   -> HalUARTReadDMA
      1     21   HalUARTReadDMA
      2      0   HalUARTResume
        2      0   -> HalUARTResumeDMA
      0      0   HalUARTResumeDMA
      0     19   HalUARTRxAvailDMA
      2      0   HalUARTSuspend
        2      0   -> HalUARTSuspendDMA
      0      0   HalUARTSuspendDMA
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteDMA
      1     25   HalUARTWriteDMA
      0      9   Hal_UART_RxBufLen
        0      9   -> HalUARTRxAvailDMA
      2     10   findTail


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ADCCFG
       1  DMAARM
       1  DMAIRQ
       1  DMAREQ
      14  HalUARTInit
     114  HalUARTInitDMA
      72  HalUARTIsrDMA
      18  HalUARTOpen
     189  HalUARTOpenDMA
      14  HalUARTPoll
     404  HalUARTPollDMA
      22  HalUARTRead
     132  HalUARTReadDMA
      14  HalUARTResume
      14  HalUARTResumeDMA
     102  HalUARTRxAvailDMA
      14  HalUARTSuspend
      11  HalUARTSuspendDMA
      22  HalUARTWrite
     316  HalUARTWriteDMA
      22  Hal_UART_RxBufLen
       1  P0DIR
       1  P0IEN
       1  P0SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0GCR
       1  U0UCR
       1  _A_IEN0
       1  _A_P0
      78  dmaCfg
      58  findTail
     108  -- Other

 
 1 552 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
    16 bytes in segment SFR_AN
    78 bytes in segment XDATA_Z
 
   108 bytes of CODE     memory
     0 bytes of DATA     memory (+ 16 bytes shared)
 1 552 bytes of HUGECODE memory
    78 bytes of XDATA    memory

Errors: none
Warnings: none
