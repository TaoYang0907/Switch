###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  15:06:44
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\mac\low_level\srf04\mac_rx.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW6CC7.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\mac\low_level\srf04\mac_rx.c" -D BDB_REPORTING -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING
#        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -D ZCL_ON_OFF -D ZCL_REPORT
#        -D ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\mac_rx.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\mac_rx.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2014-05-16 10:22:59 -0700 (Fri, 16 May 2014) $
      4            Revision:       $Revision: 38564 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* OSAL */
     50          #include "OSAL.h"
     51          
     52          /* high-level */
     53          #include "mac_high_level.h"
     54          #include "mac_spec.h"
     55          #include "mac_pib.h"
     56          
     57          /* MAC security */
     58          #include "mac_security.h"
     59          
     60          /* exported low-level */
     61          #include "mac_low_level.h"
     62          
     63          /* low-level specific */
     64          #include "mac_rx.h"
     65          #include "mac_tx.h"
     66          #include "mac_rx_onoff.h"
     67          #include "mac_radio.h"
     68          
     69          /* target specific */
     70          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1
     71          #include "mac_autopend.h"
     72          
     73          /* debug */
     74          #include "mac_assert.h"
     75          
     76          #ifdef ACK_DONE_ISR_WORKAROUND
     77          typedef struct macTimer_s
     78          {
     79            struct macTimer_s     *pNext;                     /* next timer in queue */
     80            int32                 backoff;                    /* timer expiration count */
     81            void                  (*pFunc)(uint8 parameter);  /* timer callback function */
     82            uint8                 parameter;                  /* callback function parameter */
     83          } macTimer_t;
     84          
     85          extern macTimer_t macTxAckIsrTimer;
     86          extern void macTimerCancel(macTimer_t *pTimer);
     87          #endif /* ACK_DONE_ISR_WROKAROUND */
     88          
     89          
     90          
     91          /* ------------------------------------------------------------------------------------------------
     92           *                                            Defines
     93           * ------------------------------------------------------------------------------------------------
     94           */
     95          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     96          
     97          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     98          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     99                                             MAC_FCF_FIELD_LEN      +  \
    100                                             MAC_SEQ_NUM_FIELD_LEN  +  \
    101                                             MAC_FCS_FIELD_LEN)
    102          
    103          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
    104          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
    105          
    106          /* addressing mode reserved value */
    107          #define ADDR_MODE_RESERVERED  1
    108          
    109          /* length of command frame identifier */
    110          #define CMD_FRAME_ID_LEN      1
    111          
    112          /* packet size mask is equal to the maximum value */
    113          #define PHY_PACKET_SIZE_MASK  0x7F
    114          
    115          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
    116          #define PROMISCUOUS_MODE_OFF  0x00
    117          
    118          /* bit of proprietary FCS format that indicates if the CRC is OK */
    119          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
    120          
    121          /* dummy length value for unused entry in lookup table */
    122          #define DUMMY_LEN   0xBE
    123          
    124          /* value for rxThresholdIntState */
    125          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    126          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    127          #define RX_THRESHOLD_INT_STATE_RESET      2
    128          
    129          
    130          /* ------------------------------------------------------------------------------------------------
    131           *                                             Macros
    132           * ------------------------------------------------------------------------------------------------
    133           */
    134          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    135          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    136          
    137          /*
    138           *  Macro for encoding frame control information into internal flags format.
    139           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    140           *  format *or* the specification changes, this macro will need to be modified.
    141           */
    142          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    143          
    144          /*
    145           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    146           *  the same length as the original and includes:
    147           *    1) the RSSI value
    148           *    2) the average correlation value (used for LQI)
    149           *    3) a CRC passed bit
    150           *
    151           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    152           */
    153          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    154          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    155          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    156          
    157          /*
    158           *  Macros for security control field.
    159           */
    160          #define SECURITY_LEVEL(s)                       (s & 0x07)
    161          #define KEY_IDENTIFIER_MODE(s)                  ((s & 0x18) >> 3)
    162          #define SECURITY_CONTROL_RESERVED(s)            ((s & 0xE0) >> 5)
    163          
    164          /* ------------------------------------------------------------------------------------------------
    165           *                                       Global Variables
    166           * ------------------------------------------------------------------------------------------------
    167           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          uint8 macRxActive;
   \                     macRxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          uint8 macRxFilter;
   \                     macRxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          uint8 macRxOutgoingAckFlag;
   \                     macRxOutgoingAckFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    171          
    172          
    173          /* ------------------------------------------------------------------------------------------------
    174           *                                       Local Constants
    175           * ------------------------------------------------------------------------------------------------
    176           */

   \                                 In  segment CODE_C, align 1
    177          static const uint8 CODE macRxAddrLen[] =
   \                     macRxAddrLen:
   \   000000   00           DB 0
   \   000001   BE           DB 190
   \   000002   04           DB 4
   \   000003   0A           DB 10
    178          {
    179            0,                                                /* no address */
    180            DUMMY_LEN,                                        /* reserved */
    181            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    182            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    183          };
    184          
    185          
    186          /* ------------------------------------------------------------------------------------------------
    187           *                                       Local Prototypes
    188           * ------------------------------------------------------------------------------------------------
    189           */
    190          static void rxHaltCleanupFinalStep(void);
    191          
    192          static void rxStartIsr(void);
    193          static void rxAddrIsr(void);
    194          
    195          #ifdef FEATURE_MAC_SECURITY
    196            static void rxSecurityHdrIsr(void);
    197          #endif
    198          
    199          static void rxPayloadIsr(void);
    200          static void rxDiscardIsr(void);
    201          static void rxFcsIsr(void);
    202          
    203          static void rxPrepPayload(void);
    204          static void rxDiscardFrame(void);
    205          static void rxDone(void);
    206          static void rxPostRxUpdates(void);
    207          
    208          
    209          /* ------------------------------------------------------------------------------------------------
    210           *                                         Local Variables
    211           * ------------------------------------------------------------------------------------------------
    212           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          static void    (* pFuncRxState)(void);
   \                     pFuncRxState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          static macRx_t  * pRxBuf;
   \                     pRxBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    215          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
   \                     rxBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          static uint8  rxUnreadLen;
   \                     rxUnreadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          static uint8  rxNextLen;
   \                     rxNextLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          static uint8  rxPayloadLen;
   \                     rxPayloadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static uint8  rxFilter;
   \                     rxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    221          static uint8  rxPromiscuousMode;
   \                     rxPromiscuousMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          static uint8  rxIsrActiveFlag;
   \                     rxIsrActiveFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    223          static uint8  rxResetFlag;
   \                     rxResetFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    224          static uint8  rxFifoOverflowCount;
   \                     rxFifoOverflowCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    225          
    226          
    227          /**************************************************************************************************
    228           * @fn          macRxInit
    229           *
    230           * @brief       Initialize receive variable states.
    231           *
    232           * @param       none
    233           *
    234           * @return      none
    235           **************************************************************************************************
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          MAC_INTERNAL_API void macRxInit(void)
   \                     macRxInit:
    238          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    239            macRxFilter          = RX_FILTER_OFF;
   \   000004   90....       MOV       DPTR,#macRxFilter
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
    240            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
   \   000009   90....       MOV       DPTR,#rxPromiscuousMode
   \   00000C   F0           MOVX      @DPTR,A
    241            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
   \   00000D   90....       MOV       DPTR,#pRxBuf
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
    242            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
   \   000013   90....       MOV       DPTR,#macRxActive
   \   000016   F0           MOVX      @DPTR,A
    243            pFuncRxState         = &rxStartIsr;
   \   000017   90....       MOV       DPTR,#pFuncRxState
   \   00001A   74..         MOV       A,#`??rxStartIsr::?relay` & 0xff
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   74..         MOV       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000020   F0           MOVX      @DPTR,A
    244            macRxOutgoingAckFlag = 0;
   \   000021   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
    245            rxIsrActiveFlag      = 0;
   \   000026   90....       MOV       DPTR,#rxIsrActiveFlag
   \   000029   F0           MOVX      @DPTR,A
    246            rxResetFlag          = 0;
   \   00002A   90....       MOV       DPTR,#rxResetFlag
   \   00002D   F0           MOVX      @DPTR,A
    247            rxFifoOverflowCount  = 0;
   \   00002E   90....       MOV       DPTR,#rxFifoOverflowCount
   \   000031   F0           MOVX      @DPTR,A
    248          }
   \   000032   D083         POP       DPH
   \   000034   D082         POP       DPL
   \   000036   02....       LJMP      ?BRET
    249          
    250          
    251          /**************************************************************************************************
    252           * @fn          macRxRadioPowerUpInit
    253           *
    254           * @brief       Initialization for after radio first powers up.
    255           *
    256           * @param       none
    257           *
    258           * @return      none
    259           **************************************************************************************************
    260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    261          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
   \                     macRxRadioPowerUpInit:
    262          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    263            /* set threshold at initial value */
    264            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   000004   906194       MOV       DPTR,#0x6194
   \   000007   7405         MOV       A,#0x5
   \   000009   F0           MOVX      @DPTR,A
    265          
    266            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    267            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   00000A   A2AF         MOV       C,0xa8.7
   \   00000C   E4           CLR       A
   \   00000D   33           RLC       A
   \   00000E   F8           MOV       R0,A
   \   00000F   C2AF         CLR       0xa8.7
   \   000011   759B00       MOV       0x9b,#0x0
   \   000014   75E9FB       MOV       0xe9,#-0x5
   \   000017   A2E0         MOV       C,0xE0 /* A   */.0
   \   000019   92AF         MOV       0xa8.7,C
    268          
    269            /* enable threshold interrupts */
    270            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
   \   00001B   9061A3       MOV       DPTR,#0x61a3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   D2E2         SETB      0xE0 /* A   */.2
   \   000021   F0           MOVX      @DPTR,A
    271          }
   \   000022   D083         POP       DPH
   \   000024   D082         POP       DPL
   \   000026   02....       LJMP      ?BRET
   \   000029                REQUIRE _A_IEN0
   \   000029                REQUIRE S1CON
   \   000029                REQUIRE RFIRQF0
    272          
    273          
    274          /**************************************************************************************************
    275           * @fn          macRxTxReset
    276           *
    277           * @brief       Reset the receive state.
    278           *
    279           * @param       none
    280           *
    281           * @return      none
    282           **************************************************************************************************
    283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          MAC_INTERNAL_API void macRxTxReset(void)
   \                     macRxTxReset:
    285          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    286            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    287            macRxHardDisable();
   \   000004                ; Setup parameters for call to function macRxHardDisable
   \   000004   12....       LCALL     `??macRxHardDisable::?relay`; Banked call to: macRxHardDisable
    288          
    289            /*
    290             *   Note : transmit does not require any reset logic
    291             *          beyond what macRxHardDisable() provides.
    292             */
    293          
    294            /* restore deault filter mode to off */
    295            macRxFilter = RX_FILTER_OFF;
   \   000007   90....       MOV       DPTR,#macRxFilter
   \   00000A   E4           CLR       A
   \   00000B   F0           MOVX      @DPTR,A
    296          
    297            /* return promiscuous mode to default off state */
    298            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
   \   00000C                ; Setup parameters for call to function macRxPromiscuousMode
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??macRxPromiscuousMode::?relay`; Banked call to: macRxPromiscuousMode
    299          }
   \   000010   D083         POP       DPH
   \   000012   D082         POP       DPL
   \   000014   02....       LJMP      ?BRET
    300          
    301          
    302          /**************************************************************************************************
    303           * @fn          macRxHaltCleanup
    304           *
    305           * @brief       Cleanup up the receive logic after receiver is forced off.
    306           *
    307           * @param       none
    308           *
    309           * @return      none
    310           **************************************************************************************************
    311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    312          MAC_INTERNAL_API void macRxHaltCleanup(void)
   \                     macRxHaltCleanup:
    313          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    314            rxResetFlag = 1;
   \   000004   90....       MOV       DPTR,#rxResetFlag
   \   000007   7401         MOV       A,#0x1
   \   000009   F0           MOVX      @DPTR,A
    315            if (!rxIsrActiveFlag)
   \   00000A   90....       MOV       DPTR,#rxIsrActiveFlag
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   7008         JNZ       ??macRxHaltCleanup_0
    316            {
    317              rxHaltCleanupFinalStep();
   \   000010                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000010   12....       LCALL     `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
    318              rxResetFlag = 0;
   \   000013   90....       MOV       DPTR,#rxResetFlag
   \   000016   E4           CLR       A
   \   000017   F0           MOVX      @DPTR,A
    319            }
    320          }
   \                     ??macRxHaltCleanup_0:
   \   000018   D083         POP       DPH
   \   00001A   D082         POP       DPL
   \   00001C   02....       LJMP      ?BRET
    321          
    322          
    323          /*=================================================================================================
    324           * @fn          rxHaltCleanupFinalStep
    325           *
    326           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    327           *
    328           * @param       none
    329           *
    330           * @return      none
    331           *=================================================================================================
    332           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    333          static void rxHaltCleanupFinalStep(void)
   \                     rxHaltCleanupFinalStep:
    334          {  
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    335            /* cancel any upcoming ACK transmit complete callback */
    336            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000004   9061A4       MOV       DPTR,#0x61a4
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C2E0         CLR       0xE0 /* A   */.0
   \   00000A   F0           MOVX      @DPTR,A
    337          
    338            /* set start of frame threshold */
    339            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00000B   906194       MOV       DPTR,#0x6194
   \   00000E   7405         MOV       A,#0x5
   \   000010   F0           MOVX      @DPTR,A
    340          
    341            /* flush the receive FIFO */
    342            MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV       0xe1,#-0x13
   \   000014   75E1ED       MOV       0xe1,#-0x13
    343          
    344            /* clear any receive interrupt that happened to squeak through */
    345            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   000017   A2AF         MOV       C,0xa8.7
   \   000019   E4           CLR       A
   \   00001A   33           RLC       A
   \   00001B   F8           MOV       R0,A
   \   00001C   C2AF         CLR       0xa8.7
   \   00001E   759B00       MOV       0x9b,#0x0
   \   000021   75E9FB       MOV       0xe9,#-0x5
   \   000024   A2E0         MOV       C,0xE0 /* A   */.0
   \   000026   92AF         MOV       0xa8.7,C
    346          
    347            /* if data buffer has been allocated, free it */
    348            if (pRxBuf != NULL)
   \   000028   90....       MOV       DPTR,#pRxBuf
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   E8           MOV       A,R0
   \   000031   49           ORL       A,R1
   \   000032   6007         JZ        ??rxHaltCleanupFinalStep_0
    349            {
    350              MEM_FREE((uint8 **)&pRxBuf);
   \   000034                ; Setup parameters for call to function macDataRxMemFree
   \   000034   7A..         MOV       R2,#pRxBuf & 0xff
   \   000036   7B..         MOV       R3,#(pRxBuf >> 8) & 0xff
   \   000038   12....       LCALL     `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
    351            }
    352            /* MEM_FREE() sets parameter to NULL. */
    353          
    354            pFuncRxState = &rxStartIsr;
   \                     ??rxHaltCleanupFinalStep_0:
   \   00003B   90....       MOV       DPTR,#pFuncRxState
   \   00003E   74..         MOV       A,#`??rxStartIsr::?relay` & 0xff
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   74..         MOV       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000044   F0           MOVX      @DPTR,A
    355          
    356            /* if receive was active, perform the post receive updates */
    357            if (macRxActive || macRxOutgoingAckFlag)
   \   000045   90....       MOV       DPTR,#macRxActive
   \   000048   E0           MOVX      A,@DPTR
   \   000049   7006         JNZ       ??rxHaltCleanupFinalStep_1
   \   00004B   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   600C         JZ        ??rxHaltCleanupFinalStep_2
    358            {
    359              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxHaltCleanupFinalStep_1:
   \   000051   90....       MOV       DPTR,#macRxActive
   \   000054   E4           CLR       A
   \   000055   F0           MOVX      @DPTR,A
    360              macRxOutgoingAckFlag = 0;
   \   000056   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000059   F0           MOVX      @DPTR,A
    361          
    362              rxPostRxUpdates();
   \   00005A                ; Setup parameters for call to function rxPostRxUpdates
   \   00005A   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
    363            }
    364          }
   \                     ??rxHaltCleanupFinalStep_2:
   \   00005D   D083         POP       DPH
   \   00005F   D082         POP       DPL
   \   000061   02....       LJMP      ?BRET
   \   000064                REQUIRE RFST
   \   000064                REQUIRE _A_IEN0
   \   000064                REQUIRE S1CON
   \   000064                REQUIRE RFIRQF0
    365          
    366          
    367          /**************************************************************************************************
    368           * @fn          macRxThresholdIsr
    369           *
    370           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    371           *              It implements a state machine for receiving a packet.
    372           *
    373           * @param       none
    374           *
    375           * @return      none
    376           **************************************************************************************************
    377           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          MAC_INTERNAL_API void macRxThresholdIsr(void)
   \                     macRxThresholdIsr:
    379          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    380            /* if currently reseting, do not execute receive ISR logic */
    381            if (rxResetFlag)
   \   000004   90....       MOV       DPTR,#rxResetFlag
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7027         JNZ       ??macRxThresholdIsr_0
    382            {
    383              return;
    384            }
    385          
    386            /*
    387             *  Call the function that handles the current receive state.
    388             *  A flag is set for the duration of the call to indicate
    389             *  the ISR is executing.  This is necessary for the reset
    390             *  logic so it does not perform a reset in the middle of
    391             *  executing the ISR.
    392             */
    393            rxIsrActiveFlag = 1;
   \   00000A   90....       MOV       DPTR,#rxIsrActiveFlag
   \   00000D   7401         MOV       A,#0x1
   \   00000F   F0           MOVX      @DPTR,A
    394            (*pFuncRxState)();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV       DPTR,#pFuncRxState
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F8           MOV       R0,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F583         MOV       DPH,A
   \   000019   8882         MOV       DPL,R0
   \   00001B   12....       LCALL     ?CALL_IND
    395            rxIsrActiveFlag = 0;
   \   00001E   90....       MOV       DPTR,#rxIsrActiveFlag
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
    396          
    397            /* if a reset occurred during the ISR, peform cleanup here */
    398            if (rxResetFlag)
   \   000023   90....       MOV       DPTR,#rxResetFlag
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6008         JZ        ??macRxThresholdIsr_0
    399            {
    400              rxHaltCleanupFinalStep();
   \   000029                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000029   12....       LCALL     `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
    401              rxResetFlag = 0;
   \   00002C   90....       MOV       DPTR,#rxResetFlag
   \   00002F   E4           CLR       A
   \   000030   F0           MOVX      @DPTR,A
    402            }
    403          }
   \                     ??macRxThresholdIsr_0:
   \   000031   D083         POP       DPH
   \   000033   D082         POP       DPL
   \   000035   02....       LJMP      ?BRET
    404          
    405          
    406          /*=================================================================================================
    407           * @fn          rxStartIsr
    408           *
    409           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    410           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    411           *              allocating a buffer.
    412           *
    413           * @param       none
    414           *
    415           * @return      none
    416           *=================================================================================================
    417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    418          static void rxStartIsr(void)
   \                     rxStartIsr:
    419          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    420            uint8  addrLen;
    421            uint8  ackWithPending;
    422            uint8  dstAddrMode;
    423            uint8  srcAddrMode;
    424            uint8  mhrLen = 0;
   \   00000A   7F00         MOV       R7,#0x0
    425          
    426            MAC_ASSERT(!macRxActive); /* receive on top of receive */
   \   00000C   90....       MOV       DPTR,#macRxActive
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6003         JZ        ??rxStartIsr_0
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    427          
    428            /* indicate rx is active */
    429            macRxActive = MAC_RX_ACTIVE_STARTED;
   \                     ??rxStartIsr_0:
   \   000015   90....       MOV       DPTR,#macRxActive
   \   000018   7481         MOV       A,#-0x7f
   \   00001A   F0           MOVX      @DPTR,A
    430          
    431            /*
    432             *  For bullet proof functionality, need to see if the receiver was just turned off.
    433             *  The logic to request turning off the receiver, disables interrupts and then checks
    434             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    435             *
    436             *  There is a small hole though.  It's possible to attempt turning off the receiver
    437             *  in the window from when the receive interrupt fires and the point where macRxActive
    438             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    439             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    440             *  in the RX fifo and the receive is simply aborted.
    441             *
    442             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    443             *  the receiver will just be off at this point after a hard disable.  The check described
    444             *  above will account for this case too.  However, if a hard disable were immediately
    445             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    446             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    447             */
    448            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
   \   00001B   90....       MOV       DPTR,#macRxOnFlag
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   600D         JZ        ??rxStartIsr_1
   \   000021   906193       MOV       DPTR,#0x6193
   \   000024   E0           MOVX      A,@DPTR
   \   000025   A2E7         MOV       C,0xE0 /* A   */.7
   \   000027   4010         JC        ??rxStartIsr_2
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   A2E6         MOV       C,0xE0 /* A   */.6
   \   00002C   400B         JC        ??rxStartIsr_2
    449            {
    450              /* reset active flag */
    451              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxStartIsr_1:
   \   00002E   90....       MOV       DPTR,#macRxActive
   \   000031   E4           CLR       A
   \   000032   F0           MOVX      @DPTR,A
    452          
    453              /*
    454               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    455               *  the tiny, tiny window when macRxActive was not zero.
    456               */
    457              rxPostRxUpdates();
   \   000033                ; Setup parameters for call to function rxPostRxUpdates
   \   000033   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
    458          
    459              /* return immediately from here */
    460              return;
   \   000036   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    461            }
    462          
    463            /*
    464             *  If interrupts are held off for too long it's possible the previous "transmit done"
    465             *  callback is pending.  If this is the case, it needs to be completed before
    466             *  continuing with the receive logic.
    467             */
    468            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
   \                     ??rxStartIsr_2:
   \   000039                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   000039   12....       LCALL     `??macCspForceTxDoneIfPending::?relay`; Banked call to: macCspForceTxDoneIfPending
    469          
    470            /*
    471             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    472             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    473             *  That callback execute receive cleanup logic that will run at the completion
    474             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    475             */
    476            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   00003C   9061A4       MOV       DPTR,#0x61a4
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   C2E0         CLR       0xE0 /* A   */.0
   \   000042   F0           MOVX      @DPTR,A
    477            macRxOutgoingAckFlag = 0;
   \   000043   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000046   E4           CLR       A
   \   000047   F0           MOVX      @DPTR,A
    478          
    479            /*
    480             *  Make a module-local copy of macRxFilter.  This prevents the selected
    481             *  filter from changing in the middle of a receive.
    482             */
    483            rxFilter = macRxFilter;
   \   000048   90....       MOV       DPTR,#macRxFilter
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   90....       MOV       DPTR,#rxFilter
   \   00004F   F0           MOVX      @DPTR,A
    484          
    485            /*-------------------------------------------------------------------------------
    486             *  Read initial frame information from FIFO.
    487             *
    488             *   This code is not triggered until the following are in the RX FIFO:
    489             *     frame length          - one byte containing length of MAC frame (excludes this field)
    490             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    491             *     sequence number       - one byte unique sequence identifier
    492             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    493             *                             if so, the frame can be verified and responded to immediately,
    494             *                             if not an ACK, these bytes will be processed normally
    495             */
    496          
    497            /* read frame length, frame control field, and sequence number from FIFO */
    498            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
   \   000050                ; Setup parameters for call to function macMemReadRxFifo
   \   000050   7904         MOV       R1,#0x4
   \   000052   7A..         MOV       R2,#rxBuf & 0xff
   \   000054   7B..         MOV       R3,#(rxBuf >> 8) & 0xff
   \   000056   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    499          
    500            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    501            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
   \   000059   90....       MOV       DPTR,#rxBuf
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   547F         ANL       A,#0x7f
   \   00005F   24FD         ADD       A,#-0x3
   \   000061   90....       MOV       DPTR,#rxUnreadLen
   \   000064   F0           MOVX      @DPTR,A
    502          
    503            /*
    504             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    505             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    506             *  the entire receive buffer is flushed.
    507             */
    508            if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    509                (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
   \   000065   E0           MOVX      A,@DPTR
   \   000066   C3           CLR       C
   \   000067   947D         SUBB      A,#0x7d
   \   000069   4003         JC        $+5
   \   00006B   02....       LJMP      ??rxStartIsr_4 & 0xFFFF
   \   00006E   90....       MOV       DPTR,#rxBuf + 1
   \   000071   E0           MOVX      A,@DPTR
   \   000072   5407         ANL       A,#0x7
   \   000074   F8           MOV       R0,A
   \   000075   C3           CLR       C
   \   000076   9404         SUBB      A,#0x4
   \   000078   4003         JC        $+5
   \   00007A   02....       LJMP      ??rxStartIsr_4 & 0xFFFF
    510            {
    511              MAC_RADIO_FLUSH_RX_FIFO();
    512              rxDone();
    513              return;
    514            }
    515          
    516          
    517            /*-------------------------------------------------------------------------------
    518             *  Process ACKs.
    519             *
    520             *  If this frame is an ACK, process it immediately and exit from here.
    521             *  If this frame is not an ACK and transmit is listening for an ACK, let
    522             *  the transmit logic know an non-ACK was received so transmit can complete.
    523             *
    524             *  In promiscuous mode ACKs are treated like any other frame.
    525             */
    526            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
   \   00007D   7402         MOV       A,#0x2
   \   00007F   68           XRL       A,R0
   \   000080   6003         JZ        $+5
   \   000082   02....       LJMP      ??rxStartIsr_5 & 0xFFFF
   \   000085   90....       MOV       DPTR,#rxPromiscuousMode
   \   000088   E0           MOVX      A,@DPTR
   \   000089   6003         JZ        $+5
   \   00008B   02....       LJMP      ??rxStartIsr_5 & 0xFFFF
    527            {
    528              halIntState_t  s;
    529              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    530              /*
    531               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    532               *  these two bytes will be the FCS.
    533               */
    534          
    535              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    536              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
   \   00008E                ; Setup parameters for call to function macMemReadRxFifo
   \   00008E   7902         MOV       R1,#0x2
   \   000090   AA..         MOV       R2,?XSP + 0
   \   000092   AB..         MOV       R3,?XSP + 1
   \   000094   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    537          
    538              /*
    539               *  This critical section ensures that the ACK timeout won't be triggered in the
    540               *  middle of receiving the ACK frame.
    541               */
    542              HAL_ENTER_CRITICAL_SECTION(s);
   \   000097   A2AF         MOV       C,0xa8.7
   \   000099   E4           CLR       A
   \   00009A   33           RLC       A
   \   00009B   F5..         MOV       ?V0,A
   \   00009D   C2AF         CLR       0xa8.7
    543          
    544              /* see if transmit is listening for an ACK */
    545              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   00009F   90....       MOV       DPTR,#macTxActive
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   6486         XRL       A,#0x86
   \   0000A5   6003         JZ        $+5
   \   0000A7   02....       LJMP      ??rxStartIsr_6 & 0xFFFF
    546              {
    547                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
   \   0000AA   90....       MOV       DPTR,#pMacDataTx
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F8           MOV       R0,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F9           MOV       R1,A
   \   0000B2   E8           MOV       A,R0
   \   0000B3   49           ORL       A,R1
   \   0000B4   7003         JNZ       ??rxStartIsr_7
   \   0000B6                ; Setup parameters for call to function halAssertHandler
   \   0000B6   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    548          
    549                /* record link quality metrics for the receive ACK */
    550                {
    551                  int8 rssiDbm;
    552                  uint8 corr;
    553          
    554                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
   \                     ??rxStartIsr_7:
   \   0000B9   85..82       MOV       DPL,?XSP + 0
   \   0000BC   85..83       MOV       DPH,?XSP + 1
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   24B7         ADD       A,#-0x49
   \   0000C2   FE           MOV       R6,A
    555                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    556                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
   \   0000C3   7401         MOV       A,#0x1
   \   0000C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   547F         ANL       A,#0x7f
   \   0000CB   FF           MOV       R7,A
    557          
    558                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   0000CC                ; Setup parameters for call to function macRadioComputeLQI
   \   0000CC   FA           MOV       R2,A
   \   0000CD   EE           MOV       A,R6
   \   0000CE   F9           MOV       R1,A
   \   0000CF   12....       LCALL     `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   0000D2   E9           MOV       A,R1
   \   0000D3   C0E0         PUSH      A
   \   0000D5   90....       MOV       DPTR,#pMacDataTx
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   F8           MOV       R0,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   C8           XCH       A,R0
   \   0000DD   2415         ADD       A,#0x15
   \   0000DF   F582         MOV       DPL,A
   \   0000E1   E4           CLR       A
   \   0000E2   38           ADDC      A,R0
   \   0000E3   F583         MOV       DPH,A
   \   0000E5   D0E0         POP       A
   \   0000E7   F0           MOVX      @DPTR,A
    559                  pMacDataTx->internal.correlation = corr;
   \   0000E8   EF           MOV       A,R7
   \   0000E9   C0E0         PUSH      A
   \   0000EB   90....       MOV       DPTR,#pMacDataTx
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   F8           MOV       R0,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   C8           XCH       A,R0
   \   0000F3   2416         ADD       A,#0x16
   \   0000F5   F582         MOV       DPL,A
   \   0000F7   E4           CLR       A
   \   0000F8   38           ADDC      A,R0
   \   0000F9   F583         MOV       DPH,A
   \   0000FB   D0E0         POP       A
   \   0000FD   F0           MOVX      @DPTR,A
    560                  pMacDataTx->internal.rssi= rssiDbm;
   \   0000FE   EE           MOV       A,R6
   \   0000FF   C0E0         PUSH      A
   \   000101   90....       MOV       DPTR,#pMacDataTx
   \   000104   E0           MOVX      A,@DPTR
   \   000105   F8           MOV       R0,A
   \   000106   A3           INC       DPTR
   \   000107   E0           MOVX      A,@DPTR
   \   000108   C8           XCH       A,R0
   \   000109   2417         ADD       A,#0x17
   \   00010B   F582         MOV       DPL,A
   \   00010D   E4           CLR       A
   \   00010E   38           ADDC      A,R0
   \   00010F   F583         MOV       DPH,A
   \   000111   D0E0         POP       A
   \   000113   F0           MOVX      @DPTR,A
    561                }
    562          
    563                /*
    564                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    565                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    566                 */
    567                HAL_EXIT_CRITICAL_SECTION(s);
   \   000114   E5..         MOV       A,?V0
   \   000116   A2E0         MOV       C,0xE0 /* A   */.0
   \   000118   92AF         MOV       0xa8.7,C
    568          
    569                /*
    570                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    571                 *  the transmit logic still needs to know.  In that case, treat the frame
    572                 *  as a non-ACK to complete the active transmit.
    573                 */
    574                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
   \   00011A   7401         MOV       A,#0x1
   \   00011C   12....       LCALL     ?XSTACK_DISP0_8
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   A2E7         MOV       C,0xE0 /* A   */.7
   \   000122   5011         JNC       ??rxStartIsr_8
    575                {
    576                  /* call transmit logic to indicate ACK was received */
    577                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
   \   000124                ; Setup parameters for call to function macTxAckReceivedCallback
   \   000124   90....       MOV       DPTR,#rxBuf + 1
   \   000127   E0           MOVX      A,@DPTR
   \   000128   5410         ANL       A,#0x10
   \   00012A   FA           MOV       R2,A
   \   00012B   90....       MOV       DPTR,#rxBuf + 3
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   F9           MOV       R1,A
   \   000130   12....       LCALL     `??macTxAckReceivedCallback::?relay`; Banked call to: macTxAckReceivedCallback
   \   000133   807E         SJMP      ??rxStartIsr_9
    578                }
    579                else
    580                {
    581                  macTxAckNotReceivedCallback();
   \                     ??rxStartIsr_8:
   \   000135                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000135   12....       LCALL     `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
   \   000138   8079         SJMP      ??rxStartIsr_9
    582                }
    583              }
    584              else
    585              {
    586                HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??rxStartIsr_6:
   \   00013A   E5..         MOV       A,?V0
   \   00013C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00013E   92AF         MOV       0xa8.7,C
    587              }
    588          
    589              /* receive is done, exit from here */
    590              rxDone();
   \   000140                ; Setup parameters for call to function rxDone
   \   000140   8071         SJMP      ??rxStartIsr_9
    591              return;
    592            }
    593            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \                     ??rxStartIsr_5:
   \   000142   90....       MOV       DPTR,#macTxActive
   \   000145   E0           MOVX      A,@DPTR
   \   000146   6486         XRL       A,#0x86
   \   000148   7003         JNZ       ??rxStartIsr_10
    594            {
    595              macTxAckNotReceivedCallback();
   \   00014A                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   00014A   12....       LCALL     `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
    596            }
    597          
    598            /*-------------------------------------------------------------------------------
    599             *  Apply filtering.
    600             *
    601             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    602             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    603             *  do not apply filtering.
    604             */
    605            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
   \                     ??rxStartIsr_10:
   \   00014D   90....       MOV       DPTR,#rxFilter
   \   000150   E0           MOVX      A,@DPTR
   \   000151   6033         JZ        ??rxStartIsr_11
   \   000153   90....       MOV       DPTR,#rxPromiscuousMode
   \   000156   E0           MOVX      A,@DPTR
   \   000157   702D         JNZ       ??rxStartIsr_11
    606            {
    607              if (/* filter all frames */
    608                   (rxFilter == RX_FILTER_ALL) ||
    609          
    610                   /* filter non-beacon frames */
    611                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    612                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    613          
    614                   /* filter non-command frames */
    615                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    616                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
   \   000159   90....       MOV       DPTR,#rxFilter
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   6401         XRL       A,#0x1
   \   00015F   7003         JNZ       $+5
   \   000161   02....       LJMP      ??rxStartIsr_12 & 0xFFFF
   \   000164   E0           MOVX      A,@DPTR
   \   000165   6402         XRL       A,#0x2
   \   000167   700B         JNZ       ??rxStartIsr_13
   \   000169   90....       MOV       DPTR,#rxBuf + 1
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   5407         ANL       A,#0x7
   \   00016F   6003         JZ        $+5
   \   000171   02....       LJMP      ??rxStartIsr_12 & 0xFFFF
   \                     ??rxStartIsr_13:
   \   000174   90....       MOV       DPTR,#rxFilter
   \   000177   E0           MOVX      A,@DPTR
   \   000178   6403         XRL       A,#0x3
   \   00017A   700A         JNZ       ??rxStartIsr_11
   \   00017C   90....       MOV       DPTR,#rxBuf + 1
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   5407         ANL       A,#0x7
   \   000182   6403         XRL       A,#0x3
   \   000184   707A         JNZ       ??rxStartIsr_14
    617              {
    618                /* discard rest of frame */
    619                rxDiscardFrame();
    620                return;
    621              }
    622            }
    623          
    624            /*-------------------------------------------------------------------------------
    625             *  Compute length of addressing fields.  Compute payload length.
    626             */
    627          
    628            /* decode addressing modes */
    629            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \                     ??rxStartIsr_11:
   \   000186   90....       MOV       DPTR,#rxBuf + 2
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   F8           MOV       R0,A
   \   00018B   13           RRC       A
   \   00018C   13           RRC       A
   \   00018D   543F         ANL       A,#0x3f
   \   00018F   5403         ANL       A,#0x3
   \   000191   F5..         MOV       ?V0,A
    630            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \   000193   E8           MOV       A,R0
   \   000194   C4           SWAP      A
   \   000195   13           RRC       A
   \   000196   13           RRC       A
   \   000197   5403         ANL       A,#0x3
   \   000199   F5..         MOV       ?V1,A
    631          
    632            /*
    633            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    634             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    635             *  the entire receive buffer is flushed.
    636             */
    637            if (macChipVersion == REV_A)
   \   00019B   90....       MOV       DPTR,#macChipVersion
   \   00019E   E0           MOVX      A,@DPTR
   \   00019F   7018         JNZ       ??rxStartIsr_15
    638            {
    639              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
   \   0001A1   7401         MOV       A,#0x1
   \   0001A3   65..         XRL       A,?V1
   \   0001A5   6006         JZ        ??rxStartIsr_4
   \   0001A7   7401         MOV       A,#0x1
   \   0001A9   65..         XRL       A,?V0
   \   0001AB   700C         JNZ       ??rxStartIsr_15
    640              {
    641                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_4:
   \   0001AD   75E1ED       MOV       0xe1,#-0x13
   \   0001B0   75E1ED       MOV       0xe1,#-0x13
    642                rxDone();
   \   0001B3                ; Setup parameters for call to function rxDone
   \                     ??rxStartIsr_9:
   \   0001B3   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
    643                return;
   \   0001B6   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    644              }
    645            }
    646          
    647            /*
    648             *  Compute the addressing field length.  A lookup table based on addressing
    649             *  mode is used for efficiency.  If the source address is present and the
    650             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    651             *  length is adjusted to match the smaller length.
    652             */
    653            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
   \                     ??rxStartIsr_15:
   \   0001B9   A8..         MOV       R0,?V1
   \   0001BB   74..         MOV       A,#macRxAddrLen & 0xff
   \   0001BD   28           ADD       A,R0
   \   0001BE   F582         MOV       DPL,A
   \   0001C0   E4           CLR       A
   \   0001C1   34..         ADDC      A,#(macRxAddrLen >> 8) & 0xff
   \   0001C3   F583         MOV       DPH,A
   \   0001C5   E4           CLR       A
   \   0001C6   93           MOVC      A,@A+DPTR
   \   0001C7   FA           MOV       R2,A
   \   0001C8   A8..         MOV       R0,?V0
   \   0001CA   74..         MOV       A,#macRxAddrLen & 0xff
   \   0001CC   28           ADD       A,R0
   \   0001CD   F582         MOV       DPL,A
   \   0001CF   E4           CLR       A
   \   0001D0   34..         ADDC      A,#(macRxAddrLen >> 8) & 0xff
   \   0001D2   F583         MOV       DPH,A
   \   0001D4   E4           CLR       A
   \   0001D5   93           MOVC      A,@A+DPTR
   \   0001D6   2A           ADD       A,R2
   \   0001D7   FE           MOV       R6,A
    654            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
   \   0001D8   E5..         MOV       A,?V1
   \   0001DA   600A         JZ        ??rxStartIsr_16
   \   0001DC   90....       MOV       DPTR,#rxBuf + 1
   \   0001DF   E0           MOVX      A,@DPTR
   \   0001E0   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001E2   5002         JNC       ??rxStartIsr_16
    655            {
    656              addrLen -= MAC_PAN_ID_FIELD_LEN;
   \   0001E4   1E           DEC       R6
   \   0001E5   1E           DEC       R6
    657            }
    658          
    659            /*
    660             *  If there are not enough unread bytes to include the computed address
    661             *  plus FCS field, the frame is corrupted and must be discarded.
    662             */
    663            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
   \                     ??rxStartIsr_16:
   \   0001E6   90....       MOV       DPTR,#rxUnreadLen
   \   0001E9   E0           MOVX      A,@DPTR
   \   0001EA   FA           MOV       R2,A
   \   0001EB   EE           MOV       A,R6
   \   0001EC   7900         MOV       R1,#0x0
   \   0001EE   2402         ADD       A,#0x2
   \   0001F0   F8           MOV       R0,A
   \   0001F1   5001         JNC       ??rxStartIsr_17
   \   0001F3   09           INC       R1
   \                     ??rxStartIsr_17:
   \   0001F4   C3           CLR       C
   \   0001F5   EA           MOV       A,R2
   \   0001F6   98           SUBB      A,R0
   \   0001F7   E4           CLR       A
   \   0001F8   99           SUBB      A,R1
   \   0001F9   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0001FB   65D0         XRL       A,PSW
   \   0001FD   33           RLC       A
   \   0001FE   5002         JNC       ??rxStartIsr_18
    664            {
    665              /* discard frame and exit */
    666              rxDiscardFrame();
   \                     ??rxStartIsr_14:
   \   000200                ; Setup parameters for call to function rxDiscardFrame
   \   000200   8042         SJMP      ??rxStartIsr_12
    667              return;
    668            }
    669          
    670            /* aux security header plus payload length is equal to unread bytes minus
    671             * address length, minus the FCS
    672             */
    673            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
   \                     ??rxStartIsr_18:
   \   000202   E0           MOVX      A,@DPTR
   \   000203   C3           CLR       C
   \   000204   9E           SUBB      A,R6
   \   000205   24FE         ADD       A,#-0x2
   \   000207   90....       MOV       DPTR,#rxPayloadLen
   \   00020A   F0           MOVX      @DPTR,A
    674          
    675            /*-------------------------------------------------------------------------------
    676             *  Allocate memory for the incoming frame.
    677             */
    678            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   00020B   90....       MOV       DPTR,#rxBuf + 1
   \   00020E   E0           MOVX      A,@DPTR
   \   00020F   A2E3         MOV       C,0xE0 /* A   */.3
   \   000211   5002         JNC       ??rxStartIsr_19
    679            {
    680              /* increase the allocation size of MAC header for security */
    681              mhrLen = MAC_MHR_LEN;
   \   000213   7F25         MOV       R7,#0x25
    682            }
    683          
    684            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + mhrLen + rxPayloadLen);
   \                     ??rxStartIsr_19:
   \   000215                ; Setup parameters for call to function macDataRxMemAlloc
   \   000215   EF           MOV       A,R7
   \   000216   F8           MOV       R0,A
   \   000217   90....       MOV       DPTR,#rxPayloadLen
   \   00021A   E0           MOVX      A,@DPTR
   \   00021B   FA           MOV       R2,A
   \   00021C   E8           MOV       A,R0
   \   00021D   2A           ADD       A,R2
   \   00021E   F8           MOV       R0,A
   \   00021F   E4           CLR       A
   \   000220   3400         ADDC      A,#0x0
   \   000222   F9           MOV       R1,A
   \   000223   E8           MOV       A,R0
   \   000224   243A         ADD       A,#0x3a
   \   000226   FA           MOV       R2,A
   \   000227   E4           CLR       A
   \   000228   39           ADDC      A,R1
   \   000229   FB           MOV       R3,A
   \   00022A   12....       LCALL     `??macDataRxMemAlloc::?relay`; Banked call to: macDataRxMemAlloc
   \   00022D   90....       MOV       DPTR,#pRxBuf
   \   000230   EA           MOV       A,R2
   \   000231   F0           MOVX      @DPTR,A
   \   000232   A3           INC       DPTR
   \   000233   EB           MOV       A,R3
   \   000234   F0           MOVX      @DPTR,A
    685            if (pRxBuf == NULL)
   \   000235   90....       MOV       DPTR,#pRxBuf
   \   000238   E0           MOVX      A,@DPTR
   \   000239   F8           MOV       R0,A
   \   00023A   A3           INC       DPTR
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   F9           MOV       R1,A
   \   00023D   E8           MOV       A,R0
   \   00023E   49           ORL       A,R1
   \   00023F   7009         JNZ       ??rxStartIsr_20
    686            {
    687              /* Cancel the outgoing TX ACK */
    688              MAC_RADIO_CANCEL_TX_ACK();
   \   000241   75E1E8       MOV       0xe1,#-0x18
    689          
    690              /* buffer allocation failed, discard the frame and exit*/
    691              rxDiscardFrame();
   \   000244                ; Setup parameters for call to function rxDiscardFrame
   \                     ??rxStartIsr_12:
   \   000244   12....       LCALL     `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    692              return;
   \   000247   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    693            }
    694          
    695            /*-------------------------------------------------------------------------------
    696             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    697             */
    698            ackWithPending = 0;
   \                     ??rxStartIsr_20:
   \   00024A   7F00         MOV       R7,#0x0
    699            if (!rxPromiscuousMode)
   \   00024C   90....       MOV       DPTR,#rxPromiscuousMode
   \   00024F   E0           MOVX      A,@DPTR
   \   000250   700A         JNZ       ??rxStartIsr_21
    700            {
    701              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
   \   000252   90....       MOV       DPTR,#rxBuf + 1
   \   000255   E0           MOVX      A,@DPTR
   \   000256   5420         ANL       A,#0x20
   \   000258   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00025B   F0           MOVX      @DPTR,A
    702            }
    703          
    704            /*-------------------------------------------------------------------------------
    705             *  Process any ACK request.
    706             */
    707            if (macRxOutgoingAckFlag)
   \                     ??rxStartIsr_21:
   \   00025C   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00025F   E0           MOVX      A,@DPTR
   \   000260   605F         JZ        ??rxStartIsr_22
    708            {
    709              halIntState_t  s;
    710          
    711              /*
    712               *  This critical section ensures that the callback ISR is initiated within time
    713               *  to guarantee correlation with the strobe.
    714               */
    715              HAL_ENTER_CRITICAL_SECTION(s);
   \   000262   A2AF         MOV       C,0xa8.7
   \   000264   E4           CLR       A
   \   000265   33           RLC       A
   \   000266   F5..         MOV       ?V2,A
   \   000268   C2AF         CLR       0xa8.7
    716          
    717              /* Do not ack data packet with pending more data */
    718              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
   \   00026A   90....       MOV       DPTR,#rxBuf + 1
   \   00026D   E0           MOVX      A,@DPTR
   \   00026E   5407         ANL       A,#0x7
   \   000270   6403         XRL       A,#0x3
   \   000272   701E         JNZ       ??rxStartIsr_23
    719              {
    720                if( macRxCheckMACPendingCallback())
   \   000274                ; Setup parameters for call to function macRxCheckMACPendingCallback
   \   000274   12....       LCALL     `??macRxCheckMACPendingCallback::?relay`; Banked call to: macRxCheckMACPendingCallback
   \   000277   E9           MOV       A,R1
   \   000278   7016         JNZ       ??rxStartIsr_24
    721                {
    722                  /* Check is any mac data pending for end devices */
    723                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    724                }
    725                else
    726                {
    727                  if( macSrcMatchIsEnabled )
   \   00027A   90....       MOV       DPTR,#macSrcMatchIsEnabled
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   600A         JZ        ??rxStartIsr_25
    728                  {
    729                    /* When autopend is enabled, check if allpending is set to true */
    730                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
   \   000280                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   000280   12....       LCALL     `??MAC_SrcMatchCheckAllPending::?relay`; Banked call to: MAC_SrcMatchCheckAllPending
   \   000283   E9           MOV       A,R1
   \   000284   64FE         XRL       A,#0xfe
   \   000286   700A         JNZ       ??rxStartIsr_23
   \   000288   8006         SJMP      ??rxStartIsr_24
    731                    {
    732                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    733                    }
    734                  }
    735                  else
    736                  {
    737                    /* When autopend is disabled, check the application pending callback */
    738                    if( macRxCheckPendingCallback() )
   \                     ??rxStartIsr_25:
   \   00028A                ; Setup parameters for call to function macRxCheckPendingCallback
   \   00028A   12....       LCALL     `??macRxCheckPendingCallback::?relay`; Banked call to: macRxCheckPendingCallback
   \   00028D   E9           MOV       A,R1
   \   00028E   6002         JZ        ??rxStartIsr_23
    739                    {
    740                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \                     ??rxStartIsr_24:
   \   000290   7F04         MOV       R7,#0x4
    741                    }
    742                  }
    743                }
    744              }
    745          
    746              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
   \                     ??rxStartIsr_23:
   \   000292   7404         MOV       A,#0x4
   \   000294   6F           XRL       A,R7
   \   000295   90618A       MOV       DPTR,#0x618a
   \   000298   7005         JNZ       ??rxStartIsr_26
    747              {
    748                MAC_RADIO_TX_ACK_PEND();
   \   00029A   E0           MOVX      A,@DPTR
   \   00029B   D2E2         SETB      0xE0 /* A   */.2
   \   00029D   8003         SJMP      ??rxStartIsr_27
    749              }
    750              else
    751              {
    752                MAC_RADIO_TX_ACK();
   \                     ??rxStartIsr_26:
   \   00029F   E0           MOVX      A,@DPTR
   \   0002A0   C2E2         CLR       0xE0 /* A   */.2
   \                     ??rxStartIsr_27:
   \   0002A2   F0           MOVX      @DPTR,A
    753              }
    754          
    755          
    756              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    757              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
   \   0002A3   A2AF         MOV       C,0xa8.7
   \   0002A5   E4           CLR       A
   \   0002A6   33           RLC       A
   \   0002A7   F8           MOV       R0,A
   \   0002A8   C2AF         CLR       0xa8.7
   \   0002AA   759B00       MOV       0x9b,#0x0
   \   0002AD   7591FE       MOV       0x91,#-0x2
   \   0002B0   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002B2   92AF         MOV       0xa8.7,C
   \   0002B4   9061A4       MOV       DPTR,#0x61a4
   \   0002B7   E0           MOVX      A,@DPTR
   \   0002B8   D2E0         SETB      0xE0 /* A   */.0
   \   0002BA   F0           MOVX      @DPTR,A
    758              HAL_EXIT_CRITICAL_SECTION(s);
   \   0002BB   E5..         MOV       A,?V2
   \   0002BD   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002BF   92AF         MOV       0xa8.7,C
    759            }
    760          
    761           /*-------------------------------------------------------------------------------
    762            *  Populate the receive buffer going up to high-level.
    763            */
    764          
    765            /* configure the payload buffer
    766             * save MAC header pointer regardless of security status.
    767             */
    768            pRxBuf->mhr.p   = pRxBuf->msdu.p   = (uint8 *) (pRxBuf + 1);
   \                     ??rxStartIsr_22:
   \   0002C1   90....       MOV       DPTR,#pRxBuf
   \   0002C4   E0           MOVX      A,@DPTR
   \   0002C5   243A         ADD       A,#0x3a
   \   0002C7   F8           MOV       R0,A
   \   0002C8   A3           INC       DPTR
   \   0002C9   E0           MOVX      A,@DPTR
   \   0002CA   3400         ADDC      A,#0x0
   \   0002CC   F9           MOV       R1,A
   \   0002CD   90....       MOV       DPTR,#pRxBuf
   \   0002D0   E0           MOVX      A,@DPTR
   \   0002D1   FA           MOV       R2,A
   \   0002D2   A3           INC       DPTR
   \   0002D3   E0           MOVX      A,@DPTR
   \   0002D4   F583         MOV       DPH,A
   \   0002D6   8A82         MOV       DPL,R2
   \   0002D8   A3           INC       DPTR
   \   0002D9   A3           INC       DPTR
   \   0002DA   E8           MOV       A,R0
   \   0002DB   F0           MOVX      @DPTR,A
   \   0002DC   A3           INC       DPTR
   \   0002DD   E9           MOV       A,R1
   \   0002DE   F0           MOVX      @DPTR,A
   \   0002DF   90....       MOV       DPTR,#pRxBuf
   \   0002E2   E0           MOVX      A,@DPTR
   \   0002E3   F8           MOV       R0,A
   \   0002E4   A3           INC       DPTR
   \   0002E5   E0           MOVX      A,@DPTR
   \   0002E6   F583         MOV       DPH,A
   \   0002E8   8882         MOV       DPL,R0
   \   0002EA   A3           INC       DPTR
   \   0002EB   A3           INC       DPTR
   \   0002EC   E0           MOVX      A,@DPTR
   \   0002ED   F8           MOV       R0,A
   \   0002EE   A3           INC       DPTR
   \   0002EF   E0           MOVX      A,@DPTR
   \   0002F0   F9           MOV       R1,A
   \   0002F1   90....       MOV       DPTR,#pRxBuf
   \   0002F4   E0           MOVX      A,@DPTR
   \   0002F5   FA           MOV       R2,A
   \   0002F6   A3           INC       DPTR
   \   0002F7   E0           MOVX      A,@DPTR
   \   0002F8   CA           XCH       A,R2
   \   0002F9   2433         ADD       A,#0x33
   \   0002FB   F582         MOV       DPL,A
   \   0002FD   E4           CLR       A
   \   0002FE   3A           ADDC      A,R2
   \   0002FF   F583         MOV       DPH,A
   \   000301   E8           MOV       A,R0
   \   000302   F0           MOVX      @DPTR,A
   \   000303   A3           INC       DPTR
   \   000304   E9           MOV       A,R1
   \   000305   F0           MOVX      @DPTR,A
    769            pRxBuf->mhr.len = pRxBuf->msdu.len =  rxPayloadLen;
   \   000306   90....       MOV       DPTR,#rxPayloadLen
   \   000309   E0           MOVX      A,@DPTR
   \   00030A   C0E0         PUSH      A
   \   00030C   90....       MOV       DPTR,#pRxBuf
   \   00030F   E0           MOVX      A,@DPTR
   \   000310   F8           MOV       R0,A
   \   000311   A3           INC       DPTR
   \   000312   E0           MOVX      A,@DPTR
   \   000313   F583         MOV       DPH,A
   \   000315   8882         MOV       DPL,R0
   \   000317   A3           INC       DPTR
   \   000318   A3           INC       DPTR
   \   000319   A3           INC       DPTR
   \   00031A   A3           INC       DPTR
   \   00031B   D0E0         POP       A
   \   00031D   F0           MOVX      @DPTR,A
   \   00031E   90....       MOV       DPTR,#pRxBuf
   \   000321   E0           MOVX      A,@DPTR
   \   000322   F8           MOV       R0,A
   \   000323   A3           INC       DPTR
   \   000324   E0           MOVX      A,@DPTR
   \   000325   F583         MOV       DPH,A
   \   000327   8882         MOV       DPL,R0
   \   000329   A3           INC       DPTR
   \   00032A   A3           INC       DPTR
   \   00032B   A3           INC       DPTR
   \   00032C   A3           INC       DPTR
   \   00032D   E0           MOVX      A,@DPTR
   \   00032E   C0E0         PUSH      A
   \   000330   90....       MOV       DPTR,#pRxBuf
   \   000333   E0           MOVX      A,@DPTR
   \   000334   F8           MOV       R0,A
   \   000335   A3           INC       DPTR
   \   000336   E0           MOVX      A,@DPTR
   \   000337   C8           XCH       A,R0
   \   000338   2435         ADD       A,#0x35
   \   00033A   F582         MOV       DPL,A
   \   00033C   E4           CLR       A
   \   00033D   38           ADDC      A,R0
   \   00033E   F583         MOV       DPH,A
   \   000340   D0E0         POP       A
   \   000342   F0           MOVX      @DPTR,A
    770          
    771            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   000343   90....       MOV       DPTR,#rxBuf + 1
   \   000346   E0           MOVX      A,@DPTR
   \   000347   A2E3         MOV       C,0xE0 /* A   */.3
   \   000349   4003         JC        $+5
   \   00034B   02....       LJMP      ??rxStartIsr_28 & 0xFFFF
    772            {
    773              /* Copy FCF and sequence number to RX buffer */
    774              pRxBuf->mhr.len = MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN;
   \   00034E   90....       MOV       DPTR,#pRxBuf
   \   000351   E0           MOVX      A,@DPTR
   \   000352   F8           MOV       R0,A
   \   000353   A3           INC       DPTR
   \   000354   E0           MOVX      A,@DPTR
   \   000355   C8           XCH       A,R0
   \   000356   2435         ADD       A,#0x35
   \   000358   F582         MOV       DPL,A
   \   00035A   E4           CLR       A
   \   00035B   38           ADDC      A,R0
   \   00035C   F583         MOV       DPH,A
   \   00035E   7403         MOV       A,#0x3
   \   000360   F0           MOVX      @DPTR,A
    775              osal_memcpy(pRxBuf->mhr.p, &rxBuf[1], pRxBuf->mhr.len);
   \   000361                ; Setup parameters for call to function osal_memcpy
   \   000361   75....       MOV       ?V4,#(rxBuf + 1) & 0xff
   \   000364   75....       MOV       ?V5,#((rxBuf + 1) >> 8) & 0xff
   \   000367   75..00       MOV       ?V6,#0x0
   \   00036A   78..         MOV       R0,#?V4
   \   00036C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00036F   90....       MOV       DPTR,#pRxBuf
   \   000372   E0           MOVX      A,@DPTR
   \   000373   F8           MOV       R0,A
   \   000374   A3           INC       DPTR
   \   000375   E0           MOVX      A,@DPTR
   \   000376   C8           XCH       A,R0
   \   000377   2435         ADD       A,#0x35
   \   000379   F582         MOV       DPL,A
   \   00037B   E4           CLR       A
   \   00037C   38           ADDC      A,R0
   \   00037D   F583         MOV       DPH,A
   \   00037F   E0           MOVX      A,@DPTR
   \   000380   FC           MOV       R4,A
   \   000381   7D00         MOV       R5,#0x0
   \   000383   90....       MOV       DPTR,#pRxBuf
   \   000386   E0           MOVX      A,@DPTR
   \   000387   F8           MOV       R0,A
   \   000388   A3           INC       DPTR
   \   000389   E0           MOVX      A,@DPTR
   \   00038A   C8           XCH       A,R0
   \   00038B   2433         ADD       A,#0x33
   \   00038D   F582         MOV       DPL,A
   \   00038F   E4           CLR       A
   \   000390   38           ADDC      A,R0
   \   000391   F583         MOV       DPH,A
   \   000393   E0           MOVX      A,@DPTR
   \   000394   FA           MOV       R2,A
   \   000395   A3           INC       DPTR
   \   000396   E0           MOVX      A,@DPTR
   \   000397   FB           MOV       R3,A
   \   000398   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00039B   7403         MOV       A,#0x3
   \   00039D   12....       LCALL     ?DEALLOC_XSTACK8
    776              pRxBuf->mhr.p += pRxBuf->mhr.len;
   \   0003A0   90....       MOV       DPTR,#pRxBuf
   \   0003A3   E0           MOVX      A,@DPTR
   \   0003A4   2433         ADD       A,#0x33
   \   0003A6   F8           MOV       R0,A
   \   0003A7   A3           INC       DPTR
   \   0003A8   E0           MOVX      A,@DPTR
   \   0003A9   3400         ADDC      A,#0x0
   \   0003AB   F9           MOV       R1,A
   \   0003AC   90....       MOV       DPTR,#pRxBuf
   \   0003AF   E0           MOVX      A,@DPTR
   \   0003B0   FA           MOV       R2,A
   \   0003B1   A3           INC       DPTR
   \   0003B2   E0           MOVX      A,@DPTR
   \   0003B3   CA           XCH       A,R2
   \   0003B4   2435         ADD       A,#0x35
   \   0003B6   F582         MOV       DPL,A
   \   0003B8   E4           CLR       A
   \   0003B9   3A           ADDC      A,R2
   \   0003BA   F583         MOV       DPH,A
   \   0003BC   E0           MOVX      A,@DPTR
   \   0003BD   FA           MOV       R2,A
   \   0003BE   8882         MOV       DPL,R0
   \   0003C0   8983         MOV       DPH,R1
   \   0003C2   E0           MOVX      A,@DPTR
   \   0003C3   2A           ADD       A,R2
   \   0003C4   FA           MOV       R2,A
   \   0003C5   A3           INC       DPTR
   \   0003C6   E0           MOVX      A,@DPTR
   \   0003C7   3400         ADDC      A,#0x0
   \   0003C9   FB           MOV       R3,A
   \   0003CA   8882         MOV       DPL,R0
   \   0003CC   8983         MOV       DPH,R1
   \   0003CE   EA           MOV       A,R2
   \   0003CF   F0           MOVX      @DPTR,A
   \   0003D0   A3           INC       DPTR
   \   0003D1   EB           MOV       A,R3
   \   0003D2   F0           MOVX      @DPTR,A
    777            }
    778          
    779            /* set internal values */
    780            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
   \                     ??rxStartIsr_28:
   \   0003D3   90....       MOV       DPTR,#pRxBuf
   \   0003D6   E0           MOVX      A,@DPTR
   \   0003D7   F8           MOV       R0,A
   \   0003D8   A3           INC       DPTR
   \   0003D9   E0           MOVX      A,@DPTR
   \   0003DA   C8           XCH       A,R0
   \   0003DB   241B         ADD       A,#0x1b
   \   0003DD   F582         MOV       DPL,A
   \   0003DF   E4           CLR       A
   \   0003E0   38           ADDC      A,R0
   \   0003E1   F583         MOV       DPH,A
   \   0003E3   E5..         MOV       A,?V1
   \   0003E5   F0           MOVX      @DPTR,A
    781            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
   \   0003E6   90....       MOV       DPTR,#pRxBuf
   \   0003E9   E0           MOVX      A,@DPTR
   \   0003EA   F8           MOV       R0,A
   \   0003EB   A3           INC       DPTR
   \   0003EC   E0           MOVX      A,@DPTR
   \   0003ED   C8           XCH       A,R0
   \   0003EE   2424         ADD       A,#0x24
   \   0003F0   F582         MOV       DPL,A
   \   0003F2   E4           CLR       A
   \   0003F3   38           ADDC      A,R0
   \   0003F4   F583         MOV       DPH,A
   \   0003F6   E5..         MOV       A,?V0
   \   0003F8   F0           MOVX      @DPTR,A
    782            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
   \   0003F9                ; Setup parameters for call to function macMcuOverflowCapture
   \   0003F9   12....       LCALL     `??macMcuOverflowCapture::?relay`; Banked call to: macMcuOverflowCapture
   \   0003FC   8A..         MOV       ?V0,R2
   \   0003FE   8B..         MOV       ?V1,R3
   \   000400   8C..         MOV       ?V2,R4
   \   000402   8D..         MOV       ?V3,R5
   \   000404   90....       MOV       DPTR,#pRxBuf
   \   000407   E0           MOVX      A,@DPTR
   \   000408   F8           MOV       R0,A
   \   000409   A3           INC       DPTR
   \   00040A   E0           MOVX      A,@DPTR
   \   00040B   C8           XCH       A,R0
   \   00040C   2425         ADD       A,#0x25
   \   00040E   F582         MOV       DPL,A
   \   000410   E4           CLR       A
   \   000411   38           ADDC      A,R0
   \   000412   F583         MOV       DPH,A
   \   000414   78..         MOV       R0,#?V0
   \   000416   12....       LCALL     ?L_MOV_TO_X
    783            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
   \   000419                ; Setup parameters for call to function macMcuTimerCapture
   \   000419   12....       LCALL     `??macMcuTimerCapture::?relay`; Banked call to: macMcuTimerCapture
   \   00041C   8A..         MOV       ?V0,R2
   \   00041E   90....       MOV       DPTR,#pRxBuf
   \   000421   E0           MOVX      A,@DPTR
   \   000422   FA           MOV       R2,A
   \   000423   A3           INC       DPTR
   \   000424   E0           MOVX      A,@DPTR
   \   000425   CA           XCH       A,R2
   \   000426   2429         ADD       A,#0x29
   \   000428   F582         MOV       DPL,A
   \   00042A   E4           CLR       A
   \   00042B   3A           ADDC      A,R2
   \   00042C   F583         MOV       DPH,A
   \   00042E   E5..         MOV       A,?V0
   \   000430   F0           MOVX      @DPTR,A
   \   000431   A3           INC       DPTR
   \   000432   EB           MOV       A,R3
   \   000433   F0           MOVX      @DPTR,A
    784          
    785            /* Special Case for Enhanced Beacon Request which has a different
    786             * frame version
    787             */
    788          #ifdef FEATURE_ENHANCED_BEACON
    789            if( MAC_FRAME_VERSION(&rxBuf[1]) == 2 )
    790            {
    791                pRxBuf->internal.frameType  = MAC_FRAME_TYPE_INTERNAL_MAC_VERSION_E | \
    792                                            MAC_FRAME_TYPE(&rxBuf[1]);
    793            }
    794            else
    795          #endif
    796            {
    797              pRxBuf->internal.frameType  = MAC_FRAME_TYPE(&rxBuf[1]);
   \   000434   90....       MOV       DPTR,#rxBuf + 1
   \   000437   E0           MOVX      A,@DPTR
   \   000438   5407         ANL       A,#0x7
   \   00043A   C0E0         PUSH      A
   \   00043C   90....       MOV       DPTR,#pRxBuf
   \   00043F   E0           MOVX      A,@DPTR
   \   000440   F8           MOV       R0,A
   \   000441   A3           INC       DPTR
   \   000442   E0           MOVX      A,@DPTR
   \   000443   F583         MOV       DPH,A
   \   000445   8882         MOV       DPL,R0
   \   000447   A3           INC       DPTR
   \   000448   A3           INC       DPTR
   \   000449   A3           INC       DPTR
   \   00044A   A3           INC       DPTR
   \   00044B   A3           INC       DPTR
   \   00044C   D0E0         POP       A
   \   00044E   F0           MOVX      @DPTR,A
    798            }
    799          
    800            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
   \   00044F   90....       MOV       DPTR,#rxBuf + 3
   \   000452   E0           MOVX      A,@DPTR
   \   000453   C0E0         PUSH      A
   \   000455   90....       MOV       DPTR,#pRxBuf
   \   000458   E0           MOVX      A,@DPTR
   \   000459   F8           MOV       R0,A
   \   00045A   A3           INC       DPTR
   \   00045B   E0           MOVX      A,@DPTR
   \   00045C   C8           XCH       A,R0
   \   00045D   2432         ADD       A,#0x32
   \   00045F   F582         MOV       DPL,A
   \   000461   E4           CLR       A
   \   000462   38           ADDC      A,R0
   \   000463   F583         MOV       DPH,A
   \   000465   D0E0         POP       A
   \   000467   F0           MOVX      @DPTR,A
    801            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
   \   000468   90....       MOV       DPTR,#rxBuf + 1
   \   00046B   E0           MOVX      A,@DPTR
   \   00046C   5478         ANL       A,#0x78
   \   00046E   F8           MOV       R0,A
   \   00046F   A3           INC       DPTR
   \   000470   E0           MOVX      A,@DPTR
   \   000471   C4           SWAP      A
   \   000472   540F         ANL       A,#0xf
   \   000474   5403         ANL       A,#0x3
   \   000476   48           ORL       A,R0
   \   000477   4F           ORL       A,R7
   \   000478   C0E0         PUSH      A
   \   00047A   90....       MOV       DPTR,#pRxBuf
   \   00047D   E0           MOVX      A,@DPTR
   \   00047E   F8           MOV       R0,A
   \   00047F   A3           INC       DPTR
   \   000480   E0           MOVX      A,@DPTR
   \   000481   C8           XCH       A,R0
   \   000482   2407         ADD       A,#0x7
   \   000484   F582         MOV       DPL,A
   \   000486   E4           CLR       A
   \   000487   38           ADDC      A,R0
   \   000488   F583         MOV       DPH,A
   \   00048A   D0E0         POP       A
   \   00048C   F0           MOVX      @DPTR,A
    802          
    803            /*-------------------------------------------------------------------------------
    804             *  If the processing the addressing fields does not require more bytes from
    805             *  the FIFO go directly address processing function.  Otherwise, configure
    806             *  interrupt to jump there once bytes are received.
    807             */
    808            if (addrLen == 0)
   \   00048D   EE           MOV       A,R6
   \   00048E   700F         JNZ       ??rxStartIsr_29
    809            {
    810              /* no addressing fields to read, prepare for payload interrupts */
    811              pFuncRxState = &rxPayloadIsr;
   \   000490   90....       MOV       DPTR,#pFuncRxState
   \   000493   74..         MOV       A,#`??rxPayloadIsr::?relay` & 0xff
   \   000495   F0           MOVX      @DPTR,A
   \   000496   A3           INC       DPTR
   \   000497   74..         MOV       A,#(`??rxPayloadIsr::?relay` >> 8) & 0xff
   \   000499   F0           MOVX      @DPTR,A
    812              rxPrepPayload();
   \   00049A                ; Setup parameters for call to function rxPrepPayload
   \   00049A   12....       LCALL     `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
   \   00049D   801F         SJMP      ??rxStartIsr_3
    813            }
    814            else
    815            {
    816              /* need to read and process addressing fields, prepare for address interrupt */
    817              rxNextLen = addrLen;
   \                     ??rxStartIsr_29:
   \   00049F   90....       MOV       DPTR,#rxNextLen
   \   0004A2   F0           MOVX      @DPTR,A
    818              if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   0004A3   90....       MOV       DPTR,#rxBuf + 1
   \   0004A6   E0           MOVX      A,@DPTR
   \   0004A7   A2E3         MOV       C,0xE0 /* A   */.3
   \   0004A9   90....       MOV       DPTR,#rxNextLen
   \   0004AC   E0           MOVX      A,@DPTR
   \   0004AD   4001         JC        ??rxStartIsr_30
    819              {
    820                /* When security is enabled, read off security control field as well */
    821                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
    822              }
    823              else
    824              {
    825                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   0004AF   14           DEC       A
   \                     ??rxStartIsr_30:
   \   0004B0   906194       MOV       DPTR,#0x6194
   \   0004B3   F0           MOVX      @DPTR,A
    826              }
    827              pFuncRxState = &rxAddrIsr;
   \   0004B4   90....       MOV       DPTR,#pFuncRxState
   \   0004B7   74..         MOV       A,#`??rxAddrIsr::?relay` & 0xff
   \   0004B9   F0           MOVX      @DPTR,A
   \   0004BA   A3           INC       DPTR
   \   0004BB   74..         MOV       A,#(`??rxAddrIsr::?relay` >> 8) & 0xff
   \   0004BD   F0           MOVX      @DPTR,A
    828            }
    829          }
   \                     ??rxStartIsr_3:
   \   0004BE   7402         MOV       A,#0x2
   \   0004C0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004C3   7F07         MOV       R7,#0x7
   \   0004C5   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0004C8                REQUIRE RFST
   \   0004C8                REQUIRE _A_IEN0
   \   0004C8                REQUIRE S1CON
   \   0004C8                REQUIRE RFIRQF1
    830          
    831          
    832          /*=================================================================================================
    833           * @fn          rxAddrIsr
    834           *
    835           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    836           *              from the incoming packet.
    837           *
    838           * @param       none
    839           *
    840           * @return      none
    841           *=================================================================================================
    842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    843          static void rxAddrIsr(void)
   \                     rxAddrIsr:
    844          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    845            uint8 buf[MAX_ADDR_FIELDS_LEN];
    846            uint8 dstAddrMode;
    847            uint8 srcAddrMode;
    848          #ifdef FEATURE_MAC_SECURITY
    849            uint8 securityControl;
    850          #endif /* MAC_SECURITY */
    851            uint8  * p;
    852          
    853            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
   \   00000A   90....       MOV       DPTR,#rxNextLen
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   7003         JNZ       ??rxAddrIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    854          
    855            /*  read out address fields into local buffer in one shot */
    856            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \                     ??rxAddrIsr_0:
   \   000013                ; Setup parameters for call to function macMemReadRxFifo
   \   000013   90....       MOV       DPTR,#rxNextLen
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   AA..         MOV       R2,?XSP + 0
   \   00001A   AB..         MOV       R3,?XSP + 1
   \   00001C   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    857          
    858            /* set pointer to buffer with addressing fields */
    859            p = buf;
   \   00001F   A8..         MOV       R0,?XSP + 0
   \   000021   A9..         MOV       R1,?XSP + 1
   \   000023   88..         MOV       ?V0,R0
   \   000025   89..         MOV       ?V1,R1
   \   000027   AC..         MOV       R4,?V0
   \   000029   AD..         MOV       R5,?V1
    860          
    861            /* destination address */
    862            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \   00002B   90....       MOV       DPTR,#rxBuf + 2
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   13           RRC       A
   \   000030   13           RRC       A
   \   000031   543F         ANL       A,#0x3f
   \   000033   5403         ANL       A,#0x3
   \   000035   FE           MOV       R6,A
    863            if (dstAddrMode != SADDR_MODE_NONE)
   \   000036   7003         JNZ       $+5
   \   000038   02....       LJMP      ??rxAddrIsr_1 & 0xFFFF
    864            {
    865              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FA           MOV       R2,A
   \   000043   7401         MOV       A,#0x1
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F9           MOV       R1,A
   \   00004A   EA           MOV       A,R2
   \   00004B   F8           MOV       R0,A
   \   00004C   90....       MOV       DPTR,#pRxBuf
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FA           MOV       R2,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   CA           XCH       A,R2
   \   000054   242D         ADD       A,#0x2d
   \   000056   F582         MOV       DPL,A
   \   000058   E4           CLR       A
   \   000059   3A           ADDC      A,R2
   \   00005A   F583         MOV       DPH,A
   \   00005C   E8           MOV       A,R0
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   A3           INC       DPTR
   \   00005F   E9           MOV       A,R1
   \   000060   F0           MOVX      @DPTR,A
   \   000061   90....       MOV       DPTR,#pRxBuf
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F8           MOV       R0,A
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   C8           XCH       A,R0
   \   000069   242D         ADD       A,#0x2d
   \   00006B   F582         MOV       DPL,A
   \   00006D   E4           CLR       A
   \   00006E   38           ADDC      A,R0
   \   00006F   F583         MOV       DPH,A
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F8           MOV       R0,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F9           MOV       R1,A
   \   000076   90....       MOV       DPTR,#pRxBuf
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   FA           MOV       R2,A
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   CA           XCH       A,R2
   \   00007E   242B         ADD       A,#0x2b
   \   000080   F582         MOV       DPL,A
   \   000082   E4           CLR       A
   \   000083   3A           ADDC      A,R2
   \   000084   F583         MOV       DPH,A
   \   000086   E8           MOV       A,R0
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   E9           MOV       A,R1
   \   00008A   F0           MOVX      @DPTR,A
    866              p += MAC_PAN_ID_FIELD_LEN;
    867              if (dstAddrMode == SADDR_MODE_EXT)
   \   00008B   90....       MOV       DPTR,#pRxBuf
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   241C         ADD       A,#0x1c
   \   000091   FA           MOV       R2,A
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   3400         ADDC      A,#0x0
   \   000096   FB           MOV       R3,A
   \   000097   7403         MOV       A,#0x3
   \   000099   6E           XRL       A,R6
   \   00009A   7010         JNZ       ??rxAddrIsr_2
    868              {
    869                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
   \   00009C                ; Setup parameters for call to function sAddrExtCpy
   \   00009C   7402         MOV       A,#0x2
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   AC82         MOV       R4,DPL
   \   0000A3   AD83         MOV       R5,DPH
   \   0000A5   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    870                p += MAC_EXT_ADDR_FIELD_LEN;
   \   0000A8   740A         MOV       A,#0xa
   \   0000AA   8019         SJMP      ??rxAddrIsr_3
    871              }
    872              else
    873              {
    874                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_2:
   \   0000AC   7402         MOV       A,#0x2
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   FC           MOV       R4,A
   \   0000B3   7403         MOV       A,#0x3
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F9           MOV       R1,A
   \   0000BA   EC           MOV       A,R4
   \   0000BB   8A82         MOV       DPL,R2
   \   0000BD   8B83         MOV       DPH,R3
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E9           MOV       A,R1
   \   0000C2   F0           MOVX      @DPTR,A
    875                p += MAC_SHORT_ADDR_FIELD_LEN;
   \   0000C3   7404         MOV       A,#0x4
   \                     ??rxAddrIsr_3:
   \   0000C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C8   AC82         MOV       R4,DPL
   \   0000CA   AD83         MOV       R5,DPH
    876              }
    877            }
    878          
    879            /* sources address */
    880            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \                     ??rxAddrIsr_1:
   \   0000CC   90....       MOV       DPTR,#rxBuf + 2
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   C4           SWAP      A
   \   0000D1   13           RRC       A
   \   0000D2   13           RRC       A
   \   0000D3   5403         ANL       A,#0x3
   \   0000D5   FE           MOV       R6,A
    881            if (srcAddrMode != SADDR_MODE_NONE)
   \   0000D6   6064         JZ        ??rxAddrIsr_4
    882            {
    883              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
   \   0000D8   90....       MOV       DPTR,#pRxBuf
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   F8           MOV       R0,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   C8           XCH       A,R0
   \   0000E0   2407         ADD       A,#0x7
   \   0000E2   F582         MOV       DPL,A
   \   0000E4   E4           CLR       A
   \   0000E5   38           ADDC      A,R0
   \   0000E6   F583         MOV       DPH,A
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000EB   4027         JC        ??rxAddrIsr_5
    884              {
    885                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
   \   0000ED   8C82         MOV       DPL,R4
   \   0000EF   8D83         MOV       DPH,R5
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   FA           MOV       R2,A
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   F9           MOV       R1,A
   \   0000F6   EA           MOV       A,R2
   \   0000F7   F8           MOV       R0,A
   \   0000F8   90....       MOV       DPTR,#pRxBuf
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   FA           MOV       R2,A
   \   0000FD   A3           INC       DPTR
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   CA           XCH       A,R2
   \   000100   242B         ADD       A,#0x2b
   \   000102   F582         MOV       DPL,A
   \   000104   E4           CLR       A
   \   000105   3A           ADDC      A,R2
   \   000106   F583         MOV       DPH,A
   \   000108   E8           MOV       A,R0
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   E9           MOV       A,R1
   \   00010C   F0           MOVX      @DPTR,A
    886                p += MAC_PAN_ID_FIELD_LEN;
   \   00010D   EC           MOV       A,R4
   \   00010E   2402         ADD       A,#0x2
   \   000110   FC           MOV       R4,A
   \   000111   5001         JNC       ??rxAddrIsr_5
   \   000113   0D           INC       R5
    887              }
    888              if (srcAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_5:
   \   000114   90....       MOV       DPTR,#pRxBuf
   \   000117   E0           MOVX      A,@DPTR
   \   000118   2413         ADD       A,#0x13
   \   00011A   FA           MOV       R2,A
   \   00011B   A3           INC       DPTR
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   3400         ADDC      A,#0x0
   \   00011F   FB           MOV       R3,A
   \   000120   7403         MOV       A,#0x3
   \   000122   6E           XRL       A,R6
   \   000123   7005         JNZ       ??rxAddrIsr_6
    889              {
    890                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
   \   000125                ; Setup parameters for call to function sAddrExtCpy
   \   000125   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000128   8012         SJMP      ??rxAddrIsr_4
    891              }
    892              else
    893              {
    894                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_6:
   \   00012A   8C82         MOV       DPL,R4
   \   00012C   8D83         MOV       DPH,R5
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   FE           MOV       R6,A
   \   000130   A3           INC       DPTR
   \   000131   E0           MOVX      A,@DPTR
   \   000132   F9           MOV       R1,A
   \   000133   EE           MOV       A,R6
   \   000134   8A82         MOV       DPL,R2
   \   000136   8B83         MOV       DPH,R3
   \   000138   F0           MOVX      @DPTR,A
   \   000139   A3           INC       DPTR
   \   00013A   E9           MOV       A,R1
   \   00013B   F0           MOVX      @DPTR,A
    895              }
    896            }
    897          
    898          #ifdef FEATURE_MAC_SECURITY
    899            if (MAC_SEC_ENABLED(&rxBuf[1]))
    900            {
    901              uint8 keyIdMode;
    902          
    903              if (MAC_FRAME_VERSION(&rxBuf[1]) == 0)
    904              {
    905                /* MAC_UNSUPPORTED_LEGACY - Cancel the outgoing TX ACK.
    906                 * It may be too late but we have to try.
    907                 */
    908                MAC_RADIO_CANCEL_TX_ACK();
    909          
    910                /* clean up after unsupported security legacy */
    911                macRxHaltCleanup();
    912                return;
    913              }
    914          
    915              /* Copy addressing fields to RX buffer */
    916              osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
    917              pRxBuf->mhr.p   += rxNextLen;
    918              pRxBuf->mhr.len += rxNextLen;
    919          
    920              /*-------------------------------------------------------------------------------
    921               *  Prepare for auxiliary security header interrupts.
    922               */
    923          
    924              /* read out security control field from FIFO (threshold set so bytes are guaranteed to be there) */
    925              MAC_RADIO_READ_RX_FIFO(&securityControl, MAC_SEC_CONTROL_FIELD_LEN);
    926          
    927              /* Copy security fields to MHR buffer */
    928              *pRxBuf->mhr.p   = securityControl;
    929              pRxBuf->mhr.p   += MAC_SEC_CONTROL_FIELD_LEN;
    930              pRxBuf->mhr.len += MAC_SEC_CONTROL_FIELD_LEN;
    931          
    932              /* store security level and key ID mode */
    933              pRxBuf->sec.securityLevel = SECURITY_LEVEL(securityControl);
    934              pRxBuf->sec.keyIdMode = keyIdMode = KEY_IDENTIFIER_MODE(securityControl);
    935          
    936              /* Corrupted RX frame, should never occur. */
    937              if ((keyIdMode > MAC_KEY_ID_MODE_8)
    938              /* Get the next RX length according to AuxLen table minus security control field.
    939               * The security control length is counted already.
    940               */
    941              || ((macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN) >= rxPayloadLen)
    942              /* Security Enabled subfield is one, but the Security Level in the header is zero:
    943               * MAC_UNSUPPORTED_SECURITY - Cancel the outgoing TX ACK.
    944               */
    945              || (pRxBuf->sec.securityLevel == MAC_SEC_LEVEL_NONE))
    946              {
    947                /* It may be too late but we have to try. */
    948                MAC_RADIO_CANCEL_TX_ACK();
    949          
    950                /* clean up after unsupported security or corrupted RX frame. */
    951                macRxHaltCleanup();
    952                return;
    953              }
    954          
    955              /* get the next RX length according to AuxLen table minus security control field.
    956               * The sceurity control length is counted already.
    957               */
    958              rxNextLen = macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN;
    959              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
    960              pFuncRxState = &rxSecurityHdrIsr;
    961            }
    962            else
    963          #endif /* MAC_SECURITY */
    964            {
    965              /* clear security level */
    966              pRxBuf->sec.securityLevel = MAC_SEC_LEVEL_NONE;
   \                     ??rxAddrIsr_4:
   \   00013C   90....       MOV       DPTR,#pRxBuf
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   F8           MOV       R0,A
   \   000141   A3           INC       DPTR
   \   000142   E0           MOVX      A,@DPTR
   \   000143   C8           XCH       A,R0
   \   000144   2410         ADD       A,#0x10
   \   000146   F582         MOV       DPL,A
   \   000148   E4           CLR       A
   \   000149   38           ADDC      A,R0
   \   00014A   F583         MOV       DPH,A
   \   00014C   E4           CLR       A
   \   00014D   F0           MOVX      @DPTR,A
    967          
    968              /*-------------------------------------------------------------------------------
    969               *  Prepare for payload interrupts.
    970               */
    971              pFuncRxState = &rxPayloadIsr;
   \   00014E   90....       MOV       DPTR,#pFuncRxState
   \   000151   74..         MOV       A,#`??rxPayloadIsr::?relay` & 0xff
   \   000153   F0           MOVX      @DPTR,A
   \   000154   A3           INC       DPTR
   \   000155   74..         MOV       A,#(`??rxPayloadIsr::?relay` >> 8) & 0xff
   \   000157   F0           MOVX      @DPTR,A
    972              rxPrepPayload();
   \   000158                ; Setup parameters for call to function rxPrepPayload
   \   000158   12....       LCALL     `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
    973            }
    974          }
   \   00015B   7414         MOV       A,#0x14
   \   00015D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000160   7F02         MOV       R7,#0x2
   \   000162   02....       LJMP      ?BANKED_LEAVE_XDATA
    975          
    976          
    977          #ifdef FEATURE_MAC_SECURITY
    978          /*=================================================================================================
    979           * @fn          rxSecurityHdrIsr
    980           *
    981           * @brief       Receive ISR state for reading out and storing the auxiliary security header.
    982           *
    983           * @param       none
    984           *
    985           * @return      none
    986           *=================================================================================================
    987           */
    988          static void rxSecurityHdrIsr(void)
    989          {
    990            uint8 buf[MAC_FRAME_COUNTER_LEN + MAC_KEY_ID_8_LEN];
    991          
    992            /* read out frame counter and key ID */
    993            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
    994          
    995            /* Incoming frame counter */
    996            pRxBuf->frameCounter = BUILD_UINT32(buf[0], buf[1], buf[2], buf[3]);
    997            if (rxNextLen - MAC_FRAME_COUNTER_LEN > 0)
    998            {
    999              /* Explicit mode */
   1000              osal_memcpy(pRxBuf->sec.keySource, &buf[MAC_FRAME_COUNTER_LEN], rxNextLen - MAC_FRAME_COUNTER_LEN - 1);
   1001              pRxBuf->sec.keyIndex = buf[rxNextLen - MAC_KEY_INDEX_LEN];
   1002            }
   1003          
   1004            /* Copy security fields to RX buffer */
   1005            osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
   1006            pRxBuf->mhr.p   += rxNextLen;
   1007            pRxBuf->mhr.len += rxNextLen;
   1008          
   1009            /* Update payload pointer and payload length. The rxPayloadLen includes security header length
   1010             * and SCF byte. The security header and SCF length must be deducted from the rxPayloadLen.
   1011             */
   1012            rxPayloadLen    -= (rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
   1013            pRxBuf->msdu.len = rxPayloadLen;
   1014            pRxBuf->mhr.len += rxPayloadLen;
   1015          
   1016            /*-------------------------------------------------------------------------------
   1017             *  Prepare for payload interrupts.
   1018             */
   1019            pFuncRxState = &rxPayloadIsr;
   1020            rxPrepPayload();
   1021          }
   1022          #endif /* MAC_SECURITY */
   1023          
   1024          
   1025          /*=================================================================================================
   1026           * @fn          rxPrepPayload
   1027           *
   1028           * @brief       Common code to prepare for the payload ISR.
   1029           *
   1030           * @param       none
   1031           *
   1032           * @return      none
   1033           *=================================================================================================
   1034           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1035          static void rxPrepPayload(void)
   \                     rxPrepPayload:
   1036          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1037            if (rxPayloadLen == 0)
   \   000004   90....       MOV       DPTR,#rxPayloadLen
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7011         JNZ       ??rxPrepPayload_0
   1038            {
   1039              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
   \   00000A   906194       MOV       DPTR,#0x6194
   \   00000D   7401         MOV       A,#0x1
   \   00000F   F0           MOVX      @DPTR,A
   1040              pFuncRxState = &rxFcsIsr;
   \   000010   90....       MOV       DPTR,#pFuncRxState
   \   000013   74..         MOV       A,#`??rxFcsIsr::?relay` & 0xff
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   74..         MOV       A,#(`??rxFcsIsr::?relay` >> 8) & 0xff
   \   000019   8017         SJMP      ??rxPrepPayload_1
   1041            }
   1042            else
   1043            {
   1044              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxPrepPayload_0:
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C3           CLR       C
   \   00001D   9410         SUBB      A,#0x10
   \   00001F   5006         JNC       ??rxPrepPayload_2
   \   000021   E0           MOVX      A,@DPTR
   \   000022   90....       MOV       DPTR,#rxNextLen
   \   000025   8005         SJMP      ??rxPrepPayload_3
   \                     ??rxPrepPayload_2:
   \   000027   90....       MOV       DPTR,#rxNextLen
   \   00002A   7410         MOV       A,#0x10
   \                     ??rxPrepPayload_3:
   \   00002C   F0           MOVX      @DPTR,A
   1045              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   14           DEC       A
   \   00002F   906194       MOV       DPTR,#0x6194
   \                     ??rxPrepPayload_1:
   \   000032   F0           MOVX      @DPTR,A
   1046            }
   1047          }
   \   000033   D083         POP       DPH
   \   000035   D082         POP       DPL
   \   000037   02....       LJMP      ?BRET
   1048          
   1049          
   1050          /*=================================================================================================
   1051           * @fn          rxPayloadIsr
   1052           *
   1053           * @brief       Receive ISR state for reading out and storing the packet payload.
   1054           *
   1055           * @param       none
   1056           *
   1057           * @return      none
   1058           *=================================================================================================
   1059           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1060          static void rxPayloadIsr(void)
   \                     rxPayloadIsr:
   1061          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1062            MAC_RADIO_READ_RX_FIFO(pRxBuf->mhr.p, rxNextLen);
   \   000004                ; Setup parameters for call to function macMemReadRxFifo
   \   000004   90....       MOV       DPTR,#rxNextLen
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   90....       MOV       DPTR,#pRxBuf
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   C8           XCH       A,R0
   \   000011   2433         ADD       A,#0x33
   \   000013   F582         MOV       DPL,A
   \   000015   E4           CLR       A
   \   000016   38           ADDC      A,R0
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FA           MOV       R2,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FB           MOV       R3,A
   \   00001E   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1063            pRxBuf->mhr.p += rxNextLen;
   \   000021   90....       MOV       DPTR,#pRxBuf
   \   000024   E0           MOVX      A,@DPTR
   \   000025   2433         ADD       A,#0x33
   \   000027   F8           MOV       R0,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   3400         ADDC      A,#0x0
   \   00002C   F9           MOV       R1,A
   \   00002D   90....       MOV       DPTR,#rxNextLen
   \   000030   E0           MOVX      A,@DPTR
   \   000031   FA           MOV       R2,A
   \   000032   8882         MOV       DPL,R0
   \   000034   8983         MOV       DPH,R1
   \   000036   E0           MOVX      A,@DPTR
   \   000037   2A           ADD       A,R2
   \   000038   FA           MOV       R2,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   3400         ADDC      A,#0x0
   \   00003D   FB           MOV       R3,A
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   EA           MOV       A,R2
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \   000045   EB           MOV       A,R3
   \   000046   F0           MOVX      @DPTR,A
   1064          
   1065            rxPayloadLen -= rxNextLen;
   \   000047   90....       MOV       DPTR,#rxNextLen
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F8           MOV       R0,A
   \   00004C   90....       MOV       DPTR,#rxPayloadLen
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   C3           CLR       C
   \   000051   98           SUBB      A,R0
   \   000052   F0           MOVX      @DPTR,A
   1066          
   1067            rxPrepPayload();
   \   000053                ; Setup parameters for call to function rxPrepPayload
   \   000053   12....       LCALL     `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
   1068          }
   \   000056   D083         POP       DPH
   \   000058   D082         POP       DPL
   \   00005A   02....       LJMP      ?BRET
   1069          
   1070          
   1071          /*=================================================================================================
   1072           * @fn          rxFcsIsr
   1073           *
   1074           * @brief       Receive ISR state for handling the FCS.
   1075           *
   1076           * @param       none
   1077           *
   1078           * @return      none
   1079           *=================================================================================================
   1080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1081          static void rxFcsIsr(void)
   \                     rxFcsIsr:
   1082          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1083            uint8 crcOK;
   1084            uint8 ackWithPending = 0;
   \   000005   7E00         MOV       R6,#0x0
   1085          
   1086            /* read FCS, rxBuf is now available storage */
   1087            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
   \   000007                ; Setup parameters for call to function macMemReadRxFifo
   \   000007   7902         MOV       R1,#0x2
   \   000009   7A..         MOV       R2,#rxBuf & 0xff
   \   00000B   7B..         MOV       R3,#(rxBuf >> 8) & 0xff
   \   00000D   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1088          
   1089            /*
   1090             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
   1091             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
   1092             *    1) the RSSI value
   1093             *    2) the average correlation value (used for LQI)
   1094             *    3) a CRC passed bit
   1095             */
   1096          
   1097            /* save the "CRC-is-OK" status */
   1098            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
   \   000010   90....       MOV       DPTR,#rxBuf + 1
   \   000013   E0           MOVX      A,@DPTR
   \   000014   5480         ANL       A,#0x80
   \   000016   F5..         MOV       ?V1,A
   1099          
   1100            /*
   1101             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
   1102             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
   1103             *  a special variant of promiscuous mode is active.
   1104             */
   1105            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
   \   000018   700B         JNZ       ??rxFcsIsr_0
   \   00001A   90....       MOV       DPTR,#rxPromiscuousMode
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6402         XRL       A,#0x2
   \   000020   6003         JZ        $+5
   \   000022   02....       LJMP      ??rxFcsIsr_1 & 0xFFFF
   1106            {
   1107              int8 rssiDbm;
   1108              uint8 corr;
   1109          
   1110          #ifdef FEATURE_SYSTEM_STATS
   1111              /* Increment diagnostic CRC success counter */
   1112              macLowLevelDiags( MAC_DIAGS_RX_CRC_PASS );
   1113          #endif /* FEATURE_SYSTEM_STATS */
   1114          
   1115              /*
   1116               *  As power saving optimization, set state variable to indicate physical receive
   1117               *  has completed and then request turning of the receiver.  This means the receiver
   1118               *  can be off (if other conditions permit) during execution of the callback function.
   1119               *
   1120               *  The receiver will be requested to turn off once again at the end of the receive
   1121               *  logic.  There is no harm in doing this.
   1122               */
   1123              macRxActive = MAC_RX_ACTIVE_DONE;
   \                     ??rxFcsIsr_0:
   \   000025   90....       MOV       DPTR,#macRxActive
   \   000028   7402         MOV       A,#0x2
   \   00002A   F0           MOVX      @DPTR,A
   1124              macRxOffRequest();
   \   00002B                ; Setup parameters for call to function macRxOffRequest
   \   00002B   12....       LCALL     `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1125          
   1126              /* decode RSSI and correlation values */
   1127              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
   \   00002E   90....       MOV       DPTR,#rxBuf
   \   000031   E0           MOVX      A,@DPTR
   \   000032   24B7         ADD       A,#-0x49
   \   000034   F5..         MOV       ?V0,A
   1128              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
   1129              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   547F         ANL       A,#0x7f
   \   00003A   FF           MOV       R7,A
   1130          
   1131              /* record parameters that get passed up to high-level */
   1132              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   00003B                ; Setup parameters for call to function macRadioComputeLQI
   \   00003B   FA           MOV       R2,A
   \   00003C   A9..         MOV       R1,?V0
   \   00003E   12....       LCALL     `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   000041   E9           MOV       A,R1
   \   000042   C0E0         PUSH      A
   \   000044   90....       MOV       DPTR,#pRxBuf
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F8           MOV       R0,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   C8           XCH       A,R0
   \   00004C   242F         ADD       A,#0x2f
   \   00004E   F582         MOV       DPL,A
   \   000050   E4           CLR       A
   \   000051   38           ADDC      A,R0
   \   000052   F583         MOV       DPH,A
   \   000054   D0E0         POP       A
   \   000056   F0           MOVX      @DPTR,A
   1133              pRxBuf->mac.rssi = rssiDbm;
   \   000057   90....       MOV       DPTR,#pRxBuf
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F8           MOV       R0,A
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   C8           XCH       A,R0
   \   00005F   2431         ADD       A,#0x31
   \   000061   F582         MOV       DPL,A
   \   000063   E4           CLR       A
   \   000064   38           ADDC      A,R0
   \   000065   F583         MOV       DPH,A
   \   000067   E5..         MOV       A,?V0
   \   000069   F0           MOVX      @DPTR,A
   1134              pRxBuf->mac.correlation = corr;
   \   00006A   EF           MOV       A,R7
   \   00006B   C0E0         PUSH      A
   \   00006D   90....       MOV       DPTR,#pRxBuf
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F8           MOV       R0,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   C8           XCH       A,R0
   \   000075   2430         ADD       A,#0x30
   \   000077   F582         MOV       DPL,A
   \   000079   E4           CLR       A
   \   00007A   38           ADDC      A,R0
   \   00007B   F583         MOV       DPH,A
   \   00007D   D0E0         POP       A
   \   00007F   F0           MOVX      @DPTR,A
   1135          
   1136              /* set the MSDU pointer to point at start of data */
   1137              pRxBuf->mhr.p   = (uint8 *) (pRxBuf + 1);
   \   000080   90....       MOV       DPTR,#pRxBuf
   \   000083   E0           MOVX      A,@DPTR
   \   000084   243A         ADD       A,#0x3a
   \   000086   F8           MOV       R0,A
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   3400         ADDC      A,#0x0
   \   00008B   F9           MOV       R1,A
   \   00008C   90....       MOV       DPTR,#pRxBuf
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   FA           MOV       R2,A
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   CA           XCH       A,R2
   \   000094   2433         ADD       A,#0x33
   \   000096   F582         MOV       DPL,A
   \   000098   E4           CLR       A
   \   000099   3A           ADDC      A,R2
   \   00009A   F583         MOV       DPH,A
   \   00009C   E8           MOV       A,R0
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   A3           INC       DPTR
   \   00009F   E9           MOV       A,R1
   \   0000A0   F0           MOVX      @DPTR,A
   1138              pRxBuf->msdu.p += (pRxBuf->mhr.len - pRxBuf->msdu.len);
   \   0000A1   90....       MOV       DPTR,#pRxBuf
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   2402         ADD       A,#0x2
   \   0000A7   F8           MOV       R0,A
   \   0000A8   A3           INC       DPTR
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   3400         ADDC      A,#0x0
   \   0000AC   F9           MOV       R1,A
   \   0000AD   90....       MOV       DPTR,#pRxBuf
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   FA           MOV       R2,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   CA           XCH       A,R2
   \   0000B5   2435         ADD       A,#0x35
   \   0000B7   F582         MOV       DPL,A
   \   0000B9   E4           CLR       A
   \   0000BA   3A           ADDC      A,R2
   \   0000BB   F583         MOV       DPH,A
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   FA           MOV       R2,A
   \   0000BF   90....       MOV       DPTR,#pRxBuf
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   FC           MOV       R4,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   F583         MOV       DPH,A
   \   0000C8   8C82         MOV       DPL,R4
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   FC           MOV       R4,A
   \   0000D0   EA           MOV       A,R2
   \   0000D1   C3           CLR       C
   \   0000D2   9C           SUBB      A,R4
   \   0000D3   FA           MOV       R2,A
   \   0000D4   95E0         SUBB      A,0xE0 /* A   */
   \   0000D6   FB           MOV       R3,A
   \   0000D7   8882         MOV       DPL,R0
   \   0000D9   8983         MOV       DPH,R1
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   2A           ADD       A,R2
   \   0000DD   FA           MOV       R2,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   3B           ADDC      A,R3
   \   0000E1   FB           MOV       R3,A
   \   0000E2   8882         MOV       DPL,R0
   \   0000E4   8983         MOV       DPH,R1
   \   0000E6   EA           MOV       A,R2
   \   0000E7   F0           MOVX      @DPTR,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   EB           MOV       A,R3
   \   0000EA   F0           MOVX      @DPTR,A
   1139          
   1140              if ((pRxBuf->internal.flags & MAC_RX_FLAG_ACK_PENDING) && (*pRxBuf->msdu.p != MAC_DATA_REQ_FRAME))
   \   0000EB   90....       MOV       DPTR,#pRxBuf
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   F8           MOV       R0,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   C8           XCH       A,R0
   \   0000F3   2407         ADD       A,#0x7
   \   0000F5   F582         MOV       DPL,A
   \   0000F7   E4           CLR       A
   \   0000F8   38           ADDC      A,R0
   \   0000F9   F583         MOV       DPH,A
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000FE   5021         JNC       ??rxFcsIsr_2
   \   000100   90....       MOV       DPTR,#pRxBuf
   \   000103   E0           MOVX      A,@DPTR
   \   000104   F8           MOV       R0,A
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   F583         MOV       DPH,A
   \   000109   8882         MOV       DPL,R0
   \   00010B   A3           INC       DPTR
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   F8           MOV       R0,A
   \   00010F   A3           INC       DPTR
   \   000110   E0           MOVX      A,@DPTR
   \   000111   F583         MOV       DPH,A
   \   000113   8882         MOV       DPL,R0
   \   000115   E0           MOVX      A,@DPTR
   \   000116   6404         XRL       A,#0x4
   \   000118   6007         JZ        ??rxFcsIsr_2
   1141              {
   1142                /* For non-data request commands, cancel the pending bit in the ACK. */
   1143                MAC_RADIO_TX_ACK();
   \   00011A   90618A       MOV       DPTR,#0x618a
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   C2E2         CLR       0xE0 /* A   */.2
   \   000120   F0           MOVX      @DPTR,A
   1144              }
   1145          
   1146              /* Read the source matching result back */
   1147              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
   \                     ??rxFcsIsr_2:
   \   000121   90....       MOV       DPTR,#macSrcMatchIsEnabled
   \   000124   E0           MOVX      A,@DPTR
   \   000125   6008         JZ        ??rxFcsIsr_3
   \   000127                ; Setup parameters for call to function MAC_SrcMatchCheckResult
   \   000127   12....       LCALL     `??MAC_SrcMatchCheckResult::?relay`; Banked call to: MAC_SrcMatchCheckResult
   \   00012A   E9           MOV       A,R1
   \   00012B   6002         JZ        ??rxFcsIsr_3
   1148              {
   1149                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
   1150                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   00012D   7E04         MOV       R6,#0x4
   1151              }
   1152              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
   \                     ??rxFcsIsr_3:
   \   00012F   E5..         MOV       A,?V1
   \   000131   4E           ORL       A,R6
   \   000132   F8           MOV       R0,A
   \   000133   90....       MOV       DPTR,#pRxBuf
   \   000136   E0           MOVX      A,@DPTR
   \   000137   F9           MOV       R1,A
   \   000138   A3           INC       DPTR
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   C9           XCH       A,R1
   \   00013B   2407         ADD       A,#0x7
   \   00013D   F582         MOV       DPL,A
   \   00013F   E4           CLR       A
   \   000140   39           ADDC      A,R1
   \   000141   F583         MOV       DPH,A
   \   000143   E0           MOVX      A,@DPTR
   \   000144   48           ORL       A,R0
   \   000145   F0           MOVX      @DPTR,A
   1153          
   1154              /* finally... execute callback function */
   1155              macRxCompleteCallback(pRxBuf);
   \   000146                ; Setup parameters for call to function macRxCompleteCallback
   \   000146   90....       MOV       DPTR,#pRxBuf
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   FA           MOV       R2,A
   \   00014B   A3           INC       DPTR
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   FB           MOV       R3,A
   \   00014E   12....       LCALL     `??macRxCompleteCallback::?relay`; Banked call to: macRxCompleteCallback
   1156              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \   000151   8013         SJMP      ??rxFcsIsr_4
   1157            }
   1158            else
   1159            {
   1160          #ifdef FEATURE_SYSTEM_STATS
   1161              /* Increment diagnostic CRC failure counter */
   1162              macLowLevelDiags( MAC_DIAGS_RX_CRC_FAIL );
   1163          #endif /* FEATURE_SYSTEM_STATS */
   1164          
   1165              /*
   1166               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
   1167               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
   1168               *  slightly more efficient to do so.)
   1169               */
   1170              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \                     ??rxFcsIsr_1:
   \   000153   9061A4       MOV       DPTR,#0x61a4
   \   000156   E0           MOVX      A,@DPTR
   \   000157   C2E0         CLR       0xE0 /* A   */.0
   \   000159   F0           MOVX      @DPTR,A
   1171              macRxOutgoingAckFlag = 0;
   \   00015A   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00015D   E4           CLR       A
   \   00015E   F0           MOVX      @DPTR,A
   1172          
   1173              /* the CRC failed so the packet must be discarded */
   1174              MEM_FREE((uint8 **)&pRxBuf);
   \   00015F                ; Setup parameters for call to function macDataRxMemFree
   \   00015F   7A..         MOV       R2,#pRxBuf & 0xff
   \   000161   7B..         MOV       R3,#(pRxBuf >> 8) & 0xff
   \   000163   12....       LCALL     `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
   1175              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
   \                     ??rxFcsIsr_4:
   \   000166   90....       MOV       DPTR,#pRxBuf
   \   000169   E4           CLR       A
   \   00016A   F0           MOVX      @DPTR,A
   \   00016B   A3           INC       DPTR
   \   00016C   F0           MOVX      @DPTR,A
   1176            }
   1177          
   1178            /* reset threshold level, reset receive state, and complete receive logic */
   1179            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00016D   906194       MOV       DPTR,#0x6194
   \   000170   7405         MOV       A,#0x5
   \   000172   F0           MOVX      @DPTR,A
   1180            pFuncRxState = &rxStartIsr;
   \   000173   90....       MOV       DPTR,#pFuncRxState
   \   000176   74..         MOV       A,#`??rxStartIsr::?relay` & 0xff
   \   000178   F0           MOVX      @DPTR,A
   \   000179   A3           INC       DPTR
   \   00017A   74..         MOV       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   00017C   F0           MOVX      @DPTR,A
   1181            rxDone();
   \   00017D                ; Setup parameters for call to function rxDone
   \   00017D   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
   1182          }
   \   000180   7F02         MOV       R7,#0x2
   \   000182   02....       LJMP      ?BANKED_LEAVE_XDATA
   1183          
   1184          
   1185          /*=================================================================================================
   1186           * @fn          rxDone
   1187           *
   1188           * @brief       Common exit point for receive.
   1189           *
   1190           * @param       none
   1191           *
   1192           * @return      none
   1193           *=================================================================================================
   1194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1195          static void rxDone(void)
   \                     rxDone:
   1196          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1197            /* if the receive FIFO has overflowed, flush it here */
   1198            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
   \   000004   906193       MOV       DPTR,#0x6193
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E6         MOV       C,0xE0 /* A   */.6
   \   00000A   500B         JNC       ??rxDone_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   A2E7         MOV       C,0xE0 /* A   */.7
   \   00000F   4006         JC        ??rxDone_0
   1199            {
   1200              MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV       0xe1,#-0x13
   \   000014   75E1ED       MOV       0xe1,#-0x13
   1201            }
   1202          
   1203            /* mark receive as inactive */
   1204            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxDone_0:
   \   000017   90....       MOV       DPTR,#macRxActive
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   1205          
   1206            /* if there is no outgoing ACK, run the post receive updates */
   1207            if (!macRxOutgoingAckFlag)
   \   00001C   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   7003         JNZ       ??rxDone_1
   1208            {
   1209              rxPostRxUpdates();
   \   000022                ; Setup parameters for call to function rxPostRxUpdates
   \   000022   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
   1210            }
   1211          }
   \                     ??rxDone_1:
   \   000025   D083         POP       DPH
   \   000027   D082         POP       DPL
   \   000029   02....       LJMP      ?BRET
   \   00002C                REQUIRE RFST
   1212          
   1213          
   1214          /**************************************************************************************************
   1215           * @fn          macRxAckTxDoneCallback
   1216           *
   1217           * @brief       Function called when the outoing ACK has completed transmitting.
   1218           *
   1219           * @param       none
   1220           *
   1221           * @return      none
   1222           **************************************************************************************************
   1223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1224          void macRxAckTxDoneCallback(void)
   \                     macRxAckTxDoneCallback:
   1225          {  
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1226            macRxOutgoingAckFlag = 0;
   \   000004   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   1227          
   1228          #ifdef ACK_DONE_ISR_WORKAROUND
   1229            macTimerCancel(&macTxAckIsrTimer);
   1230          #endif /* ACK_DONE_ISR_WROKAROUND */
   1231          
   1232            /*
   1233             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1234             *  could be executed before the primary receive logic completes.  To prevent this, the
   1235             *  post updates are only executed if receive logic is no longer active.  In the case the
   1236             *  post updates are not executed here, they will execute when the main receive logic
   1237             *  completes.
   1238             */
   1239            if (!macRxActive)
   \   000009   90....       MOV       DPTR,#macRxActive
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   7003         JNZ       ??macRxAckTxDoneCallback_0
   1240            {
   1241              rxPostRxUpdates();
   \   00000F                ; Setup parameters for call to function rxPostRxUpdates
   \   00000F   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
   1242            }
   1243          }
   \                     ??macRxAckTxDoneCallback_0:
   \   000012   D083         POP       DPH
   \   000014   D082         POP       DPL
   \   000016   02....       LJMP      ?BRET
   1244          
   1245          
   1246          /*=================================================================================================
   1247           * @fn          rxPostRxUpdates
   1248           *
   1249           * @brief       Updates that need to be performed once receive is complete.
   1250           *
   1251           *              It is not fatal to execute this function if somehow receive is active.  Under
   1252           *              certain timing/interrupt conditions a new receive may have started before this
   1253           *              function executes.  This should happen very rarely (if it happens at all) and
   1254           *              would cause no problems.
   1255           *
   1256           * @param       none
   1257           *
   1258           * @return      none
   1259           *=================================================================================================
   1260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          static void rxPostRxUpdates(void)
   \                     rxPostRxUpdates:
   1262          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1263            /* turn off receiver if permitted */
   1264            macRxOffRequest();
   \   000004                ; Setup parameters for call to function macRxOffRequest
   \   000004   12....       LCALL     `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1265          
   1266            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1267            macRadioUpdateTxPower();
   \   000007                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000007   12....       LCALL     `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   1268          
   1269            /* initiate and transmit that was queued during receive */
   1270            macTxStartQueuedFrame();
   \   00000A                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00000A   12....       LCALL     `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
   1271          }
   \   00000D   D083         POP       DPH
   \   00000F   D082         POP       DPL
   \   000011   02....       LJMP      ?BRET
   1272          
   1273          
   1274          /*=================================================================================================
   1275           * @fn          rxDiscardFrame
   1276           *
   1277           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1278           *
   1279           * @param       none
   1280           *
   1281           * @return      none
   1282           *=================================================================================================
   1283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1284          static void rxDiscardFrame(void)
   \                     rxDiscardFrame:
   1285          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1286            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   \   000004   90....       MOV       DPTR,#pFuncRxState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   64..         XRL       A,#`??rxStartIsr::?relay` & 0xff
   \   00000A   7004         JNZ       ??rxDiscardFrame_0
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   64..         XRL       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \                     ??rxDiscardFrame_0:
   \   000010   6003         JZ        ??rxDiscardFrame_1
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1287          
   1288            if (rxUnreadLen == 0)
   \                     ??rxDiscardFrame_1:
   \   000015   90....       MOV       DPTR,#rxUnreadLen
   \   000018   E0           MOVX      A,@DPTR
   \   000019   7005         JNZ       ??rxDiscardFrame_2
   1289            {
   1290              rxDone();
   \   00001B                ; Setup parameters for call to function rxDone
   \   00001B   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
   \   00001E   8022         SJMP      ??rxDiscardFrame_3
   1291            }
   1292            else
   1293            {
   1294              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxDiscardFrame_2:
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C3           CLR       C
   \   000022   9410         SUBB      A,#0x10
   \   000024   5006         JNC       ??rxDiscardFrame_4
   \   000026   E0           MOVX      A,@DPTR
   \   000027   90....       MOV       DPTR,#rxNextLen
   \   00002A   8005         SJMP      ??rxDiscardFrame_5
   \                     ??rxDiscardFrame_4:
   \   00002C   90....       MOV       DPTR,#rxNextLen
   \   00002F   7410         MOV       A,#0x10
   \                     ??rxDiscardFrame_5:
   \   000031   F0           MOVX      @DPTR,A
   1295              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000032   E0           MOVX      A,@DPTR
   \   000033   14           DEC       A
   \   000034   906194       MOV       DPTR,#0x6194
   \   000037   F0           MOVX      @DPTR,A
   1296              pFuncRxState = &rxDiscardIsr;
   \   000038   90....       MOV       DPTR,#pFuncRxState
   \   00003B   74..         MOV       A,#`??rxDiscardIsr::?relay` & 0xff
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   74..         MOV       A,#(`??rxDiscardIsr::?relay` >> 8) & 0xff
   \   000041   F0           MOVX      @DPTR,A
   1297            }
   1298          }
   \                     ??rxDiscardFrame_3:
   \   000042   D083         POP       DPH
   \   000044   D082         POP       DPL
   \   000046   02....       LJMP      ?BRET
   1299          
   1300          
   1301          /*=================================================================================================
   1302           * @fn          rxDiscardIsr
   1303           *
   1304           * @brief       Receive ISR state for discarding a packet.
   1305           *
   1306           * @param       none
   1307           *
   1308           * @return      none
   1309           *=================================================================================================
   1310           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1311          static void rxDiscardIsr(void)
   \                     rxDiscardIsr:
   1312          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 16
   \   000004   74F0         MOV       A,#-0x10
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1313            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1314          
   1315            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \   000009                ; Setup parameters for call to function macMemReadRxFifo
   \   000009   90....       MOV       DPTR,#rxNextLen
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   AA..         MOV       R2,?XSP + 0
   \   000010   AB..         MOV       R3,?XSP + 1
   \   000012   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1316            rxUnreadLen -= rxNextLen;
   \   000015   90....       MOV       DPTR,#rxNextLen
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   90....       MOV       DPTR,#rxUnreadLen
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   C3           CLR       C
   \   00001F   98           SUBB      A,R0
   \   000020   F0           MOVX      @DPTR,A
   1317          
   1318            /* read out and discard bytes until all bytes of packet are disposed of */
   1319            if (rxUnreadLen != 0)
   \   000021   E0           MOVX      A,@DPTR
   \   000022   6013         JZ        ??rxDiscardIsr_0
   1320            {
   1321              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   \   000024   E0           MOVX      A,@DPTR
   \   000025   C3           CLR       C
   \   000026   9410         SUBB      A,#0x10
   \   000028   5020         JNC       ??rxDiscardIsr_1
   1322              {
   1323                rxNextLen = rxUnreadLen;
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   90....       MOV       DPTR,#rxNextLen
   \   00002E   F0           MOVX      @DPTR,A
   1324                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   14           DEC       A
   \   000031   906194       MOV       DPTR,#0x6194
   \   000034   F0           MOVX      @DPTR,A
   \   000035   8013         SJMP      ??rxDiscardIsr_1
   1325              }
   1326            }
   1327            else
   1328            {
   1329              /* reset threshold level, reset receive state, and complete receive logic */
   1330              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxDiscardIsr_0:
   \   000037   906194       MOV       DPTR,#0x6194
   \   00003A   7405         MOV       A,#0x5
   \   00003C   F0           MOVX      @DPTR,A
   1331              pFuncRxState = &rxStartIsr;
   \   00003D   90....       MOV       DPTR,#pFuncRxState
   \   000040   74..         MOV       A,#`??rxStartIsr::?relay` & 0xff
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   74..         MOV       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000046   F0           MOVX      @DPTR,A
   1332              rxDone();
   \   000047                ; Setup parameters for call to function rxDone
   \   000047   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
   1333            }
   1334          }
   \                     ??rxDiscardIsr_1:
   \   00004A   7410         MOV       A,#0x10
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004F   D083         POP       DPH
   \   000051   D082         POP       DPL
   \   000053   02....       LJMP      ?BRET
   1335          
   1336          
   1337          /**************************************************************************************************
   1338           * @fn          macRxFifoOverflowIsr
   1339           *
   1340           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1341           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1342           *              It simply halts and cleanup the RX.
   1343           *
   1344           * @param       none
   1345           *
   1346           * @return      none
   1347           **************************************************************************************************
   1348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1349          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   \                     macRxFifoOverflowIsr:
   1350          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1351            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   \   000004   90....       MOV       DPTR,#rxFifoOverflowCount
   \   000007   E0           MOVX      A,@DPTR
   \   000008   04           INC       A
   \   000009   F0           MOVX      @DPTR,A
   1352            macRxHaltCleanup();
   \   00000A                ; Setup parameters for call to function macRxHaltCleanup
   \   00000A   12....       LCALL     `??macRxHaltCleanup::?relay`; Banked call to: macRxHaltCleanup
   1353          }
   \   00000D   D083         POP       DPH
   \   00000F   D082         POP       DPL
   \   000011   02....       LJMP      ?BRET
   1354          
   1355          
   1356          /**************************************************************************************************
   1357           * @fn          macRxPromiscuousMode
   1358           *
   1359           * @brief       Sets promiscuous mode - enabling or disabling it.
   1360           *
   1361           * @param       none
   1362           *
   1363           * @return      none
   1364           **************************************************************************************************
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   \                     macRxPromiscuousMode:
   1367          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1368            rxPromiscuousMode = mode;
   \   000007   90....       MOV       DPTR,#rxPromiscuousMode
   \   00000A   F0           MOVX      @DPTR,A
   1369          
   1370            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   700A         JNZ       ??macRxPromiscuousMode_0
   1371            {
   1372              MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   00000E   906180       MOV       DPTR,#0x6180
   \   000011   E4           CLR       A
   \   000012   F0           MOVX      @DPTR,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   4409         ORL       A,#0x9
   \   000016   8013         SJMP      ??macRxPromiscuousMode_1
   1373            }
   1374            else
   1375            {
   1376              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1377                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   \                     ??macRxPromiscuousMode_0:
   \   000018   7402         MOV       A,#0x2
   \   00001A   6E           XRL       A,R6
   \   00001B   6008         JZ        ??macRxPromiscuousMode_2
   \   00001D   7401         MOV       A,#0x1
   \   00001F   6E           XRL       A,R6
   \   000020   6003         JZ        ??macRxPromiscuousMode_2
   \   000022                ; Setup parameters for call to function halAssertHandler
   \   000022   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1378          
   1379              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   \                     ??macRxPromiscuousMode_2:
   \   000025   906180       MOV       DPTR,#0x6180
   \   000028   E0           MOVX      A,@DPTR
   \   000029   C2E0         CLR       0xE0 /* A   */.0
   \                     ??macRxPromiscuousMode_1:
   \   00002B   F0           MOVX      @DPTR,A
   1380            }
   1381          }
   \   00002C   7F01         MOV       R7,#0x1
   \   00002E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1382          
   1383          
   1384          /**************************************************************************************************
   1385           *                                  Compile Time Integrity Checks
   1386           **************************************************************************************************
   1387           */
   1388          
   1389          /* check for changes to the spec that would affect the source code */
   1390          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1391               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1392               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1393               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1394               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1395               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1396               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1397               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1398               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1399          #error "ERROR!  Change to the spec that requires modification of source code."
   1400          #endif
   1401          
   1402          /* check for changes to the internal flags format */
   1403          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1404               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1405               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1406               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1407               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1408               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1409          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1410          #endif
   1411          
   1412          /* validate CRC OK bit optimization */
   1413          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1414          #error "ERROR!  Optimization relies on these bits having the same position."
   1415          #endif
   1416          
   1417          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1418          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1419          #endif
   1420          
   1421          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1422          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1423          #endif
   1424          
   1425          
   1426          /**************************************************************************************************
   1427          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   macRxAckTxDoneCallback
        2      0   -> rxPostRxUpdates
      2      0   macRxFifoOverflowIsr
        2      0   -> macRxHaltCleanup
      2      0   macRxHaltCleanup
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxInit
      0      9   macRxPromiscuousMode
        0      9   -> halAssertHandler
      2      0   macRxRadioPowerUpInit
      2      0   macRxThresholdIsr
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxTxReset
        2      0   -> macRxHardDisable
        2      0   -> macRxPromiscuousMode
      0     30   rxAddrIsr
        0     30   -> halAssertHandler
        0     30   -> macMemReadRxFifo
        0     30   -> rxPrepPayload
        0     30   -> sAddrExtCpy
      2     17   rxDiscardFrame
        2      0   -> halAssertHandler
        2      0   -> rxDone
      2     16   rxDiscardIsr
        2     16   -> macMemReadRxFifo
        2     16   -> rxDone
      2     17   rxDone
        2      0   -> rxPostRxUpdates
      1     10   rxFcsIsr
        0     10   -> MAC_SrcMatchCheckResult
        0     10   -> macDataRxMemFree
        0     10   -> macMemReadRxFifo
        0     10   -> macRadioComputeLQI
        0     10   -> macRxCompleteCallback
        0     10   -> macRxOffRequest
        0     10   -> rxDone
      2      0   rxHaltCleanupFinalStep
        2      0   -> macDataRxMemFree
        2      0   -> rxPostRxUpdates
      2      0   rxPayloadIsr
        2      0   -> macMemReadRxFifo
        2      0   -> rxPrepPayload
      2     17   rxPostRxUpdates
        2      0   -> macRadioUpdateTxPower
        2      0   -> macRxOffRequest
        2      0   -> macTxStartQueuedFrame
      2     30   rxPrepPayload
      1     20   rxStartIsr
        0     17   -> MAC_SrcMatchCheckAllPending
        0     17   -> halAssertHandler
        0     17   -> macCspForceTxDoneIfPending
        0     17   -> macDataRxMemAlloc
        0     17   -> macMcuOverflowCapture
        0     17   -> macMcuTimerCapture
        0     17   -> macMemReadRxFifo
        0     17   -> macRadioComputeLQI
        0     17   -> macRxCheckMACPendingCallback
        0     17   -> macRxCheckPendingCallback
        0     17   -> macTxAckNotReceivedCallback
        0     17   -> macTxAckReceivedCallback
        0     20   -> osal_memcpy
        0     17   -> rxDiscardFrame
        0     17   -> rxDone
        0     17   -> rxPostRxUpdates
        0     17   -> rxPrepPayload


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  RFIRQF0
       1  RFIRQF1
       1  RFST
       1  S1CON
       1  _A_IEN0
      25  macRxAckTxDoneCallback
       1  macRxActive
       4  macRxAddrLen
      20  macRxFifoOverflowIsr
       1  macRxFilter
      31  macRxHaltCleanup
      57  macRxInit
       1  macRxOutgoingAckFlag
      49  macRxPromiscuousMode
      41  macRxRadioPowerUpInit
      56  macRxThresholdIsr
      23  macRxTxReset
       2  pFuncRxState
       2  pRxBuf
     357  rxAddrIsr
       4  rxBuf
      73  rxDiscardFrame
      86  rxDiscardIsr
      44  rxDone
     389  rxFcsIsr
       1  rxFifoOverflowCount
       1  rxFilter
     100  rxHaltCleanupFinalStep
       1  rxIsrActiveFlag
       1  rxNextLen
      93  rxPayloadIsr
       1  rxPayloadLen
      20  rxPostRxUpdates
      58  rxPrepPayload
       1  rxPromiscuousMode
       1  rxResetFlag
    1224  rxStartIsr
       1  rxUnreadLen
     108  -- Other

 
 2 746 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     4 bytes in segment CODE_C
     5 bytes in segment SFR_AN
    19 bytes in segment XDATA_Z
 
   112 bytes of CODE     memory
     0 bytes of DATA     memory (+ 5 bytes shared)
 2 746 bytes of HUGECODE memory
    19 bytes of XDATA    memory

Errors: none
Warnings: none
