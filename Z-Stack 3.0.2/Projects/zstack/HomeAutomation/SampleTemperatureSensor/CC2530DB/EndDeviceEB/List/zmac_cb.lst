###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  17:08:13
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWA672.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\zmac\f8w\zmac_cb.c" -D BDB_REPORTING -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS
#        -D ZCL_ON_OFF -D ZCL_REPORT -D ZCL_REPORT_DESTINATION_DEVICE -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\zmac_cb.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\zmac_cb.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2014-12-03 16:04:46 -0800 (Wed, 03 Dec 2014) $
      4            Revision:       $Revision: 41329 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          #include "cGP_stub.h"
     50             
     51          #if !defined NONWK
     52          #include "nwk.h"
     53          #include "nwk_bufs.h"
     54          #include "ZGlobals.h"
     55          #endif
     56          
     57          #if defined( MACSIM )
     58            #include "mac_sim.h"
     59          #endif
     60          
     61          #include "mac_security.h"
     62          
     63          #include "mac_main.h"
     64          #ifdef FEATURE_DUAL_MAC
     65          #include "dmmgr.h"
     66          #endif /* FEATURE_DUAL_MAC */
     67          extern void *ZMac_ScanBuf;
     68          
     69          /********************************************************************************************************
     70           *                                               CONSTANTS
     71           ********************************************************************************************************/
     72          
     73          #if !defined NONWK
     74          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     75          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   33           DB 51
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   0E           DB 14
   \   000011   0F           DB 15
     76            0,
     77            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     78            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     79            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     80            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     81            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     82            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     83            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     84            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     85            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     86            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     87            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     88            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     89            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     90            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     91            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     92            sizeof(ZMacPollInd_t),            // MAC_MLME_POLL_IND           16  Poll indication
     93            sizeof(ZMacDataCnf_t)            // MAC_MCPS_GREEN_PWR_DATA_CNF 17  Data confirm for Green Power
     94          };
     95          #endif /* !defined NONWK */
     96          
     97          /********************************************************************************************************
     98           *                                               LOCALS
     99           ********************************************************************************************************/
    100          
    101          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    103          
    104          #if !defined NONWK
    105          /* LQI Adjustment Function */
    106          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
    107          #endif
    108          
    109          /*********************************************************************
    110           * ZMAC Function Pointers
    111           */
    112          
    113          /*
    114           * ZMac Application callback function. This function will be called
    115           * for every MAC message that is received over-the-air or generated
    116           * locally by MAC for the application.
    117           *
    118           * The callback function should return TRUE if it has handled the
    119           * MAC message and no further action should be taken with it. It
    120           * should return FALSE if it has not handled the MAC message and
    121           * normal processing should take place.
    122           *
    123           * NOTE: The processing in this function should be kept to the
    124           *       minimum.
    125           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    127          
    128          
    129          /*********************************************************************
    130           * ZMAC Functions
    131           */
    132          
    133          /**************************************************************************************************
    134           * @fn       MAC_CbackEvent()
    135           *
    136           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    137           *
    138           * @param    pData - pointer to macCbackEvent_t
    139           *
    140           * @return   none
    141           *************************************************************************************************/
    142          #ifdef FEATURE_DUAL_MAC
    143          void ZMacCbackEventHdlr(macCbackEvent_t *pData)
    144          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    146          #endif /* FEATURE_DUAL_MAC */
    147          #ifndef MT_MAC_CB_FUNC
    148          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
    149          #if !defined NONWK
    150            uint8 event = pData->hdr.event;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F583         MOV       DPH,A
   \   000021   8882         MOV       DPL,R0
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V7,A
    151            uint16 tmp = zmacCBSizeTable[event];
   \   000026   F8           MOV       R0,A
   \   000027   74..         MOV       A,#zmacCBSizeTable & 0xff
   \   000029   28           ADD       A,R0
   \   00002A   F582         MOV       DPL,A
   \   00002C   E4           CLR       A
   \   00002D   34..         ADDC      A,#(zmacCBSizeTable >> 8) & 0xff
   \   00002F   F583         MOV       DPH,A
   \   000031   E4           CLR       A
   \   000032   93           MOVC      A,@A+DPTR
   \   000033   F5..         MOV       ?V0,A
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   E5..         MOV       A,?V0
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   E4           CLR       A
   \   00003F   F0           MOVX      @DPTR,A
    152            macCbackEvent_t *msgPtr;
    153          
    154            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    155             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    156             */
    157            if (tmp == 0)
   \   000040   7402         MOV       A,#0x2
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F8           MOV       R0,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F9           MOV       R1,A
   \   00004A   E8           MOV       A,R0
   \   00004B   49           ORL       A,R1
   \   00004C   7003         JNZ       $+5
   \   00004E   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    158            {
    159              return;
    160            }
    161          
    162            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    163            if ( event == MAC_MCPS_DATA_IND )
   \   000051   740D         MOV       A,#0xd
   \   000053   65..         XRL       A,?V7
   \   000055   7053         JNZ       ??MAC_CbackEvent_1
    164            {
    165          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    166              // This feature limits the number of unprocessed MAC Data Indications that can be queued
    167              // into the Network Task's OSAL message queue. To enable ZMAC_MAX_DATA_IND filtering, the
    168              // command-line option specifies the threshold setting where MAC_MCPS_DATD_IND callback
    169              // messages will be dropped. For example, adding ZMAC_MAX_DATA_IND=5 to the commnad-line
    170              // options allows up to five messages to be passed up and queued in the NWK layer buffer.
    171              uint8 diCount = osal_msg_count( NWK_TaskID, MAC_MCPS_DATA_IND );
    172          #endif // ZMAC_MAX_DATA_IND
    173              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   000057                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?XSTACK_DISP101_8
   \   00005C   7953         MOV       R1,#0x53
   \   00005E   12....       LCALL     `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
    174              if ( (tmp == INVALID_NODE_ADDR) ||
    175                   (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    176          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    177                   (diCount > ZMAC_MAX_DATA_IND) ||
    178          #endif // ZMAC_MAX_DATA_IND
    179                   (pData->dataInd.msdu.len == 0) )
   \   000061   7402         MOV       A,#0x2
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   E0           MOVX      A,@DPTR
   \   000067   64FE         XRL       A,#0xfe
   \   000069   7003         JNZ       ??MAC_CbackEvent_2
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F4           CPL       A
   \                     ??MAC_CbackEvent_2:
   \   00006E   7003         JNZ       $+5
   \   000070   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000073   7402         MOV       A,#0x2
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F4           CPL       A
   \   00007A   7003         JNZ       ??MAC_CbackEvent_4
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   F4           CPL       A
   \                     ??MAC_CbackEvent_4:
   \   00007F   7003         JNZ       $+5
   \   000081   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000084   85..82       MOV       DPL,?XSP + 0
   \   000087   85..83       MOV       DPH,?XSP + 1
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   F8           MOV       R0,A
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F583         MOV       DPH,A
   \   000090   8882         MOV       DPL,R0
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   7003         JNZ       $+5
   \   000099   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
    180              {
    181                mac_msg_deallocate( (uint8 **)&pData );
    182                return;
    183              }
    184              msgPtr = pData;
   \   00009C   85..82       MOV       DPL,?XSP + 0
   \   00009F   85..83       MOV       DPH,?XSP + 1
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   FE           MOV       R6,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   FF           MOV       R7,A
   \   0000A7   02....       LJMP      ??MAC_CbackEvent_5 & 0xFFFF
    185            }
    186            else
    187            {
    188              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   0000AA   7405         MOV       A,#0x5
   \   0000AC   65..         XRL       A,?V7
   \   0000AE   701E         JNZ       ??MAC_CbackEvent_6
    189              {
    190                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   0000B0   85..82       MOV       DPL,?XSP + 0
   \   0000B3   85..83       MOV       DPH,?XSP + 1
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   F8           MOV       R0,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   C8           XCH       A,R0
   \   0000BB   2408         ADD       A,#0x8
   \   0000BD   F582         MOV       DPL,A
   \   0000BF   E4           CLR       A
   \   0000C0   38           ADDC      A,R0
   \   0000C1   F583         MOV       DPH,A
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   7900         MOV       R1,#0x0
   \   0000C6   2421         ADD       A,#0x21
   \   0000C8   F8           MOV       R0,A
   \   0000C9   5046         JNC       ??MAC_CbackEvent_7
   \   0000CB   09           INC       R1
   \   0000CC   8043         SJMP      ??MAC_CbackEvent_7
    191              }
    192              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_6:
   \   0000CE   7407         MOV       A,#0x7
   \   0000D0   65..         XRL       A,?V7
   \   0000D2   7049         JNZ       ??MAC_CbackEvent_8
    193              {
    194                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000D4   85..82       MOV       DPL,?XSP + 0
   \   0000D7   85..83       MOV       DPH,?XSP + 1
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F8           MOV       R0,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   F583         MOV       DPH,A
   \   0000E0   8882         MOV       DPL,R0
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   700F         JNZ       ??MAC_CbackEvent_9
    195                {
    196                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000E7   7402         MOV       A,#0x2
   \   0000E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   241B         ADD       A,#0x1b
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   3400         ADDC      A,#0x0
   \   0000F4   8026         SJMP      ??MAC_CbackEvent_10
    197                }
    198                else
    199                {
    200                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_9:
   \   0000F6   85..82       MOV       DPL,?XSP + 0
   \   0000F9   85..83       MOV       DPH,?XSP + 1
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F8           MOV       R0,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   C8           XCH       A,R0
   \   000101   2408         ADD       A,#0x8
   \   000103   F582         MOV       DPL,A
   \   000105   E4           CLR       A
   \   000106   38           ADDC      A,R0
   \   000107   F583         MOV       DPH,A
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   75F021       MOV       B,#0x21
   \   00010D   A4           MUL       AB
   \   00010E   F8           MOV       R0,A
   \   00010F   A9F0         MOV       R1,B
   \                     ??MAC_CbackEvent_7:
   \   000111   7402         MOV       A,#0x2
   \   000113   12....       LCALL     ?XSTACK_DISP0_8
   \   000116   E0           MOVX      A,@DPTR
   \   000117   28           ADD       A,R0
   \   000118   F0           MOVX      @DPTR,A
   \   000119   A3           INC       DPTR
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   39           ADDC      A,R1
   \                     ??MAC_CbackEvent_10:
   \   00011C   F0           MOVX      @DPTR,A
    201                }
    202              }
    203          
    204              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_8:
   \   00011D                ; Setup parameters for call to function osal_msg_allocate
   \   00011D   7402         MOV       A,#0x2
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   E0           MOVX      A,@DPTR
   \   000123   FA           MOV       R2,A
   \   000124   A3           INC       DPTR
   \   000125   E0           MOVX      A,@DPTR
   \   000126   FB           MOV       R3,A
   \   000127   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00012A   8A..         MOV       ?V2,R2
   \   00012C   8B..         MOV       ?V3,R3
   \   00012E   AE..         MOV       R6,?V2
   \   000130   AF..         MOV       R7,?V3
   \   000132   EA           MOV       A,R2
   \   000133   4F           ORL       A,R7
   \   000134   705B         JNZ       ??MAC_CbackEvent_11
    205              {
    206                // Not enough memory. If data confirm - try again
    207                if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \   000136   740C         MOV       A,#0xc
   \   000138   65..         XRL       A,?V7
   \   00013A   6003         JZ        $+5
   \   00013C   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
   \   00013F   85..82       MOV       DPL,?XSP + 0
   \   000142   85..83       MOV       DPH,?XSP + 1
   \   000145   E0           MOVX      A,@DPTR
   \   000146   2403         ADD       A,#0x3
   \   000148   FA           MOV       R2,A
   \   000149   A3           INC       DPTR
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   3400         ADDC      A,#0x0
   \   00014D   FB           MOV       R3,A
   \   00014E   8A82         MOV       DPL,R2
   \   000150   F583         MOV       DPH,A
   \   000152   E0           MOVX      A,@DPTR
   \   000153   F8           MOV       R0,A
   \   000154   A3           INC       DPTR
   \   000155   E0           MOVX      A,@DPTR
   \   000156   F9           MOV       R1,A
   \   000157   E8           MOV       A,R0
   \   000158   49           ORL       A,R1
   \   000159   7003         JNZ       $+5
   \   00015B   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    208                {
    209                  halIntState_t intState;
    210          
    211                  // This is not normally deallocated here because the pZMac_AppCallback()
    212                  // application may need it.
    213                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00015E   A2AF         MOV       C,0xa8.7
   \   000160   E4           CLR       A
   \   000161   33           RLC       A
   \   000162   F5..         MOV       ?V2,A
   \   000164   C2AF         CLR       0xa8.7
    214          
    215                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000166                ; Setup parameters for call to function mac_msg_deallocate
   \   000166   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    216                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   000169                ; Setup parameters for call to function osal_msg_allocate
   \   000169   7402         MOV       A,#0x2
   \   00016B   12....       LCALL     ?XSTACK_DISP0_8
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   FA           MOV       R2,A
   \   000170   A3           INC       DPTR
   \   000171   E0           MOVX      A,@DPTR
   \   000172   FB           MOV       R3,A
   \   000173   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000176   8A..         MOV       ?V4,R2
   \   000178   8B..         MOV       ?V5,R3
   \   00017A   AE..         MOV       R6,?V4
   \   00017C   AF..         MOV       R7,?V5
   \   00017E   EA           MOV       A,R2
   \   00017F   4F           ORL       A,R7
   \   000180   7009         JNZ       ??MAC_CbackEvent_12
    217                  {
    218                    // Still no allocation, something is wrong
    219                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000182   E5..         MOV       A,?V2
   \   000184   A2E0         MOV       C,0xE0 /* A   */.0
   \   000186   92AF         MOV       0xa8.7,C
    220                    return;
   \   000188   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    221                  }
    222                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_12:
   \   00018B   E5..         MOV       A,?V2
   \   00018D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00018F   92AF         MOV       0xa8.7,C
    223                }
    224                else
    225                {
    226                  // This message is dropped
    227                  return;
    228                }
    229              }
    230              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   000191                ; Setup parameters for call to function osal_memcpy
   \   000191   85..82       MOV       DPL,?XSP + 0
   \   000194   85..83       MOV       DPH,?XSP + 1
   \   000197   E0           MOVX      A,@DPTR
   \   000198   F5..         MOV       ?V4,A
   \   00019A   A3           INC       DPTR
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   F5..         MOV       ?V5,A
   \   00019E   75..00       MOV       ?V6,#0x0
   \   0001A1   78..         MOV       R0,#?V4
   \   0001A3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001A6   AC..         MOV       R4,?V0
   \   0001A8   7D00         MOV       R5,#0x0
   \   0001AA   EE           MOV       A,R6
   \   0001AB   FA           MOV       R2,A
   \   0001AC   EF           MOV       A,R7
   \   0001AD   FB           MOV       R3,A
   \   0001AE   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001B1   7403         MOV       A,#0x3
   \   0001B3   12....       LCALL     ?DEALLOC_XSTACK8
    231            }
    232          
    233            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_5:
   \   0001B6   7405         MOV       A,#0x5
   \   0001B8   65..         XRL       A,?V7
   \   0001BA   6003         JZ        $+5
   \   0001BC   02....       LJMP      ??MAC_CbackEvent_13 & 0xFFFF
    234            {
    235              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    236          
    237              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   0001BF   EE           MOV       A,R6
   \   0001C0   240B         ADD       A,#0xb
   \   0001C2   F5..         MOV       ?V0,A
   \   0001C4   E4           CLR       A
   \   0001C5   3F           ADDC      A,R7
   \   0001C6   F5..         MOV       ?V1,A
   \   0001C8   EE           MOV       A,R6
   \   0001C9   2403         ADD       A,#0x3
   \   0001CB   F5..         MOV       ?V8,A
   \   0001CD   E4           CLR       A
   \   0001CE   3F           ADDC      A,R7
   \   0001CF   F5..         MOV       ?V9,A
   \   0001D1                ; Setup parameters for call to function osal_memcpy
   \   0001D1   85..82       MOV       DPL,?V8
   \   0001D4   F583         MOV       DPH,A
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   F5..         MOV       ?V4,A
   \   0001D9   A3           INC       DPTR
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   F5..         MOV       ?V5,A
   \   0001DD   75..00       MOV       ?V6,#0x0
   \   0001E0   78..         MOV       R0,#?V4
   \   0001E2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001E5   7C21         MOV       R4,#0x21
   \   0001E7   7D00         MOV       R5,#0x0
   \   0001E9   AA..         MOV       R2,?V0
   \   0001EB   AB..         MOV       R3,?V1
   \   0001ED   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001F0   7403         MOV       A,#0x3
   \   0001F2   12....       LCALL     ?DEALLOC_XSTACK8
    238              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   0001F5   85..82       MOV       DPL,?V8
   \   0001F8   85..83       MOV       DPH,?V9
   \   0001FB   E5..         MOV       A,?V0
   \   0001FD   F0           MOVX      @DPTR,A
   \   0001FE   A3           INC       DPTR
   \   0001FF   E5..         MOV       A,?V1
   \   000201   F0           MOVX      @DPTR,A
    239              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000202   EE           MOV       A,R6
   \   000203   2409         ADD       A,#0x9
   \   000205   F5..         MOV       ?V2,A
   \   000207   E4           CLR       A
   \   000208   3F           ADDC      A,R7
   \   000209   F5..         MOV       ?V3,A
   \   00020B                ; Setup parameters for call to function osal_memcpy
   \   00020B   85..82       MOV       DPL,?V2
   \   00020E   F583         MOV       DPH,A
   \   000210   E0           MOVX      A,@DPTR
   \   000211   F5..         MOV       ?V4,A
   \   000213   A3           INC       DPTR
   \   000214   E0           MOVX      A,@DPTR
   \   000215   F5..         MOV       ?V5,A
   \   000217   78..         MOV       R0,#?V4
   \   000219   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00021C   8E82         MOV       DPL,R6
   \   00021E   8F83         MOV       DPH,R7
   \   000220   A3           INC       DPTR
   \   000221   A3           INC       DPTR
   \   000222   A3           INC       DPTR
   \   000223   A3           INC       DPTR
   \   000224   A3           INC       DPTR
   \   000225   A3           INC       DPTR
   \   000226   A3           INC       DPTR
   \   000227   A3           INC       DPTR
   \   000228   E0           MOVX      A,@DPTR
   \   000229   FC           MOV       R4,A
   \   00022A   7D00         MOV       R5,#0x0
   \   00022C   E5..         MOV       A,?V0
   \   00022E   2421         ADD       A,#0x21
   \   000230   FA           MOV       R2,A
   \   000231   E4           CLR       A
   \   000232   35..         ADDC      A,?V1
   \   000234   FB           MOV       R3,A
   \   000235   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000238   7403         MOV       A,#0x3
   \   00023A   12....       LCALL     ?DEALLOC_XSTACK8
    240              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   00023D   85..82       MOV       DPL,?V8
   \   000240   85..83       MOV       DPH,?V9
   \   000243   E0           MOVX      A,@DPTR
   \   000244   2421         ADD       A,#0x21
   \   000246   F8           MOV       R0,A
   \   000247   A3           INC       DPTR
   \   000248   E0           MOVX      A,@DPTR
   \   000249   3400         ADDC      A,#0x0
   \   00024B   F9           MOV       R1,A
   \   00024C   85..82       MOV       DPL,?V2
   \   00024F   85..83       MOV       DPH,?V3
   \   000252   E8           MOV       A,R0
   \   000253   F0           MOVX      @DPTR,A
   \   000254   A3           INC       DPTR
   \   000255   E9           MOV       A,R1
   \   000256   F0           MOVX      @DPTR,A
   \   000257   02....       LJMP      ??MAC_CbackEvent_14 & 0xFFFF
    241            }
    242            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_13:
   \   00025A   7407         MOV       A,#0x7
   \   00025C   65..         XRL       A,?V7
   \   00025E   6003         JZ        $+5
   \   000260   02....       LJMP      ??MAC_CbackEvent_14 & 0xFFFF
    243            {
    244              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    245          
    246              if (ZMac_ScanBuf != NULL)
   \   000263   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000266   E0           MOVX      A,@DPTR
   \   000267   F8           MOV       R0,A
   \   000268   A3           INC       DPTR
   \   000269   E0           MOVX      A,@DPTR
   \   00026A   F9           MOV       R1,A
   \   00026B   E8           MOV       A,R0
   \   00026C   49           ORL       A,R1
   \   00026D   607F         JZ        ??MAC_CbackEvent_14
    247              {
    248                void *pTmp = ZMac_ScanBuf;
   \   00026F   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000272   E0           MOVX      A,@DPTR
   \   000273   F5..         MOV       ?V8,A
   \   000275   A3           INC       DPTR
   \   000276   E0           MOVX      A,@DPTR
   \   000277   F5..         MOV       ?V9,A
    249                ZMac_ScanBuf = NULL;
   \   000279   90....       MOV       DPTR,#ZMac_ScanBuf
   \   00027C   E4           CLR       A
   \   00027D   F0           MOVX      @DPTR,A
   \   00027E   A3           INC       DPTR
   \   00027F   F0           MOVX      @DPTR,A
    250          
    251                if (pScan->scanType == ZMAC_ED_SCAN)
   \   000280   85....       MOV       ?V4,?V8
   \   000283   85....       MOV       ?V5,?V9
   \   000286   F5..         MOV       ?V6,A
   \   000288   EE           MOV       A,R6
   \   000289   240B         ADD       A,#0xb
   \   00028B   F5..         MOV       ?V0,A
   \   00028D   E4           CLR       A
   \   00028E   3F           ADDC      A,R7
   \   00028F   F5..         MOV       ?V1,A
   \   000291   EE           MOV       A,R6
   \   000292   2409         ADD       A,#0x9
   \   000294   F5..         MOV       ?V2,A
   \   000296   E4           CLR       A
   \   000297   3F           ADDC      A,R7
   \   000298   F5..         MOV       ?V3,A
   \   00029A   8E82         MOV       DPL,R6
   \   00029C   8F83         MOV       DPH,R7
   \   00029E   A3           INC       DPTR
   \   00029F   A3           INC       DPTR
   \   0002A0   E0           MOVX      A,@DPTR
   \   0002A1   85..82       MOV       DPL,?V2
   \   0002A4   85..83       MOV       DPH,?V3
   \   0002A7   7012         JNZ       ??MAC_CbackEvent_15
    252                {
    253                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   0002A9   E5..         MOV       A,?V0
   \   0002AB   F0           MOVX      @DPTR,A
   \   0002AC   A3           INC       DPTR
   \   0002AD   E5..         MOV       A,?V1
   \   0002AF   F0           MOVX      @DPTR,A
    254                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   0002B0                ; Setup parameters for call to function osal_memcpy
   \   0002B0   78..         MOV       R0,#?V4
   \   0002B2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002B5   7C1B         MOV       R4,#0x1b
   \   0002B7   7D00         MOV       R5,#0x0
   \   0002B9   8020         SJMP      ??MAC_CbackEvent_16
    255                }
    256                else
    257                {
    258                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_15:
   \   0002BB   E5..         MOV       A,?V0
   \   0002BD   F0           MOVX      @DPTR,A
   \   0002BE   A3           INC       DPTR
   \   0002BF   E5..         MOV       A,?V1
   \   0002C1   F0           MOVX      @DPTR,A
    259                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   0002C2                ; Setup parameters for call to function osal_memcpy
   \   0002C2   78..         MOV       R0,#?V4
   \   0002C4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002C7   8E82         MOV       DPL,R6
   \   0002C9   8F83         MOV       DPH,R7
   \   0002CB   A3           INC       DPTR
   \   0002CC   A3           INC       DPTR
   \   0002CD   A3           INC       DPTR
   \   0002CE   A3           INC       DPTR
   \   0002CF   A3           INC       DPTR
   \   0002D0   A3           INC       DPTR
   \   0002D1   A3           INC       DPTR
   \   0002D2   A3           INC       DPTR
   \   0002D3   E0           MOVX      A,@DPTR
   \   0002D4   75F021       MOV       B,#0x21
   \   0002D7   A4           MUL       AB
   \   0002D8   FC           MOV       R4,A
   \   0002D9   ADF0         MOV       R5,B
   \                     ??MAC_CbackEvent_16:
   \   0002DB   AA..         MOV       R2,?V0
   \   0002DD   AB..         MOV       R3,?V1
   \   0002DF   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002E2   7403         MOV       A,#0x3
   \   0002E4   12....       LCALL     ?DEALLOC_XSTACK8
    260                }
    261          
    262                osal_mem_free(pTmp);
   \   0002E7                ; Setup parameters for call to function osal_mem_free
   \   0002E7   AA..         MOV       R2,?V8
   \   0002E9   AB..         MOV       R3,?V9
   \   0002EB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    263              }
    264            }
    265          
    266            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_14:
   \   0002EE   90....       MOV       DPTR,#pZMac_AppCallback
   \   0002F1   E0           MOVX      A,@DPTR
   \   0002F2   F8           MOV       R0,A
   \   0002F3   A3           INC       DPTR
   \   0002F4   E0           MOVX      A,@DPTR
   \   0002F5   F9           MOV       R1,A
   \   0002F6   E8           MOV       A,R0
   \   0002F7   49           ORL       A,R1
   \   0002F8   6018         JZ        ??MAC_CbackEvent_17
   \   0002FA                ; Setup parameters for indirect call
   \   0002FA   EE           MOV       A,R6
   \   0002FB   FA           MOV       R2,A
   \   0002FC   EF           MOV       A,R7
   \   0002FD   FB           MOV       R3,A
   \   0002FE   90....       MOV       DPTR,#pZMac_AppCallback
   \   000301   E0           MOVX      A,@DPTR
   \   000302   F8           MOV       R0,A
   \   000303   A3           INC       DPTR
   \   000304   E0           MOVX      A,@DPTR
   \   000305   F583         MOV       DPH,A
   \   000307   8882         MOV       DPL,R0
   \   000309   12....       LCALL     ?CALL_IND
   \   00030C   E9           MOV       A,R1
   \   00030D   6003         JZ        $+5
   \   00030F   02....       LJMP      ??MAC_CbackEvent_18 & 0xFFFF
    267            {
    268              // Filter out non-zigbee packets
    269              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_17:
   \   000312   740D         MOV       A,#0xd
   \   000314   65..         XRL       A,?V7
   \   000316   6003         JZ        $+5
   \   000318   02....       LJMP      ??MAC_CbackEvent_19 & 0xFFFF
    270              {
    271                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
    272                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
    273                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xC0);
   \   00031B   85..82       MOV       DPL,?XSP + 0
   \   00031E   85..83       MOV       DPH,?XSP + 1
   \   000321   E0           MOVX      A,@DPTR
   \   000322   F8           MOV       R0,A
   \   000323   A3           INC       DPTR
   \   000324   E0           MOVX      A,@DPTR
   \   000325   F583         MOV       DPH,A
   \   000327   8882         MOV       DPL,R0
   \   000329   A3           INC       DPTR
   \   00032A   A3           INC       DPTR
   \   00032B   E0           MOVX      A,@DPTR
   \   00032C   F8           MOV       R0,A
   \   00032D   A3           INC       DPTR
   \   00032E   E0           MOVX      A,@DPTR
   \   00032F   F9           MOV       R1,A
   \   000330   8882         MOV       DPL,R0
   \   000332   F583         MOV       DPH,A
   \   000334   A3           INC       DPTR
   \   000335   E0           MOVX      A,@DPTR
   \   000336   54C0         ANL       A,#0xc0
   \   000338   FA           MOV       R2,A
    274                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    275                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   000339   8882         MOV       DPL,R0
   \   00033B   8983         MOV       DPH,R1
   \   00033D   E0           MOVX      A,@DPTR
   \   00033E   F8           MOV       R0,A
   \   00033F   7403         MOV       A,#0x3
   \   000341   58           ANL       A,R0
   \   000342   C3           CLR       C
   \   000343   9402         SUBB      A,#0x2
   \   000345   502A         JNC       ??MAC_CbackEvent_3
   \   000347   E8           MOV       A,R0
   \   000348   13           RRC       A
   \   000349   13           RRC       A
   \   00034A   543F         ANL       A,#0x3f
   \   00034C   540F         ANL       A,#0xf
   \   00034E   F8           MOV       R0,A
   \   00034F   90....       MOV       DPTR,#_NIB + 17
   \   000352   E0           MOVX      A,@DPTR
   \   000353   68           XRL       A,R0
   \   000354   701B         JNZ       ??MAC_CbackEvent_3
   \   000356   EA           MOV       A,R2
   \   000357   7018         JNZ       ??MAC_CbackEvent_3
   \   000359   85..82       MOV       DPL,?XSP + 0
   \   00035C   85..83       MOV       DPH,?XSP + 1
   \   00035F   E0           MOVX      A,@DPTR
   \   000360   F8           MOV       R0,A
   \   000361   A3           INC       DPTR
   \   000362   E0           MOVX      A,@DPTR
   \   000363   C8           XCH       A,R0
   \   000364   241B         ADD       A,#0x1b
   \   000366   F582         MOV       DPL,A
   \   000368   E4           CLR       A
   \   000369   38           ADDC      A,R0
   \   00036A   F583         MOV       DPH,A
   \   00036C   E0           MOVX      A,@DPTR
   \   00036D   6402         XRL       A,#0x2
   \   00036F   6007         JZ        ??MAC_CbackEvent_20
    276                {
    277          #if (ZG_BUILD_RTR_TYPE)       
    278                  //Is this for GP
    279                  if(fcProtoVer == GP_ZIGBEE_PROTOCOL_VER)
    280                  {
    281                    pData->hdr.event = GP_MAC_MCPS_DATA_IND;
    282             
    283                    // Application hasn't already processed this message. Send it to NWK task.
    284                    osal_msg_send( gp_TaskID, (uint8 *)pData );
    285          
    286                    return;
    287                  }
    288          #endif
    289                
    290                  // Drop the message
    291                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   000371                ; Setup parameters for call to function mac_msg_deallocate
   \   000371   AA..         MOV       R2,?XSP + 0
   \   000373   AB..         MOV       R3,?XSP + 1
   \   000375   02....       LJMP      ??MAC_CbackEvent_21 & 0xFFFF
    292                  return;
    293                }
    294                else
    295                {
    296                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_20:
   \   000378   EE           MOV       A,R6
   \   000379   2413         ADD       A,#0x13
   \   00037B   F8           MOV       R0,A
   \   00037C   E4           CLR       A
   \   00037D   3F           ADDC      A,R7
   \   00037E   F9           MOV       R1,A
    297                  // See if LQI needs adjustment due to frame correlation
    298                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   00037F                ; Setup parameters for call to function ZMacLqiAdjust
   \   00037F   E8           MOV       A,R0
   \   000380   241C         ADD       A,#0x1c
   \   000382   FA           MOV       R2,A
   \   000383   E4           CLR       A
   \   000384   39           ADDC      A,R1
   \   000385   FB           MOV       R3,A
   \   000386   E8           MOV       A,R0
   \   000387   241D         ADD       A,#0x1d
   \   000389   F582         MOV       DPL,A
   \   00038B   E4           CLR       A
   \   00038C   39           ADDC      A,R1
   \   00038D   F583         MOV       DPH,A
   \   00038F   E0           MOVX      A,@DPTR
   \   000390   F9           MOV       R1,A
   \   000391   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    299          
    300                  // Look for broadcast message that has a radius of greater 1
    301                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    302                         && (pData->dataInd.msdu.p[6] > 1) )
   \   000394   85..82       MOV       DPL,?XSP + 0
   \   000397   85..83       MOV       DPH,?XSP + 1
   \   00039A   E0           MOVX      A,@DPTR
   \   00039B   F8           MOV       R0,A
   \   00039C   A3           INC       DPTR
   \   00039D   E0           MOVX      A,@DPTR
   \   00039E   C8           XCH       A,R0
   \   00039F   241C         ADD       A,#0x1c
   \   0003A1   F582         MOV       DPL,A
   \   0003A3   E4           CLR       A
   \   0003A4   38           ADDC      A,R0
   \   0003A5   F583         MOV       DPH,A
   \   0003A7   E0           MOVX      A,@DPTR
   \   0003A8   F4           CPL       A
   \   0003A9   7003         JNZ       ??MAC_CbackEvent_22
   \   0003AB   A3           INC       DPTR
   \   0003AC   E0           MOVX      A,@DPTR
   \   0003AD   F4           CPL       A
   \                     ??MAC_CbackEvent_22:
   \   0003AE   6003         JZ        $+5
   \   0003B0   02....       LJMP      ??MAC_CbackEvent_23 & 0xFFFF
   \   0003B3   85..82       MOV       DPL,?XSP + 0
   \   0003B6   85..83       MOV       DPH,?XSP + 1
   \   0003B9   E0           MOVX      A,@DPTR
   \   0003BA   F8           MOV       R0,A
   \   0003BB   A3           INC       DPTR
   \   0003BC   E0           MOVX      A,@DPTR
   \   0003BD   F583         MOV       DPH,A
   \   0003BF   8882         MOV       DPL,R0
   \   0003C1   A3           INC       DPTR
   \   0003C2   A3           INC       DPTR
   \   0003C3   E0           MOVX      A,@DPTR
   \   0003C4   F8           MOV       R0,A
   \   0003C5   A3           INC       DPTR
   \   0003C6   E0           MOVX      A,@DPTR
   \   0003C7   C8           XCH       A,R0
   \   0003C8   2406         ADD       A,#0x6
   \   0003CA   F582         MOV       DPL,A
   \   0003CC   E4           CLR       A
   \   0003CD   38           ADDC      A,R0
   \   0003CE   F583         MOV       DPH,A
   \   0003D0   E0           MOVX      A,@DPTR
   \   0003D1   C3           CLR       C
   \   0003D2   9402         SUBB      A,#0x2
   \   0003D4   4066         JC        ??MAC_CbackEvent_23
    303                  {
    304                    // Send the messsage to a special broadcast queue
    305                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   0003D6                ; Setup parameters for call to function nwk_broadcastSend
   \   0003D6   EE           MOV       A,R6
   \   0003D7   FA           MOV       R2,A
   \   0003D8   EF           MOV       A,R7
   \   0003D9   FB           MOV       R3,A
   \   0003DA   12....       LCALL     `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   0003DD   E9           MOV       A,R1
   \   0003DE   6007         JZ        ??MAC_CbackEvent_24
    306                    {
    307                      // Drop the message, too many broadcast messages to process
    308                      mac_msg_deallocate( (uint8 **)&pData );
   \   0003E0                ; Setup parameters for call to function mac_msg_deallocate
   \   0003E0   AA..         MOV       R2,?XSP + 0
   \   0003E2   AB..         MOV       R3,?XSP + 1
   \   0003E4   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    309                    }
    310                    return;
   \                     ??MAC_CbackEvent_24:
   \   0003E7   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    311                  }
    312                }
    313              }
    314              else if ((event == MAC_MCPS_DATA_CNF) && (pData->hdr.status != MAC_NO_RESOURCES))
   \                     ??MAC_CbackEvent_19:
   \   0003EA   740C         MOV       A,#0xc
   \   0003EC   65..         XRL       A,?V7
   \   0003EE   704C         JNZ       ??MAC_CbackEvent_23
   \   0003F0   85..82       MOV       DPL,?XSP + 0
   \   0003F3   85..83       MOV       DPH,?XSP + 1
   \   0003F6   E0           MOVX      A,@DPTR
   \   0003F7   F8           MOV       R0,A
   \   0003F8   A3           INC       DPTR
   \   0003F9   E0           MOVX      A,@DPTR
   \   0003FA   F583         MOV       DPH,A
   \   0003FC   8882         MOV       DPL,R0
   \   0003FE   A3           INC       DPTR
   \   0003FF   E0           MOVX      A,@DPTR
   \   000400   641A         XRL       A,#0x1a
   \   000402   6038         JZ        ??MAC_CbackEvent_23
    315              {
    316                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
    317          
    318                if ( pCnf->pDataReq && (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK) )
   \   000404   EE           MOV       A,R6
   \   000405   2403         ADD       A,#0x3
   \   000407   F5..         MOV       ?V8,A
   \   000409   E4           CLR       A
   \   00040A   3F           ADDC      A,R7
   \   00040B   85..82       MOV       DPL,?V8
   \   00040E   F583         MOV       DPH,A
   \   000410   E0           MOVX      A,@DPTR
   \   000411   F8           MOV       R0,A
   \   000412   A3           INC       DPTR
   \   000413   E0           MOVX      A,@DPTR
   \   000414   F9           MOV       R1,A
   \   000415   E8           MOV       A,R0
   \   000416   49           ORL       A,R1
   \   000417   6023         JZ        ??MAC_CbackEvent_23
   \   000419   E8           MOV       A,R0
   \   00041A   240E         ADD       A,#0xe
   \   00041C   F582         MOV       DPL,A
   \   00041E   E4           CLR       A
   \   00041F   39           ADDC      A,R1
   \   000420   F583         MOV       DPH,A
   \   000422   E0           MOVX      A,@DPTR
   \   000423   A2E0         MOV       C,0xE0 /* A   */.0
   \   000425   5015         JNC       ??MAC_CbackEvent_23
    319                {
    320                  // See if LQI needs adjustment due to frame correlation
    321                  ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   000427                ; Setup parameters for call to function ZMacLqiAdjust
   \   000427   EE           MOV       A,R6
   \   000428   240C         ADD       A,#0xc
   \   00042A   FA           MOV       R2,A
   \   00042B   E4           CLR       A
   \   00042C   3F           ADDC      A,R7
   \   00042D   FB           MOV       R3,A
   \   00042E   EE           MOV       A,R6
   \   00042F   240D         ADD       A,#0xd
   \   000431   F582         MOV       DPL,A
   \   000433   E4           CLR       A
   \   000434   3F           ADDC      A,R7
   \   000435   F583         MOV       DPH,A
   \   000437   E0           MOVX      A,@DPTR
   \   000438   F9           MOV       R1,A
   \   000439   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    322                }
    323              }
    324              if(event == MAC_MCPS_GREEN_PWR_DATA_CNF)
   \                     ??MAC_CbackEvent_23:
   \   00043C   7411         MOV       A,#0x11
   \   00043E   65..         XRL       A,?V7
   \   000440   7008         JNZ       ??MAC_CbackEvent_25
    325              {
    326                msgPtr->dataCnf.hdr.event = GP_MAC_MCPS_DATA_CNF;
   \   000442   8E82         MOV       DPL,R6
   \   000444   8F83         MOV       DPH,R7
   \   000446   E4           CLR       A
   \   000447   F0           MOVX      @DPTR,A
   \   000448   800C         SJMP      ??MAC_CbackEvent_18
    327          #if (ZG_BUILD_RTR_TYPE)       
    328                osal_msg_send( gp_TaskID, (uint8 *)msgPtr);
    329          #endif
    330              }
    331              else
    332              {
    333                osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_25:
   \   00044A                ; Setup parameters for call to function osal_msg_send
   \   00044A   EE           MOV       A,R6
   \   00044B   FA           MOV       R2,A
   \   00044C   EF           MOV       A,R7
   \   00044D   FB           MOV       R3,A
   \   00044E   90....       MOV       DPTR,#NWK_TaskID
   \   000451   E0           MOVX      A,@DPTR
   \   000452   F9           MOV       R1,A
   \   000453   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    334              }
    335            }
    336            
    337          #if (ZG_BUILD_RTR_TYPE)
    338            if ((event == MAC_MCPS_DATA_CNF || event == MAC_MCPS_GREEN_PWR_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
    339          #else
    340            if ((event == MAC_MCPS_DATA_CNF ) && (pData->dataCnf.pDataReq != NULL))
   \                     ??MAC_CbackEvent_18:
   \   000456   740C         MOV       A,#0xc
   \   000458   65..         XRL       A,?V7
   \   00045A   701F         JNZ       ??MAC_CbackEvent_0
   \   00045C   85..82       MOV       DPL,?XSP + 0
   \   00045F   85..83       MOV       DPH,?XSP + 1
   \   000462   E0           MOVX      A,@DPTR
   \   000463   2403         ADD       A,#0x3
   \   000465   FA           MOV       R2,A
   \   000466   A3           INC       DPTR
   \   000467   E0           MOVX      A,@DPTR
   \   000468   3400         ADDC      A,#0x0
   \   00046A   FB           MOV       R3,A
   \   00046B   8A82         MOV       DPL,R2
   \   00046D   F583         MOV       DPH,A
   \   00046F   E0           MOVX      A,@DPTR
   \   000470   F8           MOV       R0,A
   \   000471   A3           INC       DPTR
   \   000472   E0           MOVX      A,@DPTR
   \   000473   F9           MOV       R1,A
   \   000474   E8           MOV       A,R0
   \   000475   49           ORL       A,R1
   \   000476   6003         JZ        ??MAC_CbackEvent_0
    341          #endif
    342            {
    343              // If the application needs 'pDataReq' then we cannot free it here.
    344              // The application must free it after using it. Note that 'pDataReq'
    345              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    346          
    347              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000478                ; Setup parameters for call to function mac_msg_deallocate
   \                     ??MAC_CbackEvent_21:
   \   000478   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    348            }
    349          #endif
    350          }
   \                     ??MAC_CbackEvent_0:
   \   00047B   7404         MOV       A,#0x4
   \   00047D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000480   7F0A         MOV       R7,#0xa
   \   000482   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000485                REQUIRE _A_IEN0
    351          #else  // ifdef MT_MAC_CB_FUNC
    352          {
    353            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    354            switch (pData->hdr.event)
    355            {
    356              case MAC_MLME_ASSOCIATE_IND:
    357                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    358                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    359                break;
    360          
    361              case MAC_MLME_ASSOCIATE_CNF:
    362                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    363                {
    364                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    365          #ifdef FEATURE_DUAL_MAC
    366                  DMMGR_ResetActivityFlag( ASSOC_ACTIVITY );
    367          #endif /* FEATURE_DUAL_MAC */
    368                }
    369                break;
    370          
    371              case MAC_MLME_DISASSOCIATE_IND:
    372                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    373                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    374                break;
    375          
    376              case MAC_MLME_DISASSOCIATE_CNF:
    377                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    378                {
    379                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    380          #ifdef FEATURE_DUAL_MAC
    381                  DMMGR_ResetActivityFlag( DISASSOC_ACTIVITY );
    382          #endif /* FEATURE_DUAL_MAC */
    383                }
    384                break;
    385          
    386              case MAC_MLME_BEACON_NOTIFY_IND:
    387                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    388                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    389                break;
    390          
    391              case MAC_MLME_ORPHAN_IND:
    392                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    393                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    394                break;
    395          
    396              case MAC_MLME_SCAN_CNF:
    397                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    398                {
    399                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    400                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    401          #ifdef FEATURE_DUAL_MAC
    402                  DMMGR_ResetActivityFlag( SCAN_ACTIVITY );
    403          #endif /* FEATURE_DUAL_MAC */
    404                }
    405          
    406                if (ZMac_ScanBuf != NULL)
    407                {
    408                  void *pTmp = ZMac_ScanBuf;
    409                  ZMac_ScanBuf = NULL;
    410                  osal_mem_free(pTmp);
    411                }
    412                break;
    413          
    414              case MAC_MLME_START_CNF:
    415                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    416                {
    417                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    418          #ifdef FEATURE_DUAL_MAC
    419                  DMMGR_ResetActivityFlag( START_ACTIVITY );
    420          #endif /* FEATURE_DUAL_MAC */
    421                }
    422                break;
    423          
    424              case MAC_MLME_SYNC_LOSS_IND:
    425                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    426                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    427                break;
    428          
    429              case MAC_MLME_POLL_CNF:
    430                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    431                {
    432                  nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    433          #ifdef FEATURE_DUAL_MAC
    434                  DMMGR_ResetActivityFlag( DATA_POLL_ACTIVITY );
    435          #endif /* FEATURE_DUAL_MAC */
    436                }
    437                break;
    438          
    439              case MAC_MLME_COMM_STATUS_IND:
    440                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    441                {
    442                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    443          #ifdef FEATURE_DUAL_MAC
    444                  /**
    445                   * Reset the activity flags if we receive the comm status 
    446                   * indication. The association response and orphan response msg 
    447                   * receives the comm-status indication message as a response. 
    448                   */
    449                  switch ( ((ZMacCommStatusInd_t *) pData)->hdr.Status )
    450                  {
    451                    case ZMAC_SUCCESS:
    452                    case ZMAC_TRANSACTION_OVERFLOW:
    453                    case ZMAC_TRANSACTION_EXPIRED:
    454                    case ZMAC_CHANNEL_ACCESS_FAILURE:
    455                    case ZMAC_NO_RESOURCES:          
    456                    case ZMAC_NO_ACK:
    457                    case ZMAC_COUNTER_ERROR:    
    458                    case ZMAC_INVALID_PARAMETER:
    459                      DMMGR_ResetActivityFlag( ALL_ACTIVITY );
    460                      break;
    461                    default:
    462                      /**
    463                       * If the activity flag is not reset, we need to re-evaluate the
    464                       * and add more case statement above. Note, MAC security is not
    465                       * used by zstack and not supported by dual mac.
    466                       */
    467                      break;
    468                  }
    469          #endif /* FEATURE_DUAL_MAC */
    470                }
    471                break;
    472          
    473              case MAC_MCPS_DATA_CNF:
    474              {
    475          #ifdef FEATURE_DUAL_MAC
    476                if ( pData->dataCnf.pDataReq != NULL )
    477                {
    478                  if ( DMMGR_IsDefaultMac() )
    479                  {
    480                    DMMGR_ProcessMacDataCnf((macMcpsDataCnf_t *)pData);
    481                  }
    482                  
    483                  mac_msg_deallocate((uint8 **)&pData->dataCnf.pDataReq); 
    484                }
    485                
    486                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    487                {
    488                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    489                }
    490          
    491                DMMGR_ResetActivityFlag( DATA_ACTIVITY );
    492          #else
    493                if (pData->dataCnf.pDataReq != NULL)
    494                {
    495                  mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    496                }
    497          
    498                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    499                {
    500                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    501                }
    502          
    503          #endif /* FEATURE_DUAL_MAC */
    504              }
    505              break;
    506          
    507              case MAC_MCPS_DATA_IND:
    508                {
    509                  /*
    510                     Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    511                     buffer and re-organize the contents into ZMAC format.
    512                  */
    513                  ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    514                  uint8 event, status, len, *msdu;
    515          
    516                  /* Store parameters */
    517                  event = pData->hdr.event;
    518                  status = pData->hdr.status;
    519                  len = pData->dataInd.msdu.len;
    520                  msdu = pData->dataInd.msdu.p;
    521          
    522                  /* Copy security fields */
    523                  osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
    524          
    525                  /* Copy mac fields one by one since the two buffers overlap. */
    526                  osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
    527                  osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
    528                  pDataInd->Timestamp = pData->dataInd.mac.timestamp;
    529                  pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
    530                  pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
    531                  pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
    532                  pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
    533                  pDataInd->Correlation = pData->dataInd.mac.correlation;
    534                  pDataInd->Rssi = pData->dataInd.mac.rssi;
    535                  pDataInd->Dsn = pData->dataInd.mac.dsn;
    536          
    537                  /* Restore parameters */
    538                  pDataInd->hdr.Status = status;
    539                  pDataInd->hdr.Event = event;
    540                  pDataInd->msduLength = len;
    541          
    542                  if (len)
    543                    pDataInd->msdu = msdu;
    544                  else
    545                    pDataInd->msdu = NULL;
    546          
    547                  if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    548                    nwk_MTCallbackSubNwkDataInd ( pDataInd );
    549                }
    550          
    551                /* free buffer */
    552                mac_msg_deallocate( (uint8 **)&pData );
    553                break;
    554          
    555              case MAC_MCPS_PURGE_CNF:
    556                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    557                {
    558                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    559          #ifdef FEATURE_DUAL_MAC
    560                  DMMGR_ResetActivityFlag( DATA_PURGE_ACTIVITY );
    561          #endif /* FEATURE_DUAL_MAC */
    562          
    563                }
    564                break;
    565          
    566              case MAC_MLME_POLL_IND:
    567                  if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    568                  {
    569                    nwk_MTCallbackSubNwkPollInd( (ZMacPollInd_t *)pData );
    570                  }
    571                break;
    572          
    573              default:
    574                break;
    575            }
    576          }
    577          #endif
    578          
    579          /********************************************************************************************************
    580           * @fn      MAC_CbackCheckPending
    581           *
    582           * @brief   Return number of pending indirect msg
    583           *
    584           * @param   None
    585           *
    586           * @return  Number of indirect msg holding
    587           ********************************************************************************************************/
    588          #ifdef FEATURE_DUAL_MAC
    589          uint8 ZMacCbackCheckPending(void)
    590          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    591          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    592          #endif 
    593          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    594          #if !defined (NONWK)
    595            if ( ZSTACK_ROUTER_BUILD )
    596            {
    597              return (nwkDB_ReturnIndirectHoldingCnt());
    598            }
    599            else
    600            {
    601              return (0);
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    602            }
    603          #else
    604            return (0);
    605          #endif
    606          }
    607          
    608          /**************************************************************************************************
    609           * @fn          MAC_CbackQueryRetransmit
    610           *
    611           * @brief       This function callback function returns whether or not to continue MAC
    612           *              retransmission.
    613           *              A return value '0x00' will indicate no continuation of retry and a return value
    614           *              '0x01' will indicate to continue retransmission. This callback function shall be
    615           *              used to stop continuing retransmission for RF4CE.
    616           *              MAC shall call this callback function whenever it finishes transmitting a packet
    617           *              for macMaxFrameRetries times.
    618           *
    619           * input parameters
    620           *
    621           * None.
    622           *
    623           * output parameters
    624           *
    625           * None.
    626           *
    627           * @return      0x00 to stop retransmission, 0x01 to continue retransmission.
    628           **************************************************************************************************
    629          */
    630          #ifdef FEATURE_DUAL_MAC
    631          uint8 ZMacCbackQueryRetransmit(void)
    632          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          uint8 MAC_CbackQueryRetransmit(void)
   \                     MAC_CbackQueryRetransmit:
    634          #endif /* FEATURE_DUAL_MAC */
    635          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    636            return(0);
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    637          }
    638          
    639          /********************************************************************************************************
    640           * @fn      ZMacLqiAdjustMode
    641           *
    642           * @brief   Sets/return LQI adjust mode
    643           *
    644           * @param   mode - LQI_ADJ_GET = return current mode only
    645           *                 LQI_ADJ_OFF = disable LQI adjusts
    646           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    647           *
    648           * @return  current LQI adjust mode
    649           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    651          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
    652            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV       A,#-0x1
   \   000008   68           XRL       A,R0
   \   000009   6005         JZ        ??ZMacLqiAdjustMode_0
    653            {
    654              lqiAdjMode = mode;
   \   00000B   E9           MOV       A,R1
   \   00000C   90....       MOV       DPTR,#lqiAdjMode
   \   00000F   F0           MOVX      @DPTR,A
    655            }
    656            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV       DPTR,#lqiAdjMode
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   D083         POP       DPH
   \   000017   D082         POP       DPL
   \   000019   02....       LJMP      ?BRET
    657          }
    658          
    659          #if !defined NONWK
    660          /********************************************************************************************************
    661           * @fn      ZMacLqiAdjust
    662           *
    663           * @brief   Adjust LQI according to correlation value
    664           *
    665           * @notes - the IEEE 802.15.4 specification provides some general statements on
    666           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    667           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    668           *          802.15.4 signals detectable by the receiver, and LQ values should be
    669           *          uniformly distributed between these two limits." Section E.2.3: "The
    670           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    671           *          received packet. When energy level and SNR information are combined,
    672           *          they can indicate whether a corrupt packet resulted from low signal
    673           *          strength or from high signal strength plus interference."
    674           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    675           *          packet correlation value (related to SNR) to scale incoming LQI value
    676           *          (related to signal strength) to 'derate' noisy packets.
    677           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    678           *          implement their own proprietary LQI adjustment algorithm.
    679           *
    680           * @param   corr - packet correlation value
    681           * @param   lqi  - ptr to link quality (scaled rssi)
    682           *
    683           * @return  *lqi - adjusted link quality
    684           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    686          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
    687            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV       DPTR,#lqiAdjMode
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6051         JZ        ??ZMacLqiAdjust_0
    688            {
    689              uint16 adjLqi = *lqi;
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   7900         MOV       R1,#0x0
    690          
    691              // Keep correlation within theoretical limits
    692              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV       A,R6
   \   00001A   C3           CLR       C
   \   00001B   9432         SUBB      A,#0x32
   \   00001D   5004         JNC       ??ZMacLqiAdjust_1
    693              {
    694                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV       R6,#0x32
   \   000021   8008         SJMP      ??ZMacLqiAdjust_2
    695              }
    696              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV       A,R6
   \   000024   C3           CLR       C
   \   000025   946F         SUBB      A,#0x6f
   \   000027   4002         JC        ??ZMacLqiAdjust_2
    697              {
    698                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV       R6,#0x6e
    699              }
    700          
    701              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV       DPTR,#lqiAdjMode
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6401         XRL       A,#0x1
   \   000031   701F         JNZ       ??ZMacLqiAdjust_3
    702              {
    703                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    704                           which is computed from the incoming correlation value between
    705                           theorectical minimum/maximum values. This is a very simple way
    706                           of 'derating' the incoming LQI as correlation value drops. */
    707                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV       A,R6
   \   000034   24CE         ADD       A,#-0x32
   \   000036   F5..         MOV       ?V0,A
   \   000038   E4           CLR       A
   \   000039   34FF         ADDC      A,#-0x1
   \   00003B   F5..         MOV       ?V1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   85..F0       MOV       B,?V0
   \   000041   A4           MUL       AB
   \   000042   C8           XCH       A,R0
   \   000043   AAF0         MOV       R2,B
   \   000045   85..F0       MOV       B,?V1
   \   000048   A4           MUL       AB
   \   000049   2A           ADD       A,R2
   \   00004A   F9           MOV       R1,A
   \   00004B   7A3C         MOV       R2,#0x3c
   \   00004D   7B00         MOV       R3,#0x0
   \   00004F   12....       LCALL     ?US_DIV_MOD
    708              }
    709              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    710              {
    711                /* MODE2 - location for developer to implement a proprietary algorithm */
    712              }
    713          
    714              // Replace incoming LQI with scaled value
    715              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000052   C3           CLR       C
   \   000053   E9           MOV       A,R1
   \   000054   9401         SUBB      A,#0x1
   \   000056   4004         JC        ??ZMacLqiAdjust_4
   \   000058   74FF         MOV       A,#-0x1
   \   00005A   8001         SJMP      ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   00005C   E8           MOV       A,R0
   \                     ??ZMacLqiAdjust_5:
   \   00005D   8C82         MOV       DPL,R4
   \   00005F   8D83         MOV       DPH,R5
   \   000061   F0           MOVX      @DPTR,A
    716            }
    717          }
   \                     ??ZMacLqiAdjust_0:
   \   000062   7F02         MOV       R7,#0x2
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA
    718          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   MAC_CbackCheckPending
      0     25   MAC_CbackEvent
        0     22   -> MAC_MlmeGetReq
        0     22   -> ZMacLqiAdjust
        0     22   -> mac_msg_deallocate
        0     22   -> nwk_broadcastSend
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     22   -> osal_msg_allocate
        0     22   -> osal_msg_send
      0      0   MAC_CbackQueryRetransmit
      1     32   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  MAC_CbackCheckPending
    1157  MAC_CbackEvent
       5  MAC_CbackQueryRetransmit
     103  ZMacLqiAdjust
      28  ZMacLqiAdjustMode
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      18  zmacCBSizeTable
      30  -- Other

 
 1 298 bytes in segment BANKED_CODE
    30 bytes in segment BANK_RELAYS
    18 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
    48 bytes of CODE     memory
     0 bytes of DATA     memory (+ 1 byte shared)
 1 298 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
