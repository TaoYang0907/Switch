###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  17:08:04
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\mt\MT_UART.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW81D8.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\mt\MT_UART.c" -D BDB_REPORTING -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS
#        -D ZCL_ON_OFF -D ZCL_REPORT -D ZCL_REPORT_DESTINATION_DEVICE -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\MT_UART.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\MT_UART.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          
     80          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     81          uint16  MT_UartMaxZAppBufLen;
     82          bool    MT_UartZAppRxStatus;
     83          #endif
     84          
     85          
     86          /***************************************************************************************************
     87           *                                          LOCAL FUNCTIONS
     88           ***************************************************************************************************/
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_UartInit
     92           *
     93           * @brief   Initialize MT with UART support
     94           *
     95           * @param   None
     96           *
     97           * @return  None
     98          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void MT_UartInit ()
   \                     MT_UartInit:
    100          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    101            halUARTCfg_t uartConfig;
    102          
    103            /* Initialize APP ID */
    104            App_TaskID = 0;
   \   000004   90....       MOV       DPTR,#App_TaskID
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
    105          
    106            /* UART Configuration */
    107            uartConfig.configured           = TRUE;
    108            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
    109            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
    110            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
    111            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
    112            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
    113            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
    114            uartConfig.intEnable            = TRUE;
    115          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    116            uartConfig.callBackFunc         = MT_UartProcessZToolData;
    117          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    118            uartConfig.callBackFunc         = MT_UartProcessZAppData;
    119          #else
    120            uartConfig.callBackFunc         = NULL;
    121          #endif
    122          
    123            /* Start UART */
    124          #if defined (MT_UART_DEFAULT_PORT)
    125            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
    126          #else
    127            /* Silence IAR compiler warning */
    128            (void)uartConfig;
    129          #endif
    130          
    131            /* Initialize for ZApp */
    132          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    133            /* Default max bytes that ZAPP can take */
    134            MT_UartMaxZAppBufLen  = 1;
    135            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    136          #endif
    137          
    138          }
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
    139          
    140          /***************************************************************************************************
    141           * @fn      MT_SerialRegisterTaskID
    142           *
    143           * @brief   This function registers the taskID of the application so it knows
    144           *          where to send the messages whent they come in.
    145           *
    146           * @param   void
    147           *
    148           * @return  void
    149           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    151          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    152            App_TaskID = taskID;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#App_TaskID
   \   000008   F0           MOVX      @DPTR,A
    153          }
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
    154          
    155          /***************************************************************************************************
    156           * @fn      SPIMgr_CalcFCS
    157           *
    158           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    159           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    160           *
    161           * @param   byte *msg_ptr - message pointer
    162           * @param   byte len - length (in bytes) of message
    163           *
    164           * @return  result byte
    165           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    167          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    168            byte x;
    169            byte xorResult;
    170          
    171            xorResult = 0;
   \   000006   7900         MOV       R1,#0x0
    172          
    173            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV       R0,#0x0
   \   00000A   800E         SJMP      ??MT_UartCalcFCS_0
    174              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   E0           MOVX      A,@DPTR
   \   000011   C9           XCH       A,R1
   \   000012   69           XRL       A,R1
   \   000013   F9           MOV       R1,A
   \   000014   08           INC       R0
   \   000015   A3           INC       DPTR
   \   000016   AA82         MOV       R2,DPL
   \   000018   AB83         MOV       R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001A   E8           MOV       A,R0
   \   00001B   C3           CLR       C
   \   00001C   9C           SUBB      A,R4
   \   00001D   40ED         JC        ??MT_UartCalcFCS_1
    175          
    176            return ( xorResult );
   \   00001F   D083         POP       DPH
   \   000021   D082         POP       DPL
   \   000023   02....       LJMP      ?BRET
    177          }
    178          
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_UartProcessZToolData
    182           *
    183           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    184           *          |  1  |     1        |    2    |  0-Len   |   1   |
    185           *
    186           *          Parses the data and determine either is SPI or just simply serial data
    187           *          then send the data to correct place (MT or APP)
    188           *
    189           * @param   port     - UART port
    190           *          event    - Event that causes the callback
    191           *
    192           *
    193           * @return  None
    194           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void MT_UartProcessZToolData ( uint8 port, uint8 event )
   \                     MT_UartProcessZToolData:
    196          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    197            uint8  ch;
    198            uint8  bytesInRxBuffer;
    199            
    200            (void)event;  // Intentionally unreferenced parameter
   \   00000C   8050         SJMP      ??MT_UartProcessZToolData_0
    201          
    202            while (Hal_UART_RxBufLen(port))
    203            {
    204              HalUARTRead (port, &ch, 1);
    205          
    206              switch (state)
    207              {
    208                case SOP_STATE:
    209                  if (ch == MT_UART_SOF)
    210                    state = LEN_STATE;
    211                  break;
    212          
    213                case LEN_STATE:
    214                  LEN_Token = ch;
    215          
    216                  tempDataLen = 0;
    217          
    218                  /* Allocate memory for the data */
    219                  pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
    220                                                                  MT_RPC_FRAME_HDR_SZ + LEN_Token );
    221          
    222                  if (pMsg)
    223                  {
    224                    /* Fill up what we can */
    225                    pMsg->hdr.event = CMD_SERIAL_MSG;
   \                     ??MT_UartProcessZToolData_1:
   \   00000E   90....       MOV       DPTR,#pMsg
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F583         MOV       DPH,A
   \   000017   8882         MOV       DPL,R0
   \   000019   7401         MOV       A,#0x1
   \   00001B   F0           MOVX      @DPTR,A
    226                    pMsg->msg = (uint8*)(pMsg+1);
   \   00001C   90....       MOV       DPTR,#pMsg
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   2404         ADD       A,#0x4
   \   000022   F8           MOV       R0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   3400         ADDC      A,#0x0
   \   000027   F9           MOV       R1,A
   \   000028   90....       MOV       DPTR,#pMsg
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FA           MOV       R2,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F583         MOV       DPH,A
   \   000031   8A82         MOV       DPL,R2
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E8           MOV       A,R0
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   E9           MOV       A,R1
   \   000039   F0           MOVX      @DPTR,A
    227                    pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
   \   00003A   90....       MOV       DPTR,#LEN_Token
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   C0E0         PUSH      A
   \   000040   90....       MOV       DPTR,#pMsg
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F8           MOV       R0,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F583         MOV       DPH,A
   \   000049   8882         MOV       DPL,R0
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F8           MOV       R0,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F583         MOV       DPH,A
   \   000053   8882         MOV       DPL,R0
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
    228                    state = CMD_STATE1;
   \   000058   90....       MOV       DPTR,#state
   \   00005B   7401         MOV       A,#0x1
   \                     ??MT_UartProcessZToolData_2:
   \   00005D   F0           MOVX      @DPTR,A
    229                  }
    230                  else
    231                  {
    232                    state = SOP_STATE;
    233                    return;
    234                  }
    235                  break;
   \                     ??MT_UartProcessZToolData_0:
   \   00005E                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   00005E   EE           MOV       A,R6
   \   00005F   F9           MOV       R1,A
   \   000060   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000063   EA           MOV       A,R2
   \   000064   4B           ORL       A,R3
   \   000065   7003         JNZ       $+5
   \   000067   02....       LJMP      ??MT_UartProcessZToolData_3 & 0xFFFF
   \   00006A                ; Setup parameters for call to function HalUARTRead
   \   00006A   7C01         MOV       R4,#0x1
   \   00006C   7D00         MOV       R5,#0x0
   \   00006E   AA..         MOV       R2,?XSP + 0
   \   000070   AB..         MOV       R3,?XSP + 1
   \   000072   EE           MOV       A,R6
   \   000073   F9           MOV       R1,A
   \   000074   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000077   90....       MOV       DPTR,#state
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   601A         JZ        ??MT_UartProcessZToolData_4
   \   00007D   14           DEC       A
   \   00007E   6066         JZ        ??MT_UartProcessZToolData_5
   \   000080   14           DEC       A
   \   000081   7003         JNZ       $+5
   \   000083   02....       LJMP      ??MT_UartProcessZToolData_6 & 0xFFFF
   \   000086   14           DEC       A
   \   000087   6020         JZ        ??MT_UartProcessZToolData_7
   \   000089   14           DEC       A
   \   00008A   7003         JNZ       $+5
   \   00008C   02....       LJMP      ??MT_UartProcessZToolData_8 & 0xFFFF
   \   00008F   14           DEC       A
   \   000090   7003         JNZ       $+5
   \   000092   02....       LJMP      ??MT_UartProcessZToolData_9 & 0xFFFF
   \   000095   80C7         SJMP      ??MT_UartProcessZToolData_0
   \                     ??MT_UartProcessZToolData_4:
   \   000097   85..82       MOV       DPL,?XSP + 0
   \   00009A   85..83       MOV       DPH,?XSP + 1
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   64FE         XRL       A,#0xfe
   \   0000A0   70BC         JNZ       ??MT_UartProcessZToolData_0
   \   0000A2   90....       MOV       DPTR,#state
   \   0000A5   7403         MOV       A,#0x3
   \   0000A7   80B4         SJMP      ??MT_UartProcessZToolData_2
   \                     ??MT_UartProcessZToolData_7:
   \   0000A9   85..82       MOV       DPL,?XSP + 0
   \   0000AC   85..83       MOV       DPH,?XSP + 1
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   90....       MOV       DPTR,#LEN_Token
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   90....       MOV       DPTR,#tempDataLen
   \   0000B7   E4           CLR       A
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9                ; Setup parameters for call to function osal_msg_allocate
   \   0000B9   90....       MOV       DPTR,#LEN_Token
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   2407         ADD       A,#0x7
   \   0000BF   FA           MOV       R2,A
   \   0000C0   E4           CLR       A
   \   0000C1   3400         ADDC      A,#0x0
   \   0000C3   FB           MOV       R3,A
   \   0000C4   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0000C7   90....       MOV       DPTR,#pMsg
   \   0000CA   EA           MOV       A,R2
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   A3           INC       DPTR
   \   0000CD   EB           MOV       A,R3
   \   0000CE   F0           MOVX      @DPTR,A
   \   0000CF   90....       MOV       DPTR,#pMsg
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   F8           MOV       R0,A
   \   0000D4   A3           INC       DPTR
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F9           MOV       R1,A
   \   0000D7   E8           MOV       A,R0
   \   0000D8   49           ORL       A,R1
   \   0000D9   6003         JZ        $+5
   \   0000DB   02....       LJMP      ??MT_UartProcessZToolData_1 & 0xFFFF
   \   0000DE   90....       MOV       DPTR,#state
   \   0000E1   E4           CLR       A
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   02....       LJMP      ??MT_UartProcessZToolData_3 & 0xFFFF
    236          
    237                case CMD_STATE1:
    238                  pMsg->msg[MT_RPC_POS_CMD0] = ch;
   \                     ??MT_UartProcessZToolData_5:
   \   0000E6   85..82       MOV       DPL,?XSP + 0
   \   0000E9   85..83       MOV       DPH,?XSP + 1
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   C0E0         PUSH      A
   \   0000EF   90....       MOV       DPTR,#pMsg
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   F8           MOV       R0,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   F583         MOV       DPH,A
   \   0000F8   8882         MOV       DPL,R0
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F8           MOV       R0,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   F583         MOV       DPH,A
   \   000102   8882         MOV       DPL,R0
   \   000104   A3           INC       DPTR
   \   000105   D0E0         POP       A
   \   000107   F0           MOVX      @DPTR,A
    239                  state = CMD_STATE2;
   \   000108   90....       MOV       DPTR,#state
   \   00010B   7402         MOV       A,#0x2
   \   00010D   02....       LJMP      ??MT_UartProcessZToolData_2 & 0xFFFF
    240                  break;
    241          
    242                case CMD_STATE2:
    243                  pMsg->msg[MT_RPC_POS_CMD1] = ch;
   \                     ??MT_UartProcessZToolData_6:
   \   000110   85..82       MOV       DPL,?XSP + 0
   \   000113   85..83       MOV       DPH,?XSP + 1
   \   000116   E0           MOVX      A,@DPTR
   \   000117   C0E0         PUSH      A
   \   000119   90....       MOV       DPTR,#pMsg
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   F8           MOV       R0,A
   \   00011E   A3           INC       DPTR
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   F583         MOV       DPH,A
   \   000122   8882         MOV       DPL,R0
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   F8           MOV       R0,A
   \   000128   A3           INC       DPTR
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   F583         MOV       DPH,A
   \   00012C   8882         MOV       DPL,R0
   \   00012E   A3           INC       DPTR
   \   00012F   A3           INC       DPTR
   \   000130   D0E0         POP       A
   \   000132   F0           MOVX      @DPTR,A
    244                  /* If there is no data, skip to FCS state */
    245                  if (LEN_Token)
   \   000133   90....       MOV       DPTR,#LEN_Token
   \   000136   E0           MOVX      A,@DPTR
   \   000137   7003         JNZ       $+5
   \   000139   02....       LJMP      ??MT_UartProcessZToolData_10 & 0xFFFF
    246                  {
    247                    state = DATA_STATE;
   \   00013C   90....       MOV       DPTR,#state
   \   00013F   7404         MOV       A,#0x4
   \   000141   02....       LJMP      ??MT_UartProcessZToolData_2 & 0xFFFF
    248                  }
    249                  else
    250                  {
    251                    state = FCS_STATE;
    252                  }
    253                  break;
    254          
    255                case DATA_STATE:
    256          
    257                  /* Fill in the buffer the first byte of the data */
    258                  pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
   \                     ??MT_UartProcessZToolData_8:
   \   000144   85..82       MOV       DPL,?XSP + 0
   \   000147   85..83       MOV       DPH,?XSP + 1
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   C0E0         PUSH      A
   \   00014D   90....       MOV       DPTR,#tempDataLen
   \   000150   E0           MOVX      A,@DPTR
   \   000151   F8           MOV       R0,A
   \   000152   90....       MOV       DPTR,#pMsg
   \   000155   E0           MOVX      A,@DPTR
   \   000156   FA           MOV       R2,A
   \   000157   A3           INC       DPTR
   \   000158   E0           MOVX      A,@DPTR
   \   000159   F583         MOV       DPH,A
   \   00015B   8A82         MOV       DPL,R2
   \   00015D   A3           INC       DPTR
   \   00015E   A3           INC       DPTR
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   28           ADD       A,R0
   \   000161   FA           MOV       R2,A
   \   000162   A3           INC       DPTR
   \   000163   E0           MOVX      A,@DPTR
   \   000164   3400         ADDC      A,#0x0
   \   000166   8A82         MOV       DPL,R2
   \   000168   F583         MOV       DPH,A
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   D0E0         POP       A
   \   00016F   F0           MOVX      @DPTR,A
   \   000170   90....       MOV       DPTR,#tempDataLen
   \   000173   E0           MOVX      A,@DPTR
   \   000174   04           INC       A
   \   000175   F0           MOVX      @DPTR,A
    259          
    260                  /* Check number of bytes left in the Rx buffer */
    261                  bytesInRxBuffer = Hal_UART_RxBufLen(port);
   \   000176                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000176   EE           MOV       A,R6
   \   000177   F9           MOV       R1,A
   \   000178   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   00017B   EA           MOV       A,R2
   \   00017C   FF           MOV       R7,A
    262          
    263                  /* If the remain of the data is there, read them all, otherwise, just read enough */
    264                  if (bytesInRxBuffer <= LEN_Token - tempDataLen)
   \   00017D   90....       MOV       DPTR,#tempDataLen
   \   000180   E0           MOVX      A,@DPTR
   \   000181   F8           MOV       R0,A
   \   000182   90....       MOV       DPTR,#pMsg
   \   000185   E0           MOVX      A,@DPTR
   \   000186   FA           MOV       R2,A
   \   000187   A3           INC       DPTR
   \   000188   E0           MOVX      A,@DPTR
   \   000189   F583         MOV       DPH,A
   \   00018B   8A82         MOV       DPL,R2
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   28           ADD       A,R0
   \   000191   FA           MOV       R2,A
   \   000192   A3           INC       DPTR
   \   000193   E0           MOVX      A,@DPTR
   \   000194   3400         ADDC      A,#0x0
   \   000196   8A82         MOV       DPL,R2
   \   000198   F583         MOV       DPH,A
   \   00019A   A3           INC       DPTR
   \   00019B   A3           INC       DPTR
   \   00019C   A3           INC       DPTR
   \   00019D   AA82         MOV       R2,DPL
   \   00019F   AB83         MOV       R3,DPH
   \   0001A1   90....       MOV       DPTR,#LEN_Token
   \   0001A4   E0           MOVX      A,@DPTR
   \   0001A5   C3           CLR       C
   \   0001A6   98           SUBB      A,R0
   \   0001A7   FC           MOV       R4,A
   \   0001A8   95E0         SUBB      A,0xE0 /* A   */
   \   0001AA   FD           MOV       R5,A
   \   0001AB   EF           MOV       A,R7
   \   0001AC   F8           MOV       R0,A
   \   0001AD   C3           CLR       C
   \   0001AE   EC           MOV       A,R4
   \   0001AF   98           SUBB      A,R0
   \   0001B0   ED           MOV       A,R5
   \   0001B1   9400         SUBB      A,#0x0
   \   0001B3   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0001B5   65D0         XRL       A,PSW
   \   0001B7   33           RLC       A
   \   0001B8   4010         JC        ??MT_UartProcessZToolData_11
    265                  {
    266                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
   \   0001BA                ; Setup parameters for call to function HalUARTRead
   \   0001BA   EF           MOV       A,R7
   \   0001BB   FC           MOV       R4,A
   \   0001BC   7D00         MOV       R5,#0x0
   \   0001BE   EE           MOV       A,R6
   \   0001BF   F9           MOV       R1,A
   \   0001C0   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    267                    tempDataLen += bytesInRxBuffer;
   \   0001C3   90....       MOV       DPTR,#tempDataLen
   \   0001C6   E0           MOVX      A,@DPTR
   \   0001C7   2F           ADD       A,R7
   \   0001C8   800C         SJMP      ??MT_UartProcessZToolData_12
    268                  }
    269                  else
    270                  {
    271                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
   \                     ??MT_UartProcessZToolData_11:
   \   0001CA                ; Setup parameters for call to function HalUARTRead
   \   0001CA   EE           MOV       A,R6
   \   0001CB   F9           MOV       R1,A
   \   0001CC   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    272                    tempDataLen += (LEN_Token - tempDataLen);
   \   0001CF   90....       MOV       DPTR,#LEN_Token
   \   0001D2   E0           MOVX      A,@DPTR
   \   0001D3   90....       MOV       DPTR,#tempDataLen
   \                     ??MT_UartProcessZToolData_12:
   \   0001D6   F0           MOVX      @DPTR,A
    273                  }
    274          
    275                  /* If number of bytes read is equal to data length, time to move on to FCS */
    276                  if ( tempDataLen == LEN_Token )
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   F8           MOV       R0,A
   \   0001D9   90....       MOV       DPTR,#LEN_Token
   \   0001DC   E0           MOVX      A,@DPTR
   \   0001DD   68           XRL       A,R0
   \   0001DE   6003         JZ        $+5
   \   0001E0   02....       LJMP      ??MT_UartProcessZToolData_0 & 0xFFFF
    277                      state = FCS_STATE;
   \                     ??MT_UartProcessZToolData_10:
   \   0001E3   90....       MOV       DPTR,#state
   \   0001E6   7405         MOV       A,#0x5
   \   0001E8   02....       LJMP      ??MT_UartProcessZToolData_2 & 0xFFFF
    278          
    279                  break;
    280          
    281                case FCS_STATE:
    282          
    283                  FSC_Token = ch;
   \                     ??MT_UartProcessZToolData_9:
   \   0001EB   85..82       MOV       DPL,?XSP + 0
   \   0001EE   85..83       MOV       DPH,?XSP + 1
   \   0001F1   E0           MOVX      A,@DPTR
   \   0001F2   90....       MOV       DPTR,#FSC_Token
   \   0001F5   F0           MOVX      @DPTR,A
    284          
    285                  /* Make sure it's correct */
    286                  if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
   \   0001F6                ; Setup parameters for call to function MT_UartCalcFCS
   \   0001F6   90....       MOV       DPTR,#LEN_Token
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   2403         ADD       A,#0x3
   \   0001FC   F9           MOV       R1,A
   \   0001FD   90....       MOV       DPTR,#pMsg
   \   000200   E0           MOVX      A,@DPTR
   \   000201   F8           MOV       R0,A
   \   000202   A3           INC       DPTR
   \   000203   E0           MOVX      A,@DPTR
   \   000204   F583         MOV       DPH,A
   \   000206   8882         MOV       DPL,R0
   \   000208   A3           INC       DPTR
   \   000209   A3           INC       DPTR
   \   00020A   E0           MOVX      A,@DPTR
   \   00020B   FA           MOV       R2,A
   \   00020C   A3           INC       DPTR
   \   00020D   E0           MOVX      A,@DPTR
   \   00020E   FB           MOV       R3,A
   \   00020F   12....       LCALL     `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   000212   E9           MOV       A,R1
   \   000213   F8           MOV       R0,A
   \   000214   90....       MOV       DPTR,#FSC_Token
   \   000217   E0           MOVX      A,@DPTR
   \   000218   68           XRL       A,R0
   \   000219   90....       MOV       DPTR,#pMsg
   \   00021C   700F         JNZ       ??MT_UartProcessZToolData_13
    287                  {
    288                    osal_msg_send( App_TaskID, (byte *)pMsg );
   \   00021E                ; Setup parameters for call to function osal_msg_send
   \   00021E   E0           MOVX      A,@DPTR
   \   00021F   FA           MOV       R2,A
   \   000220   A3           INC       DPTR
   \   000221   E0           MOVX      A,@DPTR
   \   000222   FB           MOV       R3,A
   \   000223   90....       MOV       DPTR,#App_TaskID
   \   000226   E0           MOVX      A,@DPTR
   \   000227   F9           MOV       R1,A
   \   000228   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00022B   8008         SJMP      ??MT_UartProcessZToolData_14
    289                  }
    290                  else
    291                  {
    292                    /* deallocate the msg */
    293                    osal_msg_deallocate ( (uint8 *)pMsg );
   \                     ??MT_UartProcessZToolData_13:
   \   00022D                ; Setup parameters for call to function osal_msg_deallocate
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   FA           MOV       R2,A
   \   00022F   A3           INC       DPTR
   \   000230   E0           MOVX      A,@DPTR
   \   000231   FB           MOV       R3,A
   \   000232   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    294                  }
    295          
    296                  /* Reset the state, send or discard the buffers at this point */
    297                  state = SOP_STATE;
   \                     ??MT_UartProcessZToolData_14:
   \   000235   90....       MOV       DPTR,#state
   \   000238   E4           CLR       A
   \   000239   02....       LJMP      ??MT_UartProcessZToolData_2 & 0xFFFF
    298          
    299                  break;
    300          
    301                default:
    302                 break;
    303              }
    304            }
    305          }
   \                     ??MT_UartProcessZToolData_3:
   \   00023C   7401         MOV       A,#0x1
   \   00023E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000241   7F02         MOV       R7,#0x2
   \   000243   02....       LJMP      ?BANKED_LEAVE_XDATA
    306          
    307          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    308          /***************************************************************************************************
    309           * @fn      MT_UartProcessZAppData
    310           *
    311           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    312           *          |  1  |  2   |       1         |  1   |
    313           *
    314           *          Parses the data and determine either is SPI or just simply serial data
    315           *          then send the data to correct place (MT or APP)
    316           *
    317           * @param   port    - UART port
    318           *          event   - Event that causes the callback
    319           *
    320           *
    321           * @return  None
    322           ***************************************************************************************************/
    323          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    324          {
    325          
    326            osal_event_hdr_t  *msg_ptr;
    327            uint16 length = 0;
    328            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    329          
    330            /*
    331               If maxZAppBufferLength is 0 or larger than current length
    332               the entire length of the current buffer is returned.
    333            */
    334            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    335            {
    336              length = MT_UartMaxZAppBufLen;
    337            }
    338            else
    339            {
    340              length = rxBufLen;
    341            }
    342          
    343            /* Verify events */
    344            if (event == HAL_UART_TX_FULL)
    345            {
    346              // Do something when TX if full
    347              return;
    348            }
    349          
    350            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    351            {
    352              if ( App_TaskID )
    353              {
    354                /*
    355                   If Application is ready to receive and there is something
    356                   in the Rx buffer then send it up
    357                */
    358                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    359                {
    360                  /* Disable App flow control until it processes the current data */
    361                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    362          
    363                  /* 2 more bytes are added, 1 for CMD type, other for length */
    364                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    365                  if ( msg_ptr )
    366                  {
    367                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    368                    msg_ptr->status = length;
    369          
    370                    /* Read the data of Rx buffer */
    371                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    372          
    373                    /* Send the raw data to application...or where ever */
    374                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    375                  }
    376                }
    377              }
    378            }
    379          }
    380          
    381          /***************************************************************************************************
    382           * @fn      SPIMgr_ZAppBufferLengthRegister
    383           *
    384           * @brief
    385           *
    386           * @param   maxLen - Max Length that the application wants at a time
    387           *
    388           * @return  None
    389           *
    390           ***************************************************************************************************/
    391          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    392          {
    393            /* If the maxLen is larger than the RX buff, something is not right */
    394            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    395              MT_UartMaxZAppBufLen = maxLen;
    396            else
    397              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    398          }
    399          
    400          /***************************************************************************************************
    401           * @fn      SPIMgr_AppFlowControl
    402           *
    403           * @brief
    404           *
    405           * @param   status - ready to send or not
    406           *
    407           * @return  None
    408           *
    409           ***************************************************************************************************/
    410          void MT_UartAppFlowControl ( bool status )
    411          {
    412          
    413            /* Make sure only update if needed */
    414            if (status != MT_UartZAppRxStatus )
    415            {
    416              MT_UartZAppRxStatus = status;
    417            }
    418          
    419            /* App is ready to read again, ProcessZAppData have to be triggered too */
    420            if (status == MT_UART_ZAPP_RX_READY)
    421            {
    422              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    423            }
    424          
    425          }
    426          
    427          #endif //ZAPP
    428          
    429          /***************************************************************************************************
    430          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     11   MT_UartCalcFCS
      2      0   MT_UartInit
      1     11   MT_UartProcessZToolData
        0     11   -> HalUARTRead
        0     11   -> Hal_UART_RxBufLen
        0     11   -> MT_UartCalcFCS
        0     11   -> osal_msg_allocate
        0     11   -> osal_msg_deallocate
        0     11   -> osal_msg_send
      2      0   MT_UartRegisterTaskID


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  App_TaskID
       2  CMD_Token
       1  FSC_Token
       1  LEN_Token
      38  MT_UartCalcFCS
      16  MT_UartInit
     582  MT_UartProcessZToolData
      16  MT_UartRegisterTaskID
       2  pMsg
       1  state
       1  tempDataLen
      24  -- Other

 
 652 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_Z
 
  24 bytes of CODE     memory
 652 bytes of HUGECODE memory
   9 bytes of XDATA    memory

Errors: none
Warnings: none
