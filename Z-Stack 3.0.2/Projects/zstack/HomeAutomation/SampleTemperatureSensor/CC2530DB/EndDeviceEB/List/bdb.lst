###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               21/Jul/2020  00:36:31
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWBB9.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\bdb\bdb.c" -D BDB_REPORTING -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS
#        -D ZCL_ON_OFF -D ZCL_REPORT -D ZCL_REPORT_DESTINATION_DEVICE -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\bdb.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\bdb.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
      1          /**************************************************************************************************
      2            Filename:       bdb.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Base Device Behavior functions and attributes.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bdb.h"
     45          #include "ZDApp.h"
     46          #include "OSAL.h"
     47          #include "ZDConfig.h"
     48          #include "hal_led.h"
     49          #include "ZDObject.h"
     50          #include "OSAL_Nv.h"
     51          #include "AddrMgr.h"
     52          #include "ZDSecMgr.h"
     53          #include "nwk.h"
     54          #include "nwk_util.h"
     55          #include "ssp_hash.h"
     56          #ifdef BDB_REPORTING
     57          #include "bdb_Reporting.h"
     58          #endif 
     59          
     60          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     61          #include "gp_interface.h"
     62          #include "gp_common.h"
     63          #include "dgp_stub.h"
     64          #endif
     65          
     66          #include "bdb_interface.h"
     67          
     68          #if defined ( INTER_PAN ) 
     69          #if defined ( BDB_TL_INITIATOR )  
     70          #include "bdb_touchlink_initiator.h"
     71          #endif
     72          #if defined ( BDB_TL_TARGET )  
     73          #include "bdb_touchlink_target.h"
     74          #endif
     75          #endif
     76             
     77          #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
     78            #include "bdb_touchlink.h"
     79          #endif
     80           
     81          #ifdef MT_APP_CNF_FUNC
     82          #include "MT_APP_CONFIG.h"
     83          #endif
     84             
     85           /*********************************************************************
     86           * MACROS
     87           */
     88          //This is actually the channels used
     89          #define vScanChannels  zgDefaultChannelList
     90             
     91           /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          #define NUMBER_OF_CHANNELS     16
     96          
     97          #define CHANNEL_11_MASK_POS    11
     98          #define CHANNEL_26_MASK_POS    26
     99             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
   \                     bdb_FB_InitiatorCurrentCyclesNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105           
    106           
    107           /*********************************************************************
    108           * GLOBAL VARIABLES
    109           */
    110          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          byte bdb_TaskID;
   \                     bdb_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    112          bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
   \                     bdbAttributes:
   \   000000                DS 19
   \   000013                REQUIRE `?<Initializer for bdbAttributes>`
   \   000013                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          epList_t *bdb_HeadEpDescriptorList = NULL;
   \                     bdb_HeadEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          epList_t *bdb_CurrEpDescriptorList = NULL;
   \                     bdb_CurrEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    115          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          bdbFindingBindingRespondent_t *pRespondentHead = NULL;
   \                     pRespondentHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
   \                     pRespondentCurr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          bdbFindingBindingRespondent_t *pRespondentNext = NULL;
   \                     pRespondentNext:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    119          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          bdbCommissioningProcedureState_t bdbCommissioningProcedureState; 
   \                     bdbCommissioningProcedureState:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
   \                     bdb_initialization:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    122          
    123          //Nwk formation and nwk steering for nodes not in nwk

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          bool vDoPrimaryScan = TRUE;
   \                     vDoPrimaryScan:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for vDoPrimaryScan>`
   \   000001                REQUIRE __INIT_XDATA_I
    125          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
   \                     zgBdbInstallCodeCRC:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
   \   000012                REQUIRE __INIT_XDATA_I
    127          
    128          //Pointer of the nwk being tried in association process
    129          #if (ZG_BUILD_JOINING_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          static networkDesc_t *pBDBListNwk = NULL;
   \                     pBDBListNwk:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    131          #endif
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 bdb_ZclTransactionSequenceNumber=0x00;
   \                     bdb_ZclTransactionSequenceNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          bool touchLinkTargetEnabled = FALSE;
   \                     touchLinkTargetEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          
    137           /*********************************************************************
    138           * EXTERNAL VARIABLES
    139           */
    140          
    141          extern devStartModes_t devStartMode;
    142          extern bool  requestNewTrustCenterLinkKey;
    143          extern uint32 requestLinkKeyTimeout;
    144          extern uint32 ZDApp_SavedPollRate;
    145          
    146          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
    147          extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
    148          extern uint8 bdbIndentifyActiveEndpoint;
    149          #endif
    150          
    151          extern bdbFindingBindingRespondent_t *pRespondentNext;
    152          
    153          #ifndef DISABLE_GREENPOWER_BASIC_PROXY
    154          extern ZDO_DeviceAnnce_t aliasConflictAnnce;
    155          #endif
    156          
    157          /*********************************************************************
    158           * EXTERNAL FUNCTIONS
    159           */
    160          
    161          extern void ZDApp_ResetTimerStart( uint16 delay );
    162          extern void ZDApp_NodeProfileSync( uint8 stackProfile );
    163          extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    164          extern uint8 ZDApp_ReadNetworkRestoreState( void );
    165          
    166          extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
    167          extern void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
    168          extern void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
    169          
    170          /*********************************************************************
    171           * LOCAL VARIABLES
    172           */
    173          #if (ZG_BUILD_JOINING_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174            static uint8 bdb_nwkAssocRetriesCount = 0;
   \                     bdb_nwkAssocRetriesCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    175          #endif
    176          #if (ZG_BUILD_COORDINATOR_TYPE)
    177            static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
    178          #endif
    179            
    180          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    181          //Latch to save the status success of any attempt in the periodic F&B process  

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static uint8 bdb_FBStateSuccessLatch = FALSE;
   \                     bdb_FBStateSuccessLatch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    183          #endif
    184           /*********************************************************************
    185           * LOCAL FUNCTIONS
    186           */
    187          static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
    188          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
    189          static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg);
    190          
    191          #if (ZG_BUILD_JOINING_TYPE)
    192          static void bdb_requestTCStackVersion(void);
    193          static void bdb_requestTCLinkKey(void);
    194          static void bdb_requestVerifyTCLinkKey(void);
    195          static void bdb_tryNwkAssoc(void);
    196          #endif
    197          
    198          
    199          static void bdb_processTimeout(void);
    200          static void bdb_startResumeCommissioningProcess(void);
    201          static void bdb_nwkSteeringDeviceOnNwk(void);
    202          static void bdb_nwkJoiningFormation(bool isJoining);
    203          
    204          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    205          static uint8 gp_ChangeChannelReq(void);
    206          static void gp_CBInit(void);
    207          #endif
    208          
    209          
    210          #if (ZG_BUILD_COORDINATOR_TYPE)
    211          static void bdb_TCProcessJoiningList(void);
    212          static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
    213          #endif
    214          #if (ZG_BUILD_COORDINATOR_TYPE)
    215          static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
    216          #endif

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL; 
   \                     pfnCommissioningStatusCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    218          #if (ZG_BUILD_JOINING_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
   \                     pfnCBKETCLinkKeyExchange:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;   
   \                     pfnFilterNwkDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    221          #endif
    222          
    223          
    224          
    225          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
    226          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
    227          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
    228          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
    229          void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg);
    230          
    231          /*********************************************************************
    232           * PUBLIC FUNCTIONS
    233           *********************************************************************/
    234          void bdb_filterNwkDisc(void);
    235          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
    236          
    237          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
    238          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
    239          
    240           /*********************************************************************
    241           * @fn          bdb_Init
    242           *
    243           * @brief       Initialization function for the Base Device Behavior.
    244           *
    245           * @param       task_id - bdb_TaskID Task ID
    246           *
    247           * @return      none
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          void bdb_Init( byte task_id )
   \                     bdb_Init:
    250          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    251            bdb_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#bdb_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    252              
    253          #if (ZG_BUILD_COORDINATOR_TYPE)
    254            if(ZG_DEVICE_COORDINATOR_TYPE)
    255            {
    256              if(bdbAttributes.bdbJoinUsesInstallCodeKey)
    257              {
    258                zgAllowInstallCodes = ZG_IC_MUST_USED;
    259              }
    260            }
    261          #endif
    262            
    263          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )  
    264            touchLinkInitiator_InitDevice( );
    265          #endif
    266          
    267          #if (BDB_REPORTING)
    268            bdb_RepInit();
   \   00000B                ; Setup parameters for call to function bdb_RepInit
   \   00000B   12....       LCALL     `??bdb_RepInit::?relay`; Banked call to: bdb_RepInit
    269          #endif  
    270            
    271            //Register ZDO callbacks
    272            ZDO_RegisterForZDOMsg ( task_id, Node_Desc_rsp );
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A02         MOV       R2,#0x2
   \   000010   7B80         MOV       R3,#-0x80
   \   000012   EE           MOV       A,R6
   \   000013   F9           MOV       R1,A
   \   000014   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    273          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
    274            ZDO_RegisterForZDOMsg ( task_id, IEEE_addr_rsp );
   \   000017                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000017   7A01         MOV       R2,#0x1
   \   000019   7B80         MOV       R3,#-0x80
   \   00001B   EE           MOV       A,R6
   \   00001C   F9           MOV       R1,A
   \   00001D   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    275            ZDO_RegisterForZDOMsg ( task_id, Simple_Desc_rsp );
   \   000020                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000020   7A04         MOV       R2,#0x4
   \   000022   7B80         MOV       R3,#-0x80
   \   000024   EE           MOV       A,R6
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    276          #endif
    277            
    278          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    279            gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
    280            gp_CBInit();
    281          #endif
    282          }
   \   000029   7F01         MOV       R7,#0x1
   \   00002B   02....       LJMP      ?BANKED_LEAVE_XDATA
    283          
    284          /*********************************************************************
    285           * @fn      bdb_RegisterSimpleDescriptor
    286           *
    287           * @brief   Register the Simple descriptor. This function also registers 
    288           *          the profile's cluster conversion table.
    289           *
    290           * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
    291           *
    292           * @return  none
    293           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
   \                     bdb_RegisterSimpleDescriptor:
    295          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    296            endPointDesc_t *epDesc;
    297          
    298            // Register the application's endpoint descriptor
    299            //  - This memory is allocated and never freed.
    300            epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A07         MOV       R2,#0x7
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    301            if ( epDesc )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   602F         JZ        ??bdb_RegisterSimpleDescriptor_0
    302            {
    303              // Fill out the endpoint description.
    304              epDesc->endPoint = simpleDesc->EndPoint;
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   E0           MOVX      A,@DPTR
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   F0           MOVX      @DPTR,A
    305              epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   74..         MOV       A,#zcl_TaskID & 0xff
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   74..         MOV       A,#(zcl_TaskID >> 8) & 0xff
   \   000026   F0           MOVX      @DPTR,A
    306              epDesc->simpleDesc = simpleDesc;
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   EE           MOV       A,R6
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   EF           MOV       A,R7
   \   000033   F0           MOVX      @DPTR,A
    307              epDesc->latencyReq = noLatencyReqs;
   \   000034   8A82         MOV       DPL,R2
   \   000036   8B83         MOV       DPH,R3
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E4           CLR       A
   \   00003F   F0           MOVX      @DPTR,A
    308          
    309              // Register the endpoint description with the AF
    310              afRegister( epDesc );
   \   000040                ; Setup parameters for call to function afRegister
   \   000040   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    311            }
    312          }
   \                     ??bdb_RegisterSimpleDescriptor_0:
   \   000043   7F02         MOV       R7,#0x2
   \   000045   02....       LJMP      ?BANKED_LEAVE_XDATA
    313          
    314          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
    315          /*********************************************************************
    316           * @fn      bdb_ZclIdentifyCmdInd
    317           *
    318           * @brief   Callback from the ZCL General Cluster Library when
    319           *          it received an Identity Command for this application.
    320           *
    321           * @param   identifyTime - the number of seconds to identify yourself
    322           * @param   endpoint - destination endpoint
    323           *
    324           * @return  none
    325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    326          void bdb_ZclIdentifyCmdInd( uint16 identifyTime, uint8 endpoint )
   \                     bdb_ZclIdentifyCmdInd:
    327          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V0,R1
    328            zclAttrRec_t identifyAttrRec;
    329            
    330            if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    331                                ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   \   000010                ; Setup parameters for call to function zclFindAttrRec
   \   000010   A8..         MOV       R0,?XSP + 0
   \   000012   A9..         MOV       R1,?XSP + 1
   \   000014   88..         MOV       ?V2,R0
   \   000016   89..         MOV       ?V3,R1
   \   000018   78..         MOV       R0,#?V2
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   7C00         MOV       R4,#0x0
   \   00001F   7D00         MOV       R5,#0x0
   \   000021   7A03         MOV       R2,#0x3
   \   000023   7B00         MOV       R3,#0x0
   \   000025   A9..         MOV       R1,?V0
   \   000027   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002F   E9           MOV       A,R1
   \   000030   6068         JZ        ??bdb_ZclIdentifyCmdInd_0
    332            {
    333              //If we are processing an actual change
    334              if(*(uint16*)identifyAttrRec.attr.dataPtr != identifyTime)
   \   000032   7406         MOV       A,#0x6
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   8882         MOV       DPL,R0
   \   00003E   F583         MOV       DPH,A
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6E           XRL       A,R6
   \   000042   7003         JNZ       ??bdb_ZclIdentifyCmdInd_1
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6F           XRL       A,R7
   \                     ??bdb_ZclIdentifyCmdInd_1:
   \   000047   6051         JZ        ??bdb_ZclIdentifyCmdInd_0
    335              {
    336                if ( identifyTime > 0 )
   \   000049   EE           MOV       A,R6
   \   00004A   4F           ORL       A,R7
   \   00004B   8882         MOV       DPL,R0
   \   00004D   8983         MOV       DPH,R1
   \   00004F   601E         JZ        ??bdb_ZclIdentifyCmdInd_2
    337                {
    338                  *((uint16*)identifyAttrRec.attr.dataPtr) = identifyTime;
   \   000051   EE           MOV       A,R6
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   EF           MOV       A,R7
   \   000055   F0           MOVX      @DPTR,A
    339                  osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   000056                ; Setup parameters for call to function osal_start_timerEx
   \   000056   90....       MOV       DPTR,#__Constant_3e8
   \   000059   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00005C   7A00         MOV       R2,#0x0
   \   00005E   7B20         MOV       R3,#0x20
   \   000060   90....       MOV       DPTR,#bdb_TaskID
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F9           MOV       R1,A
   \   000065   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006D   800F         SJMP      ??bdb_ZclIdentifyCmdInd_3
    340                }
    341                else if ( identifyTime <= 0 )
    342                {
    343                  *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
   \                     ??bdb_ZclIdentifyCmdInd_2:
   \   00006F   E4           CLR       A
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   F0           MOVX      @DPTR,A
    344                  osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
   \   000073                ; Setup parameters for call to function osal_stop_timerEx
   \   000073   FA           MOV       R2,A
   \   000074   7B20         MOV       R3,#0x20
   \   000076   90....       MOV       DPTR,#bdb_TaskID
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F9           MOV       R1,A
   \   00007B   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    345                }
    346                
    347                if(pfnIdentifyTimeChangeCB != NULL)
   \                     ??bdb_ZclIdentifyCmdInd_3:
   \   00007E   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F8           MOV       R0,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F9           MOV       R1,A
   \   000086   E8           MOV       A,R0
   \   000087   49           ORL       A,R1
   \   000088   6010         JZ        ??bdb_ZclIdentifyCmdInd_0
    348                {
    349                  pfnIdentifyTimeChangeCB(endpoint);
   \   00008A                ; Setup parameters for indirect call
   \   00008A   A9..         MOV       R1,?V0
   \   00008C   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F8           MOV       R0,A
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F583         MOV       DPH,A
   \   000095   8882         MOV       DPL,R0
   \   000097   12....       LCALL     ?CALL_IND
    350                }
    351              }
    352            }
    353          }
   \                     ??bdb_ZclIdentifyCmdInd_0:
   \   00009A   7408         MOV       A,#0x8
   \   00009C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009F   7F04         MOV       R7,#0x4
   \   0000A1   02....       LJMP      ?BANKED_LEAVE_XDATA
    354          #endif
    355          
    356          
    357          #if (ZG_BUILD_JOINING_TYPE) 
    358           /*********************************************************************
    359           * @fn          bdb_setActiveCentralizedLinkKey
    360           *
    361           * @brief       Set the active centralized key to be used, Global or IC derived. See zstack_CentralizedLinkKeyModes_t
    362           *
    363           * @param       zstack_CentralizedLinkKeyModes - Key to be used for joining centralized network
    364           * @param       pKey - Key to be used (if any)
    365           *
    366           * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
    367           *                          ZInvalidParameter when IC buffer is null
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          ZStatus_t bdb_setActiveCentralizedLinkKey(uint8 zstack_CentralizedLinkKeyModes, uint8* pKey)
   \                     bdb_setActiveCentralizedLinkKey:
    370          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
    371            ZStatus_t Status;
    372          
    373            uint8 extAddr[Z_EXTADDR_LEN];
    374          
    375            osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
   \   000010                ; Setup parameters for call to function osal_memset
   \   000010   7C08         MOV       R4,#0x8
   \   000012   7D00         MOV       R5,#0x0
   \   000014   7900         MOV       R1,#0x0
   \   000016   AA..         MOV       R2,?XSP + 0
   \   000018   AB..         MOV       R3,?XSP + 1
   \   00001A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    376          
    377            if(pKey == NULL)
   \   00001D   EE           MOV       A,R6
   \   00001E   4F           ORL       A,R7
   \   00001F   603E         JZ        ??bdb_setActiveCentralizedLinkKey_0
    378            {
    379              return ZInvalidParameter;
    380            }
    381          
    382            //Clear it, if the request requires it, it will be set
    383            gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = FALSE;
   \   000021   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
    384          
    385            switch(zstack_CentralizedLinkKeyModes)
   \   000026   E5..         MOV       A,?V0
   \   000028   600E         JZ        ??bdb_setActiveCentralizedLinkKey_1
   \   00002A   14           DEC       A
   \   00002B   6013         JZ        ??bdb_setActiveCentralizedLinkKey_2
   \   00002D   14           DEC       A
   \   00002E   600D         JZ        ??bdb_setActiveCentralizedLinkKey_3
   \   000030   14           DEC       A
   \   000031   601D         JZ        ??bdb_setActiveCentralizedLinkKey_4
   \   000033   14           DEC       A
   \   000034   6017         JZ        ??bdb_setActiveCentralizedLinkKey_5
   \   000036   8027         SJMP      ??bdb_setActiveCentralizedLinkKey_0
    386            {
    387              case zstack_UseDefaultGlobalTrustCenterLinkKey:
    388                //Set the default key to be used in centralized networks as defaultTCLinkKey
    389                Status = APSME_SetDefaultKey();
   \                     ??bdb_setActiveCentralizedLinkKey_1:
   \   000038                ; Setup parameters for call to function APSME_SetDefaultKey
   \   000038   12....       LCALL     `??APSME_SetDefaultKey::?relay`; Banked call to: APSME_SetDefaultKey
   \   00003B   801E         SJMP      ??bdb_setActiveCentralizedLinkKey_6
    390              break;
    391          
    392              case zstack_UseInstallCodeWithFallback:
    393                //same as zstack_UseInstallCode but attempt default TRUE
    394                gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
   \                     ??bdb_setActiveCentralizedLinkKey_3:
   \   00003D   7401         MOV       A,#0x1
   \   00003F   F0           MOVX      @DPTR,A
    395              case zstack_UseInstallCode:
    396                 //Set the install code as default key
    397                Status = bdb_addInstallCode(pKey,extAddr);
   \                     ??bdb_setActiveCentralizedLinkKey_2:
   \   000040                ; Setup parameters for call to function bdb_addInstallCode
   \   000040   AC..         MOV       R4,?XSP + 0
   \   000042   AD..         MOV       R5,?XSP + 1
   \   000044   EE           MOV       A,R6
   \   000045   FA           MOV       R2,A
   \   000046   EF           MOV       A,R7
   \   000047   FB           MOV       R3,A
   \   000048   12....       LCALL     `??bdb_addInstallCode::?relay`; Banked call to: bdb_addInstallCode
   \   00004B   800E         SJMP      ??bdb_setActiveCentralizedLinkKey_6
    398              break;
    399          
    400              case zstack_UseAPSKeyWithFallback:
    401                //same as zstack_UseAPSKey but attempt default TRUE
    402                gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
   \                     ??bdb_setActiveCentralizedLinkKey_5:
   \   00004D   7401         MOV       A,#0x1
   \   00004F   F0           MOVX      @DPTR,A
    403              case zstack_UseAPSKey:
    404                //Set the key as global default
    405                Status = APSME_AddTCLinkKey(pKey,extAddr);
   \                     ??bdb_setActiveCentralizedLinkKey_4:
   \   000050                ; Setup parameters for call to function APSME_AddTCLinkKey
   \   000050   AC..         MOV       R4,?XSP + 0
   \   000052   AD..         MOV       R5,?XSP + 1
   \   000054   EE           MOV       A,R6
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
   \                     ??bdb_setActiveCentralizedLinkKey_6:
   \   00005B   E9           MOV       A,R1
   \   00005C   F9           MOV       R1,A
    406              break;
   \   00005D   8002         SJMP      ??bdb_setActiveCentralizedLinkKey_7
    407              
    408              default:
    409                Status = ZInvalidParameter;
   \                     ??bdb_setActiveCentralizedLinkKey_0:
   \   00005F   7902         MOV       R1,#0x2
    410              break;
    411            }
    412          
    413            return Status;
   \                     ??bdb_setActiveCentralizedLinkKey_7:
   \   000061   7408         MOV       A,#0x8
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   \   000066   7F01         MOV       R7,#0x1
   \   000068   02....       LJMP      ?BANKED_LEAVE_XDATA
    414          }
    415          #endif
    416          
    417          
    418              
    419            
    420          /******************************************************************************
    421           * @fn          bdb_addInstallCode
    422           *
    423           * @brief       Interface to add an install codes and adds a APS TC Link key.
    424           *
    425           * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
    426           *              pExt - [in] Extended address of the node.
    427           *
    428           * @return      ZStatus_t
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
   \                     bdb_addInstallCode:
    431          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    432            uint8  hashOutput[16];
    433            uint16 CRC;
    434            
    435          #if (ZG_BUILD_COORDINATOR_TYPE)
    436            if(ZG_DEVICE_COORDINATOR_TYPE)
    437            {
    438              if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
    439              {
    440                return ZFailure;
    441              }
    442            }
    443          #endif
    444                 
    445            if((pInstallCode == NULL) || (pExt == NULL))
   \   000012   EA           MOV       A,R2
   \   000013   4F           ORL       A,R7
   \   000014   601F         JZ        ??bdb_addInstallCode_0
   \   000016   EC           MOV       A,R4
   \   000017   4D           ORL       A,R5
   \   000018   601B         JZ        ??bdb_addInstallCode_0
    446            {
    447              return ZInvalidParameter;
    448            }
    449            
    450            CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
   \   00001A                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   00001A   12....       LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
   \   00001D   8A..         MOV       ?V2,R2
   \   00001F   8B..         MOV       ?V3,R3
    451          
    452            //Validate CRC
    453            if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
   \   000021                ; Setup parameters for call to function osal_build_uint16
   \   000021   EE           MOV       A,R6
   \   000022   2410         ADD       A,#0x10
   \   000024   FA           MOV       R2,A
   \   000025   E4           CLR       A
   \   000026   3F           ADDC      A,R7
   \   000027   FB           MOV       R3,A
   \   000028   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00002B   EA           MOV       A,R2
   \   00002C   65..         XRL       A,?V2
   \   00002E   7003         JNZ       ??bdb_addInstallCode_1
   \   000030   EB           MOV       A,R3
   \   000031   65..         XRL       A,?V3
   \                     ??bdb_addInstallCode_1:
   \   000033   6004         JZ        ??bdb_addInstallCode_2
    454            {
    455              return ZInvalidParameter;
   \                     ??bdb_addInstallCode_0:
   \   000035   7902         MOV       R1,#0x2
   \   000037   8035         SJMP      ??bdb_addInstallCode_3
    456            }
    457          
    458            sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
   \                     ??bdb_addInstallCode_2:
   \   000039                ; Setup parameters for call to function sspMMOHash
   \   000039   A8..         MOV       R0,?XSP + 0
   \   00003B   A9..         MOV       R1,?XSP + 1
   \   00003D   88..         MOV       ?V2,R0
   \   00003F   89..         MOV       ?V3,R1
   \   000041   78..         MOV       R0,#?V2
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   75..90       MOV       ?V2,#-0x70
   \   000049   75..00       MOV       ?V3,#0x0
   \   00004C   78..         MOV       R0,#?V2
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   EE           MOV       A,R6
   \   000052   FC           MOV       R4,A
   \   000053   EF           MOV       A,R7
   \   000054   FD           MOV       R5,A
   \   000055   7900         MOV       R1,#0x0
   \   000057   7A00         MOV       R2,#0x0
   \   000059   7B00         MOV       R3,#0x0
   \   00005B   12....       LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
    459          
    460            return APSME_AddTCLinkKey(hashOutput,pExt);
   \   000063                ; Setup parameters for call to function APSME_AddTCLinkKey
   \   000063   AC..         MOV       R4,?V0
   \   000065   AD..         MOV       R5,?V1
   \   000067   AA..         MOV       R2,?XSP + 0
   \   000069   AB..         MOV       R3,?XSP + 1
   \   00006B   12....       LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
   \                     ??bdb_addInstallCode_3:
   \   00006E   7410         MOV       A,#0x10
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   \   000073   7F06         MOV       R7,#0x6
   \   000075   02....       LJMP      ?BANKED_LEAVE_XDATA
    461          }    
    462              
    463          
    464          #if (ZG_BUILD_COORDINATOR_TYPE)
    465           /*********************************************************************
    466           * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
    467           *
    468           * @brief   Register a callback to receive notifications on the joining devices 
    469           *          and its status on TC link key exchange
    470           *
    471           * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback 
    472           *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
    473           *
    474           * @return  none
    475           */
    476          void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
    477          {
    478            if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
    479            {
    480              pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
    481            }
    482          }
    483          
    484          
    485          
    486           /*********************************************************************
    487           * @fn          bdb_setTCRequireKeyExchange
    488           *
    489           * @brief       Set the bdb_setTCRequireKeyExchange attribute
    490           *
    491           * @param       isKeyExchangeRequired - True if TC will remove devices that do 
    492           *              not perform key exchange after bdbTrustCenterNodeJoinTimeout, 
    493           *              False to not remove devices.
    494           *
    495           * @return      none
    496           */
    497          void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
    498          {
    499            bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
    500          }
    501          
    502          
    503          
    504           /*********************************************************************
    505           * @fn          bdb_TCAddJoiningDevice
    506           *
    507           * @brief       Add a joining device to the list of devices that must request a 
    508           *              key before bdbTrustCenterNodeJoinTimeout.
    509           *
    510           * @param       parentAddr - Address of the parent device
    511           * @param       JoiningExtAddr - IEEE address of the joining device
    512           *
    513           * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
    514           *                          ZInvalidParameter
    515           */
    516          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
    517          {
    518            bdb_joiningDeviceList_t* tempJoiningDescNode;
    519            
    520            if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
    521            {
    522              return ZInvalidParameter;
    523            }
    524            
    525            //If the list was empty and element was allocated, then start the timer
    526            if(bdb_joiningDeviceList == NULL)
    527            {
    528              bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
    529              if(bdb_joiningDeviceList == NULL)
    530              {
    531                return ZFailure;
    532              }
    533             
    534              osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
    535              tempJoiningDescNode = bdb_joiningDeviceList;
    536            }
    537            //if the list was not empty then add the entry at the end of the list
    538            else
    539            {
    540              tempJoiningDescNode = bdb_joiningDeviceList;
    541              
    542              //Validate that this is not already in the list... somehow
    543              if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
    544              {
    545                //The device added is already in the list, refresh its time and do nothing else
    546                tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
    547                return ZSuccess;
    548              }
    549              
    550              while(tempJoiningDescNode->nextDev != NULL)
    551              {
    552                tempJoiningDescNode = tempJoiningDescNode->nextDev;
    553                
    554                //Validate that this is not already in the list... somehow
    555                if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
    556                {
    557                  //The device added is already in the list, refresh its time and do nothing else
    558                  tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
    559                  return ZSuccess;
    560                }
    561              }
    562              
    563              tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
    564              if(tempJoiningDescNode->nextDev == NULL)
    565              {
    566                return ZFailure;
    567              }
    568              
    569              tempJoiningDescNode = tempJoiningDescNode->nextDev;
    570            }
    571            
    572            if(pfnTCLinkKeyExchangeProcessCB)
    573            {
    574              bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    575              osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
    576              bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
    577              
    578              bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
    579            }
    580            
    581            tempJoiningDescNode->nextDev = NULL;
    582            tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
    583            tempJoiningDescNode->parentAddr = parentAddr;
    584            osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
    585            
    586            return ZSuccess;
    587          }
    588          
    589          /****************************************************************************
    590           * @fn          bdb_TCProcessJoiningList
    591           *
    592           * @brief       Process the timer to handle the joining devices if the TC link 
    593           *              key is mandatory for all devices
    594           *
    595           * @param       none
    596           *
    597           * @return      none
    598           */
    599          void bdb_TCProcessJoiningList(void)
    600          {
    601            bdb_joiningDeviceList_t* tempJoiningDescNode;
    602            
    603            if(bdb_joiningDeviceList)
    604            {
    605              tempJoiningDescNode = bdb_joiningDeviceList;
    606            
    607              while(tempJoiningDescNode)
    608              {
    609                if(tempJoiningDescNode->NodeJoinTimeout)
    610                {
    611                  tempJoiningDescNode->NodeJoinTimeout--;
    612                }
    613                
    614                if(tempJoiningDescNode->NodeJoinTimeout == 0)
    615                {
    616                  //Check if the key exchange is required 
    617                  if(bdb_doTrustCenterRequireKeyExchange())
    618                  {
    619                      AddrMgrEntry_t entry;
    620                      
    621                      entry.user = ADDRMGR_USER_DEFAULT;
    622                      osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
    623                      
    624                      if(AddrMgrEntryLookupExt(&entry))
    625                      {
    626                        ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
    627                      }
    628                  }
    629                  
    630                  //Expired device either is legacy device not using the TCLK entry or got 
    631                  //removed from the network because of timeout, eitherway it is not using
    632                  //TCLK entry neither the Security user in the address manager, so free the entry
    633                  //in both tables.
    634                  
    635                  uint16 keyNvIndex;
    636                  uint16 index;        
    637                  APSME_TCLKDevEntry_t TCLKDevEntry;
    638                  uint8 found;
    639                  
    640                  //Remove the entry in address manager
    641                  ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
    642                  
    643                  //search for the entry in the TCLK table
    644                  keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
    645                  
    646                  //If found, erase it.
    647                  if(found == TRUE)
    648                  {
    649                    osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
    650                    TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
    651                    
    652                    //Increase the shift by one. Validate the maximum shift of the seed which is 15
    653                    index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
    654                    
    655                    TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
    656                    TCLinkKeyFrmCntr[index].txFrmCntr = 0;
    657                    
    658                    //Update the entry
    659                    osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
    660                  }
    661                  
    662                  if(pfnTCLinkKeyExchangeProcessCB)
    663                  {
    664                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    665                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
    666                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
    667                    
    668                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
    669                  }
    670                 
    671                  //Free the device from the list
    672                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
    673                }
    674                tempJoiningDescNode = tempJoiningDescNode->nextDev;
    675              }
    676            }
    677          
    678            //we are done with the list
    679            if(bdb_joiningDeviceList == NULL)
    680            {
    681              osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
    682            }
    683          }
    684          
    685          
    686          
    687          /****************************************************************************
    688           * @fn          bdb_TCjoiningDeviceComplete
    689           *
    690           * @brief       This function frees a joining device from the list that has 
    691           *              finished TC link key exchange process
    692           *
    693           * @param       JoiningExtAddr - Extended address of the device
    694           *
    695           * @return      none
    696           */
    697          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
    698          {
    699            bdb_joiningDeviceList_t* tempJoiningDescNode;
    700            
    701            if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
    702            {
    703              tempJoiningDescNode = bdb_joiningDeviceList;
    704              
    705              while(tempJoiningDescNode != NULL)
    706              {
    707                if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
    708                {
    709                  if(pfnTCLinkKeyExchangeProcessCB)
    710                  {
    711                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    712                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
    713                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
    714                    
    715                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
    716                  }        
    717                  
    718                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
    719                  break;
    720                }
    721                tempJoiningDescNode = tempJoiningDescNode->nextDev;
    722              }
    723             
    724              if(bdb_joiningDeviceList == NULL)
    725              {
    726                osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
    727              }
    728            }
    729          }
    730          
    731          
    732          
    733          /****************************************************************************
    734           * @fn          bdb_TCJoiningDeviceFree
    735           *
    736           * @brief       This function frees a joining device from the list.
    737           *
    738           * @param       ZSuccess - If the device was found and erased
    739           * @param       ZInvalidParameter - Not found
    740           *
    741           * @return      none
    742           */
    743          ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
    744          {
    745            bdb_joiningDeviceList_t* descCurrent;
    746            bdb_joiningDeviceList_t* descPrev;
    747            
    748            //validate empty list?
    749            
    750            //Is it the first?
    751            if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
    752            {
    753              descCurrent = bdb_joiningDeviceList;
    754              bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
    755              osal_mem_free( descCurrent );
    756              return ZSuccess;
    757            }
    758            
    759            descPrev = NULL;
    760            descCurrent = bdb_joiningDeviceList;
    761            
    762            while(descCurrent != NULL)
    763            {
    764              if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
    765              {
    766                descPrev = descCurrent;
    767                break;
    768              }
    769              descCurrent = descCurrent->nextDev;
    770            }
    771            if(descPrev == NULL)
    772            {
    773              //Not found
    774              return ZInvalidParameter;
    775            }
    776            
    777            descPrev->nextDev = descPrev->nextDev->nextDev;
    778              
    779            osal_mem_free( JoiningDeviceToRemove );
    780            return ZSuccess;
    781          
    782          }
    783          
    784           /*********************************************************************
    785           * @fn          bdb_setJoinUsesInstallCodeKey
    786           *
    787           * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
    788           *
    789           * @param       set - If TRUE only devices with IC register in TC can join the 
    790           *              nwk, otherwise devices may or not have a IC register
    791           *
    792           * @return      none
    793           */
    794          void bdb_setJoinUsesInstallCodeKey(bool set)
    795          {
    796            bdbAttributes.bdbJoinUsesInstallCodeKey = set;
    797            if(set)
    798            {
    799              zgAllowInstallCodes = ZG_IC_MUST_USED;
    800            }
    801            else
    802            {
    803              zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
    804            }
    805          }
    806          #endif
    807          
    808           /*********************************************************************
    809           * @fn          bdb_StartCommissioning
    810           *
    811           * @brief       Start the commissioning process setting the commissioning mode given.
    812           *
    813           * @param       mode - refer to bdbCommissioningMode
    814           *
    815           * @return      none
    816           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    817          void bdb_StartCommissioning(uint8 mode)
   \                     bdb_StartCommissioning:
    818          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    819            //Application cannot request to set the device in initialization mode or parent lost
    820            mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
    821              
    822          #ifdef BDB_TL_INITIATOR
    823            if ( touchlinkFNReset == TRUE )
    824            {
    825              return;
    826            }
    827          #else
    828            //Commissioning mode used only for initiator
    829            mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
   \   00000C   53..CE       ANL       ?V0,#0xce
    830          #endif
    831            
    832          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)    
    833            //Commissioning mode used only for devices with F&B
    834            mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
    835          #endif
    836           
    837            //If we have running process or the machine state is triggered, then just append and it will be excecuted
    838            if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
   \   00000F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7012         JNZ       ??bdb_StartCommissioning_0
   \   000015                ; Setup parameters for call to function osal_get_timeoutEx
   \   000015   7A04         MOV       R2,#0x4
   \   000017   7B00         MOV       R3,#0x0
   \   000019   90....       MOV       DPTR,#bdb_TaskID
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000021   EA           MOV       A,R2
   \   000022   4B           ORL       A,R3
   \   000023   4C           ORL       A,R4
   \   000024   4D           ORL       A,R5
   \   000025   6032         JZ        ??bdb_StartCommissioning_1
    839            {
    840          #if ZG_BUILD_ENDDEVICE_TYPE
    841              if(ZG_DEVICE_ENDDEVICE_TYPE)
    842              {
    843                //Devices with parent lost are not allowed to perform actions
    844                if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
   \                     ??bdb_StartCommissioning_0:
   \   000027   90....       MOV       DPTR,#bdbAttributes + 11
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   A2E5         MOV       C,0xE0 /* A   */.5
   \   00002D   5003         JNC       $+5
   \   00002F   02....       LJMP      ??bdb_StartCommissioning_2 & 0xFFFF
    845                {
    846                  return;
    847                }
    848              }
    849          #endif
    850              
    851              //If we are on the network and got requested to do nwk steering, we do not need to wait other process, 
    852              // just send permit joining and report the application
    853              if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
   \   000032   90....       MOV       DPTR,#bdbAttributes + 14
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6013         JZ        ??bdb_StartCommissioning_3
   \   000038   E5..         MOV       A,?V0
   \   00003A   A2E1         MOV       C,0xE0 /* A   */.1
   \   00003C   500D         JNC       ??bdb_StartCommissioning_3
    854              {
    855                bdb_nwkSteeringDeviceOnNwk();
   \   00003E                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   00003E   12....       LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
    856                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   000041                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000041   7A01         MOV       R2,#0x1
   \   000043   7904         MOV       R1,#0x4
   \   000045   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    857                
    858                //Clean nwk steering
    859                mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING; 
   \   000048   63..02       XRL       ?V0,#0x2
    860              }
    861              
    862              //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
    863              bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_3:
   \   00004B   743F         MOV       A,#0x3f
   \   00004D   55..         ANL       A,?V0
   \   00004F   F8           MOV       R0,A
   \   000050   90....       MOV       DPTR,#bdbAttributes + 11
   \   000053   E0           MOVX      A,@DPTR
   \   000054   48           ORL       A,R0
   \   000055   F0           MOVX      @DPTR,A
    864              return;      
   \   000056   02....       LJMP      ??bdb_StartCommissioning_2 & 0xFFFF
    865            }
    866          
    867            //Save the commissioning modes valid requested
    868            bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_1:
   \   000059   743F         MOV       A,#0x3f
   \   00005B   55..         ANL       A,?V0
   \   00005D   FE           MOV       R6,A
   \   00005E   90....       MOV       DPTR,#bdbAttributes + 11
   \   000061   E0           MOVX      A,@DPTR
   \   000062   4E           ORL       A,R6
   \   000063   F0           MOVX      @DPTR,A
    869            
    870            
    871            //Start processing the initialization, once per power cycle.
    872            if(!bdb_initialization)
   \   000064   90....       MOV       DPTR,#bdb_initialization
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6003         JZ        $+5
   \   00006A   02....       LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
    873            {
    874              bdb_initialization = TRUE;
   \   00006D   7401         MOV       A,#0x1
   \   00006F   F0           MOVX      @DPTR,A
    875              
    876          #ifdef BDB_REPORTING
    877              //Delete NV data if startup was with factory reset
    878              if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
   \   000070                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   000070   12....       LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   000073   E9           MOV       A,R1
   \   000074   6401         XRL       A,#0x1
   \   000076   701A         JNZ       ??bdb_StartCommissioning_5
    879              {
    880                //Factory reset bdb reporting NV data
    881                uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
   \   000078                ; Setup parameters for call to function osal_nv_item_len
   \   000078   7A56         MOV       R2,#0x56
   \   00007A   7B00         MOV       R3,#0x0
   \   00007C   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00007F   8A..         MOV       ?V2,R2
   \   000081   8B..         MOV       ?V3,R3
   \   000083   AC..         MOV       R4,?V2
   \   000085   AD..         MOV       R5,?V3
    882                if ( attrRepNvLen > 0 )
   \   000087   EA           MOV       A,R2
   \   000088   4D           ORL       A,R5
   \   000089   6007         JZ        ??bdb_StartCommissioning_5
    883                {
    884                  osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
   \   00008B                ; Setup parameters for call to function osal_nv_delete
   \   00008B   7A56         MOV       R2,#0x56
   \   00008D   7B00         MOV       R3,#0x0
   \   00008F   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
    885                }
    886              }
    887          
    888              //Construct the Endpoint-cluster array
    889              bdb_RepConstructReportingData();
   \                     ??bdb_StartCommissioning_5:
   \   000092                ; Setup parameters for call to function bdb_RepConstructReportingData
   \   000092   12....       LCALL     `??bdb_RepConstructReportingData::?relay`; Banked call to: bdb_RepConstructReportingData
    890          #endif //BDB_REPORTING
    891              
    892              osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   000095                ; Setup parameters for call to function osal_nv_read
   \   000095   75....       MOV       ?V2,#(bdbAttributes + 14) & 0xff
   \   000098   75....       MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A0   75..01       MOV       ?V2,#0x1
   \   0000A3   75..00       MOV       ?V3,#0x0
   \   0000A6   78..         MOV       R0,#?V2
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   7C00         MOV       R4,#0x0
   \   0000AD   7D00         MOV       R5,#0x0
   \   0000AF   7A55         MOV       R2,#0x55
   \   0000B1   7B00         MOV       R3,#0x0
   \   0000B3   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000B6   7404         MOV       A,#0x4
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
    893              
    894              //Are we on a network
    895              if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
   \   0000BB   90....       MOV       DPTR,#bdbAttributes + 14
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   6401         XRL       A,#0x1
   \   0000C1   6003         JZ        $+5
   \   0000C3   02....       LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
    896              {
    897          #ifdef ZG_BUILD_JOINING_TYPE
    898                //Only for joining devices validate the joining procedure
    899                if(ZG_DEVICE_JOINING_TYPE)
   \   0000C6   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   6401         XRL       A,#0x1
   \   0000CC   6008         JZ        ??bdb_StartCommissioning_6
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   6402         XRL       A,#0x2
   \   0000D1   6003         JZ        $+5
   \   0000D3   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
    900                {
    901                  //If we got into a network
    902                  if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
   \                     ??bdb_StartCommissioning_6:
   \   0000D6                ; Setup parameters for call to function osal_isbufset
   \   0000D6   7C08         MOV       R4,#0x8
   \   0000D8   7900         MOV       R1,#0x0
   \   0000DA   90....       MOV       DPTR,#AIB_apsTrustCenterAddress
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   FA           MOV       R2,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   FB           MOV       R3,A
   \   0000E2   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   0000E5   E9           MOV       A,R1
   \   0000E6   6003         JZ        $+5
   \   0000E8   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
    903                  {
    904                    //Which is not distributed
    905                    if(!APSME_IsDistributedSecurity())
   \   0000EB                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   0000EB   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   0000EE   E9           MOV       A,R1
   \   0000EF   6003         JZ        $+5
   \   0000F1   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
    906                    {
    907                      uint8 keyAttributes;
    908                      osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
   \   0000F4                ; Setup parameters for call to function osal_nv_read
   \   0000F4   A8..         MOV       R0,?XSP + 0
   \   0000F6   A9..         MOV       R1,?XSP + 1
   \   0000F8   88..         MOV       ?V2,R0
   \   0000FA   89..         MOV       ?V3,R1
   \   0000FC   78..         MOV       R0,#?V2
   \   0000FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000101   75..01       MOV       ?V2,#0x1
   \   000104   75..00       MOV       ?V3,#0x0
   \   000107   78..         MOV       R0,#?V2
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010C   7C10         MOV       R4,#0x10
   \   00010E   7D00         MOV       R5,#0x0
   \   000110   7A11         MOV       R2,#0x11
   \   000112   7B01         MOV       R3,#0x1
   \   000114   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000117   7404         MOV       A,#0x4
   \   000119   12....       LCALL     ?DEALLOC_XSTACK8
    909                      //If we must perform the TCLK exchange and we didn't complete it, then reset to FN
    910                      if(requestNewTrustCenterLinkKey && (keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
   \   00011C   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   7003         JNZ       $+5
   \   000122   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
   \   000125   85..82       MOV       DPL,?XSP + 0
   \   000128   85..83       MOV       DPH,?XSP + 1
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   64FD         XRL       A,#0xfd
   \   00012E   7003         JNZ       $+5
   \   000130   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
   \   000133   E0           MOVX      A,@DPTR
   \   000134   6402         XRL       A,#0x2
   \   000136   7003         JNZ       $+5
   \   000138   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
    911                      {
    912                        //Force to initialize the entry
    913                        APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
    914                        
    915                        osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   \   00013B                ; Setup parameters for call to function osal_memset
   \   00013B   7C13         MOV       R4,#0x13
   \   00013D   7D00         MOV       R5,#0x0
   \   00013F   7900         MOV       R1,#0x0
   \   000141   7401         MOV       A,#0x1
   \   000143   12....       LCALL     ?XSTACK_DISP101_8
   \   000146   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    916                        APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000149   7411         MOV       A,#0x11
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   74FF         MOV       A,#-0x1
   \   000150   F0           MOVX      @DPTR,A
    917                        osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
   \   000151                ; Setup parameters for call to function osal_nv_write
   \   000151   7401         MOV       A,#0x1
   \   000153   12....       LCALL     ?XSTACK_DISP100_8
   \   000156   88..         MOV       ?V2,R0
   \   000158   89..         MOV       ?V3,R1
   \   00015A   78..         MOV       R0,#?V2
   \   00015C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015F   75..13       MOV       ?V2,#0x13
   \   000162   75..00       MOV       ?V3,#0x0
   \   000165   78..         MOV       R0,#?V2
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016A   7C00         MOV       R4,#0x0
   \   00016C   7D00         MOV       R5,#0x0
   \   00016E   7A11         MOV       R2,#0x11
   \   000170   7B01         MOV       R3,#0x1
   \   000172   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000175   7404         MOV       A,#0x4
   \   000177   12....       LCALL     ?DEALLOC_XSTACK8
    918                        TCLinkKeyFrmCntr[0].txFrmCntr = 0;
   \   00017A   90....       MOV       DPTR,#TCLinkKeyFrmCntr
   \   00017D   E4           CLR       A
   \   00017E   F0           MOVX      @DPTR,A
   \   00017F   A3           INC       DPTR
   \   000180   F0           MOVX      @DPTR,A
   \   000181   A3           INC       DPTR
   \   000182   F0           MOVX      @DPTR,A
   \   000183   A3           INC       DPTR
   \   000184   F0           MOVX      @DPTR,A
    919                        TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
   \   000185   A3           INC       DPTR
   \   000186   F0           MOVX      @DPTR,A
   \   000187   A3           INC       DPTR
   \   000188   F0           MOVX      @DPTR,A
   \   000189   A3           INC       DPTR
   \   00018A   F0           MOVX      @DPTR,A
   \   00018B   A3           INC       DPTR
   \   00018C   F0           MOVX      @DPTR,A
    920                        
    921                        
    922                        //reset the device parameters to FN
    923                        bdbAttributes.bdbNodeIsOnANetwork = FALSE;
   \   00018D   90....       MOV       DPTR,#bdbAttributes + 14
   \   000190   F0           MOVX      @DPTR,A
    924                        osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   000191                ; Setup parameters for call to function osal_nv_write
   \   000191   75....       MOV       ?V2,#(bdbAttributes + 14) & 0xff
   \   000194   75....       MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   000197   78..         MOV       R0,#?V2
   \   000199   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019C   75..01       MOV       ?V2,#0x1
   \   00019F   75..00       MOV       ?V3,#0x0
   \   0001A2   78..         MOV       R0,#?V2
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A7   7C00         MOV       R4,#0x0
   \   0001A9   7D00         MOV       R5,#0x0
   \   0001AB   7A55         MOV       R2,#0x55
   \   0001AD   7B00         MOV       R3,#0x0
   \   0001AF   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001B2   7404         MOV       A,#0x4
   \   0001B4   12....       LCALL     ?DEALLOC_XSTACK8
    925                        zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   0001B7                ; Setup parameters for call to function zgWriteStartupOptions
   \   0001B7   7A03         MOV       R2,#0x3
   \   0001B9   79FF         MOV       R1,#-0x1
   \   0001BB   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    926                        
    927                        //Then start the commissioning process requested
    928                        bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   0001BE   8040         SJMP      ??bdb_StartCommissioning_8
    929                        osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
    930                        return;
    931                      }
    932                    }
    933                  }
    934                }
    935          #endif //ZG_BUILD_JOINING_TYPE
    936                
    937                //Set the initialization
    938                bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
    939                bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \                     ??bdb_StartCommissioning_7:
   \   0001C0   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001C3   7407         MOV       A,#0x7
   \   0001C5   F0           MOVX      @DPTR,A
    940                bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \   0001C6   7410         MOV       A,#0x10
   \   0001C8   4E           ORL       A,R6
   \   0001C9   F8           MOV       R0,A
   \   0001CA   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001CD   E0           MOVX      A,@DPTR
   \   0001CE   48           ORL       A,R0
   \   0001CF   F0           MOVX      @DPTR,A
    941                
    942                if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \   0001D0                ; Setup parameters for call to function ZDOInitDeviceEx
   \   0001D0   7900         MOV       R1,#0x0
   \   0001D2   7A00         MOV       R2,#0x0
   \   0001D4   7B00         MOV       R3,#0x0
   \   0001D6   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   0001D9   E9           MOV       A,R1
   \   0001DA   7005         JNZ       ??bdb_StartCommissioning_9
    943                {
    944          #ifdef BDB_REPORTING
    945                  //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
    946                  bdb_RepUpdateMarkBindings();
   \   0001DC                ; Setup parameters for call to function bdb_RepUpdateMarkBindings
   \   0001DC   12....       LCALL     `??bdb_RepUpdateMarkBindings::?relay`; Banked call to: bdb_RepUpdateMarkBindings
    947          #endif
    948                  return;
   \   0001DF   802F         SJMP      ??bdb_StartCommissioning_2
    949                }
    950                bdb_setNodeIsOnANetwork(FALSE);  
   \                     ??bdb_StartCommissioning_9:
   \   0001E1                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   0001E1   7900         MOV       R1,#0x0
   \   0001E3   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    951                //Not in the network
    952                bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   0001E6                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0001E6   7A00         MOV       R2,#0x0
   \   0001E8   7907         MOV       R1,#0x7
   \   0001EA   800F         SJMP      ??bdb_StartCommissioning_10
    953                return;
    954              }
    955            }
    956          
    957            //Got requested only to initialize, if so, report that it failed
    958            if(bdbAttributes.bdbCommissioningMode == 0)
   \                     ??bdb_StartCommissioning_4:
   \   0001EC   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001EF   E0           MOVX      A,@DPTR
   \   0001F0   700E         JNZ       ??bdb_StartCommissioning_8
    959            {
    960              //Set the initialization state and report it to fail
    961              bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \   0001F2   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001F5   7407         MOV       A,#0x7
   \   0001F7   F0           MOVX      @DPTR,A
    962              bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   0001F8                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0001F8   7A00         MOV       R2,#0x0
   \   0001FA   F9           MOV       R1,A
   \                     ??bdb_StartCommissioning_10:
   \   0001FB   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    963              return;
   \   0001FE   8010         SJMP      ??bdb_StartCommissioning_2
    964            }
    965          
    966            
    967            //Start the commissioning process
    968            bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_StartCommissioning_8:
   \   000200   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000203   E4           CLR       A
   \   000204   F0           MOVX      @DPTR,A
    969            osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
   \   000205                ; Setup parameters for call to function osal_set_event
   \   000205   7A04         MOV       R2,#0x4
   \   000207   FB           MOV       R3,A
   \   000208   90....       MOV       DPTR,#bdb_TaskID
   \   00020B   E0           MOVX      A,@DPTR
   \   00020C   F9           MOV       R1,A
   \   00020D   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    970          }
   \                     ??bdb_StartCommissioning_2:
   \   000210   7414         MOV       A,#0x14
   \   000212   12....       LCALL     ?DEALLOC_XSTACK8
   \   000215   7F04         MOV       R7,#0x4
   \   000217   02....       LJMP      ?BANKED_LEAVE_XDATA
    971          
    972          
    973           /*********************************************************************
    974           * @fn          bdb_NotifyCommissioningModeStart
    975           *
    976           * @brief       Notify the user about a commissioning method just started
    977           *
    978           * @param       commissioningMode
    979           *
    980           * @return      none
    981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    982          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
   \                     bdb_NotifyCommissioningModeStart:
    983          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
    984            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
    985          
    986            bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
   \   00000B   C0E0         PUSH      A
   \   00000D   7401         MOV       A,#0x1
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   D0E0         POP       A
   \   000014   F0           MOVX      @DPTR,A
    987            bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   7401         MOV       A,#0x1
   \   00001D   F0           MOVX      @DPTR,A
    988            //Remaining commissioning modes are set just before the call to the application to avoid race conditions
    989          
    990            bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \   00001E                ; Setup parameters for call to function bdb_SendMsg
   \   00001E   A8..         MOV       R0,?XSP + 0
   \   000020   A9..         MOV       R1,?XSP + 1
   \   000022   88..         MOV       ?V0,R0
   \   000024   89..         MOV       ?V1,R1
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7C03         MOV       R4,#0x3
   \   00002D   7B00         MOV       R3,#0x0
   \   00002F   7A0A         MOV       R2,#0xa
   \   000031   90....       MOV       DPTR,#bdb_TaskID
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000039   7402         MOV       A,#0x2
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
    991          }
   \   00003E   7403         MOV       A,#0x3
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   \   000043   7F02         MOV       R7,#0x2
   \   000045   02....       LJMP      ?BANKED_LEAVE_XDATA
    992          
    993          
    994          
    995          #if (ZG_BUILD_JOINING_TYPE)
    996           /*********************************************************************
    997           * @fn          bdb_setNodeJoinLinkKeyType
    998           *
    999           * @brief       Set the key type in use in the network joined. Global centralized key is used by default
   1000           *
   1001           * @param       none
   1002           *
   1003           * @return      none
   1004           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1005          void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
   \                     bdb_setNodeJoinLinkKeyType:
   1006          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1007            bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#bdbAttributes + 15
   \   000008   F0           MOVX      @DPTR,A
   1008          }
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
   1009          #endif
   1010          
   1011           /*********************************************************************
   1012           * @fn          bdb_setFN
   1013           *
   1014           * @brief       Set configuration for FN. This FN configuration will be perfome 
   1015           *              upon call to ZDOInitDevice
   1016           *
   1017           * @param       none
   1018           *
   1019           * @return      none
   1020           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1021          void bdb_setFN(void)
   \                     bdb_setFN:
   1022          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1023            bdb_setNodeIsOnANetwork(FALSE);
   \   000004                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1024          
   1025          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
   1026              touchLink_InitFreeRanges( TRUE );
   1027              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1028          #endif
   1029          #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET ) 
   1030              touchLink_InitFreeRanges( FALSE );
   1031              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1032          #endif
   1033          
   1034            //Set the device as factory new
   1035            zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A03         MOV       R2,#0x3
   \   00000B   79FF         MOV       R1,#-0x1
   \   00000D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1036          }
   \   000010   D083         POP       DPH
   \   000012   D082         POP       DPL
   \   000014   02....       LJMP      ?BRET
   1037          
   1038           /*********************************************************************
   1039           * @fn          bdb_resetLocalAction
   1040           *
   1041           * @brief       Application interface to perform BDB Reset to FN.
   1042           *
   1043           * @param       none
   1044           *
   1045           * @return      none
   1046           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1047          void bdb_resetLocalAction(void)
   \                     bdb_resetLocalAction:
   1048          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV       A,#-0x5
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1049            //Process reset as nwk leave if the device is on the network and is able to process it
   1050            if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
   \   000009   90....       MOV       DPTR,#bdbAttributes + 14
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6021         JZ        ??bdb_resetLocalAction_0
   \   00000F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E5         MOV       C,0xE0 /* A   */.5
   \   000015   4019         JC        ??bdb_resetLocalAction_0
   1051            {
   1052              NLME_LeaveReq_t leaveReq;
   1053              // Set every field to 0
   1054              osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000017                ; Setup parameters for call to function osal_memset
   \   000017   7C05         MOV       R4,#0x5
   \   000019   7D00         MOV       R5,#0x0
   \   00001B   7900         MOV       R1,#0x0
   \   00001D   AA..         MOV       R2,?XSP + 0
   \   00001F   AB..         MOV       R3,?XSP + 1
   \   000021   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1055              
   1056              bdb_setFN();
   \   000024                ; Setup parameters for call to function bdb_setFN
   \   000024   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1057                
   1058              NLME_LeaveReq( &leaveReq );
   \   000027                ; Setup parameters for call to function NLME_LeaveReq
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   1059              
   1060              return;
   \   00002E   800A         SJMP      ??bdb_resetLocalAction_1
   1061            }
   1062            else
   1063            {
   1064              bdb_setFN();
   \                     ??bdb_resetLocalAction_0:
   \   000030                ; Setup parameters for call to function bdb_setFN
   \   000030   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1065              
   1066              ZDApp_ResetTimerStart( 500 );
   \   000033                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000033   7AF4         MOV       R2,#-0xc
   \   000035   7B01         MOV       R3,#0x1
   \   000037   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1067            }
   1068          }
   \                     ??bdb_resetLocalAction_1:
   \   00003A   7405         MOV       A,#0x5
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F   D083         POP       DPH
   \   000041   D082         POP       DPL
   \   000043   02....       LJMP      ?BRET
   1069          
   1070          
   1071           /*********************************************************************
   1072           * @fn          bdb_parentLost
   1073           *
   1074           * @brief       Notify bdb that connection with parent is lost
   1075           *
   1076           * @return      none
   1077           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1078          void bdb_parentLost(void)
   \                     bdb_parentLost:
   1079          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1080          #if ZG_BUILD_ENDDEVICE_TYPE
   1081            if(ZG_DEVICE_ENDDEVICE_TYPE)
   \   000009   800B         SJMP      ??bdb_parentLost_0
   1082            {
   1083              while(pBDBListNwk)
   1084              {
   1085                bdb_nwkDescFree(pBDBListNwk);
   \                     ??bdb_parentLost_1:
   \   00000B                ; Setup parameters for call to function bdb_nwkDescFree
   \   00000B   90....       MOV       DPTR,#pBDBListNwk
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   FA           MOV       R2,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   1086              }
   \                     ??bdb_parentLost_0:
   \   000016   90....       MOV       DPTR,#pBDBListNwk
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   70E9         JNZ       ??bdb_parentLost_1
   1087              
   1088              nwk_desc_list_free();  
   \   000022                ; Setup parameters for call to function nwk_desc_list_free
   \   000022   12....       LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   1089              if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
   \   000025   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6408         XRL       A,#0x8
   \   00002B   6010         JZ        ??bdb_parentLost_2
   1090              {
   1091                //If parent lost during TCLK exchange, then report TCLK exchange fail
   1092                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6401         XRL       A,#0x1
   \   000030   7006         JNZ       ??bdb_parentLost_3
   1093                {
   1094                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   \   000032                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000032   7A00         MOV       R2,#0x0
   \   000034   7901         MOV       R1,#0x1
   \   000036   8028         SJMP      ??bdb_parentLost_4
   1095                  return;
   1096                }
   1097                bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
   \                     ??bdb_parentLost_3:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   00003C   F0           MOVX      @DPTR,A
   1098                
   1099              }
   1100              bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
   \                     ??bdb_parentLost_2:
   \   00003D   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000040   7408         MOV       A,#0x8
   \   000042   F0           MOVX      @DPTR,A
   1101              NLME_OrphanStateSet();
   \   000043                ; Setup parameters for call to function NLME_OrphanStateSet
   \   000043   12....       LCALL     `??NLME_OrphanStateSet::?relay`; Banked call to: NLME_OrphanStateSet
   1102              ZDApp_ChangeState( DEV_NWK_ORPHAN );
   \   000046                ; Setup parameters for call to function ZDApp_ChangeState
   \   000046   790A         MOV       R1,#0xa
   \   000048   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1103              
   1104              // turn receiver off while in orphan state
   1105              byte temp = FALSE;
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   E4           CLR       A
   \   000052   F0           MOVX      @DPTR,A
   1106              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   000053                ; Setup parameters for call to function ZMacSetReq
   \   000053   AA..         MOV       R2,?XSP + 0
   \   000055   AB..         MOV       R3,?XSP + 1
   \   000057   7952         MOV       R1,#0x52
   \   000059   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1107              
   1108              bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
   \   00005C                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00005C   7A00         MOV       R2,#0x0
   \   00005E   7908         MOV       R1,#0x8
   \                     ??bdb_parentLost_4:
   \   000060   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1109            }
   1110          #endif
   1111          }
   \   000063   7401         MOV       A,#0x1
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
   \   000068   D083         POP       DPH
   \   00006A   D082         POP       DPL
   \   00006C   02....       LJMP      ?BRET
   1112          
   1113          
   1114          
   1115          
   1116          
   1117           /*********************************************************************
   1118           * @fn          bdb_NetworkRestoredResumeState
   1119           *
   1120           * @brief       Restore the state of child device after parent lost
   1121           *
   1122           * @return      none
   1123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1124          void bdb_NetworkRestoredResumeState(void)
   \                     bdb_NetworkRestoredResumeState:
   1125          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1126          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
   1127          #if ZG_BUILD_ENDDEVICE_TYPE
   1128            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1129            {
   1130              uint8 restoreSimpleDesc = FALSE;
   \   000004   7A00         MOV       R2,#0x0
   1131              //If restored when F&B still enabled, then restore the simple descriptors attempts
   1132              if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \   000006   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6406         XRL       A,#0x6
   \   00000C   702B         JNZ       ??bdb_NetworkRestoredResumeState_0
   1133              {
   1134                bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
   1135                
   1136                pRespondentTemp = pRespondentHead;
   \   00000E   90....       MOV       DPTR,#pRespondentHead
   \   000011   801D         SJMP      ??bdb_NetworkRestoredResumeState_1
   1137                
   1138                while(pRespondentTemp != NULL)
   1139                {
   1140                  if(pRespondentTemp->attempts & FINDING_AND_BINDING_PARENT_LOST)
   \                     ??bdb_NetworkRestoredResumeState_2:
   \   000013   E8           MOV       A,R0
   \   000014   240C         ADD       A,#0xc
   \   000016   F582         MOV       DPL,A
   \   000018   E4           CLR       A
   \   000019   39           ADDC      A,R1
   \   00001A   F583         MOV       DPH,A
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   A2E6         MOV       C,0xE0 /* A   */.6
   \   00001F   5006         JNC       ??bdb_NetworkRestoredResumeState_3
   1141                  {
   1142                    pRespondentTemp->attempts &= ~FINDING_AND_BINDING_PARENT_LOST;
   \   000021   E0           MOVX      A,@DPTR
   \   000022   C2E6         CLR       0xE0 /* A   */.6
   \   000024   F0           MOVX      @DPTR,A
   1143                    restoreSimpleDesc = TRUE;
   \   000025   7A01         MOV       R2,#0x1
   1144                  }
   1145                  pRespondentTemp = pRespondentTemp->pNext;
   \                     ??bdb_NetworkRestoredResumeState_3:
   \   000027   E8           MOV       A,R0
   \   000028   240F         ADD       A,#0xf
   \   00002A   F582         MOV       DPL,A
   \   00002C   E4           CLR       A
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \                     ??bdb_NetworkRestoredResumeState_1:
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   1146                }
   \   000035   E8           MOV       A,R0
   \   000036   49           ORL       A,R1
   \   000037   70DA         JNZ       ??bdb_NetworkRestoredResumeState_2
   1147              }
   1148              if(restoreSimpleDesc)
   \                     ??bdb_NetworkRestoredResumeState_0:
   \   000039   EA           MOV       A,R2
   \   00003A   6017         JZ        ??bdb_NetworkRestoredResumeState_4
   1149              {
   1150                //Restore the simple Descriptor sending after 1 second of restoring the network
   1151                osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_PROCESS_TIMEOUT, 1000);
   \   00003C                ; Setup parameters for call to function osal_start_timerEx
   \   00003C   90....       MOV       DPTR,#__Constant_3e8
   \   00003F   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000042   7A00         MOV       R2,#0x0
   \   000044   7B40         MOV       R3,#0x40
   \   000046   90....       MOV       DPTR,#bdb_TaskID
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F9           MOV       R1,A
   \   00004B   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00004E   7404         MOV       A,#0x4
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
   1152              }
   1153            }
   1154          #endif
   1155          #endif
   1156          }
   \                     ??bdb_NetworkRestoredResumeState_4:
   \   000053   D083         POP       DPH
   \   000055   D082         POP       DPL
   \   000057   02....       LJMP      ?BRET
   1157          
   1158          #if ZG_BUILD_ENDDEVICE_TYPE
   1159           /*********************************************************************
   1160           * @fn          bdb_ZedAttemptRecoverNwk
   1161           *
   1162           * @brief       Instruct the ZED to try to rejoin its previews network
   1163           *
   1164           * @return      success if the attempt is being excecuted
   1165           *              False if device do not have nwk parameters to perform this action
   1166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1167          uint8 bdb_ZedAttemptRecoverNwk(void)
   \                     bdb_ZedAttemptRecoverNwk:
   1168          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1169            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1170            {
   1171              if(bdbAttributes.bdbNodeIsOnANetwork)
   \   000004   90....       MOV       DPTR,#bdbAttributes + 14
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6018         JZ        ??bdb_ZedAttemptRecoverNwk_0
   1172              {
   1173                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
   \   00000A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7010         JNZ       ??bdb_ZedAttemptRecoverNwk_0
   1174                {
   1175                  if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \   000012                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000012   7900         MOV       R1,#0x0
   \   000014   7A00         MOV       R2,#0x0
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   00001B   E9           MOV       A,R1
   \   00001C   7004         JNZ       ??bdb_ZedAttemptRecoverNwk_0
   1176                  {
   1177                    return ZSuccess;
   \   00001E   7900         MOV       R1,#0x0
   \   000020   8002         SJMP      ??bdb_ZedAttemptRecoverNwk_1
   1178                  }
   1179                }
   1180              }
   1181            }
   1182            return ZFailure;
   \                     ??bdb_ZedAttemptRecoverNwk_0:
   \   000022   7901         MOV       R1,#0x1
   \                     ??bdb_ZedAttemptRecoverNwk_1:
   \   000024   D083         POP       DPH
   \   000026   D082         POP       DPL
   \   000028   02....       LJMP      ?BRET
   1183          }
   1184          
   1185          #endif
   1186          
   1187           /*********************************************************************
   1188           * @fn          bdb_reportCommissioningState
   1189           *
   1190           * @brief       Process the result of a BDB main state attempt.
   1191           *
   1192           * @param       bdbCommissioningState - MainState that is issuing fail
   1193           * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
   1194           *
   1195           * @return      none
   1196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1197          void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
   \                     bdb_reportCommissioningState:
   1198          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FF           MOV       R7,A
   1199            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   1200            //Process only if we are in that state, or if we are on parent lost and processing F&B
   1201            if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
   1202               || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
   \   00000E   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6E           XRL       A,R6
   \   000013   6013         JZ        ??bdb_reportCommissioningState_0
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6408         XRL       A,#0x8
   \   000018   6003         JZ        $+5
   \   00001A   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   00001D   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   000020   E0           MOVX      A,@DPTR
   \   000021   6406         XRL       A,#0x6
   \   000023   6003         JZ        $+5
   \   000025   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1203            {
   1204              switch(bdbCommissioningState)
   \                     ??bdb_reportCommissioningState_0:
   \   000028   E9           MOV       A,R1
   \   000029   14           DEC       A
   \   00002A   7003         JNZ       $+5
   \   00002C   02....       LJMP      ??bdb_reportCommissioningState_2 & 0xFFFF
   \   00002F   14           DEC       A
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??bdb_reportCommissioningState_3 & 0xFFFF
   \   000035   14           DEC       A
   \   000036   6021         JZ        ??bdb_reportCommissioningState_4
   \   000038   14           DEC       A
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??bdb_reportCommissioningState_5 & 0xFFFF
   \   00003E   14           DEC       A
   \   00003F   7003         JNZ       $+5
   \   000041   02....       LJMP      ??bdb_reportCommissioningState_6 & 0xFFFF
   \   000044   14           DEC       A
   \   000045   7003         JNZ       $+5
   \   000047   02....       LJMP      ??bdb_reportCommissioningState_7 & 0xFFFF
   \   00004A   14           DEC       A
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??bdb_reportCommissioningState_8 & 0xFFFF
   \   000050   14           DEC       A
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??bdb_reportCommissioningState_9 & 0xFFFF
   \   000056   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1205              {
   1206          #if (ZG_BUILD_JOINING_TYPE)
   1207                case BDB_COMMISSIONING_STATE_JOINING:
   1208                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_reportCommissioningState_4:
   \   000059   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   6401         XRL       A,#0x1
   \   00005F   6008         JZ        ??bdb_reportCommissioningState_11
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6402         XRL       A,#0x2
   \   000064   6003         JZ        $+5
   \   000066   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1209                  {
   1210                    //Prepare for the next state or commissioning mode to be excecuted
   1211                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \                     ??bdb_reportCommissioningState_11:
   \   000069                ; Setup parameters for call to function osal_start_timerEx
   \   000069   90....       MOV       DPTR,#__Constant_32
   \   00006C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00006F   7A04         MOV       R2,#0x4
   \   000071   7B00         MOV       R3,#0x0
   \   000073   90....       MOV       DPTR,#bdb_TaskID
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F9           MOV       R1,A
   \   000078   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   1212          
   1213                    if(didSuccess)
   \   000080   EF           MOV       A,R7
   \   000081   602B         JZ        ??bdb_reportCommissioningState_12
   1214                    {
   1215                      //Next state is TC link key exchange
   1216                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
   \   000083   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000086   7401         MOV       A,#0x1
   \   000088   F0           MOVX      @DPTR,A
   \   000089   800B         SJMP      ??bdb_reportCommissioningState_13
   1217                      //Free the list of nwk discovered
   1218                      while(pBDBListNwk)
   1219                      {
   1220                        bdb_nwkDescFree(pBDBListNwk);
   \                     ??bdb_reportCommissioningState_14:
   \   00008B                ; Setup parameters for call to function bdb_nwkDescFree
   \   00008B   90....       MOV       DPTR,#pBDBListNwk
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   FA           MOV       R2,A
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   FB           MOV       R3,A
   \   000093   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   1221                      }
   \                     ??bdb_reportCommissioningState_13:
   \   000096   90....       MOV       DPTR,#pBDBListNwk
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   F8           MOV       R0,A
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F9           MOV       R1,A
   \   00009E   E8           MOV       A,R0
   \   00009F   49           ORL       A,R1
   \   0000A0   70E9         JNZ       ??bdb_reportCommissioningState_14
   1222                      
   1223                      //Set the poll rate of the ZED joining device to 1 second to allow TCLK 
   1224                      //exchange be perfomed successfully in cases in which application has a 
   1225                      //slow pollrate
   1226                      NLME_SetPollRate(TCLK_POLL_RATE);
   \   0000A2                ; Setup parameters for call to function NLME_SetPollRate
   \   0000A2   90....       MOV       DPTR,#__Constant_3e8
   \   0000A5   12....       LCALL     ?XLOAD_R2345
   \   0000A8   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1227                      
   1228                      //No notification in this step
   1229                      return;
   \   0000AB   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1230                    } 
   1231                    else
   1232                    {
   1233                      uint8 temp = FALSE;
   \                     ??bdb_reportCommissioningState_12:
   \   0000AE   7403         MOV       A,#0x3
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   E4           CLR       A
   \   0000B4   F0           MOVX      @DPTR,A
   1234                      //If fail, then restore poll rate
   1235                      NLME_SetPollRate(POLL_RATE);
   \   0000B5                ; Setup parameters for call to function NLME_SetPollRate
   \   0000B5   90....       MOV       DPTR,#__Constant_3e8
   \   0000B8   12....       LCALL     ?XLOAD_R2345
   \   0000BB   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1236                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \   0000BE   90....       MOV       DPTR,#bdbAttributes + 10
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   F0           MOVX      @DPTR,A
   1237                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \   0000C4   14           DEC       A
   \   0000C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C8   7401         MOV       A,#0x1
   \   0000CA   F0           MOVX      @DPTR,A
   1238                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   0000CB   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000CE   E4           CLR       A
   \   0000CF   F0           MOVX      @DPTR,A
   1239                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   \   0000D0   90....       MOV       DPTR,#bdbAttributes + 11
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   C2E1         CLR       0xE0 /* A   */.1
   \   0000D6   F0           MOVX      @DPTR,A
   1240                      
   1241                      //Turn off the radio
   1242                      ZMacSetReq(ZMacRxOnIdle, &temp);
   \   0000D7                ; Setup parameters for call to function ZMacSetReq
   \   0000D7   7403         MOV       A,#0x3
   \   0000D9   12....       LCALL     ?XSTACK_DISP101_8
   \   0000DC   7952         MOV       R1,#0x52
   \   0000DE   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1243                      //Set the device to FN, to start as new for subsequent attempts
   1244                      bdb_setFN();
   \   0000E1                ; Setup parameters for call to function bdb_setFN
   \   0000E1   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1245                      NLME_ResetRequest();
   \   0000E4                ; Setup parameters for call to function NLME_ResetRequest
   \   0000E4   12....       LCALL     `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
   1246                      ZDApp_ChangeState( DEV_HOLD );
   \   0000E7                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000E7   7900         MOV       R1,#0x0
   \   0000E9   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1247                      
   1248                      //Free the list of nwk discovered
   1249                      while(pBDBListNwk)
   \                     ??bdb_reportCommissioningState_15:
   \   0000EC   90....       MOV       DPTR,#pBDBListNwk
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   F8           MOV       R0,A
   \   0000F1   A3           INC       DPTR
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   F9           MOV       R1,A
   \   0000F4   E8           MOV       A,R0
   \   0000F5   49           ORL       A,R1
   \   0000F6   7003         JNZ       $+5
   \   0000F8   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1250                      {
   1251                        bdb_nwkDescFree(pBDBListNwk);
   \   0000FB                ; Setup parameters for call to function bdb_nwkDescFree
   \   0000FB   90....       MOV       DPTR,#pBDBListNwk
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   FA           MOV       R2,A
   \   000100   A3           INC       DPTR
   \   000101   E0           MOVX      A,@DPTR
   \   000102   FB           MOV       R3,A
   \   000103   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   000106   80E4         SJMP      ??bdb_reportCommissioningState_15
   1252                      }
   1253                    }
   1254                  }
   1255                break;
   1256          
   1257                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   1258                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_reportCommissioningState_2:
   \   000108   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   6401         XRL       A,#0x1
   \   00010E   6008         JZ        ??bdb_reportCommissioningState_16
   \   000110   E0           MOVX      A,@DPTR
   \   000111   6402         XRL       A,#0x2
   \   000113   6003         JZ        $+5
   \   000115   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1259                  {
   1260                    if(didSuccess)
   \                     ??bdb_reportCommissioningState_16:
   \   000118   EA           MOV       A,R2
   \   000119   603C         JZ        ??bdb_reportCommissioningState_17
   1261                    {
   1262                      //Clear any setting that would set the device as FN
   1263                      zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);            
   \   00011B                ; Setup parameters for call to function zgWriteStartupOptions
   \   00011B   7A03         MOV       R2,#0x3
   \   00011D   7900         MOV       R1,#0x0
   \   00011F   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1264                      
   1265                      //Next state is nwk steering on the nwk (permit joining)
   1266                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   \   000122   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000125   7404         MOV       A,#0x4
   \   000127   F0           MOVX      @DPTR,A
   1267                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
   \   000128                ; Setup parameters for call to function osal_start_timerEx
   \   000128   90....       MOV       DPTR,#__Constant_32
   \   00012B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00012E   7A04         MOV       R2,#0x4
   \   000130   7B00         MOV       R3,#0x0
   \   000132   90....       MOV       DPTR,#bdb_TaskID
   \   000135   E0           MOVX      A,@DPTR
   \   000136   F9           MOV       R1,A
   \   000137   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00013A   7404         MOV       A,#0x4
   \   00013C   12....       LCALL     ?DEALLOC_XSTACK8
   1268                      
   1269                      //Set the poll rate to the application default after TCLK success
   1270                      NLME_SetPollRate(POLL_RATE);
   \   00013F                ; Setup parameters for call to function NLME_SetPollRate
   \   00013F   90....       MOV       DPTR,#__Constant_3e8
   \   000142   12....       LCALL     ?XLOAD_R2345
   \   000145   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1271          
   1272                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
   \   000148                ; Setup parameters for call to function osal_stop_timerEx
   \   000148   7A00         MOV       R2,#0x0
   \   00014A   7B10         MOV       R3,#0x10
   \   00014C   90....       MOV       DPTR,#bdb_TaskID
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   F9           MOV       R1,A
   \   000151   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1273                      //No notification to the user is needed
   1274                      return;
   \   000154   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1275                    }
   1276                    else
   1277                    {
   1278                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \                     ??bdb_reportCommissioningState_17:
   \   000157   7401         MOV       A,#0x1
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   7401         MOV       A,#0x1
   \   00015E   F0           MOVX      @DPTR,A
   1279                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
   \   00015F   90....       MOV       DPTR,#bdbAttributes + 10
   \   000162   7407         MOV       A,#0x7
   \   000164   F0           MOVX      @DPTR,A
   1280                      
   1281                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   000165                ; Setup parameters for call to function osal_stop_timerEx
   \   000165   7A00         MOV       R2,#0x0
   \   000167   7B10         MOV       R3,#0x10
   \   000169   90....       MOV       DPTR,#bdb_TaskID
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   F9           MOV       R1,A
   \   00016E   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1282                     
   1283                      //No process shall be attempted after this fail
   1284                      bdbAttributes.bdbCommissioningMode = 0;
   \   000171   90....       MOV       DPTR,#bdbAttributes + 11
   \   000174   E4           CLR       A
   \   000175   F0           MOVX      @DPTR,A
   1285                      
   1286                      //Fill the context for the user notification
   1287                      osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
   \   000176                ; Setup parameters for call to function osal_start_timerEx
   \   000176   90....       MOV       DPTR,#__Constant_1388
   \   000179   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00017C   7A02         MOV       R2,#0x2
   \   00017E   7B00         MOV       R3,#0x0
   \   000180   90....       MOV       DPTR,#bdb_TaskID
   \   000183   E0           MOVX      A,@DPTR
   \   000184   F9           MOV       R1,A
   \   000185   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000188   7404         MOV       A,#0x4
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018D   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1288                    }
   1289                  }
   1290                break;
   1291          #endif
   1292                
   1293                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   1294                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \                     ??bdb_reportCommissioningState_5:
   \   000190   7401         MOV       A,#0x1
   \   000192   12....       LCALL     ?XSTACK_DISP0_8
   \   000195   7401         MOV       A,#0x1
   \   000197   F0           MOVX      @DPTR,A
   1295                  if(didSuccess)
   \   000198   EA           MOV       A,R2
   \   000199   600A         JZ        ??bdb_reportCommissioningState_18
   1296                  {
   1297                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   00019B   90....       MOV       DPTR,#bdbAttributes + 10
   \   00019E   E4           CLR       A
   \   00019F   F0           MOVX      @DPTR,A
   1298                    
   1299          #if (ZG_BUILD_RTR_TYPE)          
   1300                    //Update ZDApp state
   1301                    if(ZG_DEVICE_RTRONLY_TYPE)
   1302                    {          
   1303                      ZDApp_ChangeState( DEV_ROUTER );
   1304                    }
   1305          #endif
   1306          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1307                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1308                    {
   1309                      ZDApp_ChangeState( DEV_END_DEVICE );
   \   0001A0                ; Setup parameters for call to function ZDApp_ChangeState
   \   0001A0   7906         MOV       R1,#0x6
   \   0001A2   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1310                    }
   1311          #endif
   1312                  }
   1313          #if (ZG_BUILD_COORDINATOR_TYPE)
   1314                  else
   1315                  {
   1316                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1317                    {
   1318                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   1319                    }
   1320                  }
   1321          #endif
   1322                  
   1323                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_18:
   \   0001A5   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001A8   E4           CLR       A
   \   0001A9   F0           MOVX      @DPTR,A
   1324                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   0001AA                ; Setup parameters for call to function osal_start_timerEx
   \   0001AA   90....       MOV       DPTR,#__Constant_32
   \   0001AD   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001B0   7A04         MOV       R2,#0x4
   \   0001B2   7B00         MOV       R3,#0x0
   \   0001B4   90....       MOV       DPTR,#bdb_TaskID
   \   0001B7   E0           MOVX      A,@DPTR
   \   0001B8   F9           MOV       R1,A
   \   0001B9   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001BC   7404         MOV       A,#0x4
   \   0001BE   12....       LCALL     ?DEALLOC_XSTACK8
   1325                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   \   0001C1   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001C4   E0           MOVX      A,@DPTR
   \   0001C5   C2E1         CLR       0xE0 /* A   */.1
   \   0001C7   02....       LJMP      ??bdb_reportCommissioningState_19 & 0xFFFF
   1326                break;
   1327                
   1328                case BDB_COMMISSIONING_STATE_FORMATION:
   1329                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
   \                     ??bdb_reportCommissioningState_6:
   \   0001CA   7401         MOV       A,#0x1
   \   0001CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CF   7402         MOV       A,#0x2
   \   0001D1   F0           MOVX      @DPTR,A
   1330          
   1331                  if(didSuccess)
   \   0001D2   EA           MOV       A,R2
   \   0001D3   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001D6   600A         JZ        ??bdb_reportCommissioningState_20
   1332                  {
   1333                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   0001D8   E4           CLR       A
   \   0001D9   F0           MOVX      @DPTR,A
   1334          
   1335                    //Clear any setting that would set the device as FN
   1336                    zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);          
   \   0001DA                ; Setup parameters for call to function zgWriteStartupOptions
   \   0001DA   7A03         MOV       R2,#0x3
   \   0001DC   F9           MOV       R1,A
   \   0001DD   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   0001E0   8003         SJMP      ??bdb_reportCommissioningState_21
   1337                    
   1338                     //Update ZDApp State
   1339          #if (ZG_BUILD_RTR_TYPE)
   1340                    if(ZG_DEVICE_RTRONLY_TYPE)
   1341                    {          
   1342                      ZDApp_ChangeState( DEV_ROUTER );
   1343                    }
   1344          #endif    
   1345          #if (ZG_BUILD_COORDINATOR_TYPE)
   1346                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1347                    {          
   1348                      ZDApp_ChangeState( DEV_ZB_COORD );
   1349                    }     
   1350          #endif
   1351                  }
   1352                  else
   1353                  {
   1354                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
   \                     ??bdb_reportCommissioningState_20:
   \   0001E2   7408         MOV       A,#0x8
   \   0001E4   F0           MOVX      @DPTR,A
   1355                    //If not on the nwk, then restart the nwk parameters
   1356          #if (ZG_BUILD_RTR_TYPE)
   1357                    if(ZG_DEVICE_RTR_TYPE)
   1358                    {           
   1359                      if(!bdbAttributes.bdbNodeIsOnANetwork)
   1360                      {
   1361                        uint8 temp = FALSE;
   1362                        //Turn off the radio
   1363                        ZMacSetReq(ZMacRxOnIdle, &temp);
   1364                        //Set the device to FN, to start as new for subsequent attempts
   1365                        bdb_setFN();
   1366                        NLME_ResetRequest();
   1367                        ZDApp_ChangeState( DEV_HOLD );
   1368                      }
   1369                    }
   1370          #endif
   1371                  }
   1372                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_21:
   \   0001E5   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001E8   E4           CLR       A
   \   0001E9   F0           MOVX      @DPTR,A
   1373                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   0001EA                ; Setup parameters for call to function osal_start_timerEx
   \   0001EA   90....       MOV       DPTR,#__Constant_32
   \   0001ED   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001F0   7A04         MOV       R2,#0x4
   \   0001F2   7B00         MOV       R3,#0x0
   \   0001F4   90....       MOV       DPTR,#bdb_TaskID
   \   0001F7   E0           MOVX      A,@DPTR
   \   0001F8   F9           MOV       R1,A
   \   0001F9   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001FC   7404         MOV       A,#0x4
   \   0001FE   12....       LCALL     ?DEALLOC_XSTACK8
   1374                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
   \   000201   90....       MOV       DPTR,#bdbAttributes + 11
   \   000204   E0           MOVX      A,@DPTR
   \   000205   C2E2         CLR       0xE0 /* A   */.2
   \   000207   02....       LJMP      ??bdb_reportCommissioningState_19 & 0xFFFF
   1375                break;  
   1376                
   1377          
   1378                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   1379          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
   1380                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \                     ??bdb_reportCommissioningState_7:
   \   00020A   7401         MOV       A,#0x1
   \   00020C   12....       LCALL     ?XSTACK_DISP0_8
   \   00020F   7403         MOV       A,#0x3
   \   000211   F0           MOVX      @DPTR,A
   1381          
   1382                  //Do not notify the status if we have another identify to send
   1383                  if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000212   90....       MOV       DPTR,#bdbAttributes + 10
   \   000215   E0           MOVX      A,@DPTR
   \   000216   7006         JNZ       ??bdb_reportCommissioningState_22
   1384                  {
   1385                    //Success at least once during F&B as initiator, mark it
   1386                    bdb_FBStateSuccessLatch = TRUE;
   \   000218   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   00021B   7401         MOV       A,#0x1
   \   00021D   F0           MOVX      @DPTR,A
   1387                  }        
   1388                  
   1389                  //Will we process another indentify?
   1390                  if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0))
   \                     ??bdb_reportCommissioningState_22:
   \   00021E   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000221   E0           MOVX      A,@DPTR
   \   000222   6003         JZ        $+5
   \   000224   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   000227                ; Setup parameters for call to function bdb_getRespondentRetry
   \   000227   90....       MOV       DPTR,#pRespondentHead
   \   00022A   E0           MOVX      A,@DPTR
   \   00022B   FA           MOV       R2,A
   \   00022C   A3           INC       DPTR
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   FB           MOV       R3,A
   \   00022F   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   000232   EA           MOV       A,R2
   \   000233   4B           ORL       A,R3
   \   000234   6003         JZ        $+5
   \   000236   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   000239                ; Setup parameters for call to function osal_get_timeoutEx
   \   000239   7A00         MOV       R2,#0x0
   \   00023B   7B40         MOV       R3,#0x40
   \   00023D   90....       MOV       DPTR,#bdb_TaskID
   \   000240   E0           MOVX      A,@DPTR
   \   000241   F9           MOV       R1,A
   \   000242   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000245   EA           MOV       A,R2
   \   000246   4B           ORL       A,R3
   \   000247   4C           ORL       A,R4
   \   000248   4D           ORL       A,R5
   \   000249   6003         JZ        $+5
   \   00024B   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1391                  {
   1392                    // Dealocate respondent list and clean all the F&B process
   1393                    pRespondentCurr = NULL;
   \   00024E   90....       MOV       DPTR,#pRespondentCurr
   \   000251   E4           CLR       A
   \   000252   F0           MOVX      @DPTR,A
   \   000253   A3           INC       DPTR
   \   000254   F0           MOVX      @DPTR,A
   1394                    pRespondentNext = NULL;
   \   000255   90....       MOV       DPTR,#pRespondentNext
   \   000258   F0           MOVX      @DPTR,A
   \   000259   A3           INC       DPTR
   \   00025A   F0           MOVX      @DPTR,A
   1395                    bdb_zclRespondentListClean( &pRespondentHead );
   \   00025B                ; Setup parameters for call to function bdb_zclRespondentListClean
   \   00025B   7A..         MOV       R2,#pRespondentHead & 0xff
   \   00025D   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   00025F   12....       LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
   1396                    osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000262                ; Setup parameters for call to function osal_stop_timerEx
   \   000262   7A00         MOV       R2,#0x0
   \   000264   7B40         MOV       R3,#0x40
   \   000266   90....       MOV       DPTR,#bdb_TaskID
   \   000269   E0           MOVX      A,@DPTR
   \   00026A   F9           MOV       R1,A
   \   00026B   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1397                    
   1398                    //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
   1399                    if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
   \   00026E   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   000271   E0           MOVX      A,@DPTR
   \   000272   600A         JZ        ??bdb_reportCommissioningState_23
   \   000274   90....       MOV       DPTR,#bdbAttributes + 10
   \   000277   E0           MOVX      A,@DPTR
   \   000278   640B         XRL       A,#0xb
   \   00027A   7002         JNZ       ??bdb_reportCommissioningState_23
   1400                    {
   1401                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   00027C   E4           CLR       A
   \   00027D   F0           MOVX      @DPTR,A
   1402                    }
   1403                    
   1404                    //Set default state
   1405                    bdb_FBStateSuccessLatch = FALSE;
   \                     ??bdb_reportCommissioningState_23:
   \   00027E   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   000281   E4           CLR       A
   \   000282   F0           MOVX      @DPTR,A
   1406                    
   1407                    //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
   1408                    if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \   000283   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000286   E0           MOVX      A,@DPTR
   \   000287   6406         XRL       A,#0x6
   \   000289   701B         JNZ       ??bdb_reportCommissioningState_24
   1409                    {
   1410                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   00028B   E4           CLR       A
   \   00028C   F0           MOVX      @DPTR,A
   1411                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
   \   00028D                ; Setup parameters for call to function osal_start_timerEx
   \   00028D   90....       MOV       DPTR,#__Constant_32
   \   000290   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000293   7A04         MOV       R2,#0x4
   \   000295   7B00         MOV       R3,#0x0
   \   000297   90....       MOV       DPTR,#bdb_TaskID
   \   00029A   E0           MOVX      A,@DPTR
   \   00029B   F9           MOV       R1,A
   \   00029C   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00029F   7404         MOV       A,#0x4
   \   0002A1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A4   800A         SJMP      ??bdb_reportCommissioningState_25
   1412                    }
   1413                    else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \                     ??bdb_reportCommissioningState_24:
   \   0002A6   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   0002A9   E0           MOVX      A,@DPTR
   \   0002AA   6406         XRL       A,#0x6
   \   0002AC   7002         JNZ       ??bdb_reportCommissioningState_25
   1414                    {
   1415                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   0002AE   E4           CLR       A
   \   0002AF   F0           MOVX      @DPTR,A
   1416                    }
   1417                    
   1418                    bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
   \                     ??bdb_reportCommissioningState_25:
   \   0002B0   90....       MOV       DPTR,#bdbAttributes + 11
   \   0002B3   E0           MOVX      A,@DPTR
   \   0002B4   C2E3         CLR       0xE0 /* A   */.3
   \   0002B6   02....       LJMP      ??bdb_reportCommissioningState_19 & 0xFFFF
   1419                  }
   1420                  else
   1421                  {
   1422                    return;
   1423                  }
   1424          
   1425          #endif
   1426                break;     
   1427                case BDB_COMMISSIONING_STATE_TL:
   1428                  // Set NWK task to run
   1429                  nwk_setStateIdle( FALSE );
   \                     ??bdb_reportCommissioningState_3:
   \   0002B9                ; Setup parameters for call to function nwk_setStateIdle
   \   0002B9   7900         MOV       R1,#0x0
   \   0002BB   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1430                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
   \   0002BE   7401         MOV       A,#0x1
   \   0002C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C3   7404         MOV       A,#0x4
   \   0002C5   F0           MOVX      @DPTR,A
   1431                  if(didSuccess)
   \   0002C6   EF           MOV       A,R7
   \   0002C7   600C         JZ        ??bdb_reportCommissioningState_26
   1432                  {
   1433                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   0002C9   90....       MOV       DPTR,#bdbAttributes + 10
   \   0002CC   E4           CLR       A
   \   0002CD   F0           MOVX      @DPTR,A
   1434                    bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
   \   0002CE   A3           INC       DPTR
   \   0002CF   F0           MOVX      @DPTR,A
   1435                    
   1436                    //Update ZDApp state
   1437          #if (ZG_BUILD_RTR_TYPE)
   1438                    if(ZG_DEVICE_RTRONLY_TYPE)
   1439                    {          
   1440                      ZDApp_ChangeState( DEV_ROUTER );
   1441                    }
   1442          #endif
   1443          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1444                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1445                    {
   1446                      ZDApp_ChangeState( DEV_END_DEVICE );
   \   0002D0                ; Setup parameters for call to function ZDApp_ChangeState
   \   0002D0   7906         MOV       R1,#0x6
   \   0002D2   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1447                    }
   1448          #endif          
   1449                  }
   1450                  //The fail status is already set from the calling function to report commissioning process
   1451                  
   1452                  // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
   1453                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_26:
   \   0002D5   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0002D8   E4           CLR       A
   \   0002D9   F0           MOVX      @DPTR,A
   1454                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
   \   0002DA                ; Setup parameters for call to function osal_start_timerEx
   \   0002DA   90....       MOV       DPTR,#__Constant_32
   \   0002DD   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0002E0   7A04         MOV       R2,#0x4
   \   0002E2   7B00         MOV       R3,#0x0
   \   0002E4   90....       MOV       DPTR,#bdb_TaskID
   \   0002E7   E0           MOVX      A,@DPTR
   \   0002E8   F9           MOV       R1,A
   \   0002E9   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002EC   7404         MOV       A,#0x4
   \   0002EE   12....       LCALL     ?DEALLOC_XSTACK8
   1455                  //Clear the event
   1456                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
   \   0002F1   90....       MOV       DPTR,#bdbAttributes + 11
   \   0002F4   E0           MOVX      A,@DPTR
   \   0002F5   C2E0         CLR       0xE0 /* A   */.0
   \   0002F7   8065         SJMP      ??bdb_reportCommissioningState_19
   1457                  
   1458                break;
   1459                
   1460                case BDB_INITIALIZATION:
   1461                  //Notify user about successfull initialization
   1462                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_8:
   \   0002F9   7401         MOV       A,#0x1
   \   0002FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FE   E4           CLR       A
   \   0002FF   F0           MOVX      @DPTR,A
   1463                  if(didSuccess)
   \   000300   EA           MOV       A,R2
   \   000301   6035         JZ        ??bdb_reportCommissioningState_27
   1464                  {
   1465                    //Update ZDApp state
   1466          #if (ZG_BUILD_COORDINATOR_TYPE)
   1467                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1468                    {          
   1469                      ZDApp_ChangeState( DEV_ZB_COORD );
   1470                    }
   1471          #endif          
   1472          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1473                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1474                    {
   1475                      uint32 pollrate = POLL_RATE;
   1476                      NLME_SetPollRate(pollrate);
   \   000303                ; Setup parameters for call to function NLME_SetPollRate
   \   000303   90....       MOV       DPTR,#__Constant_3e8
   \   000306   12....       LCALL     ?XLOAD_R2345
   \   000309   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1477                      ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   00030C                ; Setup parameters for call to function ZDApp_ChangeState
   \   00030C   7904         MOV       R1,#0x4
   \   00030E   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1478                      
   1479                    }
   1480          #endif          
   1481                    ZDApp_RestoreNwkSecMaterial();
   \   000311                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   000311   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1482                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   \   000314   90....       MOV       DPTR,#bdbAttributes + 10
   \   000317   740D         MOV       A,#0xd
   \   000319   F0           MOVX      @DPTR,A
   1483                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   00031A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00031D   E4           CLR       A
   \   00031E   F0           MOVX      @DPTR,A
   1484                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
   \   00031F                ; Setup parameters for call to function osal_start_timerEx
   \   00031F   90....       MOV       DPTR,#__Constant_c8
   \   000322   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000325   7A04         MOV       R2,#0x4
   \   000327   7B00         MOV       R3,#0x0
   \   000329   90....       MOV       DPTR,#bdb_TaskID
   \   00032C   E0           MOVX      A,@DPTR
   \   00032D   F9           MOV       R1,A
   \   00032E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000331   7404         MOV       A,#0x4
   \   000333   12....       LCALL     ?DEALLOC_XSTACK8
   \   000336   8020         SJMP      ??bdb_reportCommissioningState_28
   1485                  }
   1486                  else
   1487                  {
   1488          #if (ZG_BUILD_ENDDEVICE_TYPE)                   
   1489                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1490                    {
   1491                      if(bdb_isDeviceNonFactoryNew())
   \                     ??bdb_reportCommissioningState_27:
   \   000338                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   000338   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   00033B   E9           MOV       A,R1
   \   00033C   6014         JZ        ??bdb_reportCommissioningState_29
   1492                      {
   1493                        //Notify the user about losing parent
   1494                        bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   \   00033E   7401         MOV       A,#0x1
   \   000340   12....       LCALL     ?XSTACK_DISP0_8
   \   000343   7405         MOV       A,#0x5
   \   000345   F0           MOVX      @DPTR,A
   1495                        bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   \   000346   90....       MOV       DPTR,#bdbAttributes + 11
   \   000349   E0           MOVX      A,@DPTR
   \   00034A   D2E5         SETB      0xE0 /* A   */.5
   \   00034C   F0           MOVX      @DPTR,A
   1496                        
   1497                        //Update ZDApp state
   1498                        ZDApp_ChangeState( DEV_NWK_ORPHAN );
   \   00034D                ; Setup parameters for call to function ZDApp_ChangeState
   \   00034D   790A         MOV       R1,#0xa
   \   00034F   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1499                      }
   1500                    }
   1501          #endif
   1502                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??bdb_reportCommissioningState_29:
   \   000352   90....       MOV       DPTR,#bdbAttributes + 10
   \   000355   7402         MOV       A,#0x2
   \   000357   F0           MOVX      @DPTR,A
   1503                  }
   1504                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_28:
   \   000358   90....       MOV       DPTR,#bdbAttributes + 11
   \   00035B   E0           MOVX      A,@DPTR
   \   00035C   C2E4         CLR       0xE0 /* A   */.4
   \                     ??bdb_reportCommissioningState_19:
   \   00035E   F0           MOVX      @DPTR,A
   1505          
   1506                break;
   \   00035F   804E         SJMP      ??bdb_reportCommissioningState_10
   1507          #if (ZG_BUILD_ENDDEVICE_TYPE)     
   1508                case BDB_PARENT_LOST:
   1509                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   \                     ??bdb_reportCommissioningState_9:
   \   000361   7401         MOV       A,#0x1
   \   000363   12....       LCALL     ?XSTACK_DISP0_8
   \   000366   7405         MOV       A,#0x5
   \   000368   F0           MOVX      @DPTR,A
   1510                  if(ZG_DEVICE_ENDDEVICE_TYPE)
   1511                  {
   1512                    if(didSuccess)
   \   000369   EA           MOV       A,R2
   \   00036A   602D         JZ        ??bdb_reportCommissioningState_30
   1513                    {
   1514                      uint32 pollrate = POLL_RATE;
   1515                      bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;  
   \   00036C   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   00036F   E0           MOVX      A,@DPTR
   \   000370   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000373   F0           MOVX      @DPTR,A
   1516                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
   \   000374   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   000377   E4           CLR       A
   \   000378   F0           MOVX      @DPTR,A
   1517                      NLME_SetPollRate(pollrate);
   \   000379                ; Setup parameters for call to function NLME_SetPollRate
   \   000379   90....       MOV       DPTR,#__Constant_3e8
   \   00037C   12....       LCALL     ?XLOAD_R2345
   \   00037F   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1518                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
   \   000382   90....       MOV       DPTR,#bdbAttributes + 11
   \   000385   E0           MOVX      A,@DPTR
   \   000386   C2E5         CLR       0xE0 /* A   */.5
   \   000388   F0           MOVX      @DPTR,A
   1519                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   \   000389   90....       MOV       DPTR,#bdbAttributes + 10
   \   00038C   740D         MOV       A,#0xd
   \   00038E   F0           MOVX      @DPTR,A
   1520                      //Update ZDApp state
   1521                      ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   00038F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00038F   7904         MOV       R1,#0x4
   \   000391   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1522                      
   1523                      bdb_NetworkRestoredResumeState();
   \   000394                ; Setup parameters for call to function bdb_NetworkRestoredResumeState
   \   000394   12....       LCALL     `??bdb_NetworkRestoredResumeState::?relay`; Banked call to: bdb_NetworkRestoredResumeState
   \   000397   8016         SJMP      ??bdb_reportCommissioningState_10
   1524                    }
   1525                    else
   1526                    {
   1527                      bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   \                     ??bdb_reportCommissioningState_30:
   \   000399   90....       MOV       DPTR,#bdbAttributes + 11
   \   00039C   E0           MOVX      A,@DPTR
   \   00039D   D2E5         SETB      0xE0 /* A   */.5
   \   00039F   F0           MOVX      @DPTR,A
   1528                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \   0003A0   90....       MOV       DPTR,#bdbAttributes + 10
   \   0003A3   7402         MOV       A,#0x2
   \   0003A5   F0           MOVX      @DPTR,A
   1529                      
   1530                      NLME_SetPollRate(0);
   \   0003A6                ; Setup parameters for call to function NLME_SetPollRate
   \   0003A6   90....       MOV       DPTR,#__Constant_0
   \   0003A9   12....       LCALL     ?XLOAD_R2345
   \   0003AC   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1531                      
   1532                    }
   1533                  }
   1534                break;
   1535          #endif
   1536              }
   1537          #ifdef MT_APP_CNF_FUNC
   1538              //Notify the user about the status, the main state which has failed
   1539              bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   1540              
   1541              bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   1542          #else
   1543              if(pfnCommissioningStatusCB)
   \                     ??bdb_reportCommissioningState_10:
   \   0003AF   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   0003B2   E0           MOVX      A,@DPTR
   \   0003B3   F8           MOV       R0,A
   \   0003B4   A3           INC       DPTR
   \   0003B5   E0           MOVX      A,@DPTR
   \   0003B6   F9           MOV       R1,A
   \   0003B7   E8           MOV       A,R0
   \   0003B8   49           ORL       A,R1
   \   0003B9   602B         JZ        ??bdb_reportCommissioningState_1
   1544              {
   1545                //Notify the user about the status, the main state which has failed
   1546                bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   \   0003BB   90....       MOV       DPTR,#bdbAttributes + 10
   \   0003BE   E0           MOVX      A,@DPTR
   \   0003BF   85..82       MOV       DPL,?XSP + 0
   \   0003C2   85..83       MOV       DPH,?XSP + 1
   \   0003C5   F0           MOVX      @DPTR,A
   1547                
   1548                bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \   0003C6                ; Setup parameters for call to function bdb_SendMsg
   \   0003C6   A8..         MOV       R0,?XSP + 0
   \   0003C8   A9..         MOV       R1,?XSP + 1
   \   0003CA   88..         MOV       ?V0,R0
   \   0003CC   89..         MOV       ?V1,R1
   \   0003CE   78..         MOV       R0,#?V0
   \   0003D0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003D3   7C03         MOV       R4,#0x3
   \   0003D5   7B00         MOV       R3,#0x0
   \   0003D7   7A0A         MOV       R2,#0xa
   \   0003D9   90....       MOV       DPTR,#bdb_TaskID
   \   0003DC   E0           MOVX      A,@DPTR
   \   0003DD   F9           MOV       R1,A
   \   0003DE   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   0003E1   7402         MOV       A,#0x2
   \   0003E3   12....       LCALL     ?DEALLOC_XSTACK8
   1549              }
   1550          #endif
   1551            }  
   1552          }
   \                     ??bdb_reportCommissioningState_1:
   \   0003E6   7404         MOV       A,#0x4
   \   0003E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003EB   7F02         MOV       R7,#0x2
   \   0003ED   02....       LJMP      ?BANKED_LEAVE_XDATA
   1553          
   1554          
   1555           /*********************************************************************
   1556           * @fn          bdb_nwkFormationAttempt
   1557           *
   1558           * @brief       Process a nwk formation attempt.
   1559           *
   1560           * @param       didSuccess - TRUE if the nwk formation was success, FALSE 
   1561           *                         otherwise and try secondary channel
   1562           *
   1563           * @return      none
   1564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1565          void bdb_nwkFormationAttempt(bool didSuccess)
   \                     bdb_nwkFormationAttempt:
   1566          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   1567            if(didSuccess)
   \   000006   6004         JZ        ??bdb_nwkFormationAttempt_0
   1568            {
   1569              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
   \   000008                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000008   7A01         MOV       R2,#0x1
   \   00000A   801F         SJMP      ??bdb_nwkFormationAttempt_1
   1570            }
   1571            else
   1572            {
   1573              //Can we try the secondary channel set?
   1574              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   \                     ??bdb_nwkFormationAttempt_0:
   \   00000C   90....       MOV       DPTR,#vDoPrimaryScan
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6017         JZ        ??bdb_nwkFormationAttempt_2
   \   000012   90....       MOV       DPTR,#bdbAttributes
   \   000015   12....       LCALL     ?XLOAD_R0123
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   4A           ORL       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   600B         JZ        ??bdb_nwkFormationAttempt_2
   1575              {
   1576                vDoPrimaryScan = FALSE;
   \   00001E   90....       MOV       DPTR,#vDoPrimaryScan
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
   1577                bdb_nwkJoiningFormation(FALSE);
   \   000023                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   \   000027   8007         SJMP      ??bdb_nwkFormationAttempt_3
   1578              }
   1579              else
   1580              {
   1581                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkFormationAttempt_2:
   \   000029                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000029   7A00         MOV       R2,#0x0
   \                     ??bdb_nwkFormationAttempt_1:
   \   00002B   7905         MOV       R1,#0x5
   \   00002D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1582              }
   1583            }
   1584          }
   \                     ??bdb_nwkFormationAttempt_3:
   \   000030   7F01         MOV       R7,#0x1
   \   000032   02....       LJMP      ?BANKED_LEAVE_XDATA
   1585          
   1586          
   1587          
   1588          /*********************************************************************
   1589           * @fn          bdb_isDeviceNonFactoryNew
   1590           *
   1591           * @brief       Returns the state of bdbNodeIsOnANetwork attribute
   1592           * 
   1593           * @param       none
   1594           *
   1595           * @return      bdbNodeIsOnANetwork
   1596           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1597          bool bdb_isDeviceNonFactoryNew(void)
   \                     bdb_isDeviceNonFactoryNew:
   1598          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1599            return bdbAttributes.bdbNodeIsOnANetwork;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 14
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
   1600          }
   1601          
   1602          
   1603          /*********************************************************************
   1604           * @fn          bdb_doTrustCenterRequireKeyExchange
   1605           *
   1606           * @brief       Returns the state of bdbTrustCenterRequireKeyExchange attribute
   1607           * 
   1608           * @param       none
   1609           *
   1610           * @return      bdbTrustCenterRequireKeyExchange
   1611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1612          bool bdb_doTrustCenterRequireKeyExchange(void)
   \                     bdb_doTrustCenterRequireKeyExchange:
   1613          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1614          #if (ZG_BUILD_COORDINATOR_TYPE) 
   1615            return bdbAttributes.bdbTrustCenterRequireKeyExchange;
   1616          #else
   1617            return 0;
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   1618          #endif
   1619          }
   1620          
   1621          /*********************************************************************
   1622           * @fn      bdb_rejoinNwk
   1623           *
   1624           * @brief   Attempt to rejoin/resume a nwk from nv parameters
   1625           *
   1626           * @param   none
   1627           *
   1628           * @return  ZStatus_t
   1629           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1630          ZStatus_t bdb_rejoinNwk(void)
   \                     bdb_rejoinNwk:
   1631          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1632            ZStatus_t rejoinStatus = ZSuccess;
   \   00000A   7E00         MOV       R6,#0x0
   1633            
   1634            //Update the seq number
   1635            _NIB.SequenceNum ++;
   \   00000C   90....       MOV       DPTR,#_NIB
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   04           INC       A
   \   000011   F0           MOVX      @DPTR,A
   1636            
   1637            osal_nv_write(ZCD_NV_NIB,osal_offsetof( nwkIB_t, SequenceNum ), sizeof( uint8), &_NIB.SequenceNum );
   \   000012                ; Setup parameters for call to function osal_nv_write
   \   000012   75....       MOV       ?V0,#_NIB & 0xff
   \   000015   75....       MOV       ?V1,#(_NIB >> 8) & 0xff
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..01       MOV       ?V0,#0x1
   \   000020   8E..         MOV       ?V1,R6
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   7A21         MOV       R2,#0x21
   \   00002D   7B00         MOV       R3,#0x0
   \   00002F   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000032   7404         MOV       A,#0x4
   \   000034   12....       LCALL     ?DEALLOC_XSTACK8
   1638            
   1639            // Transition state machine to correct rejoin state based on nwk key
   1640            if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   000037                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000037   7900         MOV       R1,#0x0
   \   000039   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00003C   E9           MOV       A,R1
   \   00003D   6401         XRL       A,#0x1
   \   00003F   7004         JNZ       ??bdb_rejoinNwk_0
   1641            {
   1642              ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   000041                ; Setup parameters for call to function ZDApp_ChangeState
   \   000041   7904         MOV       R1,#0x4
   \   000043   8002         SJMP      ??bdb_rejoinNwk_1
   1643            }
   1644            else
   1645            {
   1646              ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \                     ??bdb_rejoinNwk_0:
   \   000045                ; Setup parameters for call to function ZDApp_ChangeState
   \   000045   790E         MOV       R1,#0xe
   \                     ??bdb_rejoinNwk_1:
   \   000047   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1647            }
   1648          
   1649            // Before trying to do rejoin, check if the device has a valid short address
   1650            // If not, generate a random short address for itself
   1651            if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   00004A   90....       MOV       DPTR,#_NIB + 20
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   64FE         XRL       A,#0xfe
   \   000050   7003         JNZ       ??bdb_rejoinNwk_2
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F4           CPL       A
   \                     ??bdb_rejoinNwk_2:
   \   000055   7002         JNZ       ??bdb_rejoinNwk_3
   1652            {
   1653              rejoinStatus = ZFailure;
   \   000057   7E01         MOV       R6,#0x1
   1654            }
   1655          
   1656            // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1657            if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??bdb_rejoinNwk_3:
   \   000059   90....       MOV       DPTR,#_NIB + 33
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F4           CPL       A
   \   00005E   7003         JNZ       ??bdb_rejoinNwk_4
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F4           CPL       A
   \                     ??bdb_rejoinNwk_4:
   \   000063   7002         JNZ       ??bdb_rejoinNwk_5
   1658            {
   1659              rejoinStatus = ZFailure;
   \   000065   7E01         MOV       R6,#0x1
   1660            }
   1661          
   1662            if(rejoinStatus == ZSuccess)
   \                     ??bdb_rejoinNwk_5:
   \   000067   EE           MOV       A,R6
   \   000068   7035         JNZ       ??bdb_rejoinNwk_6
   1663            {
   1664              uint8 tmp = true;
   \   00006A   85..82       MOV       DPL,?XSP + 0
   \   00006D   85..83       MOV       DPH,?XSP + 1
   \   000070   7401         MOV       A,#0x1
   \   000072   F0           MOVX      @DPTR,A
   1665              ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   000073                ; Setup parameters for call to function ZMacSetReq
   \   000073   AA..         MOV       R2,?XSP + 0
   \   000075   AB..         MOV       R3,?XSP + 1
   \   000077   7952         MOV       R1,#0x52
   \   000079   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1666                  
   1667              // Perform Secure or Unsecure Rejoin depending on available configuration
   1668              if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
   \   00007C                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00007C   7901         MOV       R1,#0x1
   \   00007E   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000081   E9           MOV       A,R1
   \   000082   6401         XRL       A,#0x1
   \   000084   90....       MOV       DPTR,#_NIB + 22
   \   000087   700B         JNZ       ??bdb_rejoinNwk_7
   1669              {
   1670                rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \   000089                ; Setup parameters for call to function NLME_ReJoinRequest
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F9           MOV       R1,A
   \   00008B   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00008D   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00008F   12....       LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   000092   8009         SJMP      ??bdb_rejoinNwk_8
   1671              }
   1672              else
   1673              {
   1674                rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \                     ??bdb_rejoinNwk_7:
   \   000094                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F9           MOV       R1,A
   \   000096   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000098   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00009A   12....       LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??bdb_rejoinNwk_8:
   \   00009D   E9           MOV       A,R1
   \   00009E   FE           MOV       R6,A
   1675              }
   1676            }
   1677            
   1678            return rejoinStatus;
   \                     ??bdb_rejoinNwk_6:
   \   00009F   EE           MOV       A,R6
   \   0000A0   F9           MOV       R1,A
   \   0000A1   7401         MOV       A,#0x1
   \   0000A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A6   7F02         MOV       R7,#0x2
   \   0000A8   02....       LJMP      ?BANKED_LEAVE_XDATA
   1679          }
   1680          
   1681          #if (ZG_BUILD_JOINING_TYPE)
   1682           /*********************************************************************
   1683           * @fn          bdb_nwkDiscoveryAttempt
   1684           *
   1685           * @brief       Process a nwk discovery attempt
   1686           *
   1687           * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if 
   1688           *                           no suitable nwks were found, try secondary channel
   1689           *
   1690           * @return      none
   1691           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1692          void bdb_nwkDiscoveryAttempt(bool didSuccess)
   \                     bdb_nwkDiscoveryAttempt:
   1693          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1694            uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   1695            
   1696            if(didSuccess)
   \   000012   E9           MOV       A,R1
   \   000013   6022         JZ        ??bdb_nwkDiscoveryAttempt_0
   1697            {
   1698              bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
   \   000015                ; Setup parameters for call to function bdb_SendMsg
   \   000015   A8..         MOV       R0,?XSP + 0
   \   000017   A9..         MOV       R1,?XSP + 1
   \   000019   88..         MOV       ?V0,R0
   \   00001B   89..         MOV       ?V1,R1
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   7C01         MOV       R4,#0x1
   \   000024   7B00         MOV       R3,#0x0
   \   000026   7A03         MOV       R2,#0x3
   \   000028   90....       MOV       DPTR,#bdb_TaskID
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000030   7402         MOV       A,#0x2
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
   \   000035   8030         SJMP      ??bdb_nwkDiscoveryAttempt_1
   1699            }
   1700            else
   1701            {
   1702              //Can we try the secondary channel set?
   1703              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   \                     ??bdb_nwkDiscoveryAttempt_0:
   \   000037   90....       MOV       DPTR,#vDoPrimaryScan
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   6023         JZ        ??bdb_nwkDiscoveryAttempt_2
   \   00003D   90....       MOV       DPTR,#bdbAttributes
   \   000040   12....       LCALL     ?XLOAD_R0123
   \   000043   E8           MOV       A,R0
   \   000044   49           ORL       A,R1
   \   000045   4A           ORL       A,R2
   \   000046   4B           ORL       A,R3
   \   000047   6017         JZ        ??bdb_nwkDiscoveryAttempt_2
   1704              {
   1705                vDoPrimaryScan = FALSE;
   \   000049   90....       MOV       DPTR,#vDoPrimaryScan
   \   00004C   E4           CLR       A
   \   00004D   F0           MOVX      @DPTR,A
   1706                bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   \   00004E                ; Setup parameters for call to function bdb_setChannel
   \   00004E   90....       MOV       DPTR,#bdbAttributes
   \   000051   12....       LCALL     ?XLOAD_R2345
   \   000054   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   1707                
   1708                ZDApp_NetworkInit( 50 );
   \   000057                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000057   7A32         MOV       R2,#0x32
   \   000059   7B00         MOV       R3,#0x0
   \   00005B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   00005E   8007         SJMP      ??bdb_nwkDiscoveryAttempt_1
   1709              }
   1710              else
   1711              {
   1712                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   \                     ??bdb_nwkDiscoveryAttempt_2:
   \   000060                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000060   7A00         MOV       R2,#0x0
   \   000062   7903         MOV       R1,#0x3
   \   000064   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1713              }
   1714            }
   1715          }
   \                     ??bdb_nwkDiscoveryAttempt_1:
   \   000067   7401         MOV       A,#0x1
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   7F02         MOV       R7,#0x2
   \   00006E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1716          
   1717           /*********************************************************************
   1718           * @fn          bdb_filterNwkDisc
   1719           *
   1720           * @brief       Filter the nwks found and attempt to join the suitable nwks
   1721           *              Here the application can include nwk filters 
   1722           *
   1723           * @param       none
   1724           *
   1725           * @return      none
   1726           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1727          void bdb_filterNwkDisc(void)
   \                     bdb_filterNwkDisc:
   1728          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   1729            networkDesc_t* pNwkDesc;
   1730            uint8 i = 0;
   1731            uint8 ResultCount = 0;
   \   000005   75..00       MOV       ?V0,#0x0
   1732            uint8 stackProfile = 0;
   \   000008   75..00       MOV       ?V1,#0x0
   1733            uint8 stackProfilePro = 0;
   1734            
   1735            pBDBListNwk  = nwk_getNwkDescList();
   \   00000B                ; Setup parameters for call to function nwk_getNwkDescList
   \   00000B   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000E   90....       MOV       DPTR,#pBDBListNwk
   \   000011   EA           MOV       A,R2
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   EB           MOV       A,R3
   \   000015   F0           MOVX      @DPTR,A
   1736            nwk_desc_list_release();
   \   000016                ; Setup parameters for call to function nwk_desc_list_release
   \   000016   12....       LCALL     `??nwk_desc_list_release::?relay`; Banked call to: nwk_desc_list_release
   1737            
   1738            pNwkDesc = pBDBListNwk;
   \   000019   90....       MOV       DPTR,#pBDBListNwk
   \   00001C   800B         SJMP      ??bdb_filterNwkDisc_0
   1739            while (pNwkDesc)
   1740            {
   1741              ResultCount++;
   \                     ??bdb_filterNwkDisc_1:
   \   00001E   05..         INC       ?V0
   1742              pNwkDesc = pNwkDesc->nextDesc;
   \   000020   EE           MOV       A,R6
   \   000021   2414         ADD       A,#0x14
   \   000023   F582         MOV       DPL,A
   \   000025   E4           CLR       A
   \   000026   3F           ADDC      A,R7
   \   000027   F583         MOV       DPH,A
   \                     ??bdb_filterNwkDisc_0:
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   FE           MOV       R6,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FF           MOV       R7,A
   1743            }
   \   00002E   EE           MOV       A,R6
   \   00002F   4F           ORL       A,R7
   \   000030   70EC         JNZ       ??bdb_filterNwkDisc_1
   1744            
   1745            if(pBDBListNwk)
   \   000032   90....       MOV       DPTR,#pBDBListNwk
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F8           MOV       R0,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   E8           MOV       A,R0
   \   00003B   49           ORL       A,R1
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??bdb_filterNwkDisc_2 & 0xFFFF
   1746            {
   1747              if(pfnFilterNwkDesc)
   \   000041   90....       MOV       DPTR,#pfnFilterNwkDesc
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
   \   000049   E8           MOV       A,R0
   \   00004A   49           ORL       A,R1
   \   00004B   601C         JZ        ??bdb_filterNwkDisc_3
   1748              {
   1749                pfnFilterNwkDesc(pBDBListNwk, ResultCount);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   A9..         MOV       R1,?V0
   \   00004F   90....       MOV       DPTR,#pBDBListNwk
   \   000052   E0           MOVX      A,@DPTR
   \   000053   FA           MOV       R2,A
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   FB           MOV       R3,A
   \   000057   90....       MOV       DPTR,#pfnFilterNwkDesc
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F8           MOV       R0,A
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F583         MOV       DPH,A
   \   000060   8882         MOV       DPL,R0
   \   000062   12....       LCALL     ?CALL_IND
   \   000065   8002         SJMP      ??bdb_filterNwkDisc_3
   1750              }
   1751              
   1752              for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \                     ??bdb_filterNwkDisc_4:
   \   000067   05..         INC       ?V1
   \                     ??bdb_filterNwkDisc_3:
   \   000069   E5..         MOV       A,?V1
   \   00006B   C3           CLR       C
   \   00006C   9402         SUBB      A,#0x2
   \   00006E   4003         JC        $+5
   \   000070   02....       LJMP      ??bdb_filterNwkDisc_2 & 0xFFFF
   1753              {
   1754                pNwkDesc = pBDBListNwk;
   \   000073   90....       MOV       DPTR,#pBDBListNwk
   \   000076   E0           MOVX      A,@DPTR
   \   000077   FE           MOV       R6,A
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   FF           MOV       R7,A
   1755                
   1756                if(pNwkDesc)
   \   00007B   EE           MOV       A,R6
   \   00007C   4F           ORL       A,R7
   \   00007D   60E8         JZ        ??bdb_filterNwkDisc_4
   1757                {
   1758                  for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00007F   75..00       MOV       ?V2,#0x0
   \   000082   02....       LJMP      ??bdb_filterNwkDisc_5 & 0xFFFF
   1759                  {
   1760                    if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   1761                    {
   1762                      // If the extended Pan ID is commissioned to a non zero value
   1763                      // Only join the Pan that has match EPID
   1764                      if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1765                      {
   1766                        //Remove from the list
   1767                        bdb_nwkDescFree(pNwkDesc);
   1768                        ResultCount--;
   1769                        continue;
   1770                      }
   1771                    }
   1772                    else if ( zgConfigPANID != 0xFFFF )
   \                     ??bdb_filterNwkDisc_6:
   \   000085   90....       MOV       DPTR,#zgConfigPANID
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F4           CPL       A
   \   00008A   7003         JNZ       ??bdb_filterNwkDisc_7
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F4           CPL       A
   \                     ??bdb_filterNwkDisc_7:
   \   00008F   6015         JZ        ??bdb_filterNwkDisc_8
   1773                    {
   1774                      // PAN Id is preconfigured. check if it matches
   1775                      if ( pNwkDesc->panId != zgConfigPANID )
   \   000091   8E82         MOV       DPL,R6
   \   000093   8F83         MOV       DPH,R7
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F8           MOV       R0,A
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F9           MOV       R1,A
   \   00009A   90....       MOV       DPTR,#zgConfigPANID
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   68           XRL       A,R0
   \   00009F   7003         JNZ       ??bdb_filterNwkDisc_9
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   69           XRL       A,R1
   \                     ??bdb_filterNwkDisc_9:
   \   0000A4   705A         JNZ       ??bdb_filterNwkDisc_10
   1776                      {
   1777                        //Remove from the list
   1778                        bdb_nwkDescFree(pNwkDesc);
   1779                        ResultCount--;
   1780                        continue;
   1781                      }
   1782                    }
   1783          
   1784                    if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   \                     ??bdb_filterNwkDisc_8:
   \   0000A6   90....       MOV       DPTR,#_NIB + 23
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   F8           MOV       R0,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F9           MOV       R1,A
   \   0000AE   8E82         MOV       DPL,R6
   \   0000B0   8F83         MOV       DPH,R7
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   68           XRL       A,R0
   \   0000BB   7003         JNZ       ??bdb_filterNwkDisc_11
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   69           XRL       A,R1
   \                     ??bdb_filterNwkDisc_11:
   \   0000C0   700A         JNZ       ??bdb_filterNwkDisc_12
   \   0000C2   74FE         MOV       A,#-0x2
   \   0000C4   68           XRL       A,R0
   \   0000C5   7003         JNZ       ??bdb_filterNwkDisc_13
   \   0000C7   74FF         MOV       A,#-0x1
   \   0000C9   69           XRL       A,R1
   \                     ??bdb_filterNwkDisc_13:
   \   0000CA   700B         JNZ       ??bdb_filterNwkDisc_14
   1785                    {
   1786                      // check that network is allowing joining
   1787                      if ( ZSTACK_ROUTER_BUILD )
   1788                      {
   1789                        if ( stackProfilePro == FALSE )
   1790                        {
   1791                          if ( !pNwkDesc->routerCapacity )
   1792                          {
   1793                            //Remove from the list
   1794                            bdb_nwkDescFree(pNwkDesc);
   1795                            ResultCount--;
   1796                            continue;
   1797                          }
   1798                        }
   1799                        else
   1800                        {
   1801                          if ( !pNwkDesc->deviceCapacity )
   1802                          {
   1803                            //Remove from the list
   1804                            bdb_nwkDescFree(pNwkDesc);
   1805                            ResultCount--;
   1806                            continue;
   1807                          }
   1808                        }
   1809                      }
   1810                      else if ( ZSTACK_END_DEVICE_BUILD )
   1811                      {
   1812                        if ( !pNwkDesc->deviceCapacity )
   \                     ??bdb_filterNwkDisc_12:
   \   0000CC   8E82         MOV       DPL,R6
   \   0000CE   8F83         MOV       DPH,R7
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   6029         JZ        ??bdb_filterNwkDisc_10
   1813                        {
   1814                          //Remove from the list
   1815                          bdb_nwkDescFree(pNwkDesc);
   1816                          ResultCount--;
   1817                          continue;
   1818                        }
   1819                      }
   1820                    }
   1821          
   1822                    // check version of zigbee protocol
   1823                    if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   \                     ??bdb_filterNwkDisc_14:
   \   0000D7   8E82         MOV       DPL,R6
   \   0000D9   8F83         MOV       DPH,R7
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   F8           MOV       R0,A
   \   0000E2   90....       MOV       DPTR,#_NIB + 17
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   68           XRL       A,R0
   \   0000E7   7020         JNZ       ??bdb_filterNwkDisc_15
   1824                      continue;
   1825          
   1826                    // check version of stack profile
   1827                    if ( pNwkDesc->stackProfile != zgStackProfile  )
   \   0000E9   8E82         MOV       DPL,R6
   \   0000EB   8F83         MOV       DPH,R7
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   F8           MOV       R0,A
   \   0000F5   90....       MOV       DPTR,#zgStackProfile
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   68           XRL       A,R0
   \   0000FA   600D         JZ        ??bdb_filterNwkDisc_15
   1828                    {
   1829                      if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   1830                          || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   1831                      {
   1832                        stackProfilePro = TRUE;
   1833                      }
   1834          
   1835                      if ( stackProfile == 0 )
   \   0000FC   E5..         MOV       A,?V1
   \   0000FE   7009         JNZ       ??bdb_filterNwkDisc_15
   1836                      {
   1837                        //Remove from the list
   1838                        bdb_nwkDescFree(pNwkDesc);
   \                     ??bdb_filterNwkDisc_10:
   \   000100                ; Setup parameters for call to function bdb_nwkDescFree
   \   000100   EE           MOV       A,R6
   \   000101   FA           MOV       R2,A
   \   000102   EF           MOV       A,R7
   \   000103   FB           MOV       R3,A
   \   000104   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   1839                        ResultCount--;
   \   000107   15..         DEC       ?V0
   1840                        continue;
   1841                      }
   1842                    }
   \                     ??bdb_filterNwkDisc_15:
   \   000109   05..         INC       ?V2
   \   00010B   EE           MOV       A,R6
   \   00010C   2414         ADD       A,#0x14
   \   00010E   F582         MOV       DPL,A
   \   000110   E4           CLR       A
   \   000111   3F           ADDC      A,R7
   \   000112   F583         MOV       DPH,A
   \   000114   E0           MOVX      A,@DPTR
   \   000115   FE           MOV       R6,A
   \   000116   A3           INC       DPTR
   \   000117   E0           MOVX      A,@DPTR
   \   000118   FF           MOV       R7,A
   \                     ??bdb_filterNwkDisc_5:
   \   000119   E5..         MOV       A,?V2
   \   00011B   C3           CLR       C
   \   00011C   95..         SUBB      A,?V0
   \   00011E   4003         JC        $+5
   \   000120   02....       LJMP      ??bdb_filterNwkDisc_4 & 0xFFFF
   \   000123                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000123   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000125   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000127   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00012A   E9           MOV       A,R1
   \   00012B   6401         XRL       A,#0x1
   \   00012D   6003         JZ        $+5
   \   00012F   02....       LJMP      ??bdb_filterNwkDisc_6 & 0xFFFF
   \   000132                ; Setup parameters for call to function sAddrExtCmp
   \   000132   EE           MOV       A,R6
   \   000133   240B         ADD       A,#0xb
   \   000135   FC           MOV       R4,A
   \   000136   E4           CLR       A
   \   000137   3F           ADDC      A,R7
   \   000138   FD           MOV       R5,A
   \   000139   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00013B   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00013D   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000140   E9           MOV       A,R1
   \   000141   6003         JZ        $+5
   \   000143   02....       LJMP      ??bdb_filterNwkDisc_8 & 0xFFFF
   \   000146   80B8         SJMP      ??bdb_filterNwkDisc_10
   1843                  }
   1844                }
   1845              }
   1846            }
   1847          }
   \                     ??bdb_filterNwkDisc_2:
   \   000148   7F03         MOV       R7,#0x3
   \   00014A   02....       LJMP      ?BANKED_LEAVE_XDATA
   1848                
   1849           /*********************************************************************
   1850           * @fn          bdb_tryNwkAssoc
   1851           *
   1852           * @brief       Try to associate to the first network in the network descriptor list
   1853           *
   1854           * @param       none
   1855           *
   1856           * @return      none
   1857           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1858          static void bdb_tryNwkAssoc(void)
   \                     bdb_tryNwkAssoc:
   1859          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1860            if(pBDBListNwk)
   \   00000A   90....       MOV       DPTR,#pBDBListNwk
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   000017   6027         JZ        ??bdb_tryNwkAssoc_0
   1861            {
   1862              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   \   000019   7401         MOV       A,#0x1
   \   00001B   F0           MOVX      @DPTR,A
   1863              
   1864              //Try the first in the list after the filtering
   1865              if(ZSuccess != bdb_joinProcess(pBDBListNwk))
   \   00001C                ; Setup parameters for call to function bdb_joinProcess
   \   00001C   90....       MOV       DPTR,#pBDBListNwk
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FA           MOV       R2,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FB           MOV       R3,A
   \   000024   12....       LCALL     `??bdb_joinProcess::?relay`; Banked call to: bdb_joinProcess
   \   000027   E9           MOV       A,R1
   \   000028   603F         JZ        ??bdb_tryNwkAssoc_1
   1866              {
   1867                //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
   1868                uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   \   00002A   85..82       MOV       DPL,?XSP + 0
   \   00002D   85..83       MOV       DPH,?XSP + 1
   \   000030   7401         MOV       A,#0x1
   \   000032   F0           MOVX      @DPTR,A
   1869                bdb_nwkDescFree(pBDBListNwk);
   \   000033                ; Setup parameters for call to function bdb_nwkDescFree
   \   000033   90....       MOV       DPTR,#pBDBListNwk
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FA           MOV       R2,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   1870                bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   \   00003E                ; Setup parameters for call to function bdb_SendMsg
   \   00003E   8009         SJMP      ??bdb_tryNwkAssoc_2
   1871              }
   1872            }
   1873            else
   1874            {
   1875              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
   \                     ??bdb_tryNwkAssoc_0:
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
   1876              uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   \   000042   85..82       MOV       DPL,?XSP + 0
   \   000045   85..83       MOV       DPH,?XSP + 1
   \   000048   F0           MOVX      @DPTR,A
   1877              
   1878              bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   \   000049                ; Setup parameters for call to function bdb_SendMsg
   \                     ??bdb_tryNwkAssoc_2:
   \   000049   A8..         MOV       R0,?XSP + 0
   \   00004B   A9..         MOV       R1,?XSP + 1
   \   00004D   88..         MOV       ?V0,R0
   \   00004F   89..         MOV       ?V1,R1
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000056   7C01         MOV       R4,#0x1
   \   000058   7B01         MOV       R3,#0x1
   \   00005A   7A03         MOV       R2,#0x3
   \   00005C   90....       MOV       DPTR,#bdb_TaskID
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F9           MOV       R1,A
   \   000061   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000064   7402         MOV       A,#0x2
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
   1879            }
   1880          }
   \                     ??bdb_tryNwkAssoc_1:
   \   000069   7401         MOV       A,#0x1
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   7F02         MOV       R7,#0x2
   \   000070   02....       LJMP      ?BANKED_LEAVE_XDATA
   1881          
   1882          
   1883          
   1884           /*********************************************************************
   1885           * @fn          bdb_nwkAssocAttemt
   1886           *
   1887           * @brief       Process the result of an attempt to associate to a network 
   1888           *
   1889           * @param       didSuccess - bool
   1890           *
   1891           * @return      none
   1892           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1893          void bdb_nwkAssocAttemt(bool didSuccess)
   \                     bdb_nwkAssocAttemt:
   1894          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1895            bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
   \   00000A   90....       MOV       DPTR,#bdbAttributes + 10
   \   00000D   7403         MOV       A,#0x3
   \   00000F   F0           MOVX      @DPTR,A
   1896            uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   7401         MOV       A,#0x1
   \   000018   F0           MOVX      @DPTR,A
   1897            uint8 status;
   1898            
   1899            if(didSuccess)
   \   000019   E9           MOV       A,R1
   \   00001A   6004         JZ        ??bdb_nwkAssocAttemt_0
   1900            {
   1901              status = BDB_MSG_EVENT_SUCCESS;
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   801F         SJMP      ??bdb_nwkAssocAttemt_1
   1902            }
   1903            else
   1904            {
   1905              if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
   \                     ??bdb_nwkAssocAttemt_0:
   \   000020   90....       MOV       DPTR,#bdb_nwkAssocRetriesCount
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C3           CLR       C
   \   000025   9403         SUBB      A,#0x3
   \   000027   5004         JNC       ??bdb_nwkAssocAttemt_2
   1906              {
   1907                bdb_nwkAssocRetriesCount++;
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   04           INC       A
   \   00002B   800F         SJMP      ??bdb_nwkAssocAttemt_3
   1908              }
   1909              else
   1910              {
   1911                //Free the first in the list and prepare for futher processing
   1912                bdb_nwkDescFree(pBDBListNwk);
   \                     ??bdb_nwkAssocAttemt_2:
   \   00002D                ; Setup parameters for call to function bdb_nwkDescFree
   \   00002D   90....       MOV       DPTR,#pBDBListNwk
   \   000030   E0           MOVX      A,@DPTR
   \   000031   FA           MOV       R2,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FB           MOV       R3,A
   \   000035   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   1913                bdb_nwkAssocRetriesCount = 0;
   \   000038   90....       MOV       DPTR,#bdb_nwkAssocRetriesCount
   \   00003B   E4           CLR       A
   \                     ??bdb_nwkAssocAttemt_3:
   \   00003C   F0           MOVX      @DPTR,A
   1914              }
   1915              status = BDB_MSG_EVENT_FAIL;
   \   00003D   7B01         MOV       R3,#0x1
   1916            }
   1917            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
   \                     ??bdb_nwkAssocAttemt_1:
   \   00003F                ; Setup parameters for call to function bdb_SendMsg
   \   00003F   A8..         MOV       R0,?XSP + 0
   \   000041   A9..         MOV       R1,?XSP + 1
   \   000043   88..         MOV       ?V0,R0
   \   000045   89..         MOV       ?V1,R1
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7C01         MOV       R4,#0x1
   \   00004E   7A03         MOV       R2,#0x3
   \   000050   90....       MOV       DPTR,#bdb_TaskID
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F9           MOV       R1,A
   \   000055   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   1918          }
   \   00005D   7401         MOV       A,#0x1
   \   00005F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000062   7F02         MOV       R7,#0x2
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA
   1919                                 
   1920          
   1921          /****************************************************************************
   1922           * @fn          bdb_nwkDescFree
   1923           *
   1924           * @brief       This function frees one network discovery data.
   1925           *
   1926           * @param       ZSuccess - If the device was found and erased
   1927           * @param       ZInvalidParameter - Not found
   1928           *
   1929           * @return      none
   1930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1931          ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
   \                     bdb_nwkDescFree:
   1932          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1933            networkDesc_t* current_desc;
   1934            networkDesc_t* prev_desc;
   1935            
   1936            current_desc = pBDBListNwk;
   \   000004   90....       MOV       DPTR,#pBDBListNwk
   \   000007   800D         SJMP      ??bdb_nwkDescFree_0
   1937          
   1938            while(current_desc != NULL)
   1939            {  
   1940              if(current_desc == nodeDescToRemove)
   1941              {
   1942                if (current_desc == pBDBListNwk)
   1943                {
   1944                  pBDBListNwk = pBDBListNwk->nextDesc;
   1945                }
   1946                else
   1947                {
   1948                  prev_desc->nextDesc = current_desc->nextDesc;
   1949                }
   1950                
   1951                osal_mem_free( current_desc );
   1952                
   1953                return ZSuccess;
   1954              }
   1955          
   1956              prev_desc = current_desc;
   \                     ??bdb_nwkDescFree_1:
   \   000009   E8           MOV       A,R0
   \   00000A   FC           MOV       R4,A
   \   00000B   E9           MOV       A,R1
   \   00000C   FD           MOV       R5,A
   1957              current_desc = current_desc->nextDesc;
   \   00000D   E8           MOV       A,R0
   \   00000E   2414         ADD       A,#0x14
   \   000010   F582         MOV       DPL,A
   \   000012   E4           CLR       A
   \   000013   39           ADDC      A,R1
   \   000014   F583         MOV       DPH,A
   \                     ??bdb_nwkDescFree_0:
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F8           MOV       R0,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   E8           MOV       A,R0
   \   00001C   49           ORL       A,R1
   \   00001D   6059         JZ        ??bdb_nwkDescFree_2
   \   00001F   EA           MOV       A,R2
   \   000020   68           XRL       A,R0
   \   000021   7002         JNZ       ??bdb_nwkDescFree_3
   \   000023   EB           MOV       A,R3
   \   000024   69           XRL       A,R1
   \                     ??bdb_nwkDescFree_3:
   \   000025   70E2         JNZ       ??bdb_nwkDescFree_1
   \   000027   90....       MOV       DPTR,#pBDBListNwk
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FA           MOV       R2,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FB           MOV       R3,A
   \   00002F   E8           MOV       A,R0
   \   000030   6A           XRL       A,R2
   \   000031   7002         JNZ       ??bdb_nwkDescFree_4
   \   000033   E9           MOV       A,R1
   \   000034   6B           XRL       A,R3
   \                     ??bdb_nwkDescFree_4:
   \   000035   701A         JNZ       ??bdb_nwkDescFree_5
   \   000037   90....       MOV       DPTR,#pBDBListNwk
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FA           MOV       R2,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   CA           XCH       A,R2
   \   00003F   2414         ADD       A,#0x14
   \   000041   F582         MOV       DPL,A
   \   000043   E4           CLR       A
   \   000044   3A           ADDC      A,R2
   \   000045   F583         MOV       DPH,A
   \   000047   E0           MOVX      A,@DPTR
   \   000048   FA           MOV       R2,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   FB           MOV       R3,A
   \   00004C   90....       MOV       DPTR,#pBDBListNwk
   \   00004F   8017         SJMP      ??bdb_nwkDescFree_6
   \                     ??bdb_nwkDescFree_5:
   \   000051   E8           MOV       A,R0
   \   000052   2414         ADD       A,#0x14
   \   000054   F582         MOV       DPL,A
   \   000056   E4           CLR       A
   \   000057   39           ADDC      A,R1
   \   000058   F583         MOV       DPH,A
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FA           MOV       R2,A
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   FB           MOV       R3,A
   \   00005F   EC           MOV       A,R4
   \   000060   2414         ADD       A,#0x14
   \   000062   F582         MOV       DPL,A
   \   000064   E4           CLR       A
   \   000065   3D           ADDC      A,R5
   \   000066   F583         MOV       DPH,A
   \                     ??bdb_nwkDescFree_6:
   \   000068   EA           MOV       A,R2
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   EB           MOV       A,R3
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D                ; Setup parameters for call to function osal_mem_free
   \   00006D   E8           MOV       A,R0
   \   00006E   FA           MOV       R2,A
   \   00006F   E9           MOV       A,R1
   \   000070   FB           MOV       R3,A
   \   000071   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000074   7900         MOV       R1,#0x0
   \   000076   8002         SJMP      ??bdb_nwkDescFree_7
   1958            }
   1959            
   1960            return ZInvalidParameter;
   \                     ??bdb_nwkDescFree_2:
   \   000078   7902         MOV       R1,#0x2
   \                     ??bdb_nwkDescFree_7:
   \   00007A   D083         POP       DPH
   \   00007C   D082         POP       DPL
   \   00007E   02....       LJMP      ?BRET
   1961          }
   1962          
   1963          /*********************************************************************
   1964          * @fn          bdb_joinProcess
   1965          *
   1966          * @brief       Start the joining process for the selected nwk
   1967          *
   1968          * @return      ZStatus_t
   1969          */  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1970          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
   \                     bdb_joinProcess:
   1971          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1972            ZStatus_t status;
   1973           
   1974            ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000009                ; Setup parameters for call to function ZDApp_ChangeState
   \   000009   7903         MOV       R1,#0x3
   \   00000B   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1975            ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   00000E                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1976          
   1977            status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1978                                  pChosenNwk->logicalChannel,
   1979                                  ZDO_Config_Node_Descriptor.CapabilityFlags,
   1980                                  pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
   \   00001D                ; Setup parameters for call to function NLME_JoinRequest
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F5..         MOV       ?V0,A
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000041   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F5..         MOV       ?V0,A
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   E0           MOVX      A,@DPTR
   \   000059   FC           MOV       R4,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   FD           MOV       R5,A
   \   00005D   EE           MOV       A,R6
   \   00005E   240B         ADD       A,#0xb
   \   000060   FA           MOV       R2,A
   \   000061   E4           CLR       A
   \   000062   3F           ADDC      A,R7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   E9           MOV       A,R1
   \   00006D   FE           MOV       R6,A
   1981            
   1982            if(status == ZSuccess)
   \   00006E   7055         JNZ       ??bdb_joinProcess_0
   1983            {
   1984              // The receiver is on, turn network layer polling off.
   1985              if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000070   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000073   E0           MOVX      A,@DPTR
   \   000074   A2E3         MOV       C,0xE0 /* A   */.3
   \   000076   502A         JNC       ??bdb_joinProcess_1
   1986              {
   1987                // for an End Device with NO Child Table Management process or for a Router
   1988                if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1989                     ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   000078   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   600B         JZ        ??bdb_joinProcess_2
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   6401         XRL       A,#0x1
   \   000081   6006         JZ        ??bdb_joinProcess_2
   \   000083   90....       MOV       DPTR,#zgChildAgingEnable
   \   000086   E0           MOVX      A,@DPTR
   \   000087   703C         JNZ       ??bdb_joinProcess_0
   1990                {
   1991                  NLME_SetPollRate( 0 );
   \                     ??bdb_joinProcess_2:
   \   000089                ; Setup parameters for call to function NLME_SetPollRate
   \   000089   90....       MOV       DPTR,#__Constant_0
   \   00008C   12....       LCALL     ?XLOAD_R2345
   \   00008F   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1992                  NLME_SetQueuedPollRate( 0 );
   \   000092                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000092   7A00         MOV       R2,#0x0
   \   000094   7B00         MOV       R3,#0x0
   \   000096   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1993                  NLME_SetResponseRate( 0 );
   \   000099                ; Setup parameters for call to function NLME_SetResponseRate
   \   000099   7A00         MOV       R2,#0x0
   \   00009B   7B00         MOV       R3,#0x0
   \   00009D   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   0000A0   8023         SJMP      ??bdb_joinProcess_0
   1994                }
   1995              }
   1996              else
   1997              {
   1998                if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??bdb_joinProcess_1:
   \   0000A2   90....       MOV       DPTR,#devStartMode
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   701D         JNZ       ??bdb_joinProcess_0
   1999                {
   2000                  ZDApp_SavedPollRate = zgPollRate;
   \   0000A8   90....       MOV       DPTR,#zgPollRate
   \   0000AB   12....       LCALL     ?XLOAD_R0123
   \   0000AE   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   0000B1   12....       LCALL     ?XSTORE_R0123
   2001                  NLME_SetPollRate( zgRejoinPollRate );
   \   0000B4                ; Setup parameters for call to function NLME_SetPollRate
   \   0000B4   90....       MOV       DPTR,#zgRejoinPollRate
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   F5..         MOV       ?V0,A
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   AA..         MOV       R2,?V0
   \   0000BE   FB           MOV       R3,A
   \   0000BF   E4           CLR       A
   \   0000C0   FC           MOV       R4,A
   \   0000C1   FD           MOV       R5,A
   \   0000C2   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2002                }
   2003              }
   2004            }
   2005            return status;
   \                     ??bdb_joinProcess_0:
   \   0000C5   EE           MOV       A,R6
   \   0000C6   F9           MOV       R1,A
   \   0000C7   7F02         MOV       R7,#0x2
   \   0000C9   02....       LJMP      ?BANKED_LEAVE_XDATA
   2006          }
   2007          #endif
   2008          
   2009          
   2010           /*********************************************************************
   2011           * @fn          bdb_setChannelAttribute
   2012           *
   2013           * @brief       Set the primary or seconday channel for discovery or formation procedure
   2014           *
   2015           * @param       isPrimaryChannel - True if channel to set is primary,  
   2016           *                                 False if the channel to set is secondary
   2017           *
   2018           * @param       channel - Channel mask
   2019           *
   2020           * @return      none
   2021           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2022          void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
   \                     bdb_setChannelAttribute:
   2023          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   2024            if(isPrimaryChannel)
   \   00000D   E9           MOV       A,R1
   \   00000E   6005         JZ        ??bdb_setChannelAttribute_0
   2025            {
   2026              bdbAttributes.bdbPrimaryChannelSet = channel;
   \   000010   90....       MOV       DPTR,#bdbAttributes + 4
   \   000013   8003         SJMP      ??bdb_setChannelAttribute_1
   2027            }
   2028            else
   2029            {
   2030              bdbAttributes.bdbSecondaryChannelSet = channel;
   \                     ??bdb_setChannelAttribute_0:
   \   000015   90....       MOV       DPTR,#bdbAttributes
   \                     ??bdb_setChannelAttribute_1:
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   2031            }
   2032          }
   \   00001D   7F04         MOV       R7,#0x4
   \   00001F   02....       LJMP      ?BANKED_LEAVE_XDATA
   2033          
   2034           /*********************************************************************
   2035           * @fn          bdb_setChannel
   2036           *
   2037           * @brief       Set channel and save it in Nv for joining/formation operations
   2038           *
   2039           * @param       channel - Channel mask
   2040           *
   2041           * @return      none
   2042           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2043          void bdb_setChannel(uint32 channel)
   \                     bdb_setChannel:
   2044          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   2045            //Assign the channel and save it into nv
   2046            vScanChannels = channel;
   \   00000D   90....       MOV       DPTR,#zgDefaultChannelList
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_TO_X
   2047            runtimeChannel = channel;
   \   000015   90....       MOV       DPTR,#runtimeChannel
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   2048              
   2049            osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   75....       MOV       ?V0,#zgDefaultChannelList & 0xff
   \   000020   75....       MOV       ?V1,#(zgDefaultChannelList >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75..04       MOV       ?V0,#0x4
   \   00002B   75..00       MOV       ?V1,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV       R4,#0x0
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7A84         MOV       R2,#-0x7c
   \   000039   7B00         MOV       R3,#0x0
   \   00003B   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   2050          }
   \   000043   7F04         MOV       R7,#0x4
   \   000045   02....       LJMP      ?BANKED_LEAVE_XDATA
   2051          
   2052          
   2053           /*********************************************************************
   2054           * @fn          bdb_nwkJoiningFormation   
   2055           *
   2056           * @brief       Performs Joining/Formation operation on primary or secondary channel
   2057           *
   2058           * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
   2059           *
   2060           * @return      none
   2061           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2062          void bdb_nwkJoiningFormation(bool isJoining)
   \                     bdb_nwkJoiningFormation:
   2063          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2064            
   2065            if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
   \   000007   90....       MOV       DPTR,#vDoPrimaryScan
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   601C         JZ        ??bdb_nwkJoiningFormation_0
   \   00000D   90....       MOV       DPTR,#bdbAttributes + 4
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_X
   \   000015   E5..         MOV       A,?V0
   \   000017   45..         ORL       A,?V1
   \   000019   45..         ORL       A,?V2
   \   00001B   45..         ORL       A,?V3
   \   00001D   600A         JZ        ??bdb_nwkJoiningFormation_0
   2066            {
   2067              bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
   \   00001F                ; Setup parameters for call to function bdb_setChannel
   \   00001F   AA..         MOV       R2,?V0
   \   000021   AB..         MOV       R3,?V1
   \   000023   AC..         MOV       R4,?V2
   \   000025   AD..         MOV       R5,?V3
   \   000027   800B         SJMP      ??bdb_nwkJoiningFormation_1
   2068            }
   2069            else
   2070            {
   2071              vDoPrimaryScan = FALSE;
   \                     ??bdb_nwkJoiningFormation_0:
   \   000029   90....       MOV       DPTR,#vDoPrimaryScan
   \   00002C   E4           CLR       A
   \   00002D   F0           MOVX      @DPTR,A
   2072              bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   \   00002E                ; Setup parameters for call to function bdb_setChannel
   \   00002E   90....       MOV       DPTR,#bdbAttributes
   \   000031   12....       LCALL     ?XLOAD_R2345
   \                     ??bdb_nwkJoiningFormation_1:
   \   000034   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   2073            }
   2074          
   2075            if(vScanChannels)
   \   000037   90....       MOV       DPTR,#zgDefaultChannelList
   \   00003A   12....       LCALL     ?XLOAD_R0123
   \   00003D   E8           MOV       A,R0
   \   00003E   49           ORL       A,R1
   \   00003F   4A           ORL       A,R2
   \   000040   4B           ORL       A,R3
   \   000041   601A         JZ        ??bdb_nwkJoiningFormation_2
   2076            {
   2077              if(ZG_DEVICE_RTRONLY_TYPE)
   \   000043   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6401         XRL       A,#0x1
   \   000049   7007         JNZ       ??bdb_nwkJoiningFormation_3
   2078              {
   2079                if(isJoining)
   \   00004B   EE           MOV       A,R6
   \   00004C   7004         JNZ       ??bdb_nwkJoiningFormation_3
   2080                {
   2081                  ZDOInitDeviceEx(100,0);
   2082                }
   2083                else
   2084                {
   2085                  ZDOInitDeviceEx(100,1);
   \   00004E                ; Setup parameters for call to function ZDOInitDeviceEx
   \   00004E   7901         MOV       R1,#0x1
   \   000050   8002         SJMP      ??bdb_nwkJoiningFormation_4
   2086                }
   2087              }
   2088              //ZED can only join, and ZC can only create
   2089              else
   2090              {
   2091                ZDOInitDeviceEx(100,0);
   \                     ??bdb_nwkJoiningFormation_3:
   \   000052                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000052   7900         MOV       R1,#0x0
   \                     ??bdb_nwkJoiningFormation_4:
   \   000054   7A64         MOV       R2,#0x64
   \   000056   7B00         MOV       R3,#0x0
   \   000058   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   00005B   800E         SJMP      ??bdb_nwkJoiningFormation_5
   2092              }
   2093            }
   2094            else
   2095            {
   2096              if(isJoining)
   \                     ??bdb_nwkJoiningFormation_2:
   \   00005D   EE           MOV       A,R6
   \   00005E   7A00         MOV       R2,#0x0
   \   000060   6004         JZ        ??bdb_nwkJoiningFormation_6
   2097              {
   2098                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   \   000062                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000062   7903         MOV       R1,#0x3
   \   000064   8002         SJMP      ??bdb_nwkJoiningFormation_7
   2099              }
   2100              else
   2101              {
   2102                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkJoiningFormation_6:
   \   000066                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000066   7905         MOV       R1,#0x5
   \                     ??bdb_nwkJoiningFormation_7:
   \   000068   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2103              }
   2104            }
   2105          }
   \                     ??bdb_nwkJoiningFormation_5:
   \   00006B   7F04         MOV       R7,#0x4
   \   00006D   02....       LJMP      ?BANKED_LEAVE_XDATA
   2106          
   2107          #if (ZG_BUILD_JOINING_TYPE)
   2108           /*********************************************************************
   2109           * @fn          bdb_tcLinkKeyExchangeAttempt
   2110           *
   2111           * @brief       Generic send msg for TC link key exchange process attempts
   2112           *
   2113           * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
   2114           * @param       bdbTCExchangeState - Step in which the attemp was done
   2115           *
   2116           * @return      none
   2117           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2118          void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
   \                     bdb_tcLinkKeyExchangeAttempt:
   2119          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2120            bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
   \   00000A   7E00         MOV       R6,#0x0
   2121            uint8 dummy;
   2122            bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
   \   00000C   EA           MOV       A,R2
   \   00000D   90....       MOV       DPTR,#bdbCommissioningProcedureState + 1
   \   000010   F0           MOVX      @DPTR,A
   2123            if(didSuccess)
   \   000011   E9           MOV       A,R1
   \   000012   6013         JZ        ??bdb_tcLinkKeyExchangeAttempt_0
   2124            {
   2125              //Allow try since we are performing a new step.
   2126              osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   000014                ; Setup parameters for call to function osal_stop_timerEx
   \   000014   7A00         MOV       R2,#0x0
   \   000016   7B10         MOV       R3,#0x10
   \   000018   90....       MOV       DPTR,#bdb_TaskID
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2127              bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
   \   000020   90....       MOV       DPTR,#bdbAttributes + 16
   \   000023   E4           CLR       A
   \   000024   F0           MOVX      @DPTR,A
   \   000025   8002         SJMP      ??bdb_tcLinkKeyExchangeAttempt_1
   2128            }
   2129            else
   2130            {
   2131              bdbEventStatus = BDB_MSG_EVENT_FAIL;
   \                     ??bdb_tcLinkKeyExchangeAttempt_0:
   \   000027   7E01         MOV       R6,#0x1
   2132            }
   2133            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
   \                     ??bdb_tcLinkKeyExchangeAttempt_1:
   \   000029                ; Setup parameters for call to function bdb_SendMsg
   \   000029   A8..         MOV       R0,?XSP + 0
   \   00002B   A9..         MOV       R1,?XSP + 1
   \   00002D   88..         MOV       ?V2,R0
   \   00002F   89..         MOV       ?V3,R1
   \   000031   78..         MOV       R0,#?V2
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7C01         MOV       R4,#0x1
   \   000038   EE           MOV       A,R6
   \   000039   FB           MOV       R3,A
   \   00003A   7A01         MOV       R2,#0x1
   \   00003C   90....       MOV       DPTR,#bdb_TaskID
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   2134          }
   \   000049   7401         MOV       A,#0x1
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   7F04         MOV       R7,#0x4
   \   000050   02....       LJMP      ?BANKED_LEAVE_XDATA
   2135          
   2136          
   2137           /*********************************************************************
   2138           * @fn          bdb_requestVerifyTCLinkKey
   2139           *
   2140           * @brief       Attempt to verify the TC link key by sending Verify Key Request
   2141           *
   2142           * @param       none
   2143           *
   2144           * @return      none
   2145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2146          void bdb_requestVerifyTCLinkKey(void)
   \                     bdb_requestVerifyTCLinkKey:
   2147          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 11
   \   000004   74F5         MOV       A,#-0xb
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2148              uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2149              APSME_VerifyKeyReq_t vKey;
   2150              
   2151              APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   \   000009                ; Setup parameters for call to function APSME_GetRequest
   \   000009   7403         MOV       A,#0x3
   \   00000B   12....       LCALL     ?XSTACK_DISP102_8
   \   00000E   7A00         MOV       R2,#0x0
   \   000010   7B00         MOV       R3,#0x0
   \   000012   79AB         MOV       R1,#-0x55
   \   000014   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   2152              
   2153              vKey.tcExtAddr = TC_ExtAddr;
   \   000017   7403         MOV       A,#0x3
   \   000019   12....       LCALL     ?XSTACK_DISP100_8
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   E8           MOV       A,R0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E9           MOV       A,R1
   \   000026   F0           MOVX      @DPTR,A
   2154              vKey.keyType = KEY_TYPE_TC_LINK;
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   7404         MOV       A,#0x4
   \   00002E   F0           MOVX      @DPTR,A
   2155              
   2156              APSME_VerifyKeyReq( &vKey );
   \   00002F                ; Setup parameters for call to function APSME_VerifyKeyReq
   \   00002F   AA..         MOV       R2,?XSP + 0
   \   000031   AB..         MOV       R3,?XSP + 1
   \   000033   12....       LCALL     `??APSME_VerifyKeyReq::?relay`; Banked call to: APSME_VerifyKeyReq
   2157              
   2158              osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   \   000036                ; Setup parameters for call to function osal_stop_timerEx
   \   000036   7A00         MOV       R2,#0x0
   \   000038   7B10         MOV       R3,#0x10
   \   00003A   90....       MOV       DPTR,#bdb_TaskID
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2159              osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
   \   000042                ; Setup parameters for call to function osal_start_timerEx
   \   000042   90....       MOV       DPTR,#__Constant_1388
   \   000045   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000048   7A00         MOV       R2,#0x0
   \   00004A   7B10         MOV       R3,#0x10
   \   00004C   90....       MOV       DPTR,#bdb_TaskID
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F9           MOV       R1,A
   \   000051   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000054   7404         MOV       A,#0x4
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
   2160              
   2161          }
   \   000059   740B         MOV       A,#0xb
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   D083         POP       DPH
   \   000060   D082         POP       DPL
   \   000062   02....       LJMP      ?BRET
   2162          
   2163          /*********************************************************************
   2164           * @fn          bdb_requestTCLinkKey
   2165           *
   2166           * @brief       Attempt to request a TC link key
   2167           *
   2168           * @param       none
   2169           *
   2170           * @return      none
   2171           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2172          void bdb_requestTCLinkKey(void)
   \                     bdb_requestTCLinkKey:
   2173          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 4
   \   000004   74FC         MOV       A,#-0x4
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2174            zAddrType_t destAddr;
   2175            APSME_RequestKeyReq_t req;
   2176          
   2177            destAddr.addrMode = Addr16Bit;
   2178            destAddr.addr.shortAddr = 0x0000;
   2179            
   2180            req.dstAddr = destAddr.addr.shortAddr;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   2181            req.keyType = KEY_TYPE_TC_LINK;
   \   000011   04           INC       A
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   7404         MOV       A,#0x4
   \   000017   F0           MOVX      @DPTR,A
   2182            
   2183            APSME_RequestKeyReq(&req);
   \   000018                ; Setup parameters for call to function APSME_RequestKeyReq
   \   000018   AA..         MOV       R2,?XSP + 0
   \   00001A   AB..         MOV       R3,?XSP + 1
   \   00001C   12....       LCALL     `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   2184            
   2185            osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   \   00001F                ; Setup parameters for call to function osal_stop_timerEx
   \   00001F   7A00         MOV       R2,#0x0
   \   000021   7B10         MOV       R3,#0x10
   \   000023   90....       MOV       DPTR,#bdb_TaskID
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2186            
   2187            osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
   \   00002B                ; Setup parameters for call to function osal_start_timerEx
   \   00002B   90....       MOV       DPTR,#requestLinkKeyTimeout
   \   00002E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000031   7A00         MOV       R2,#0x0
   \   000033   7B10         MOV       R3,#0x10
   \   000035   90....       MOV       DPTR,#bdb_TaskID
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00003D   7404         MOV       A,#0x4
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   2188          } 
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   \   000047   D083         POP       DPH
   \   000049   D082         POP       DPL
   \   00004B   02....       LJMP      ?BRET
   2189          
   2190          
   2191          /*********************************************************************
   2192           * @fn          bdb_requestTCStackVersion
   2193           *
   2194           * @brief       Attempt to request the TC stack version using ZDP Node desc if 
   2195           *              join a Centralized nwk
   2196           *
   2197           * @param       none
   2198           *
   2199           * @return      none
   2200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2201          void bdb_requestTCStackVersion(void)
   \                     bdb_requestTCStackVersion:
   2202          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2203            if(requestNewTrustCenterLinkKey)
   \   00000A   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   607D         JZ        ??bdb_requestTCStackVersion_0
   2204            {
   2205              if(!APSME_IsDistributedSecurity())
   \   000010                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000010   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000013   E9           MOV       A,R1
   \   000014   7073         JNZ       ??bdb_requestTCStackVersion_1
   2206              {
   2207                if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
   \   000016   90....       MOV       DPTR,#bdbAttributes + 18
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   7051         JNZ       ??bdb_requestTCStackVersion_2
   2208                {
   2209                  zAddrType_t destAddr;
   2210                 
   2211                  destAddr.addrMode = Addr16Bit;
   \   00001C   7408         MOV       A,#0x8
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   7402         MOV       A,#0x2
   \   000023   F0           MOVX      @DPTR,A
   2212                  destAddr.addr.shortAddr = 0x0000;
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   E4           CLR       A
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   F0           MOVX      @DPTR,A
   2213                 
   2214                  ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);  
   \   00002E                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00002E   F5..         MOV       ?V0,A
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000035   7902         MOV       R1,#0x2
   \   000037   7C00         MOV       R4,#0x0
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   7401         MOV       A,#0x1
   \   00003D   12....       LCALL     ?XSTACK_DISP101_8
   \   000040   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000043   7401         MOV       A,#0x1
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   2215                  
   2216                  osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   \   000048                ; Setup parameters for call to function osal_stop_timerEx
   \   000048   7A00         MOV       R2,#0x0
   \   00004A   7B10         MOV       R3,#0x10
   \   00004C   90....       MOV       DPTR,#bdb_TaskID
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F9           MOV       R1,A
   \   000051   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2217                  osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
   \   000054                ; Setup parameters for call to function osal_start_timerEx
   \   000054   90....       MOV       DPTR,#__Constant_1388
   \   000057   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00005A   7A00         MOV       R2,#0x0
   \   00005C   7B10         MOV       R3,#0x10
   \   00005E   90....       MOV       DPTR,#bdb_TaskID
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F9           MOV       R1,A
   \   000063   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000066   7404         MOV       A,#0x4
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   2218                  return;
   \   00006B   802C         SJMP      ??bdb_requestTCStackVersion_3
   2219                }
   2220                else
   2221                {
   2222                  if(pfnCBKETCLinkKeyExchange)
   \                     ??bdb_requestTCStackVersion_2:
   \   00006D   90....       MOV       DPTR,#pfnCBKETCLinkKeyExchange
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F8           MOV       R0,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F9           MOV       R1,A
   \   000075   E8           MOV       A,R0
   \   000076   49           ORL       A,R1
   \   000077   6020         JZ        ??bdb_requestTCStackVersion_3
   2223                  {
   2224                    pfnCBKETCLinkKeyExchange();
   \   000079                ; Setup parameters for indirect call
   \   000079   90....       MOV       DPTR,#pfnCBKETCLinkKeyExchange
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F8           MOV       R0,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F583         MOV       DPH,A
   \   000082   8882         MOV       DPL,R0
   \   000084   12....       LCALL     ?CALL_IND
   2225                  }
   2226                  return;
   \   000087   8010         SJMP      ??bdb_requestTCStackVersion_3
   2227                }
   2228              }
   2229              else
   2230              {
   2231                bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
   \                     ??bdb_requestTCStackVersion_1:
   \   000089                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   000089   7901         MOV       R1,#0x1
   \   00008B   8002         SJMP      ??bdb_requestTCStackVersion_4
   2232              }
   2233            }
   2234            else
   2235            {
   2236              //Key not required, set default which is global
   2237              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   \                     ??bdb_requestTCStackVersion_0:
   \   00008D                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   00008D   7900         MOV       R1,#0x0
   \                     ??bdb_requestTCStackVersion_4:
   \   00008F   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   2238            }
   2239            //TC link key not required or join distributed nwk
   2240            bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
   \   000092                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000092   7A01         MOV       R2,#0x1
   \   000094   7901         MOV       R1,#0x1
   \   000096   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2241          }
   \                     ??bdb_requestTCStackVersion_3:
   \   000099   7409         MOV       A,#0x9
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009E   7F01         MOV       R7,#0x1
   \   0000A0   02....       LJMP      ?BANKED_LEAVE_XDATA
   2242          #endif
   2243          
   2244          
   2245          /*********************************************************************
   2246           * @fn          bdb_nwkSteeringDeviceOnNwk
   2247           *
   2248           * @brief       Send ZDP mgmt permit joining
   2249           *
   2250           * @param       none
   2251           *
   2252           * @return      none
   2253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2254          void bdb_nwkSteeringDeviceOnNwk(void)
   \                     bdb_nwkSteeringDeviceOnNwk:
   2255          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 9
   \   000004   74F7         MOV       A,#-0x9
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2256            zAddrType_t dstAddr;
   2257            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   74FC         MOV       A,#-0x4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   74FF         MOV       A,#-0x1
   \   000015   F0           MOVX      @DPTR,A
   2258            dstAddr.addrMode = AddrBroadcast;
   \   000016   7408         MOV       A,#0x8
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   740F         MOV       A,#0xf
   \   00001D   F0           MOVX      @DPTR,A
   2259            // Trust Center significance is always true
   2260            ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
   \   00001E                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7C01         MOV       R4,#0x1
   \   000022   79B4         MOV       R1,#-0x4c
   \   000024   AA..         MOV       R2,?XSP + 0
   \   000026   AB..         MOV       R3,?XSP + 1
   \   000028   12....       LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   2261          }
   \   00002B   7409         MOV       A,#0x9
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   D083         POP       DPH
   \   000032   D082         POP       DPL
   \   000034   02....       LJMP      ?BRET
   2262          
   2263          
   2264          /*********************************************************************
   2265           * @fn          bdb_startResumeCommissioningProcess
   2266           *
   2267           * @brief       Starts or resume the commissioning operations sets in the 
   2268           *              commissioningMode attribute
   2269           *
   2270           * @param       none
   2271           *
   2272           * @return      none
   2273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2274          void bdb_startResumeCommissioningProcess(void)
   \                     bdb_startResumeCommissioningProcess:
   2275          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2276          
   2277          #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) ) 
   2278            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
   2279            {
   2280              uint16 nwkAddr;
   2281          
   2282              //Does the device supports this commissioning mode?
   2283              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
   2284              {
   2285                //Clear previous state and substates
   2286                osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   2287                bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
   2288                
   2289                // Get our short address
   2290                ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
   2291                if ( nwkAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR )
   2292                {
   2293                  initiatorSelectNwkParams();
   2294                }
   2295                
   2296                touchLinkInitiator_StartDevDisc( );  
   2297                
   2298                bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
   2299              }
   2300              else
   2301              {
   2302                //Process the next commissioning mode
   2303                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   2304              }
   2305              return;
   2306            }
   2307          #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED  
   2308            
   2309          #if ZG_BUILD_ENDDEVICE_TYPE
   2310            if(ZG_DEVICE_ENDDEVICE_TYPE)
   2311            {
   2312              if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
   \   00000A   90....       MOV       DPTR,#bdbAttributes + 11
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   A2E5         MOV       C,0xE0 /* A   */.5
   \   000010   5003         JNC       $+5
   \   000012   02....       LJMP      ??bdb_startResumeCommissioningProcess_0 & 0xFFFF
   2313              {
   2314                //No commissioning process can be performed if the ZED has lost its parent
   2315                return;
   2316              }
   2317            }
   2318          #endif
   2319            
   2320            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
   \   000015   E0           MOVX      A,@DPTR
   \   000016   A2E1         MOV       C,0xE0 /* A   */.1
   \   000018   5053         JNC       ??bdb_startResumeCommissioningProcess_1
   2321            {
   2322              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   \   00001A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001D   7404         MOV       A,#0x4
   \   00001F   F0           MOVX      @DPTR,A
   2323              
   2324              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
   \   000020   90....       MOV       DPTR,#bdbAttributes + 12
   \   000023   E0           MOVX      A,@DPTR
   \   000024   A2E0         MOV       C,0xE0 /* A   */.0
   \   000026   5042         JNC       ??bdb_startResumeCommissioningProcess_2
   2325              {
   2326          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2327                bdb_ClearNetworkParams();
   2328          #endif
   2329                if(bdbAttributes.bdbNodeIsOnANetwork)
   \   000028   90....       MOV       DPTR,#bdbAttributes + 14
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   600C         JZ        ??bdb_startResumeCommissioningProcess_3
   2330                {
   2331                  bdb_nwkSteeringDeviceOnNwk();
   \   00002E                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   00002E   12....       LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
   2332                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   000031                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000031   7A01         MOV       R2,#0x1
   \   000033   7904         MOV       R1,#0x4
   \   000035   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   000038   8030         SJMP      ??bdb_startResumeCommissioningProcess_2
   2333                }
   2334          #if (ZG_BUILD_JOINING_TYPE)
   2335                else
   2336                {
   2337                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_startResumeCommissioningProcess_3:
   \   00003A   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   6401         XRL       A,#0x1
   \   000040   6005         JZ        ??bdb_startResumeCommissioningProcess_4
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6402         XRL       A,#0x2
   \   000045   7023         JNZ       ??bdb_startResumeCommissioningProcess_2
   2338                  {
   2339                    vDoPrimaryScan = TRUE;
   \                     ??bdb_startResumeCommissioningProcess_4:
   \   000047   90....       MOV       DPTR,#vDoPrimaryScan
   \   00004A   7401         MOV       A,#0x1
   \   00004C   F0           MOVX      @DPTR,A
   2340                    
   2341                    //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
   2342                    osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
   \   00004D                ; Setup parameters for call to function osal_memset
   \   00004D   7C04         MOV       R4,#0x4
   \   00004F   7D00         MOV       R5,#0x0
   \   000051   7900         MOV       R1,#0x0
   \   000053   7A..         MOV       R2,#bdbCommissioningProcedureState & 0xff
   \   000055   7B..         MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
   \   000057   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2343                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
   \   00005A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00005D   7403         MOV       A,#0x3
   \   00005F   F0           MOVX      @DPTR,A
   2344                    bdb_nwkJoiningFormation(TRUE);
   \   000060                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   000060   7901         MOV       R1,#0x1
   \   000062   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   2345                    bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
   \   000065                ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
   \   000065   7901         MOV       R1,#0x1
   \   000067   12....       LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
   2346                  }
   2347                }
   2348          #endif
   2349          #if (ZG_BUILD_COORDINATOR_TYPE)
   2350                if(ZG_DEVICE_COORDINATOR_TYPE)
   2351                {
   2352                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
   2353                }
   2354          #endif
   2355              }
   2356              return;
   \                     ??bdb_startResumeCommissioningProcess_2:
   \   00006A   02....       LJMP      ??bdb_startResumeCommissioningProcess_0 & 0xFFFF
   2357            }
   2358            
   2359            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
   \                     ??bdb_startResumeCommissioningProcess_1:
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   A2E2         MOV       C,0xE0 /* A   */.2
   \   000070   500F         JNC       ??bdb_startResumeCommissioningProcess_5
   2360            {
   2361              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   \   000072   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000075   7405         MOV       A,#0x5
   \   000077   F0           MOVX      @DPTR,A
   2362              
   2363              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
   2364              {
   2365                if(!bdbAttributes.bdbNodeIsOnANetwork)
   2366                {
   2367          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2368                bdb_ClearNetworkParams();
   2369          #endif
   2370                  vDoPrimaryScan = TRUE;
   2371                  
   2372                  osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   2373                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   2374          
   2375                  bdb_nwkJoiningFormation(FALSE);
   2376                  bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
   2377                  return;
   2378                }
   2379              }
   2380              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \   000078                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000078   7A00         MOV       R2,#0x0
   \   00007A   F9           MOV       R1,A
   \   00007B   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2381              return;
   \   00007E   02....       LJMP      ??bdb_startResumeCommissioningProcess_0 & 0xFFFF
   2382            }
   2383          
   2384          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)    
   2385            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
   \                     ??bdb_startResumeCommissioningProcess_5:
   \   000081   E0           MOVX      A,@DPTR
   \   000082   A2E3         MOV       C,0xE0 /* A   */.3
   \   000084   4003         JC        $+5
   \   000086   02....       LJMP      ??bdb_startResumeCommissioningProcess_0 & 0xFFFF
   2386            {
   2387              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
   \   000089   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00008C   7406         MOV       A,#0x6
   \   00008E   F0           MOVX      @DPTR,A
   2388              
   2389              //Is the device on a network?
   2390              if(bdb_isDeviceNonFactoryNew())
   \   00008F                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   00008F   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   000092   E9           MOV       A,R1
   \   000093   7003         JNZ       $+5
   \   000095   02....       LJMP      ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
   2391              {
   2392                zclAttrRec_t attrRec;
   2393          
   2394                endPointDesc_t *bdb_CurrEpDescriptor = NULL;
   2395          
   2396                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   \   000098                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000098   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   00009B   8A..         MOV       ?V0,R2
   \   00009D   8B..         MOV       ?V1,R3
   \   00009F   AE..         MOV       R6,?V0
   \   0000A1   AF..         MOV       R7,?V1
   2397                
   2398                //If not found endpoint with Identify cluster is found, then report fail
   2399                if(bdb_CurrEpDescriptor == NULL)
   \   0000A3   EA           MOV       A,R2
   \   0000A4   4F           ORL       A,R7
   \   0000A5   7008         JNZ       ??bdb_startResumeCommissioningProcess_7
   2400                {
   2401                  bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   0000A7                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   0000A7   790E         MOV       R1,#0xe
   \   0000A9   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2402                  return;
   \   0000AC   02....       LJMP      ??bdb_startResumeCommissioningProcess_0 & 0xFFFF
   2403                }
   2404                
   2405                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
   \                     ??bdb_startResumeCommissioningProcess_7:
   \   0000AF   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F8           MOV       R0,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F583         MOV       DPH,A
   \   0000B8   8882         MOV       DPL,R0
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   F8           MOV       R0,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F583         MOV       DPH,A
   \   0000C2   8882         MOV       DPL,R0
   \   0000C4   A3           INC       DPTR
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000C8   4003         JC        $+5
   \   0000CA   02....       LJMP      ??bdb_startResumeCommissioningProcess_8 & 0xFFFF
   2406                {
   2407                  if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2408                            ATTRID_IDENTIFY_TIME, &attrRec ) )
   \   0000CD                ; Setup parameters for call to function zclFindAttrRec
   \   0000CD   7403         MOV       A,#0x3
   \   0000CF   12....       LCALL     ?XSTACK_DISP100_8
   \   0000D2   88..         MOV       ?V0,R0
   \   0000D4   89..         MOV       ?V1,R1
   \   0000D6   78..         MOV       R0,#?V0
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DB   7C00         MOV       R4,#0x0
   \   0000DD   7D00         MOV       R5,#0x0
   \   0000DF   7A03         MOV       R2,#0x3
   \   0000E1   7B00         MOV       R3,#0x0
   \   0000E3   8E82         MOV       DPL,R6
   \   0000E5   8F83         MOV       DPH,R7
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   F9           MOV       R1,A
   \   0000E9   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000EC   7402         MOV       A,#0x2
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F1   E9           MOV       A,R1
   \   0000F2   7003         JNZ       $+5
   \   0000F4   02....       LJMP      ??bdb_startResumeCommissioningProcess_9 & 0xFFFF
   2409                  {
   2410                    //Set it to at less 180 
   2411                    if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
   \   0000F7   7409         MOV       A,#0x9
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F8           MOV       R0,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   F9           MOV       R1,A
   \   000101   8882         MOV       DPL,R0
   \   000103   F583         MOV       DPH,A
   \   000105   C3           CLR       C
   \   000106   E0           MOVX      A,@DPTR
   \   000107   94B5         SUBB      A,#-0x4b
   \   000109   A3           INC       DPTR
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   9400         SUBB      A,#0x0
   \   00010D   504C         JNC       ??bdb_startResumeCommissioningProcess_10
   2412                    {
   2413                      *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
   \   00010F   8882         MOV       DPL,R0
   \   000111   8983         MOV       DPH,R1
   \   000113   74B4         MOV       A,#-0x4c
   \   000115   F0           MOVX      @DPTR,A
   \   000116   A3           INC       DPTR
   \   000117   E4           CLR       A
   \   000118   F0           MOVX      @DPTR,A
   2414                       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   000119                ; Setup parameters for call to function osal_start_timerEx
   \   000119   90....       MOV       DPTR,#__Constant_3e8
   \   00011C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00011F   7A00         MOV       R2,#0x0
   \   000121   7B20         MOV       R3,#0x20
   \   000123   90....       MOV       DPTR,#bdb_TaskID
   \   000126   E0           MOVX      A,@DPTR
   \   000127   F9           MOV       R1,A
   \   000128   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00012B   7404         MOV       A,#0x4
   \   00012D   12....       LCALL     ?DEALLOC_XSTACK8
   2415          
   2416                      if(pfnIdentifyTimeChangeCB != NULL)
   \   000130   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   000133   E0           MOVX      A,@DPTR
   \   000134   F8           MOV       R0,A
   \   000135   A3           INC       DPTR
   \   000136   E0           MOVX      A,@DPTR
   \   000137   F9           MOV       R1,A
   \   000138   E8           MOV       A,R0
   \   000139   49           ORL       A,R1
   \   00013A   601F         JZ        ??bdb_startResumeCommissioningProcess_10
   2417                      {
   2418                        if(bdbIndentifyActiveEndpoint == 0xFF)
   \   00013C   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   F4           CPL       A
   \   000141   7004         JNZ       ??bdb_startResumeCommissioningProcess_11
   2419                        {
   2420                          pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);  
   \   000143                ; Setup parameters for indirect call
   \   000143   79FF         MOV       R1,#-0x1
   \   000145   8006         SJMP      ??bdb_startResumeCommissioningProcess_12
   2421                        }
   2422                        else
   2423                        {
   2424                          pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
   \                     ??bdb_startResumeCommissioningProcess_11:
   \   000147                ; Setup parameters for indirect call
   \   000147   8E82         MOV       DPL,R6
   \   000149   8F83         MOV       DPH,R7
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   F9           MOV       R1,A
   \                     ??bdb_startResumeCommissioningProcess_12:
   \   00014D   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   000150   E0           MOVX      A,@DPTR
   \   000151   F8           MOV       R0,A
   \   000152   A3           INC       DPTR
   \   000153   E0           MOVX      A,@DPTR
   \   000154   F583         MOV       DPH,A
   \   000156   8882         MOV       DPL,R0
   \   000158   12....       LCALL     ?CALL_IND
   2425                        }
   2426                      }
   2427                    }
   2428                    //Attribute found and set, report success
   2429                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   \                     ??bdb_startResumeCommissioningProcess_10:
   \   00015B   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   F8           MOV       R0,A
   \   000160   A3           INC       DPTR
   \   000161   E0           MOVX      A,@DPTR
   \   000162   F583         MOV       DPH,A
   \   000164   8882         MOV       DPL,R0
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   E0           MOVX      A,@DPTR
   \   000169   F8           MOV       R0,A
   \   00016A   A3           INC       DPTR
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   F583         MOV       DPH,A
   \   00016E   8882         MOV       DPL,R0
   \   000170   A3           INC       DPTR
   \   000171   E0           MOVX      A,@DPTR
   \   000172   A2E0         MOV       C,0xE0 /* A   */.0
   \   000174   4004         JC        ??bdb_startResumeCommissioningProcess_13
   2430                    {
   2431                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
   \   000176                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000176   7909         MOV       R1,#0x9
   \   000178   8050         SJMP      ??bdb_startResumeCommissioningProcess_14
   2432                    }
   2433                    else
   2434                    {
   2435                      bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2436          
   2437                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \                     ??bdb_startResumeCommissioningProcess_13:
   \   00017A   7401         MOV       A,#0x1
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   7403         MOV       A,#0x3
   \   000181   F0           MOVX      @DPTR,A
   2438                      bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
   \   000182   85..82       MOV       DPL,?XSP + 0
   \   000185   85..83       MOV       DPH,?XSP + 1
   \   000188   7409         MOV       A,#0x9
   \   00018A   F0           MOVX      @DPTR,A
   2439          
   2440                      bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \   00018B                ; Setup parameters for call to function bdb_SendMsg
   \   00018B   A8..         MOV       R0,?XSP + 0
   \   00018D   A9..         MOV       R1,?XSP + 1
   \   00018F   88..         MOV       ?V0,R0
   \   000191   89..         MOV       ?V1,R1
   \   000193   78..         MOV       R0,#?V0
   \   000195   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000198   7C03         MOV       R4,#0x3
   \   00019A   7B00         MOV       R3,#0x0
   \   00019C   7A0A         MOV       R2,#0xa
   \   00019E   90....       MOV       DPTR,#bdb_TaskID
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   F9           MOV       R1,A
   \   0001A3   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   0001A6   7402         MOV       A,#0x2
   \   0001A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AB   8020         SJMP      ??bdb_startResumeCommissioningProcess_8
   2441                    }
   2442                  }
   2443                  else
   2444                  {
   2445                    //Attribute not found and no initiator process, report fail
   2446                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   \                     ??bdb_startResumeCommissioningProcess_9:
   \   0001AD   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   0001B0   E0           MOVX      A,@DPTR
   \   0001B1   F8           MOV       R0,A
   \   0001B2   A3           INC       DPTR
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   F583         MOV       DPH,A
   \   0001B6   8882         MOV       DPL,R0
   \   0001B8   A3           INC       DPTR
   \   0001B9   A3           INC       DPTR
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   F8           MOV       R0,A
   \   0001BC   A3           INC       DPTR
   \   0001BD   E0           MOVX      A,@DPTR
   \   0001BE   F583         MOV       DPH,A
   \   0001C0   8882         MOV       DPL,R0
   \   0001C2   A3           INC       DPTR
   \   0001C3   E0           MOVX      A,@DPTR
   \   0001C4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001C6   4005         JC        ??bdb_startResumeCommissioningProcess_8
   2447                    {
   2448                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   0001C8                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   0001C8   790E         MOV       R1,#0xe
   \                     ??bdb_startResumeCommissioningProcess_14:
   \   0001CA   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2449                    }
   2450                  }
   2451                }  //F&B Target
   2452                
   2453                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
   \                     ??bdb_startResumeCommissioningProcess_8:
   \   0001CD   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   0001D0   E0           MOVX      A,@DPTR
   \   0001D1   2402         ADD       A,#0x2
   \   0001D3   F8           MOV       R0,A
   \   0001D4   A3           INC       DPTR
   \   0001D5   E0           MOVX      A,@DPTR
   \   0001D6   3400         ADDC      A,#0x0
   \   0001D8   F9           MOV       R1,A
   \   0001D9   8882         MOV       DPL,R0
   \   0001DB   F583         MOV       DPH,A
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   FA           MOV       R2,A
   \   0001DF   A3           INC       DPTR
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   F583         MOV       DPH,A
   \   0001E3   8A82         MOV       DPL,R2
   \   0001E5   A3           INC       DPTR
   \   0001E6   E0           MOVX      A,@DPTR
   \   0001E7   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001E9   5023         JNC       ??bdb_startResumeCommissioningProcess_15
   2454                {
   2455                  bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2456                  
   2457                  //If no function to add binds is available then do not process Initiator
   2458                  if(!pbindAddEntry)
   \   0001EB   90....       MOV       DPTR,#pbindAddEntry
   \   0001EE   E0           MOVX      A,@DPTR
   \   0001EF   FA           MOV       R2,A
   \   0001F0   A3           INC       DPTR
   \   0001F1   E0           MOVX      A,@DPTR
   \   0001F2   FB           MOV       R3,A
   \   0001F3   EA           MOV       A,R2
   \   0001F4   4B           ORL       A,R3
   \   0001F5   7019         JNZ       ??bdb_startResumeCommissioningProcess_16
   2459                  {
   2460                    //If no target process, then report fail
   2461                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET))
   \   0001F7   8882         MOV       DPL,R0
   \   0001F9   8983         MOV       DPH,R1
   \   0001FB   E0           MOVX      A,@DPTR
   \   0001FC   F8           MOV       R0,A
   \   0001FD   A3           INC       DPTR
   \   0001FE   E0           MOVX      A,@DPTR
   \   0001FF   F583         MOV       DPH,A
   \   000201   8882         MOV       DPL,R0
   \   000203   A3           INC       DPTR
   \   000204   E0           MOVX      A,@DPTR
   \   000205   A2E1         MOV       C,0xE0 /* A   */.1
   \   000207   4066         JC        ??bdb_startResumeCommissioningProcess_0
   2462                    {
   2463                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2464                    }        
   2465                  }
   2466                  else
   2467                  {
   2468                    //Send identify query with the endpoint requested
   2469                    if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
   2470                    {
   2471                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2472                    }
   2473          
   2474                    //If periodic F&B is enabled
   2475                    if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2476                    {
   2477                      // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
   2478                      bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
   2479                      
   2480                      osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   2481                    }
   2482          
   2483                    bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   2484                    bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
   2485          
   2486                    bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   2487                  }
   2488                } //F&B Initiator
   2489              }
   2490              //Not in the network
   2491              else
   2492              {
   2493                bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \                     ??bdb_startResumeCommissioningProcess_6:
   \   000209                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000209   790E         MOV       R1,#0xe
   \   00020B   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2494              }
   2495              
   2496              return;
   \                     ??bdb_startResumeCommissioningProcess_15:
   \   00020E   805F         SJMP      ??bdb_startResumeCommissioningProcess_0
   \                     ??bdb_startResumeCommissioningProcess_16:
   \   000210                ; Setup parameters for call to function bdb_SendIdentifyQuery
   \   000210   8E82         MOV       DPL,R6
   \   000212   8F83         MOV       DPH,R7
   \   000214   E0           MOVX      A,@DPTR
   \   000215   F9           MOV       R1,A
   \   000216   12....       LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
   \   000219   E9           MOV       A,R1
   \   00021A   6005         JZ        ??bdb_startResumeCommissioningProcess_17
   \   00021C                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00021C   790E         MOV       R1,#0xe
   \   00021E   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   \                     ??bdb_startResumeCommissioningProcess_17:
   \   000221   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000224   740C         MOV       A,#0xc
   \   000226   F0           MOVX      @DPTR,A
   \   000227                ; Setup parameters for call to function osal_start_timerEx
   \   000227   90....       MOV       DPTR,#__Constant_3a98
   \   00022A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00022D   7A40         MOV       R2,#0x40
   \   00022F   7B00         MOV       R3,#0x0
   \   000231   90....       MOV       DPTR,#bdb_TaskID
   \   000234   E0           MOVX      A,@DPTR
   \   000235   F9           MOV       R1,A
   \   000236   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000239   7404         MOV       A,#0x4
   \   00023B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00023E   7401         MOV       A,#0x1
   \   000240   12....       LCALL     ?XSTACK_DISP0_8
   \   000243   7403         MOV       A,#0x3
   \   000245   F0           MOVX      @DPTR,A
   \   000246   85..82       MOV       DPL,?XSP + 0
   \   000249   85..83       MOV       DPH,?XSP + 1
   \   00024C   740A         MOV       A,#0xa
   \   00024E   F0           MOVX      @DPTR,A
   \   00024F                ; Setup parameters for call to function bdb_SendMsg
   \   00024F   A8..         MOV       R0,?XSP + 0
   \   000251   A9..         MOV       R1,?XSP + 1
   \   000253   88..         MOV       ?V0,R0
   \   000255   89..         MOV       ?V1,R1
   \   000257   78..         MOV       R0,#?V0
   \   000259   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00025C   7C03         MOV       R4,#0x3
   \   00025E   7B00         MOV       R3,#0x0
   \   000260   7A0A         MOV       R2,#0xa
   \   000262   90....       MOV       DPTR,#bdb_TaskID
   \   000265   E0           MOVX      A,@DPTR
   \   000266   F9           MOV       R1,A
   \   000267   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   00026A   7402         MOV       A,#0x2
   \   00026C   12....       LCALL     ?DEALLOC_XSTACK8
   2497            }
   2498          #endif
   2499            
   2500          }
   \                     ??bdb_startResumeCommissioningProcess_0:
   \   00026F   740B         MOV       A,#0xb
   \   000271   12....       LCALL     ?DEALLOC_XSTACK8
   \   000274   7F02         MOV       R7,#0x2
   \   000276   02....       LJMP      ?BANKED_LEAVE_XDATA
   2501          
   2502          /*********************************************************************
   2503           * @fn          bdb_event_loop
   2504           *
   2505           * @brief       Main event loop bdb tasks.
   2506           *
   2507           * @param       task_id - task id
   2508           * @param       events - event bitmap
   2509           *
   2510           * @return      unprocessed events
   2511           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2512          UINT16 bdb_event_loop(byte task_id, UINT16 events)
   \                     bdb_event_loop:
   2513          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2514            (void)task_id;  // Intentionally unreferenced parameter
   2515            
   2516          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
   2517            endPointDesc_t * bdb_CurrEpDescriptor;
   2518          #endif
   2519            
   2520            if(events & BDB_CHANGE_COMMISSIONING_STATE)
   \   00000E   EA           MOV       A,R2
   \   00000F   5404         ANL       A,#0x4
   \   000011   6053         JZ        ??bdb_event_loop_0
   2521            {
   2522              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   \   000013   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000016   E0           MOVX      A,@DPTR
   \   000017   600D         JZ        ??bdb_event_loop_1
   \   000019   14           DEC       A
   \   00001A   600F         JZ        ??bdb_event_loop_2
   \   00001C   24FD         ADD       A,#-0x3
   \   00001E   6014         JZ        ??bdb_event_loop_3
   \   000020   24FE         ADD       A,#-0x2
   \   000022   601C         JZ        ??bdb_event_loop_4
   \   000024   803A         SJMP      ??bdb_event_loop_5
   2523              {
   2524                case BDB_COMMISSIONING_STATE_START_RESUME:
   2525                  bdb_startResumeCommissioningProcess();
   \                     ??bdb_event_loop_1:
   \   000026                ; Setup parameters for call to function bdb_startResumeCommissioningProcess
   \   000026   12....       LCALL     `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
   2526                break;
   \   000029   8035         SJMP      ??bdb_event_loop_5
   2527                
   2528                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   2529                  if (ZG_BUILD_JOINING_TYPE)
   2530                  {
   2531                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   \                     ??bdb_event_loop_2:
   \   00002B                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   00002B   7A01         MOV       R2,#0x1
   \   00002D   7901         MOV       R1,#0x1
   \   00002F   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   2532                  }
   2533                break;
   \   000032   802C         SJMP      ??bdb_event_loop_5
   2534                
   2535                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   2536                  bdb_nwkSteeringDeviceOnNwk();
   \                     ??bdb_event_loop_3:
   \   000034                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000034   12....       LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
   2537                  
   2538                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   000037                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000037   7A01         MOV       R2,#0x1
   \   000039   7904         MOV       R1,#0x4
   \   00003B   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2539                break;
   \   00003E   8020         SJMP      ??bdb_event_loop_5
   2540                
   2541                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   2542                  bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_4:
   \   000040   90....       MOV       DPTR,#bdbAttributes + 10
   \   000043   E4           CLR       A
   \   000044   F0           MOVX      @DPTR,A
   2543                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000045   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000048   F0           MOVX      @DPTR,A
   2544                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   000049                ; Setup parameters for call to function osal_start_timerEx
   \   000049   90....       MOV       DPTR,#__Constant_32
   \   00004C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004F   7A04         MOV       R2,#0x4
   \   000051   7B00         MOV       R3,#0x0
   \   000053   90....       MOV       DPTR,#bdb_TaskID
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F9           MOV       R1,A
   \   000058   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   2545                break;
   2546                
   2547              }
   2548              return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
   \                     ??bdb_event_loop_5:
   \   000060   EE           MOV       A,R6
   \   000061   6404         XRL       A,#0x4
   \   000063   02....       LJMP      ??bdb_event_loop_6 & 0xFFFF
   2549            }
   2550          
   2551            if ( events & SYS_EVENT_MSG )
   \                     ??bdb_event_loop_0:
   \   000066   EB           MOV       A,R3
   \   000067   5480         ANL       A,#0x80
   \   000069   704B         JNZ       ??bdb_event_loop_7
   2552            {
   2553              uint8 *msg_ptr;
   2554              
   2555              while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
   2556              {
   2557                //Process the Incomming ZDO messages used by BDB commissioning methods
   2558                if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_ZDO_CB_MSG)
   2559                {
   2560                  bdb_processZDOMgs((zdoIncomingMsg_t *)msg_ptr);
   2561                }
   2562                
   2563                //Validate the is receive on the right process
   2564                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
   2565                {
   2566                  bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
   2567                }
   2568                //Notify the user
   2569                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
   2570                {
   2571                  ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
   2572                  if(pfnCommissioningStatusCB)
   2573                  {
   2574                    pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2575                  }
   2576          #ifdef MT_APP_CNF_FUNC
   2577                  //Notify the host processor about the event
   2578                  MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2579          #endif
   2580                }
   2581          #if (ZG_BUILD_COORDINATOR_TYPE)
   2582                else
   2583                {
   2584                  if(ZG_DEVICE_COORDINATOR_TYPE)
   2585                  {
   2586                    //Notify the status 
   2587                    if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
   2588                    {
   2589                      pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
   2590                    }
   2591                  }
   2592                }
   2593          #endif
   2594                // Release the memory
   2595                osal_msg_deallocate( msg_ptr );
   2596              }
   2597          
   2598              // Return unprocessed events
   2599              return (events ^ SYS_EVENT_MSG);
   2600            }
   2601            
   2602          
   2603            if(events & BDB_PROCESS_TIMEOUT)
   \   00006B   EB           MOV       A,R3
   \   00006C   5410         ANL       A,#0x10
   \   00006E   607C         JZ        ??bdb_event_loop_8
   2604            {
   2605              bdb_processTimeout();
   \   000070                ; Setup parameters for call to function bdb_processTimeout
   \   000070   12....       LCALL     `??bdb_processTimeout::?relay`; Banked call to: bdb_processTimeout
   2606              // Return unprocessed events
   2607              return (events ^ BDB_PROCESS_TIMEOUT);
   \   000073   EE           MOV       A,R6
   \   000074   FA           MOV       R2,A
   \   000075   EF           MOV       A,R7
   \   000076   6410         XRL       A,#0x10
   \   000078   02....       LJMP      ??bdb_event_loop_9 & 0xFFFF
   2608            }
   \                     ??bdb_event_loop_10:
   \   00007B   740A         MOV       A,#0xa
   \   00007D   68           XRL       A,R0
   \   00007E   702F         JNZ       ??bdb_event_loop_11
   \   000080   90....       MOV       DPTR,#bdbAttributes + 11
   \   000083   E0           MOVX      A,@DPTR
   \   000084   8A82         MOV       DPL,R2
   \   000086   8B83         MOV       DPH,R3
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   000090   E0           MOVX      A,@DPTR
   \   000091   F8           MOV       R0,A
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F9           MOV       R1,A
   \   000095   E8           MOV       A,R0
   \   000096   49           ORL       A,R1
   \   000097   6016         JZ        ??bdb_event_loop_11
   \   000099                ; Setup parameters for indirect call
   \   000099   EA           MOV       A,R2
   \   00009A   2402         ADD       A,#0x2
   \   00009C   FA           MOV       R2,A
   \   00009D   E4           CLR       A
   \   00009E   35..         ADDC      A,?V1
   \   0000A0   FB           MOV       R3,A
   \   0000A1   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F8           MOV       R0,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   F583         MOV       DPH,A
   \   0000AA   8882         MOV       DPL,R0
   \   0000AC   12....       LCALL     ?CALL_IND
   \                     ??bdb_event_loop_11:
   \   0000AF                ; Setup parameters for call to function osal_msg_deallocate
   \   0000AF   AA..         MOV       R2,?V0
   \   0000B1   AB..         MOV       R3,?V1
   \   0000B3   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??bdb_event_loop_7:
   \   0000B6                ; Setup parameters for call to function osal_msg_receive
   \   0000B6   90....       MOV       DPTR,#bdb_TaskID
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F9           MOV       R1,A
   \   0000BB   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   0000BE   8A..         MOV       ?V0,R2
   \   0000C0   8B..         MOV       ?V1,R3
   \   0000C2   A9..         MOV       R1,?V1
   \   0000C4   EA           MOV       A,R2
   \   0000C5   49           ORL       A,R1
   \   0000C6   601C         JZ        ??bdb_event_loop_12
   \   0000C8   8A82         MOV       DPL,R2
   \   0000CA   8B83         MOV       DPH,R3
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F8           MOV       R0,A
   \   0000CE   74D3         MOV       A,#-0x2d
   \   0000D0   68           XRL       A,R0
   \   0000D1   7005         JNZ       ??bdb_event_loop_13
   \   0000D3                ; Setup parameters for call to function bdb_processZDOMgs
   \   0000D3   12....       LCALL     `??bdb_processZDOMgs::?relay`; Banked call to: bdb_processZDOMgs
   \   0000D6   80D7         SJMP      ??bdb_event_loop_11
   \                     ??bdb_event_loop_13:
   \   0000D8   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   68           XRL       A,R0
   \   0000DD   709C         JNZ       ??bdb_event_loop_10
   \   0000DF                ; Setup parameters for call to function bdb_ProcessOSALMsg
   \   0000DF   12....       LCALL     `??bdb_ProcessOSALMsg::?relay`; Banked call to: bdb_ProcessOSALMsg
   \   0000E2   80CB         SJMP      ??bdb_event_loop_11
   \                     ??bdb_event_loop_12:
   \   0000E4   EE           MOV       A,R6
   \   0000E5   FA           MOV       R2,A
   \   0000E6   EF           MOV       A,R7
   \   0000E7   6480         XRL       A,#0x80
   \   0000E9   02....       LJMP      ??bdb_event_loop_9 & 0xFFFF
   2609            
   2610            if(events &  BDB_REPORT_TIMEOUT){
   \                     ??bdb_event_loop_8:
   \   0000EC   EA           MOV       A,R2
   \   0000ED   5480         ANL       A,#0x80
   \   0000EF   6009         JZ        ??bdb_event_loop_14
   2611          #ifdef BDB_REPORTING    
   2612              bdb_RepProcessEvent();
   \   0000F1                ; Setup parameters for call to function bdb_RepProcessEvent
   \   0000F1   12....       LCALL     `??bdb_RepProcessEvent::?relay`; Banked call to: bdb_RepProcessEvent
   2613          #endif
   2614              // Return unprocessed events
   2615              return (events ^ BDB_REPORT_TIMEOUT);
   \   0000F4   EE           MOV       A,R6
   \   0000F5   6480         XRL       A,#0x80
   \   0000F7   02....       LJMP      ??bdb_event_loop_6 & 0xFFFF
   2616            }
   2617            
   2618          #if (ZG_BUILD_JOINING_TYPE)
   2619            if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
   \                     ??bdb_event_loop_14:
   \   0000FA   EA           MOV       A,R2
   \   0000FB   5402         ANL       A,#0x2
   \   0000FD   603A         JZ        ??bdb_event_loop_15
   2620            {
   2621              if(ZG_DEVICE_JOINING_TYPE)
   \   0000FF   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000102   E0           MOVX      A,@DPTR
   \   000103   6401         XRL       A,#0x1
   \   000105   6005         JZ        ??bdb_event_loop_16
   \   000107   E0           MOVX      A,@DPTR
   \   000108   6402         XRL       A,#0x2
   \   00010A   7028         JNZ       ??bdb_event_loop_17
   2622              {
   2623                NLME_LeaveReq_t leaveReq;
   2624                // Set every field to 0
   2625                osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \                     ??bdb_event_loop_16:
   \   00010C                ; Setup parameters for call to function osal_memset
   \   00010C   7C05         MOV       R4,#0x5
   \   00010E   7D00         MOV       R5,#0x0
   \   000110   7900         MOV       R1,#0x0
   \   000112   AA..         MOV       R2,?XSP + 0
   \   000114   AB..         MOV       R3,?XSP + 1
   \   000116   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2626                
   2627                bdb_setNodeIsOnANetwork(FALSE);
   \   000119                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000119   7900         MOV       R1,#0x0
   \   00011B   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   2628          
   2629                if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   00011E                ; Setup parameters for call to function NLME_LeaveReq
   \   00011E   AA..         MOV       R2,?XSP + 0
   \   000120   AB..         MOV       R3,?XSP + 1
   \   000122   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000125   E9           MOV       A,R1
   \   000126   600C         JZ        ??bdb_event_loop_17
   2630                {
   2631                  osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   \   000128                ; Setup parameters for call to function osal_set_event
   \   000128   7A02         MOV       R2,#0x2
   \   00012A   7B00         MOV       R3,#0x0
   \   00012C   90....       MOV       DPTR,#bdb_TaskID
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   F9           MOV       R1,A
   \   000131   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   2632                }
   2633              }
   2634              // Return unprocessed events
   2635              return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   \                     ??bdb_event_loop_17:
   \   000134   EE           MOV       A,R6
   \   000135   6402         XRL       A,#0x2
   \   000137   8075         SJMP      ??bdb_event_loop_6
   2636            }
   2637          #endif
   2638            
   2639            if(events & BDB_TC_JOIN_TIMEOUT)
   \                     ??bdb_event_loop_15:
   \   000139   EB           MOV       A,R3
   \   00013A   5408         ANL       A,#0x8
   \   00013C   6006         JZ        ??bdb_event_loop_18
   2640            {     
   2641          #if (ZG_BUILD_COORDINATOR_TYPE)
   2642              if(ZG_DEVICE_COORDINATOR_TYPE)
   2643              {
   2644                bdb_TCProcessJoiningList();
   2645              }
   2646          #endif    
   2647              return (events ^ BDB_TC_JOIN_TIMEOUT);
   \   00013E   EB           MOV       A,R3
   \   00013F   6408         XRL       A,#0x8
   \   000141   02....       LJMP      ??bdb_event_loop_9 & 0xFFFF
   2648            }
   2649          
   2650          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
   2651            
   2652            if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
   \                     ??bdb_event_loop_18:
   \   000144   EA           MOV       A,R2
   \   000145   5440         ANL       A,#0x40
   \   000147   606A         JZ        ??bdb_event_loop_19
   2653            {
   2654              if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2655              {
   2656                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   \   000149                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000149   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   00014C   8A..         MOV       ?V0,R2
   \   00014E   8B..         MOV       ?V1,R3
   2657                
   2658                //If we have endpoint from which to send the identify command, then proceed, otherwise finish
   2659                if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
   \   000150   EA           MOV       A,R2
   \   000151   4B           ORL       A,R3
   \   000152   604C         JZ        ??bdb_event_loop_20
   2660                {
   2661                  //Substract an attempt
   2662                  bdb_FB_InitiatorCurrentCyclesNumber--;
   2663                  
   2664                  if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
   \   000154   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000157   E0           MOVX      A,@DPTR
   \   000158   14           DEC       A
   \   000159   F0           MOVX      @DPTR,A
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   6043         JZ        ??bdb_event_loop_20
   2665                  {
   2666                    //Only send Identify Query if there is no pending responses from a previous identify query
   2667                    if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
   \   00015D                ; Setup parameters for call to function osal_get_timeoutEx
   \   00015D   7A00         MOV       R2,#0x0
   \   00015F   7B40         MOV       R3,#0x40
   \   000161   90....       MOV       DPTR,#bdb_TaskID
   \   000164   E0           MOVX      A,@DPTR
   \   000165   F9           MOV       R1,A
   \   000166   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000169   EA           MOV       A,R2
   \   00016A   4B           ORL       A,R3
   \   00016B   4C           ORL       A,R4
   \   00016C   4D           ORL       A,R5
   \   00016D   701A         JNZ       ??bdb_event_loop_21
   \   00016F                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00016F   90....       MOV       DPTR,#pRespondentHead
   \   000172   E0           MOVX      A,@DPTR
   \   000173   FA           MOV       R2,A
   \   000174   A3           INC       DPTR
   \   000175   E0           MOVX      A,@DPTR
   \   000176   FB           MOV       R3,A
   \   000177   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   00017A   EA           MOV       A,R2
   \   00017B   4B           ORL       A,R3
   \   00017C   700B         JNZ       ??bdb_event_loop_21
   2668                    {
   2669                      //Send identify query with the endpoint requested
   2670                      bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
   \   00017E                ; Setup parameters for call to function bdb_SendIdentifyQuery
   \   00017E   85..82       MOV       DPL,?V0
   \   000181   85..83       MOV       DPH,?V1
   \   000184   E0           MOVX      A,@DPTR
   \   000185   F9           MOV       R1,A
   \   000186   12....       LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
   2671                    }
   2672                    osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   \                     ??bdb_event_loop_21:
   \   000189                ; Setup parameters for call to function osal_start_timerEx
   \   000189   90....       MOV       DPTR,#__Constant_3a98
   \   00018C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00018F   7A40         MOV       R2,#0x40
   \   000191   7B00         MOV       R3,#0x0
   \   000193   90....       MOV       DPTR,#bdb_TaskID
   \   000196   E0           MOVX      A,@DPTR
   \   000197   F9           MOV       R1,A
   \   000198   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00019B   7404         MOV       A,#0x4
   \   00019D   12....       LCALL     ?DEALLOC_XSTACK8
   2673                  }
   2674                }
   2675              }
   2676          
   2677              if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
   \                     ??bdb_event_loop_20:
   \   0001A0   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   0001A3   E0           MOVX      A,@DPTR
   \   0001A4   7005         JNZ       ??bdb_event_loop_22
   2678              {
   2679                bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \   0001A6                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   0001A6   790B         MOV       R1,#0xb
   \   0001A8   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2680              }
   2681              
   2682              return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
   \                     ??bdb_event_loop_22:
   \   0001AB   EE           MOV       A,R6
   \   0001AC   6440         XRL       A,#0x40
   \                     ??bdb_event_loop_6:
   \   0001AE   FA           MOV       R2,A
   \   0001AF   EF           MOV       A,R7
   \   0001B0   02....       LJMP      ??bdb_event_loop_9 & 0xFFFF
   2683            }
   2684            
   2685            if(events & BDB_IDENTIFY_TIMEOUT)
   \                     ??bdb_event_loop_19:
   \   0001B3   EB           MOV       A,R3
   \   0001B4   5420         ANL       A,#0x20
   \   0001B6   7003         JNZ       $+5
   \   0001B8   02....       LJMP      ??bdb_event_loop_23 & 0xFFFF
   2686            {
   2687              zclAttrRec_t identifyAttrRec;
   2688              epList_t *bdb_CurrEpDescriptorNextInList = NULL;
   2689              bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
   \   0001BB   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   F5..         MOV       ?V0,A
   \   0001C1   A3           INC       DPTR
   \   0001C2   E0           MOVX      A,@DPTR
   \   0001C3   F5..         MOV       ?V1,A
   2690              
   2691              bool KeepIdentifyTimerRunning = FALSE;
   \   0001C5   75..00       MOV       ?V4,#0x0
   \   0001C8   8034         SJMP      ??bdb_event_loop_24
   2692              
   2693              while(bdb_CurrEpDescriptorNextInList != NULL )
   2694              {
   2695                endPointDesc_t *bdb_EpDescriptor = NULL;
   2696                bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
   2697              
   2698                //Do not check ZDO or Zigbee reserved endpoints
   2699                if((bdb_CurrEpDescriptorNextInList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorNextInList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   2700                {
   2701                  bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   2702                  continue;
   2703                }
   2704                
   2705                if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2706                                  ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   2707                {
   2708                  if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
   2709                  {
   2710                    (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
   2711                    KeepIdentifyTimerRunning = TRUE;
   2712                  }
   2713                  else
   2714                  {
   2715                    // Use bdb success main state
   2716                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_25:
   \   0001CA   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001CD   E4           CLR       A
   \   0001CE   F0           MOVX      @DPTR,A
   2717                    if(pfnIdentifyTimeChangeCB != NULL)
   \   0001CF   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   0001D2   E0           MOVX      A,@DPTR
   \   0001D3   F8           MOV       R0,A
   \   0001D4   A3           INC       DPTR
   \   0001D5   E0           MOVX      A,@DPTR
   \   0001D6   F9           MOV       R1,A
   \   0001D7   E8           MOV       A,R0
   \   0001D8   49           ORL       A,R1
   \   0001D9   6016         JZ        ??bdb_event_loop_26
   2718                    {
   2719                      pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
   \   0001DB                ; Setup parameters for indirect call
   \   0001DB   85..82       MOV       DPL,?V2
   \   0001DE   85..83       MOV       DPH,?V3
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   F9           MOV       R1,A
   \   0001E3   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   0001E6   E0           MOVX      A,@DPTR
   \   0001E7   F8           MOV       R0,A
   \   0001E8   A3           INC       DPTR
   \   0001E9   E0           MOVX      A,@DPTR
   \   0001EA   F583         MOV       DPH,A
   \   0001EC   8882         MOV       DPL,R0
   \   0001EE   12....       LCALL     ?CALL_IND
   2720                    }
   2721                  }
   2722                }
   2723                bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   \                     ??bdb_event_loop_26:
   \   0001F1   85..82       MOV       DPL,?V0
   \   0001F4   85..83       MOV       DPH,?V1
   \   0001F7   E0           MOVX      A,@DPTR
   \   0001F8   F5..         MOV       ?V0,A
   \   0001FA   A3           INC       DPTR
   \   0001FB   E0           MOVX      A,@DPTR
   \   0001FC   F5..         MOV       ?V1,A
   \                     ??bdb_event_loop_24:
   \   0001FE   E5..         MOV       A,?V0
   \   000200   45..         ORL       A,?V1
   \   000202   6074         JZ        ??bdb_event_loop_27
   \   000204   85..82       MOV       DPL,?V0
   \   000207   85..83       MOV       DPH,?V1
   \   00020A   A3           INC       DPTR
   \   00020B   A3           INC       DPTR
   \   00020C   E0           MOVX      A,@DPTR
   \   00020D   F8           MOV       R0,A
   \   00020E   A3           INC       DPTR
   \   00020F   E0           MOVX      A,@DPTR
   \   000210   8882         MOV       DPL,R0
   \   000212   F583         MOV       DPH,A
   \   000214   8582..       MOV       ?V2,DPL
   \   000217   8583..       MOV       ?V3,DPH
   \   00021A   E0           MOVX      A,@DPTR
   \   00021B   F5..         MOV       ?V5,A
   \   00021D   60D2         JZ        ??bdb_event_loop_26
   \   00021F   C3           CLR       C
   \   000220   94F1         SUBB      A,#-0xf
   \   000222   50CD         JNC       ??bdb_event_loop_26
   \   000224                ; Setup parameters for call to function zclFindAttrRec
   \   000224   7405         MOV       A,#0x5
   \   000226   12....       LCALL     ?XSTACK_DISP100_8
   \   000229   88..         MOV       ?V6,R0
   \   00022B   89..         MOV       ?V7,R1
   \   00022D   78..         MOV       R0,#?V6
   \   00022F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000232   7C00         MOV       R4,#0x0
   \   000234   7D00         MOV       R5,#0x0
   \   000236   7A03         MOV       R2,#0x3
   \   000238   7B00         MOV       R3,#0x0
   \   00023A   A9..         MOV       R1,?V5
   \   00023C   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00023F   7402         MOV       A,#0x2
   \   000241   12....       LCALL     ?DEALLOC_XSTACK8
   \   000244   E9           MOV       A,R1
   \   000245   60AA         JZ        ??bdb_event_loop_26
   \   000247   740B         MOV       A,#0xb
   \   000249   12....       LCALL     ?XSTACK_DISP0_8
   \   00024C   E0           MOVX      A,@DPTR
   \   00024D   F8           MOV       R0,A
   \   00024E   A3           INC       DPTR
   \   00024F   E0           MOVX      A,@DPTR
   \   000250   F9           MOV       R1,A
   \   000251   8882         MOV       DPL,R0
   \   000253   F583         MOV       DPH,A
   \   000255   E0           MOVX      A,@DPTR
   \   000256   FA           MOV       R2,A
   \   000257   A3           INC       DPTR
   \   000258   E0           MOVX      A,@DPTR
   \   000259   FB           MOV       R3,A
   \   00025A   EA           MOV       A,R2
   \   00025B   4B           ORL       A,R3
   \   00025C   7003         JNZ       $+5
   \   00025E   02....       LJMP      ??bdb_event_loop_25 & 0xFFFF
   \   000261   EA           MOV       A,R2
   \   000262   24FF         ADD       A,#-0x1
   \   000264   1A           DEC       R2
   \   000265   EB           MOV       A,R3
   \   000266   34FF         ADDC      A,#-0x1
   \   000268   FB           MOV       R3,A
   \   000269   8882         MOV       DPL,R0
   \   00026B   8983         MOV       DPH,R1
   \   00026D   EA           MOV       A,R2
   \   00026E   F0           MOVX      @DPTR,A
   \   00026F   A3           INC       DPTR
   \   000270   EB           MOV       A,R3
   \   000271   F0           MOVX      @DPTR,A
   \   000272   75..01       MOV       ?V4,#0x1
   \   000275   02....       LJMP      ??bdb_event_loop_26 & 0xFFFF
   2724              }
   2725              
   2726              //If any endpoint has identify running, keep the timer on
   2727              if(KeepIdentifyTimerRunning)
   \                     ??bdb_event_loop_27:
   \   000278   E5..         MOV       A,?V4
   \   00027A   6019         JZ        ??bdb_event_loop_28
   2728              {
   2729                osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   00027C                ; Setup parameters for call to function osal_start_timerEx
   \   00027C   90....       MOV       DPTR,#__Constant_3e8
   \   00027F   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000282   7A00         MOV       R2,#0x0
   \   000284   7B20         MOV       R3,#0x20
   \   000286   90....       MOV       DPTR,#bdb_TaskID
   \   000289   E0           MOVX      A,@DPTR
   \   00028A   F9           MOV       R1,A
   \   00028B   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00028E   7404         MOV       A,#0x4
   \   000290   12....       LCALL     ?DEALLOC_XSTACK8
   \   000293   800C         SJMP      ??bdb_event_loop_29
   2730              }
   2731              else
   2732              {
   2733                osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
   \                     ??bdb_event_loop_28:
   \   000295                ; Setup parameters for call to function osal_stop_timerEx
   \   000295   7A00         MOV       R2,#0x0
   \   000297   7B20         MOV       R3,#0x20
   \   000299   90....       MOV       DPTR,#bdb_TaskID
   \   00029C   E0           MOVX      A,@DPTR
   \   00029D   F9           MOV       R1,A
   \   00029E   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2734              }
   2735              
   2736              // Return unprocessed events
   2737              return (events ^ BDB_IDENTIFY_TIMEOUT);
   \                     ??bdb_event_loop_29:
   \   0002A1   EE           MOV       A,R6
   \   0002A2   FA           MOV       R2,A
   \   0002A3   EF           MOV       A,R7
   \   0002A4   6420         XRL       A,#0x20
   \   0002A6   800D         SJMP      ??bdb_event_loop_9
   2738            }
   2739            
   2740            if(events & BDB_RESPONDENT_PROCESS_TIMEOUT)
   \                     ??bdb_event_loop_23:
   \   0002A8   EB           MOV       A,R3
   \   0002A9   5440         ANL       A,#0x40
   \   0002AB   600B         JZ        ??bdb_event_loop_30
   2741            {
   2742              // Send Simple Descriptor request to a respondent node
   2743              bdb_ProcessRespondentList();
   \   0002AD                ; Setup parameters for call to function bdb_ProcessRespondentList
   \   0002AD   12....       LCALL     `??bdb_ProcessRespondentList::?relay`; Banked call to: bdb_ProcessRespondentList
   2744          
   2745              return (events ^ BDB_RESPONDENT_PROCESS_TIMEOUT);
   \   0002B0   EE           MOV       A,R6
   \   0002B1   FA           MOV       R2,A
   \   0002B2   EF           MOV       A,R7
   \   0002B3   6440         XRL       A,#0x40
   \                     ??bdb_event_loop_9:
   \   0002B5   FB           MOV       R3,A
   \   0002B6   8004         SJMP      ??bdb_event_loop_31
   2746            }
   2747          #endif
   2748            
   2749            return 0;
   \                     ??bdb_event_loop_30:
   \   0002B8   7A00         MOV       R2,#0x0
   \   0002BA   7B00         MOV       R3,#0x0
   \                     ??bdb_event_loop_31:
   \   0002BC   740D         MOV       A,#0xd
   \   0002BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002C1   7F08         MOV       R7,#0x8
   \   0002C3   02....       LJMP      ?BANKED_LEAVE_XDATA
   2750          }
   2751          
   2752          /*********************************************************************
   2753           * @fn          bdb_processZDOMgs
   2754           *
   2755           * @brief       Process ZDO messages used as part of BDB commissioning methods
   2756           *
   2757           * @param       zdoIncomingMsg_t - ZDO message
   2758           *
   2759           * @return      
   2760           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2761          static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg)
   \                     bdb_processZDOMgs:
   2762          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2763            switch ( pMsg->clusterID )
   \   000005   EA           MOV       A,R2
   \   000006   240C         ADD       A,#0xc
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V1,A
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for bdb_processZDOMgs>_0`:
   \   00001A   0180         DW        32769
   \   00001C   03           DB        3
   \   00001D   ....         DW        ??bdb_processZDOMgs_0
   \   00001F   ....         DW        ??bdb_processZDOMgs_1
   \   000021   ....         DW        ??bdb_processZDOMgs_2
   \   000023   ....         DW        ??bdb_processZDOMgs_0
   \   000025   ....         DW        ??bdb_processZDOMgs_3
   2764            {
   2765          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)      
   2766              case IEEE_addr_rsp:
   2767                 bdb_ProcessIEEEAddrRsp(pMsg);
   \                     ??bdb_processZDOMgs_1:
   \   000027                ; Setup parameters for call to function bdb_ProcessIEEEAddrRsp
   \   000027   12....       LCALL     `??bdb_ProcessIEEEAddrRsp::?relay`; Banked call to: bdb_ProcessIEEEAddrRsp
   2768              break;
   \   00002A   8008         SJMP      ??bdb_processZDOMgs_0
   2769              case Simple_Desc_rsp:
   2770                bdb_ProcessSimpleDesc(pMsg);
   \                     ??bdb_processZDOMgs_3:
   \   00002C                ; Setup parameters for call to function bdb_ProcessSimpleDesc
   \   00002C   12....       LCALL     `??bdb_ProcessSimpleDesc::?relay`; Banked call to: bdb_ProcessSimpleDesc
   2771              break;
   \   00002F   8003         SJMP      ??bdb_processZDOMgs_0
   2772          #endif
   2773          
   2774          #if (ZG_BUILD_JOINING_TYPE)    
   2775              case Node_Desc_rsp:
   2776                bdb_ProcessNodeDescRsp(pMsg);
   \                     ??bdb_processZDOMgs_2:
   \   000031                ; Setup parameters for call to function bdb_ProcessNodeDescRsp
   \   000031   12....       LCALL     `??bdb_ProcessNodeDescRsp::?relay`; Banked call to: bdb_ProcessNodeDescRsp
   2777              break;
   2778          #endif
   2779              
   2780              default:
   2781              break;
   2782            }
   2783          }
   \                     ??bdb_processZDOMgs_0:
   \   000034   7F02         MOV       R7,#0x2
   \   000036   02....       LJMP      ?BANKED_LEAVE_XDATA
   2784          
   2785          
   2786          /*********************************************************************
   2787           * @fn      bdb_ProcessNodeDescRsp
   2788           *
   2789           * @brief   Process Node Descriptor response to validate the stack version of the
   2790           *
   2791           * @param   zdoIncomingMsg_t *pMsg
   2792           *
   2793           * @return  none
   2794           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2795          void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg)
   \                     bdb_ProcessNodeDescRsp:
   2796          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 35
   \   000005   74DD         MOV       A,#-0x23
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2797            //Avoid processing unintended messages
   2798            if(requestNewTrustCenterLinkKey && 
   2799              (bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE))
   \   00000E   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   000011   E0           MOVX      A,@DPTR
   \   000012   7003         JNZ       $+5
   \   000014   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   \   000017   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6401         XRL       A,#0x1
   \   00001D   6003         JZ        $+5
   \   00001F   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   2800            {
   2801              if(!APSME_IsDistributedSecurity())
   \   000022                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000022   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000025   E9           MOV       A,R1
   \   000026   6003         JZ        $+5
   \   000028   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   2802              {
   2803                //Is this from the coordinator?
   2804                if(pMsg->srcAddr.addr.shortAddr == 0x0000)
   \   00002B   8E82         MOV       DPL,R6
   \   00002D   8F83         MOV       DPH,R7
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F8           MOV       R0,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   E8           MOV       A,R0
   \   000037   49           ORL       A,R1
   \   000038   707B         JNZ       ??bdb_ProcessNodeDescRsp_0
   2805                {
   2806                  ZDO_NodeDescRsp_t NDRsp;
   2807                  uint8 StackComplianceRev;
   2808          
   2809                  //Stop timer to avoid unintended resets
   2810                  osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   00003A                ; Setup parameters for call to function osal_stop_timerEx
   \   00003A   7A00         MOV       R2,#0x0
   \   00003C   7B10         MOV       R3,#0x10
   \   00003E   90....       MOV       DPTR,#bdb_TaskID
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2811                  
   2812                  ZDO_ParseNodeDescRsp(pMsg, &NDRsp);
   \   000046                ; Setup parameters for call to function ZDO_ParseNodeDescRsp
   \   000046   7413         MOV       A,#0x13
   \   000048   12....       LCALL     ?XSTACK_DISP102_8
   \   00004B   EE           MOV       A,R6
   \   00004C   FA           MOV       R2,A
   \   00004D   EF           MOV       A,R7
   \   00004E   FB           MOV       R3,A
   \   00004F   12....       LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
   2813                  
   2814                  StackComplianceRev = NDRsp.nodeDesc.ServerMask >> STACK_COMPLIANCE_CURRENT_REV_POS;
   2815                  
   2816                  if( StackComplianceRev >= STACK_COMPL_REV_21 )
   \   000052   741E         MOV       A,#0x1e
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F5..         MOV       ?V0,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F5..         MOV       ?V1,A
   \   00005E   7409         MOV       A,#0x9
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?US_SHR
   \   000065   C3           CLR       C
   \   000066   E5..         MOV       A,?V0
   \   000068   9415         SUBB      A,#0x15
   \   00006A   95E0         SUBB      A,0xE0 /* A   */
   \   00006C   C3           CLR       C
   \   00006D   65D0         XRL       A,PSW
   \   00006F   33           RLC       A
   \   000070   4009         JC        ??bdb_ProcessNodeDescRsp_1
   2817                  {
   2818                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_LINK_KEY);
   \   000072                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000072   7A02         MOV       R2,#0x2
   \   000074   7901         MOV       R1,#0x1
   \   000076   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   \   000079   803A         SJMP      ??bdb_ProcessNodeDescRsp_0
   2819                  }
   2820                  else
   2821                  {
   2822                    APSME_TCLKDevEntry_t TCLKDevEntry;
   2823                    
   2824                    //Save the KeyAttribute for joining device that it has joined non-R21 nwk
   2825                    TCLKDevEntry.keyAttributes = ZG_NON_R21_NWK_JOINED;
   \                     ??bdb_ProcessNodeDescRsp_1:
   \   00007B   7410         MOV       A,#0x10
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   74FD         MOV       A,#-0x3
   \   000082   F0           MOVX      @DPTR,A
   2826                    osal_nv_write(ZCD_NV_TCLK_TABLE_START,osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes),sizeof(uint8),&TCLKDevEntry.keyAttributes);
   \   000083                ; Setup parameters for call to function osal_nv_write
   \   000083   8582..       MOV       ?V0,DPL
   \   000086   8583..       MOV       ?V1,DPH
   \   000089   78..         MOV       R0,#?V0
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   75..01       MOV       ?V0,#0x1
   \   000091   75..00       MOV       ?V1,#0x0
   \   000094   78..         MOV       R0,#?V0
   \   000096   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000099   7C10         MOV       R4,#0x10
   \   00009B   7D00         MOV       R5,#0x0
   \   00009D   7A11         MOV       R2,#0x11
   \   00009F   7B01         MOV       R3,#0x1
   \   0000A1   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000A4   7404         MOV       A,#0x4
   \   0000A6   12....       LCALL     ?DEALLOC_XSTACK8
   2827                    
   2828                    bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   \   0000A9                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   0000A9   7900         MOV       R1,#0x0
   \   0000AB   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   2829                    bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   \   0000AE                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0000AE   7A01         MOV       R2,#0x1
   \   0000B0   7901         MOV       R1,#0x1
   \   0000B2   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2830                  }
   2831                }
   2832              }
   2833            }
   2834          }
   \                     ??bdb_ProcessNodeDescRsp_0:
   \   0000B5   7423         MOV       A,#0x23
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BA   7F02         MOV       R7,#0x2
   \   0000BC   02....       LJMP      ?BANKED_LEAVE_XDATA
   2835          
   2836          
   2837          /*********************************************************************
   2838           * @fn          bdb_touchlinkSendFNReset
   2839           *
   2840           * @brief       Starts the Factory New Procedure for Initiator
   2841           *
   2842           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2843           *
   2844           * @return      none
   2845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2846          void bdb_touchlinkSendFNReset( void )
   \                     bdb_touchlinkSendFNReset:
   2847          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2848          #ifdef BDB_TL_INITIATOR
   2849            touchLinkInitiator_ResetToFNProcedure( );
   2850          #endif
   2851          }
   \   000000   02....       LJMP      ?BRET
   2852          
   2853          
   2854          /*********************************************************************
   2855           * @fn          bdb_setNodeIsOnANetwork
   2856           *
   2857           * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
   2858           *
   2859           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2860           *
   2861           * @return      none
   2862           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2863          void bdb_setNodeIsOnANetwork(bool isOnANetwork)
   \                     bdb_setNodeIsOnANetwork:
   2864          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2865            if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
   \   000007   90....       MOV       DPTR,#bdbAttributes + 14
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   7006         JNZ       ??bdb_setNodeIsOnANetwork_0
   \   00000E   90....       MOV       DPTR,#bdb_initialization
   \   000011   E0           MOVX      A,@DPTR
   \   000012   7033         JNZ       ??bdb_setNodeIsOnANetwork_1
   2866            {
   2867              //We lose our network
   2868              if(!isOnANetwork)
   \                     ??bdb_setNodeIsOnANetwork_0:
   \   000014   E9           MOV       A,R1
   \   000015   7005         JNZ       ??bdb_setNodeIsOnANetwork_2
   2869              {
   2870                bdbAttributes.bdbCommissioningMode = 0;
   \   000017   90....       MOV       DPTR,#bdbAttributes + 11
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   2871              }
   2872              
   2873              bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
   \                     ??bdb_setNodeIsOnANetwork_2:
   \   00001C   E9           MOV       A,R1
   \   00001D   90....       MOV       DPTR,#bdbAttributes + 14
   \   000020   F0           MOVX      @DPTR,A
   2874              
   2875              osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   000021                ; Setup parameters for call to function osal_nv_write
   \   000021   75....       MOV       ?V0,#(bdbAttributes + 14) & 0xff
   \   000024   75....       MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   75..01       MOV       ?V0,#0x1
   \   00002F   75..00       MOV       ?V1,#0x0
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   7C00         MOV       R4,#0x0
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   7A55         MOV       R2,#0x55
   \   00003D   7B00         MOV       R3,#0x0
   \   00003F   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   2876            }
   2877          }
   \                     ??bdb_setNodeIsOnANetwork_1:
   \   000047   7F02         MOV       R7,#0x2
   \   000049   02....       LJMP      ?BANKED_LEAVE_XDATA
   2878          
   2879          /*********************************************************************
   2880           * @fn          bdb_setCommissioningGroupID
   2881           *
   2882           * @brief       Sets the commissioning groupd ID
   2883           *
   2884           * @param       groupID
   2885           *
   2886           * @return      none
   2887           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2888          void bdb_setCommissioningGroupID(uint16 groupID)
   \                     bdb_setCommissioningGroupID:
   2889          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2890            bdbAttributes.bdbCommissioningGroupID = groupID;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 8
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   F0           MOVX      @DPTR,A
   2891          }
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
   2892          
   2893          /*********************************************************************
   2894           * @fn      bdb_CreateRespondentList
   2895           *
   2896           * @brief   Create respondent list for finding and binding if empty
   2897           *
   2898           * @param   pHead - pointer to a pointer of the list head
   2899           *
   2900           * @return  none
   2901           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2902          void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_CreateRespondentList:
   2903          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2904          
   2905            // Create the list if empty
   2906            if ( *pHead == NULL )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   7025         JNZ       ??bdb_CreateRespondentList_0
   2907            {
   2908              *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   7A11         MOV       R2,#0x11
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001D   8B..         MOV       ?V1,R3
   \   00001F   A9..         MOV       R1,?V1
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   EA           MOV       A,R2
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   EB           MOV       A,R3
   \   000029   F0           MOVX      @DPTR,A
   2909              
   2910              if ( *pHead != NULL )
   \   00002A   EA           MOV       A,R2
   \   00002B   49           ORL       A,R1
   \   00002C   600D         JZ        ??bdb_CreateRespondentList_0
   2911              {
   2912                (*pHead)->pNext = NULL;
   \   00002E   EA           MOV       A,R2
   \   00002F   240F         ADD       A,#0xf
   \   000031   F582         MOV       DPL,A
   \   000033   E4           CLR       A
   \   000034   39           ADDC      A,R1
   \   000035   F583         MOV       DPH,A
   \   000037   E4           CLR       A
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   F0           MOVX      @DPTR,A
   2913              }
   2914            }
   2915            return;
   \                     ??bdb_CreateRespondentList_0:
   \   00003B   7F02         MOV       R7,#0x2
   \   00003D   02....       LJMP      ?BANKED_LEAVE_XDATA
   2916          }
   2917          
   2918          /*********************************************************************
   2919           * @fn      bdb_AddRespondentNode
   2920           *
   2921           * @brief   Add node to respondent list for finding and binding
   2922           *
   2923           * @param   pHead - pointer to a pointer of the list head
   2924           *
   2925           * @return  pointer to new node
   2926           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2927          bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
   \                     bdb_AddRespondentNode:
   2928          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2929            bdbFindingBindingRespondent_t **pCurr;
   2930            bdbFindingBindingRespondent_t *temp;
   2931            
   2932              // Create respondent list if empty
   2933            if ( *pHead == NULL )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   7006         JNZ       ??bdb_AddRespondentNode_0
   2934            {
   2935              bdb_CreateRespondentList( pHead );
   \   000016                ; Setup parameters for call to function bdb_CreateRespondentList
   \   000016   12....       LCALL     `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
   2936              return *pHead;
   \   000019   02....       LJMP      ??bdb_AddRespondentNode_1 & 0xFFFF
   2937            }
   2938            else
   2939            {
   2940              // if pCmd is equal to NULL, don't look for duplucates
   2941              if( pCmd != NULL )
   \                     ??bdb_AddRespondentNode_0:
   \   00001C   EC           MOV       A,R4
   \   00001D   4D           ORL       A,R5
   \   00001E   7003         JNZ       $+5
   \   000020   02....       LJMP      ??bdb_AddRespondentNode_2 & 0xFFFF
   2942              {
   2943                //Find if any duplicate in the list
   2944                temp = *pHead;
   \   000023   02....       LJMP      ??bdb_AddRespondentNode_3 & 0xFFFF
   2945                
   2946                while(temp != NULL)
   2947                {
   2948                  if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
   \                     ??bdb_AddRespondentNode_4:
   \   000026   8C82         MOV       DPL,R4
   \   000028   8D83         MOV       DPH,R5
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FA           MOV       R2,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FB           MOV       R3,A
   \   00002F   8882         MOV       DPL,R0
   \   000031   8983         MOV       DPH,R1
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F5..         MOV       ?V0,A
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   65..         XRL       A,?V0
   \   00004F   7048         JNZ       ??bdb_AddRespondentNode_5
   \   000051   8882         MOV       DPL,R0
   \   000053   8983         MOV       DPH,R1
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F5..         MOV       ?V0,A
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F5..         MOV       ?V1,A
   \   000066   8A82         MOV       DPL,R2
   \   000068   8B83         MOV       DPH,R3
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   65..         XRL       A,?V0
   \   000077   7004         JNZ       ??bdb_AddRespondentNode_6
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   65..         XRL       A,?V1
   \                     ??bdb_AddRespondentNode_6:
   \   00007D   701A         JNZ       ??bdb_AddRespondentNode_5
   2949                  {
   2950                    //Duplicate
   2951                    if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
   \   00007F   8882         MOV       DPL,R0
   \   000081   8983         MOV       DPH,R1
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F5..         MOV       ?V0,A
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F5..         MOV       ?V1,A
   \   00008A   8A82         MOV       DPL,R2
   \   00008C   8B83         MOV       DPH,R3
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   65..         XRL       A,?V0
   \   000091   7004         JNZ       ??bdb_AddRespondentNode_7
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   65..         XRL       A,?V1
   \                     ??bdb_AddRespondentNode_7:
   \   000097   6053         JZ        ??bdb_AddRespondentNode_8
   2952                    {
   2953                      return NULL;
   2954                    }
   2955                  }
   2956                  temp = temp->pNext;
   \                     ??bdb_AddRespondentNode_5:
   \   000099   E8           MOV       A,R0
   \   00009A   240F         ADD       A,#0xf
   \   00009C   F582         MOV       DPL,A
   \   00009E   E4           CLR       A
   \   00009F   39           ADDC      A,R1
   \   0000A0   F583         MOV       DPH,A
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F8           MOV       R0,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   F9           MOV       R1,A
   2957                }
   \                     ??bdb_AddRespondentNode_3:
   \   0000A7   E8           MOV       A,R0
   \   0000A8   49           ORL       A,R1
   \   0000A9   6003         JZ        $+5
   \   0000AB   02....       LJMP      ??bdb_AddRespondentNode_4 & 0xFFFF
   2958              }
   2959              
   2960              pCurr = &((*pHead)->pNext);
   \                     ??bdb_AddRespondentNode_2:
   \   0000AE   8E82         MOV       DPL,R6
   \   0000B0   8F83         MOV       DPH,R7
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   240F         ADD       A,#0xf
   \   0000B5   F8           MOV       R0,A
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   3400         ADDC      A,#0x0
   \   0000BA   F9           MOV       R1,A
   \   0000BB   E8           MOV       A,R0
   \   0000BC   FE           MOV       R6,A
   \   0000BD   E9           MOV       A,R1
   \   0000BE   8006         SJMP      ??bdb_AddRespondentNode_9
   2961              
   2962              while ( *pCurr != NULL )
   2963              {
   2964                pCurr = &((*pCurr)->pNext);
   \                     ??bdb_AddRespondentNode_10:
   \   0000C0   E8           MOV       A,R0
   \   0000C1   240F         ADD       A,#0xf
   \   0000C3   FE           MOV       R6,A
   \   0000C4   E4           CLR       A
   \   0000C5   39           ADDC      A,R1
   \                     ??bdb_AddRespondentNode_9:
   \   0000C6   FF           MOV       R7,A
   2965              }
   \   0000C7   8E82         MOV       DPL,R6
   \   0000C9   8F83         MOV       DPH,R7
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   F8           MOV       R0,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F9           MOV       R1,A
   \   0000D0   E8           MOV       A,R0
   \   0000D1   49           ORL       A,R1
   \   0000D2   70EC         JNZ       ??bdb_AddRespondentNode_10
   2966          
   2967              *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   0000D4                ; Setup parameters for call to function osal_mem_alloc
   \   0000D4   7A11         MOV       R2,#0x11
   \   0000D6   7B00         MOV       R3,#0x0
   \   0000D8   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000DB   8B..         MOV       ?V1,R3
   \   0000DD   A9..         MOV       R1,?V1
   \   0000DF   8E82         MOV       DPL,R6
   \   0000E1   8F83         MOV       DPH,R7
   \   0000E3   EA           MOV       A,R2
   \   0000E4   F0           MOVX      @DPTR,A
   \   0000E5   A3           INC       DPTR
   \   0000E6   EB           MOV       A,R3
   \   0000E7   F0           MOVX      @DPTR,A
   2968              
   2969              if(*pCurr == NULL)
   \   0000E8   EA           MOV       A,R2
   \   0000E9   49           ORL       A,R1
   \   0000EA   7006         JNZ       ??bdb_AddRespondentNode_11
   2970              {
   2971                //No memory
   2972                return NULL;
   \                     ??bdb_AddRespondentNode_8:
   \   0000EC   7A00         MOV       R2,#0x0
   \   0000EE   7B00         MOV       R3,#0x0
   \   0000F0   8016         SJMP      ??bdb_AddRespondentNode_12
   2973              }
   2974              
   2975              (*pCurr)->pNext = NULL;
   \                     ??bdb_AddRespondentNode_11:
   \   0000F2   EA           MOV       A,R2
   \   0000F3   240F         ADD       A,#0xf
   \   0000F5   F582         MOV       DPL,A
   \   0000F7   E4           CLR       A
   \   0000F8   39           ADDC      A,R1
   \   0000F9   F583         MOV       DPH,A
   \   0000FB   E4           CLR       A
   \   0000FC   F0           MOVX      @DPTR,A
   \   0000FD   A3           INC       DPTR
   \   0000FE   F0           MOVX      @DPTR,A
   2976            }
   2977            
   2978            return *pCurr;
   \                     ??bdb_AddRespondentNode_1:
   \   0000FF   8E82         MOV       DPL,R6
   \   000101   8F83         MOV       DPH,R7
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FA           MOV       R2,A
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   FB           MOV       R3,A
   \                     ??bdb_AddRespondentNode_12:
   \   000108   7F03         MOV       R7,#0x3
   \   00010A   02....       LJMP      ?BANKED_LEAVE_XDATA
   2979          }
   2980          
   2981          /*********************************************************************
   2982           * @fn      bdb_zclRespondentListClean
   2983           *
   2984           * @brief   This function free reserved memory for respondent list
   2985           *
   2986           * @param   pHead - begin of the respondent list
   2987           *
   2988           * @return  status
   2989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2990          void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_zclRespondentListClean:
   2991          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2992            bdbFindingBindingRespondent_t **pCurr;
   2993            bdbFindingBindingRespondent_t **pNext;
   2994            
   2995            if ( *pHead == NULL )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   6039         JZ        ??bdb_zclRespondentListClean_0
   2996            {
   2997              return;
   2998            }
   2999            
   3000            pCurr = pHead;
   \   000016   8A..         MOV       ?V0,R2
   \   000018   8B..         MOV       ?V1,R3
   \   00001A   801C         SJMP      ??bdb_zclRespondentListClean_1
   3001            
   3002            while( *pCurr != NULL )
   3003            {
   3004              pNext = &((*pCurr)->pNext);
   \                     ??bdb_zclRespondentListClean_2:
   \   00001C   EA           MOV       A,R2
   \   00001D   240F         ADD       A,#0xf
   \   00001F   F5..         MOV       ?V2,A
   \   000021   E4           CLR       A
   \   000022   3B           ADDC      A,R3
   \   000023   F5..         MOV       ?V3,A
   3005              osal_mem_free( *pCurr );
   \   000025                ; Setup parameters for call to function osal_mem_free
   \   000025   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3006              *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
   \   000028   85..82       MOV       DPL,?V0
   \   00002B   85..83       MOV       DPH,?V1
   \   00002E   E4           CLR       A
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   F0           MOVX      @DPTR,A
   3007              pCurr = pNext;
   \   000032   85....       MOV       ?V0,?V2
   \   000035   85....       MOV       ?V1,?V3
   3008            }
   \                     ??bdb_zclRespondentListClean_1:
   \   000038   85..82       MOV       DPL,?V0
   \   00003B   85..83       MOV       DPH,?V1
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   FA           MOV       R2,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FB           MOV       R3,A
   \   000043   EA           MOV       A,R2
   \   000044   4B           ORL       A,R3
   \   000045   70D5         JNZ       ??bdb_zclRespondentListClean_2
   3009            *pHead = NULL;
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   E4           CLR       A
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   F0           MOVX      @DPTR,A
   3010          }
   \                     ??bdb_zclRespondentListClean_0:
   \   00004F   7F04         MOV       R7,#0x4
   \   000051   02....       LJMP      ?BANKED_LEAVE_XDATA
   3011          
   3012           /*********************************************************************
   3013           * PRIVATE FUNCTIONS
   3014           *********************************************************************/
   3015          
   3016          /*********************************************************************
   3017           * @fn      bdb_ProcessOSALMsg
   3018           *
   3019           * @brief   Process the incoming task message.
   3020           *
   3021           * @param   msgPtr - message to process
   3022           *
   3023           * @return  none
   3024           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3025          void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
   \                     bdb_ProcessOSALMsg:
   3026          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3027            
   3028            switch(msgPtr->hdr.event)
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   14           DEC       A
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??bdb_ProcessOSALMsg_0 & 0xFFFF
   \   000015   24FE         ADD       A,#-0x2
   \   000017   6003         JZ        $+5
   \   000019   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3029            {
   3030          #if (ZG_BUILD_JOINING_TYPE)
   3031              case BDB_COMMISSIONING_STATE_JOINING:
   3032                if(ZG_DEVICE_JOINING_TYPE)
   \   00001C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6401         XRL       A,#0x1
   \   000022   6008         JZ        ??bdb_ProcessOSALMsg_2
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6402         XRL       A,#0x2
   \   000027   6003         JZ        $+5
   \   000029   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3033                {
   3034                  switch(msgPtr->buf[0])
   \                     ??bdb_ProcessOSALMsg_2:
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   6006         JZ        ??bdb_ProcessOSALMsg_3
   \   000035   14           DEC       A
   \   000036   6018         JZ        ??bdb_ProcessOSALMsg_4
   \   000038   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3035                  {
   3036                    case BDB_JOIN_EVENT_NWK_DISCOVERY:
   3037                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   \                     ??bdb_ProcessOSALMsg_3:
   \   00003B   8A82         MOV       DPL,R2
   \   00003D   8B83         MOV       DPH,R3
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   7005         JNZ       ??bdb_ProcessOSALMsg_5
   3038                      {
   3039                        bdb_filterNwkDisc();
   \   000043                ; Setup parameters for call to function bdb_filterNwkDisc
   \   000043   12....       LCALL     `??bdb_filterNwkDisc::?relay`; Banked call to: bdb_filterNwkDisc
   3040                        bdb_tryNwkAssoc();
   \   000046                ; Setup parameters for call to function bdb_tryNwkAssoc
   \   000046   8072         SJMP      ??bdb_ProcessOSALMsg_6
   3041                      }
   3042                      else
   3043                      {
   3044                        bdb_nwkDiscoveryAttempt(FALSE);
   \                     ??bdb_ProcessOSALMsg_5:
   \   000048                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   000048   7900         MOV       R1,#0x0
   \   00004A   12....       LCALL     `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
   \   00004D   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3045                      }
   3046                    break;
   3047                    
   3048                    case BDB_JOIN_EVENT_ASSOCIATION:
   3049                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   \                     ??bdb_ProcessOSALMsg_4:
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   7020         JNZ       ??bdb_ProcessOSALMsg_7
   3050                      {
   3051                        bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
   \   000058   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   00005B   7402         MOV       A,#0x2
   \   00005D   F0           MOVX      @DPTR,A
   3052                        //Nwk key timeout get right timing
   3053                        osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
   \   00005E                ; Setup parameters for call to function osal_start_timerEx
   \   00005E   90....       MOV       DPTR,#__Constant_bb8
   \   000061   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000064   7A00         MOV       R2,#0x0
   \   000066   7B10         MOV       R3,#0x10
   \   000068   90....       MOV       DPTR,#bdb_TaskID
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F9           MOV       R1,A
   \   00006D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000070   7404         MOV       A,#0x4
   \   000072   12....       LCALL     ?DEALLOC_XSTACK8
   \   000075   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3054                      }
   3055                      else
   3056                      {
   3057                        if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   3058                             (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??bdb_ProcessOSALMsg_7:
   \   000078                ; Setup parameters for call to function NLME_GetShortAddr
   \   000078   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00007B   74FE         MOV       A,#-0x2
   \   00007D   6A           XRL       A,R2
   \   00007E   7003         JNZ       ??bdb_ProcessOSALMsg_8
   \   000080   74FF         MOV       A,#-0x1
   \   000082   6B           XRL       A,R3
   \                     ??bdb_ProcessOSALMsg_8:
   \   000083   700D         JNZ       ??bdb_ProcessOSALMsg_9
   \   000085   90....       MOV       DPTR,#_NIB + 20
   \   000088   E0           MOVX      A,@DPTR
   \   000089   64FE         XRL       A,#0xfe
   \   00008B   7003         JNZ       ??bdb_ProcessOSALMsg_10
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F4           CPL       A
   \                     ??bdb_ProcessOSALMsg_10:
   \   000090   601D         JZ        ??bdb_ProcessOSALMsg_11
   3059                        {
   3060                          uint16 addr = INVALID_NODE_ADDR;
   \                     ??bdb_ProcessOSALMsg_9:
   \   000092   85..82       MOV       DPL,?XSP + 0
   \   000095   85..83       MOV       DPH,?XSP + 1
   \   000098   74FE         MOV       A,#-0x2
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   04           INC       A
   \   00009D   F0           MOVX      @DPTR,A
   3061                          // Invalidate nwk addr so end device does not use in its data reqs.
   3062                          _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00009E   90....       MOV       DPTR,#_NIB + 20
   \   0000A1   14           DEC       A
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   04           INC       A
   \   0000A5   F0           MOVX      @DPTR,A
   3063                          ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000A6                ; Setup parameters for call to function ZMacSetReq
   \   0000A6   AA..         MOV       R2,?XSP + 0
   \   0000A8   AB..         MOV       R3,?XSP + 1
   \   0000AA   7953         MOV       R1,#0x53
   \   0000AC   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   3064                        }
   3065          
   3066                        //Clear the neighbor Table and network discovery tables.
   3067                        nwkNeighborInitTable();
   \                     ??bdb_ProcessOSALMsg_11:
   \   0000AF                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000AF   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   3068                        NLME_NwkDiscTerm();
   \   0000B2                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000B2   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   3069                        _NIB.nwkState = NWK_INIT;
   \   0000B5   90....       MOV       DPTR,#_NIB + 35
   \   0000B8   E4           CLR       A
   \   0000B9   F0           MOVX      @DPTR,A
   3070                        
   3071                        bdb_tryNwkAssoc();
   \   0000BA                ; Setup parameters for call to function bdb_tryNwkAssoc
   \                     ??bdb_ProcessOSALMsg_6:
   \   0000BA   12....       LCALL     `??bdb_tryNwkAssoc::?relay`; Banked call to: bdb_tryNwkAssoc
   \   0000BD   8048         SJMP      ??bdb_ProcessOSALMsg_1
   3072                      }
   3073                    break;
   3074                  }
   3075                }
   3076              break;
   3077              
   3078              case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   3079                if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_ProcessOSALMsg_0:
   \   0000BF   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   6401         XRL       A,#0x1
   \   0000C5   6005         JZ        ??bdb_ProcessOSALMsg_12
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   6402         XRL       A,#0x2
   \   0000CA   703B         JNZ       ??bdb_ProcessOSALMsg_1
   3080                {
   3081                  if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
   \                     ??bdb_ProcessOSALMsg_12:
   \   0000CC   8A82         MOV       DPL,R2
   \   0000CE   8B83         MOV       DPH,R3
   \   0000D0   A3           INC       DPTR
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   6017         JZ        ??bdb_ProcessOSALMsg_13
   3082                  {
   3083                    bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
   \   0000D4   90....       MOV       DPTR,#bdbAttributes + 16
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   04           INC       A
   \   0000D9   F0           MOVX      @DPTR,A
   3084                    if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F8           MOV       R0,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   C3           CLR       C
   \   0000DF   98           SUBB      A,R0
   \   0000E0   5009         JNC       ??bdb_ProcessOSALMsg_13
   3085                    {
   3086                      //TCLK process fail due to many attempts fails
   3087                      bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   \   0000E2                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0000E2   7A00         MOV       R2,#0x0
   \   0000E4   7901         MOV       R1,#0x1
   \   0000E6   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   3088                      return;
   \   0000E9   801C         SJMP      ??bdb_ProcessOSALMsg_1
   3089                    }
   3090                  }
   3091                  switch(bdbCommissioningProcedureState.bdbTCExchangeState)
   \                     ??bdb_ProcessOSALMsg_13:
   \   0000EB   90....       MOV       DPTR,#bdbCommissioningProcedureState + 1
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   14           DEC       A
   \   0000F0   6008         JZ        ??bdb_ProcessOSALMsg_14
   \   0000F2   14           DEC       A
   \   0000F3   600A         JZ        ??bdb_ProcessOSALMsg_15
   \   0000F5   14           DEC       A
   \   0000F6   600C         JZ        ??bdb_ProcessOSALMsg_16
   \   0000F8   800D         SJMP      ??bdb_ProcessOSALMsg_1
   3092                  {
   3093                    case BDB_REQ_TC_STACK_VERSION:
   3094                      bdb_requestTCStackVersion();
   \                     ??bdb_ProcessOSALMsg_14:
   \   0000FA                ; Setup parameters for call to function bdb_requestTCStackVersion
   \   0000FA   12....       LCALL     `??bdb_requestTCStackVersion::?relay`; Banked call to: bdb_requestTCStackVersion
   3095                    break;
   \   0000FD   8008         SJMP      ??bdb_ProcessOSALMsg_1
   3096                    case BDB_REQ_TC_LINK_KEY:
   3097                      bdb_requestTCLinkKey();
   \                     ??bdb_ProcessOSALMsg_15:
   \   0000FF                ; Setup parameters for call to function bdb_requestTCLinkKey
   \   0000FF   12....       LCALL     `??bdb_requestTCLinkKey::?relay`; Banked call to: bdb_requestTCLinkKey
   3098                    break;
   \   000102   8003         SJMP      ??bdb_ProcessOSALMsg_1
   3099                    case BDB_REQ_VERIFY_TC_LINK_KEY:
   3100                      bdb_requestVerifyTCLinkKey();
   \                     ??bdb_ProcessOSALMsg_16:
   \   000104                ; Setup parameters for call to function bdb_requestVerifyTCLinkKey
   \   000104   12....       LCALL     `??bdb_requestVerifyTCLinkKey::?relay`; Banked call to: bdb_requestVerifyTCLinkKey
   3101                    break;
   3102                  }
   3103                }
   3104             break;
   3105          #endif
   3106             }
   3107          }
   \                     ??bdb_ProcessOSALMsg_1:
   \   000107   7402         MOV       A,#0x2
   \   000109   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010C   7F02         MOV       R7,#0x2
   \   00010E   02....       LJMP      ?BANKED_LEAVE_XDATA
   3108          
   3109          
   3110          /*********************************************************************
   3111           * @fn      bdb_processTimeout
   3112           *
   3113           * @brief   Handles timeout of the bdb process
   3114           *
   3115           * @param   msgPtr - message to process
   3116           *
   3117           * @return  none
   3118           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3119          void bdb_processTimeout(void)
   \                     bdb_processTimeout:
   3120          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3121          #if (ZG_BUILD_JOINING_TYPE)
   3122            if(ZG_DEVICE_JOINING_TYPE)
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??bdb_processTimeout_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7027         JNZ       ??bdb_processTimeout_1
   3123            {
   3124              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   \                     ??bdb_processTimeout_0:
   \   000011   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000014   E0           MOVX      A,@DPTR
   \   000015   14           DEC       A
   \   000016   6006         JZ        ??bdb_processTimeout_2
   \   000018   24FE         ADD       A,#-0x2
   \   00001A   600C         JZ        ??bdb_processTimeout_3
   \   00001C   801A         SJMP      ??bdb_processTimeout_1
   3125              {
   3126                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   3127                  
   3128                  bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
   \                     ??bdb_processTimeout_2:
   \   00001E                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FA           MOV       R2,A
   \   000021   7900         MOV       R1,#0x0
   \   000023   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   3129                break;
   \   000026   8010         SJMP      ??bdb_processTimeout_1
   3130                case BDB_COMMISSIONING_STATE_JOINING:
   3131                  if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
   \                     ??bdb_processTimeout_3:
   \   000028   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6402         XRL       A,#0x2
   \   00002E   7008         JNZ       ??bdb_processTimeout_1
   3132                  {
   3133                    //If nwk key fails, then try association again
   3134                    bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   \   000030   7401         MOV       A,#0x1
   \   000032   F0           MOVX      @DPTR,A
   3135                    bdb_nwkAssocAttemt(FALSE);
   \   000033                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000033   7900         MOV       R1,#0x0
   \   000035   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   3136                  }
   3137                break;
   3138              }
   3139            }
   3140          #endif
   3141            
   3142          }
   \                     ??bdb_processTimeout_1:
   \   000038   D083         POP       DPH
   \   00003A   D082         POP       DPL
   \   00003C   02....       LJMP      ?BRET
   3143          
   3144          
   3145          /*********************************************************************
   3146           * @fn      bdb_SendMsg
   3147           *
   3148           * @brief   Send messages to bdb processing with the expected format
   3149           *
   3150           * @param   msgPtr - message to process
   3151           *
   3152           * @return  none
   3153           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3154          void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
   \                     bdb_SendMsg:
   3155          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V7,R2
   \   000009   8B..         MOV       ?V8,R3
   \   00000B   8C..         MOV       ?V3,R4
   3156            bdbInMsg_t *msgPtr = NULL;
   3157          
   3158            if ( (len > 0) && (buf != NULL) )
   \   00000D   EC           MOV       A,R4
   \   00000E   605C         JZ        ??bdb_SendMsg_0
   \   000010   7411         MOV       A,#0x11
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V0,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V1,A
   \   00001C   E5..         MOV       A,?V0
   \   00001E   45..         ORL       A,?V1
   \   000020   604A         JZ        ??bdb_SendMsg_0
   3159            {
   3160              uint8 tmpLength;
   3161              tmpLength = len;
   3162              tmpLength += sizeof(osal_event_hdr_t);
   3163              
   3164              msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
   \   000022                ; Setup parameters for call to function osal_msg_allocate
   \   000022   7402         MOV       A,#0x2
   \   000024   2C           ADD       A,R4
   \   000025   FA           MOV       R2,A
   \   000026   7B00         MOV       R3,#0x0
   \   000028   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00002B   8A..         MOV       ?V4,R2
   \   00002D   8B..         MOV       ?V5,R3
   \   00002F   AE..         MOV       R6,?V4
   \   000031   AF..         MOV       R7,?V5
   3165              
   3166              if ( msgPtr )
   \   000033   EA           MOV       A,R2
   \   000034   4F           ORL       A,R7
   \   000035   6035         JZ        ??bdb_SendMsg_0
   3167              {
   3168                osal_memcpy( msgPtr->buf, buf, len );
   \   000037                ; Setup parameters for call to function osal_memcpy
   \   000037   85....       MOV       ?V4,?V0
   \   00003A   85....       MOV       ?V5,?V1
   \   00003D   75..00       MOV       ?V6,#0x0
   \   000040   78..         MOV       R0,#?V4
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000045   AC..         MOV       R4,?V3
   \   000047   7D00         MOV       R5,#0x0
   \   000049   EA           MOV       A,R2
   \   00004A   2402         ADD       A,#0x2
   \   00004C   FA           MOV       R2,A
   \   00004D   E4           CLR       A
   \   00004E   3F           ADDC      A,R7
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000053   7403         MOV       A,#0x3
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   3169              
   3170                msgPtr->hdr.event = toCommissioningState;
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E5..         MOV       A,?V7
   \   00005E   F0           MOVX      @DPTR,A
   3171                msgPtr->hdr.status = status;
   \   00005F   A3           INC       DPTR
   \   000060   E5..         MOV       A,?V8
   \   000062   F0           MOVX      @DPTR,A
   3172                osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000063                ; Setup parameters for call to function osal_msg_send
   \   000063   EE           MOV       A,R6
   \   000064   FA           MOV       R2,A
   \   000065   EF           MOV       A,R7
   \   000066   FB           MOV       R3,A
   \   000067   A9..         MOV       R1,?V2
   \   000069   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   3173              }
   3174            }
   3175          }
   \                     ??bdb_SendMsg_0:
   \   00006C   7F09         MOV       R7,#0x9
   \   00006E   02....       LJMP      ?BANKED_LEAVE_XDATA
   3176          
   3177          
   3178          /*********************************************************************
   3179           * @fn      bdb_RegisterCommissioningStatusCB
   3180           *
   3181           * @brief   Register a callback in which the status of the procedures done in
   3182           *          BDB commissioning process will be reported
   3183           *
   3184           * @param   bdbGCB_CommissioningStatus - application callback
   3185           *
   3186           * @return  none
   3187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3188          void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
   \                     bdb_RegisterCommissioningStatusCB:
   3189          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3190            pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
   \   000004   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   F0           MOVX      @DPTR,A
   3191          }
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
   3192          
   3193          /*********************************************************************
   3194           * @fn      bdb_ClearNetworkParams
   3195           *
   3196           * @brief   Restore nwk parameters to invalid if the device is not on a network
   3197           *
   3198           * @param   void
   3199           *
   3200           * @return  void
   3201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3202          void bdb_ClearNetworkParams(void)
   \                     bdb_ClearNetworkParams:
   3203          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3204          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   3205            if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   3206            {
   3207              //Clear the event
   3208              _NIB.nwkPanId = INVALID_NODE_ADDR;
   3209              _NIB.nwkLogicalChannel = 0;
   3210              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   3211              touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   3212            }
   3213          #endif
   3214          }
   \   000000   02....       LJMP      ?BRET
   3215          
   3216          /*********************************************************************
   3217           * @fn      bdb_getZCLFrameCounter
   3218           *
   3219           * @brief   Get the next ZCL Frame Counter for packet sequence number
   3220           *
   3221           * @param   none
   3222           *
   3223           * @return  next ZCL frame counter
   3224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3225          uint8 bdb_getZCLFrameCounter(void)
   \                     bdb_getZCLFrameCounter:
   3226          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3227            bdb_ZclTransactionSequenceNumber++;
   \   000004   90....       MOV       DPTR,#bdb_ZclTransactionSequenceNumber
   \   000007   E0           MOVX      A,@DPTR
   \   000008   04           INC       A
   \   000009   F0           MOVX      @DPTR,A
   3228            return bdb_ZclTransactionSequenceNumber;
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
   3229          
   3230          }
   3231          
   3232          
   3233          #if (ZG_BUILD_JOINING_TYPE)
   3234          /*********************************************************************
   3235           * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
   3236           *
   3237           * @brief   Register a callback in which the TC link key exchange procedure will 
   3238           *          be performed by application.
   3239           *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
   3240           *
   3241           * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
   3242           *
   3243           * @return  none
   3244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3245          void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
   \                     bdb_RegisterCBKETCLinkKeyExchangeCB:
   3246          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3247            if(bdbGCB_CBKETCLinkKeyExchange)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   90....       MOV       DPTR,#pfnCBKETCLinkKeyExchange
   \   000009   600C         JZ        ??bdb_RegisterCBKETCLinkKeyExchangeCB_0
   3248            {
   3249              pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
   \   00000B   EA           MOV       A,R2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   EB           MOV       A,R3
   \   00000F   F0           MOVX      @DPTR,A
   3250              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
   \   000010   90....       MOV       DPTR,#bdbAttributes + 18
   \   000013   7401         MOV       A,#0x1
   \   000015   8007         SJMP      ??bdb_RegisterCBKETCLinkKeyExchangeCB_1
   3251            }
   3252            else
   3253            {
   3254              pfnCBKETCLinkKeyExchange = NULL;
   \                     ??bdb_RegisterCBKETCLinkKeyExchangeCB_0:
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
   3255              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   \   00001B   90....       MOV       DPTR,#bdbAttributes + 18
   \                     ??bdb_RegisterCBKETCLinkKeyExchangeCB_1:
   \   00001E   F0           MOVX      @DPTR,A
   3256            }
   3257          }
   \   00001F   D083         POP       DPH
   \   000021   D082         POP       DPL
   \   000023   02....       LJMP      ?BRET
   3258          
   3259          /*********************************************************************
   3260           * @fn      bdb_RegisterForFilterNwkDescCB
   3261           *
   3262           * @brief   Register a callback in which the application gets the list of network
   3263           *          descriptors got from active scan.
   3264           *          Use bdb_nwkDescFree to release the network descriptors that are not 
   3265           *          of interest and leave those which are to be attempted.
   3266           *
   3267           * @param   bdbGCB_FilterNwkDesc - application callback
   3268           *
   3269           * @return  none
   3270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3271          void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
   \                     bdb_RegisterForFilterNwkDescCB:
   3272          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3273            if(bdbGCB_FilterNwkDesc)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6008         JZ        ??bdb_RegisterForFilterNwkDescCB_0
   3274            {
   3275              pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
   \   000008   90....       MOV       DPTR,#pfnFilterNwkDesc
   \   00000B   EA           MOV       A,R2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   EB           MOV       A,R3
   \   00000F   F0           MOVX      @DPTR,A
   3276            }
   3277          }
   \                     ??bdb_RegisterForFilterNwkDescCB_0:
   \   000010   D083         POP       DPH
   \   000012   D082         POP       DPL
   \   000014   02....       LJMP      ?BRET
   3278          
   3279          
   3280          /*********************************************************************
   3281           * @fn          bdb_CBKETCLinkKeyExchangeAttempt
   3282           *
   3283           * @brief       Tell BDB module the result of the TC link key exchange, to try
   3284           *              the default process or to keep going with the joining process.
   3285           *
   3286           * @param       didSuccess - TRUE if the process was succes, False otherwise
   3287           *
   3288           * @return      unprocessed events
   3289           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3290          void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
   \                     bdb_CBKETCLinkKeyExchangeAttempt:
   3291          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   3292            if(didSuccess)
   \   000006   600E         JZ        ??bdb_CBKETCLinkKeyExchangeAttempt_0
   3293            {
   3294              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   \   000008                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   000008   7900         MOV       R1,#0x0
   \   00000A   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   3295              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   \   00000D                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00000D   7A01         MOV       R2,#0x1
   \   00000F   7901         MOV       R1,#0x1
   \   000011   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   000014   8012         SJMP      ??bdb_CBKETCLinkKeyExchangeAttempt_1
   3296            }
   3297            else
   3298            {
   3299              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   \                     ??bdb_CBKETCLinkKeyExchangeAttempt_0:
   \   000016   90....       MOV       DPTR,#bdbAttributes + 18
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
   3300              //We are going back one state to try it again
   3301              bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
   \   00001B   90....       MOV       DPTR,#bdbCommissioningProcedureState + 1
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   14           DEC       A
   \   000020   F0           MOVX      @DPTR,A
   3302              bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   \   000021                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000021   7A01         MOV       R2,#0x1
   \   000023   7901         MOV       R1,#0x1
   \   000025   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   3303            }
   3304          
   3305          }
   \                     ??bdb_CBKETCLinkKeyExchangeAttempt_1:
   \   000028   7F01         MOV       R7,#0x1
   \   00002A   02....       LJMP      ?BANKED_LEAVE_XDATA
   3306          #endif
   3307          
   3308          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   3309          
   3310          /*********************************************************************
   3311           * @fn      gp_ChangeChannelReq
   3312           *
   3313           * @brief   Callback function to notify the BDB about a GP commissioning 
   3314           * request that will change the current channel for at most 
   3315           * gpBirectionalCommissioningChangeChannelTimeout ms
   3316           *
   3317           * @param   channel - Channel in which the commissioning will take place
   3318           *
   3319           * @return  TRUE to allow change channel, FALSE to do not allow
   3320           */
   3321          static uint8 gp_ChangeChannelReq(void)
   3322          {
   3323            uint8 allowChangeChannel = TRUE;
   3324            
   3325            //Do not allow changes of channel if any process is in place
   3326            if(bdbAttributes.bdbCommissioningMode)
   3327            {
   3328              allowChangeChannel = FALSE;
   3329            }
   3330            
   3331            //Check application state to decide if allow change channel or not
   3332            
   3333            return allowChangeChannel;
   3334          }
   3335          
   3336          
   3337          /*********************************************************************
   3338           * @fn          gp_CBInit
   3339           *
   3340           * @brief       Register the callbacks for GP endpoint
   3341           *
   3342           * @param       none
   3343           *
   3344           * @return      none
   3345           */
   3346          void gp_CBInit(void)
   3347          {
   3348            GP_DataCnfGCB = GP_DataCnf;
   3349            GP_endpointInitGCB = gp_endpointInit;  
   3350            GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
   3351            GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
   3352            GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
   3353            GP_DataIndGCB = GP_DataInd;
   3354            GP_SecReqGCB = GP_SecReq;   
   3355            GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
   3356              
   3357            GP_aliasConflictAnnce = &aliasConflictAnnce;
   3358            
   3359            GP_endpointInitGCB();
   3360          }
   3361          
   3362          #endif
   3363          
   3364          /*********************************************************************
   3365          *********************************************************************/
   3366          
   3367          
   3368          /******************************************************************************
   3369           * @fn          bdb_GenerateInstallCodeCRC
   3370           *
   3371           * @brief       Creates a CRC for the install code passed.
   3372           *
   3373           * @param       installCode - install code from which CRC will be generated
   3374           *
   3375           * @return      CRC
   3376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3377          uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
   \                     bdb_GenerateInstallCodeCRC:
   3378          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   3379            uint16 CRC;
   3380            
   3381            bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
   \   000009                ; Setup parameters for call to function bdb_calculateCCITT_CRC
   \   000009   90....       MOV       DPTR,#__Constant_10
   \   00000C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00000F   7404         MOV       A,#0x4
   \   000011   12....       LCALL     ?XSTACK_DISP102_8
   \   000014   12....       LCALL     `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?DEALLOC_XSTACK8
   3382          
   3383            return CRC;
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FA           MOV       R2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FB           MOV       R3,A
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002C   D083         POP       DPH
   \   00002E   D082         POP       DPL
   \   000030   02....       LJMP      ?BRET
   3384          }
   3385          
   3386          /******************************************************************************
   3387           * @fn          bdb_calculateCCITT_CRC
   3388           *
   3389           * @brief       Creates a CRC for the install code passed.
   3390           *
   3391           * @param       Mb - install code from which CRC will be generated
   3392           * @param       msglen - install code length
   3393           * @param       crc - 
   3394           *
   3395           * @return      none
   3396           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3397          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
   \                     bdb_calculateCCITT_CRC:
   3398          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   3399            uint16 crcinit_direct; 
   3400            uint16 crcinit_nondirect;
   3401            bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
   \   000012                ; Setup parameters for call to function bdb_crcInit
   \   000012   A8..         MOV       R0,?XSP + 0
   \   000014   A9..         MOV       R1,?XSP + 1
   \   000016   88..         MOV       ?V2,R0
   \   000018   89..         MOV       ?V3,R1
   \   00001A   78..         MOV       R0,#?V2
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP102_8
   \   000024   AA..         MOV       R2,?V0
   \   000026   AB..         MOV       R3,?V1
   \   000028   12....       LCALL     `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   3402            *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
   \   000030                ; Setup parameters for call to function bdb_crcBitByBitFast
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000039   7412         MOV       A,#0x12
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000041   7408         MOV       A,#0x8
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   FC           MOV       R4,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   FD           MOV       R5,A
   \   00004B   EE           MOV       A,R6
   \   00004C   FA           MOV       R2,A
   \   00004D   EF           MOV       A,R7
   \   00004E   FB           MOV       R3,A
   \   00004F   12....       LCALL     `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
   \   000052   7406         MOV       A,#0x6
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   85..82       MOV       DPL,?V0
   \   00005A   85..83       MOV       DPH,?V1
   \   00005D   EA           MOV       A,R2
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   EB           MOV       A,R3
   \   000061   F0           MOVX      @DPTR,A
   3403          }
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   \   000067   7F04         MOV       R7,#0x4
   \   000069   02....       LJMP      ?BANKED_LEAVE_XDATA
   3404          
   3405          
   3406          /******************************************************************************
   3407           * @fn          bdb_crcInit
   3408           *
   3409           * @brief       Initialize CRC calculation
   3410           *
   3411           * @param       crc - 
   3412           * @param       crcinit_direct -
   3413           * @param       crcinit_nondirect - 
   3414           *
   3415           * @return      none
   3416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3417          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
   \                     bdb_crcInit:
   3418          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3419          
   3420            uint16 i;
   3421            uint16 bit;
   3422          
   3423            *crcinit_direct = CRC_INIT;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   74FF         MOV       A,#-0x1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   3424            *crc = CRC_INIT;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   F0           MOVX      @DPTR,A
   3425            for (i=0; i<CRC_ORDER; i++) 
   \   000015   7E00         MOV       R6,#0x0
   \   000017   7F00         MOV       R7,#0x0
   \   000019   8039         SJMP      ??bdb_crcInit_0
   3426            {
   3427              bit = *crc & 1;
   \                     ??bdb_crcInit_1:
   \   00001B   E8           MOV       A,R0
   \   00001C   5401         ANL       A,#0x1
   \   00001E   F8           MOV       R0,A
   3428              if (bit) *crc^= CRC_POLYNOM;
   \   00001F   600D         JZ        ??bdb_crcInit_2
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6421         XRL       A,#0x21
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6410         XRL       A,#0x10
   \   00002D   F0           MOVX      @DPTR,A
   3429              *crc >>= 1;
   \                     ??bdb_crcInit_2:
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FC           MOV       R4,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   C3           CLR       C
   \   000037   13           RRC       A
   \   000038   FD           MOV       R5,A
   \   000039   EC           MOV       A,R4
   \   00003A   13           RRC       A
   \   00003B   8A82         MOV       DPL,R2
   \   00003D   8B83         MOV       DPH,R3
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   A3           INC       DPTR
   \   000041   ED           MOV       A,R5
   \   000042   F0           MOVX      @DPTR,A
   3430              if (bit) *crc|= CRC_HIGHBIT;
   \   000043   E8           MOV       A,R0
   \   000044   6009         JZ        ??bdb_crcInit_3
   \   000046   8A82         MOV       DPL,R2
   \   000048   8B83         MOV       DPH,R3
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   4480         ORL       A,#0x80
   \   00004E   F0           MOVX      @DPTR,A
   3431            }	
   \                     ??bdb_crcInit_3:
   \   00004F   0E           INC       R6
   \   000050   EE           MOV       A,R6
   \   000051   7001         JNZ       ??bdb_crcInit_0
   \   000053   0F           INC       R7
   \                     ??bdb_crcInit_0:
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F8           MOV       R0,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F9           MOV       R1,A
   \   00005D   C3           CLR       C
   \   00005E   EE           MOV       A,R6
   \   00005F   9410         SUBB      A,#0x10
   \   000061   EF           MOV       A,R7
   \   000062   9400         SUBB      A,#0x0
   \   000064   40B5         JC        ??bdb_crcInit_1
   3432            *crcinit_nondirect = *crc;
   \   000066   7409         MOV       A,#0x9
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   FA           MOV       R2,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F583         MOV       DPH,A
   \   000071   8A82         MOV       DPL,R2
   \   000073   E8           MOV       A,R0
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   E9           MOV       A,R1
   \   000077   F0           MOVX      @DPTR,A
   3433          
   3434          }
   \   000078   7F01         MOV       R7,#0x1
   \   00007A   02....       LJMP      ?BANKED_LEAVE_XDATA
   3435          
   3436          
   3437          /******************************************************************************
   3438           * @fn          bdb_crcReflect
   3439           *
   3440           * @brief       
   3441           *
   3442           * @param       crc - 
   3443           * @param       bitnum -
   3444           *
   3445           * @return      none
   3446           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3447          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
   \                     bdb_crcReflect:
   3448          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3449          
   3450            // reflects the lower 'bitnum' bits of 'crc'
   3451          
   3452            uint16 i, j=1, crcout=0;
   \   000005   7E01         MOV       R6,#0x1
   \   000007   7F00         MOV       R7,#0x0
   \   000009   8F..         MOV       ?V0,R7
   \   00000B   8F..         MOV       ?V1,R7
   3453          
   3454            for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
   \   00000D   8E..         MOV       ?V2,R6
   \   00000F   8F..         MOV       ?V3,R7
   \   000011   EC           MOV       A,R4
   \   000012   14           DEC       A
   \   000013   78..         MOV       R0,#?V2
   \   000015   12....       LCALL     ?S_SHL
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
   \   00001C   8022         SJMP      ??bdb_crcReflect_0
   3455              if (crc & i) crcout|=j;
   \                     ??bdb_crcReflect_1:
   \   00001E   EA           MOV       A,R2
   \   00001F   58           ANL       A,R0
   \   000020   FC           MOV       R4,A
   \   000021   EB           MOV       A,R3
   \   000022   59           ANL       A,R1
   \   000023   FD           MOV       R5,A
   \   000024   EC           MOV       A,R4
   \   000025   4D           ORL       A,R5
   \   000026   600A         JZ        ??bdb_crcReflect_2
   \   000028   EE           MOV       A,R6
   \   000029   45..         ORL       A,?V0
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   EF           MOV       A,R7
   \   00002E   45..         ORL       A,?V1
   \   000030   F5..         MOV       ?V1,A
   3456              j<<= 1;
   \                     ??bdb_crcReflect_2:
   \   000032   EE           MOV       A,R6
   \   000033   25E0         ADD       A,0xE0 /* A   */
   \   000035   FE           MOV       R6,A
   \   000036   EF           MOV       A,R7
   \   000037   33           RLC       A
   \   000038   FF           MOV       R7,A
   3457            }
   \   000039   E9           MOV       A,R1
   \   00003A   C3           CLR       C
   \   00003B   13           RRC       A
   \   00003C   F9           MOV       R1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   13           RRC       A
   \   00003F   F8           MOV       R0,A
   \                     ??bdb_crcReflect_0:
   \   000040   E8           MOV       A,R0
   \   000041   49           ORL       A,R1
   \   000042   70DA         JNZ       ??bdb_crcReflect_1
   3458            return (crcout);
   \   000044   AA..         MOV       R2,?V0
   \   000046   AB..         MOV       R3,?V1
   \   000048   7F04         MOV       R7,#0x4
   \   00004A   02....       LJMP      ?BANKED_LEAVE_XDATA
   3459          }
   3460          
   3461          
   3462          /******************************************************************************
   3463           * @fn          bdb_crcBitByBitFast
   3464           *
   3465           * @brief       
   3466           *
   3467           * @param       p - 
   3468           * @param       len -
   3469           * @param       crcinit_direct - 
   3470           * @param       crcinit_nondirect -
   3471           *
   3472           * @return      crc
   3473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3474          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect) 
   \                     bdb_crcBitByBitFast:
   3475          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   3476            // fast bit by bit algorithm without augmented zero bytes.
   3477            // does not use lookup table, suited for polynom orders between 1...32.
   3478          
   3479            uint16 i, j, c, bit;
   3480            uint16 crc = crcinit_direct;
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3481          
   3482            for (i=0; i<len; i++) {
   \   00000D   75..00       MOV       ?V0,#0x0
   \   000010   75..00       MOV       ?V1,#0x0
   \   000013   7414         MOV       A,#0x14
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   78..         MOV       R0,#?V8
   \   00001A   12....       LCALL     ?L_MOV_X
   \   00001D   802D         SJMP      ??bdb_crcBitByBitFast_0
   3483          
   3484              c = (uint16)*p++;
   3485              c = bdb_crcReflect(c, 8);
   3486          
   3487              for (j=0x80; j; j>>=1) {
   3488          
   3489                bit = crc & CRC_HIGHBIT;
   \                     ??bdb_crcBitByBitFast_1:
   \   00001F   EF           MOV       A,R7
   \   000020   5480         ANL       A,#0x80
   \   000022   FD           MOV       R5,A
   3490                crc<<= 1;
   \   000023   EE           MOV       A,R6
   \   000024   25E0         ADD       A,0xE0 /* A   */
   \   000026   FE           MOV       R6,A
   \   000027   EF           MOV       A,R7
   \   000028   33           RLC       A
   \   000029   FF           MOV       R7,A
   3491                if (c & j) bit^= CRC_HIGHBIT;
   \   00002A   EA           MOV       A,R2
   \   00002B   58           ANL       A,R0
   \   00002C   6004         JZ        ??bdb_crcBitByBitFast_2
   \   00002E   7480         MOV       A,#-0x80
   \   000030   6D           XRL       A,R5
   \   000031   FD           MOV       R5,A
   3492                if (bit) crc^= CRC_POLYNOM;
   \                     ??bdb_crcBitByBitFast_2:
   \   000032   ED           MOV       A,R5
   \   000033   6008         JZ        ??bdb_crcBitByBitFast_3
   \   000035   7421         MOV       A,#0x21
   \   000037   6E           XRL       A,R6
   \   000038   FE           MOV       R6,A
   \   000039   7410         MOV       A,#0x10
   \   00003B   6F           XRL       A,R7
   \   00003C   FF           MOV       R7,A
   3493              }
   \                     ??bdb_crcBitByBitFast_3:
   \   00003D   C3           CLR       C
   \   00003E   E8           MOV       A,R0
   \   00003F   13           RRC       A
   \   000040   F8           MOV       R0,A
   \                     ??bdb_crcBitByBitFast_4:
   \   000041   E8           MOV       A,R0
   \   000042   70DB         JNZ       ??bdb_crcBitByBitFast_1
   \   000044   05..         INC       ?V0
   \   000046   E5..         MOV       A,?V0
   \   000048   7002         JNZ       ??bdb_crcBitByBitFast_0
   \   00004A   05..         INC       ?V1
   \                     ??bdb_crcBitByBitFast_0:
   \   00004C   85....       MOV       ?V4,?V0
   \   00004F   85....       MOV       ?V5,?V1
   \   000052   E4           CLR       A
   \   000053   F5..         MOV       ?V6,A
   \   000055   F5..         MOV       ?V7,A
   \   000057   78..         MOV       R0,#?V8
   \   000059   79..         MOV       R1,#?V4
   \   00005B   12....       LCALL     ?UL_GT
   \   00005E   501C         JNC       ??bdb_crcBitByBitFast_5
   \   000060   85..82       MOV       DPL,?V2
   \   000063   85..83       MOV       DPH,?V3
   \   000066   E0           MOVX      A,@DPTR
   \   000067   FA           MOV       R2,A
   \   000068   7B00         MOV       R3,#0x0
   \   00006A   A3           INC       DPTR
   \   00006B   8582..       MOV       ?V2,DPL
   \   00006E   8583..       MOV       ?V3,DPH
   \   000071                ; Setup parameters for call to function bdb_crcReflect
   \   000071   7C08         MOV       R4,#0x8
   \   000073   7D00         MOV       R5,#0x0
   \   000075   12....       LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   \   000078   7880         MOV       R0,#-0x80
   \   00007A   80C5         SJMP      ??bdb_crcBitByBitFast_4
   3494            }	
   3495          
   3496            crc=bdb_crcReflect(crc, CRC_ORDER);
   3497            crc^= CRC_XOR;
   3498          
   3499            return(crc);
   \                     ??bdb_crcBitByBitFast_5:
   \   00007C                ; Setup parameters for call to function bdb_crcReflect
   \   00007C   7C10         MOV       R4,#0x10
   \   00007E   7D00         MOV       R5,#0x0
   \   000080   EE           MOV       A,R6
   \   000081   FA           MOV       R2,A
   \   000082   EF           MOV       A,R7
   \   000083   FB           MOV       R3,A
   \   000084   12....       LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   \   000087   EA           MOV       A,R2
   \   000088   F4           CPL       A
   \   000089   FA           MOV       R2,A
   \   00008A   EB           MOV       A,R3
   \   00008B   F4           CPL       A
   \   00008C   FB           MOV       R3,A
   \   00008D   7F0C         MOV       R7,#0xc
   \   00008F   02....       LJMP      ?BANKED_LEAVE_XDATA
   3500          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bdbAttributes>`:
   \   000000   00F0FF07     DD 134213632
   \   000004   00080000     DD 2048
   \   000008   FFFF         DW 65535
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   05           DB 5
   \   00000D   04           DB 4
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   03           DB 3
   \   000012   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for vDoPrimaryScan>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBdbInstallCodeCRC>`:
   \   000000   83           DB 131
   \   000001   FE           DB 254
   \   000002   D3           DB 211
   \   000003   40           DB 64
   \   000004   7A           DB 122
   \   000005   93           DB 147
   \   000006   97           DB 151
   \   000007   23           DB 35
   \   000008   A5           DB 165
   \   000009   C6           DB 198
   \   00000A   39           DB 57
   \   00000B   B2           DB 178
   \   00000C   69           DB 105
   \   00000D   16           DB 22
   \   00000E   D5           DB 213
   \   00000F   05           DB 5
   \   000010   C3           DB 195
   \   000011   B5           DB 181

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c8:
   \   000000   C8000000     DD 200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3a98:
   \   000000   983A0000     DD 15000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10:
   \   000000   10000000     DD 16
   3501          
   3502          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     11   bdb_AddRespondentNode
        0     11   -> bdb_CreateRespondentList
        0     11   -> osal_mem_alloc
      0      9   bdb_CBKETCLinkKeyExchangeAttempt
        0      9   -> bdb_reportCommissioningState
        0      9   -> bdb_setNodeJoinLinkKeyType
        0      9   -> bdb_tcLinkKeyExchangeAttempt
      0      0   bdb_ClearNetworkParams
      0     21   bdb_CreateRespondentList
        0     10   -> osal_mem_alloc
      2     36   bdb_GenerateInstallCodeCRC
        2      6   -> bdb_calculateCCITT_CRC
      0      9   bdb_Init
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> bdb_RepInit
      2     18   bdb_NetworkRestoredResumeState
        2      4   -> osal_start_timerEx
      1     36   bdb_NotifyCommissioningModeStart
        0     15   -> bdb_SendMsg
      0     59   bdb_ProcessNodeDescRsp
        0     45   -> APSME_IsDistributedSecurity
        0     45   -> ZDO_ParseNodeDescRsp
        0     45   -> bdb_reportCommissioningState
        0     45   -> bdb_setNodeJoinLinkKeyType
        0     45   -> bdb_tcLinkKeyExchangeAttempt
        0     49   -> osal_nv_write
        0     45   -> osal_stop_timerEx
      0     45   bdb_ProcessOSALMsg
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> ZMacSetReq
        0     12   -> bdb_filterNwkDisc
        0     12   -> bdb_nwkDiscoveryAttempt
        0     12   -> bdb_reportCommissioningState
        0     12   -> bdb_requestTCLinkKey
        0     12   -> bdb_requestTCStackVersion
        0     12   -> bdb_requestVerifyTCLinkKey
        0     12   -> bdb_tryNwkAssoc
        0     12   -> nwkNeighborInitTable
        0     16   -> osal_start_timerEx
      2      0   bdb_RegisterCBKETCLinkKeyExchangeCB
      2      0   bdb_RegisterCommissioningStatusCB
      2      0   bdb_RegisterForFilterNwkDescCB
      1     10   bdb_RegisterSimpleDescriptor
        0     10   -> afRegister
        0     10   -> osal_mem_alloc
      1     43   bdb_SendMsg
        0     20   -> osal_memcpy
        0     17   -> osal_msg_allocate
        0     17   -> osal_msg_send
      0     36   bdb_StartCommissioning
        0     32   -> APSME_IsDistributedSecurity
        0     32   -> ZDApp_ReadNetworkRestoreState
        0     32   -> ZDOInitDeviceEx
        0     32   -> bdb_RepConstructReportingData
        0     32   -> bdb_RepUpdateMarkBindings
        0     32   -> bdb_nwkSteeringDeviceOnNwk
        0     32   -> bdb_reportCommissioningState
        0     32   -> bdb_setNodeIsOnANetwork
        0     32   -> osal_get_timeoutEx
        0     32   -> osal_isbufset
        0     32   -> osal_memset
        0     32   -> osal_nv_delete
        0     32   -> osal_nv_item_len
        0     36   -> osal_nv_read
        0     36   -> osal_nv_write
        0     32   -> osal_set_event
        0     32   -> zgWriteStartupOptions
      0     24   bdb_ZclIdentifyCmdInd
        0     24   -> osal_start_timerEx
        0     20   -> osal_stop_timerEx
        0     22   -> zclFindAttrRec
      2      0   bdb_ZedAttemptRecoverNwk
        2      0   -> ZDOInitDeviceEx
      0     51   bdb_addInstallCode
        0     30   -> APSME_AddTCLinkKey
        0     30   -> bdb_GenerateInstallCodeCRC
        0     30   -> osal_build_uint16
        0     34   -> sspMMOHash
      0     28   bdb_calculateCCITT_CRC
        0     22   -> bdb_crcBitByBitFast
        0     18   -> bdb_crcInit
      0     42   bdb_crcBitByBitFast
        0     20   -> bdb_crcReflect
      0     27   bdb_crcInit
      0     32   bdb_crcReflect
      0      0   bdb_doTrustCenterRequireKeyExchange
      1     33   bdb_event_loop
        0     29   -> NLME_LeaveReq
        0     29   -> bdb_ProcessOSALMsg
        0     29   -> bdb_ProcessRespondentList
        0     29   -> bdb_RepProcessEvent
        0     29   -> bdb_SendIdentifyQuery
        0     29   -> bdb_exitFindingBindingWStatus
        0     29   -> bdb_getRespondentRetry
        0     29   -> bdb_nwkSteeringDeviceOnNwk
        0     29   -> bdb_processTimeout
        0     29   -> bdb_processZDOMgs
        0     29   -> bdb_reportCommissioningState
        0     29   -> bdb_setEpDescListToActiveEndpoint
        0     29   -> bdb_setNodeIsOnANetwork
        0     29   -> bdb_startResumeCommissioningProcess
        0     29   -> bdb_tcLinkKeyExchangeAttempt
        0     29   -> osal_get_timeoutEx
        0     29   -> osal_memset
        0     29   -> osal_msg_deallocate
        0     29   -> osal_msg_receive
        0     29   -> osal_set_event
        0     33   -> osal_start_timerEx
        0     29   -> osal_stop_timerEx
        0     31   -> zclFindAttrRec
      0     23   bdb_filterNwkDisc
        0     11   -> bdb_nwkDescFree
        0     11   -> nwk_ExtPANIDValid
        0     11   -> nwk_desc_list_release
        0     11   -> nwk_getNwkDescList
        0     11   -> sAddrExtCmp
      2      0   bdb_getZCLFrameCounter
      2     21   bdb_isDeviceNonFactoryNew
      0     25   bdb_joinProcess
        0     14   -> NLME_JoinRequest
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_ChangeState
        0     10   -> ZDApp_NodeProfileSync
      0     13   bdb_nwkAssocAttemt
        0     13   -> bdb_SendMsg
        0     11   -> bdb_nwkDescFree
      2     14   bdb_nwkDescFree
        2      0   -> osal_mem_free
      0     25   bdb_nwkDiscoveryAttempt
        0     11   -> ZDApp_NetworkInit
        0     13   -> bdb_SendMsg
        0     11   -> bdb_reportCommissioningState
        0     11   -> bdb_setChannel
      0      9   bdb_nwkFormationAttempt
        0      9   -> bdb_nwkJoiningFormation
        0      9   -> bdb_reportCommissioningState
      0     33   bdb_nwkJoiningFormation
        0     12   -> ZDOInitDeviceEx
        0     12   -> bdb_reportCommissioningState
        0     12   -> bdb_setChannel
      2     41   bdb_nwkSteeringDeviceOnNwk
        2      9   -> ZDP_MgmtPermitJoinReq
      2      1   bdb_parentLost
        2      1   -> NLME_OrphanStateSet
        2      1   -> ZDApp_ChangeState
        2      1   -> ZMacSetReq
        2      1   -> bdb_nwkDescFree
        2      1   -> bdb_reportCommissioningState
        2      1   -> nwk_desc_list_free
      2     29   bdb_processTimeout
        2      0   -> bdb_nwkAssocAttemt
        2      0   -> bdb_tcLinkKeyExchangeAttempt
      0     39   bdb_processZDOMgs
        0     10   -> bdb_ProcessIEEEAddrRsp
        0     10   -> bdb_ProcessNodeDescRsp
        0     10   -> bdb_ProcessSimpleDesc
      0     15   bdb_rejoinNwk
        0     11   -> NLME_ReJoinRequest
        0     11   -> NLME_ReJoinRequestUnsecure
        0     11   -> ZDApp_ChangeState
        0     11   -> ZDApp_RestoreNwkKey
        0     11   -> ZMacSetReq
        0     15   -> osal_nv_write
      1     63   bdb_reportCommissioningState
        0     14   -> NLME_ResetRequest
        0     14   -> NLME_SetPollRate
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_RestoreNwkSecMaterial
        0     14   -> ZMacSetReq
        0     14   -> bdb_NetworkRestoredResumeState
        0     16   -> bdb_SendMsg
        0     14   -> bdb_getRespondentRetry
        0     14   -> bdb_isDeviceNonFactoryNew
        0     14   -> bdb_nwkDescFree
        0     14   -> bdb_setFN
        0     14   -> bdb_zclRespondentListClean
        0     14   -> nwk_setStateIdle
        0     14   -> osal_get_timeoutEx
        0     18   -> osal_start_timerEx
        0     14   -> osal_stop_timerEx
        0     14   -> zgWriteStartupOptions
      2     20   bdb_requestTCLinkKey
        2      4   -> APSME_RequestKeyReq
        2      8   -> osal_start_timerEx
        2      4   -> osal_stop_timerEx
      0     34   bdb_requestTCStackVersion
        0     18   -> APSME_IsDistributedSecurity
        0     19   -> ZDP_NWKAddrOfInterestReq
        0     18   -> bdb_reportCommissioningState
        0     18   -> bdb_setNodeJoinLinkKeyType
        0     22   -> osal_start_timerEx
        0     18   -> osal_stop_timerEx
      2     27   bdb_requestVerifyTCLinkKey
        2     11   -> APSME_GetRequest
        2     11   -> APSME_VerifyKeyReq
        2     15   -> osal_start_timerEx
        2     11   -> osal_stop_timerEx
      2      5   bdb_resetLocalAction
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_ResetTimerStart
        2      5   -> bdb_setFN
        2      5   -> osal_memset
      0     17   bdb_setActiveCentralizedLinkKey
        0     17   -> APSME_AddTCLinkKey
        0     17   -> APSME_SetDefaultKey
        0     17   -> bdb_addInstallCode
        0     17   -> osal_memset
      0     28   bdb_setChannel
        0     16   -> osal_nv_write
      0     12   bdb_setChannelAttribute
      2      0   bdb_setCommissioningGroupID
      2     14   bdb_setFN
        2      0   -> bdb_setNodeIsOnANetwork
        2      0   -> zgWriteStartupOptions
      0     46   bdb_setNodeIsOnANetwork
        0     14   -> osal_nv_write
      2     45   bdb_setNodeJoinLinkKeyType
      0     54   bdb_startResumeCommissioningProcess
        0     21   -> bdb_NotifyCommissioningModeStart
        0     21   -> bdb_SendIdentifyQuery
        0     23   -> bdb_SendMsg
        0     21   -> bdb_exitFindingBindingWStatus
        0     21   -> bdb_isDeviceNonFactoryNew
        0     21   -> bdb_nwkJoiningFormation
        0     21   -> bdb_nwkSteeringDeviceOnNwk
        0     21   -> bdb_reportCommissioningState
        0     21   -> bdb_setEpDescListToActiveEndpoint
        0     21   -> osal_memset
        0     25   -> osal_start_timerEx
        0     23   -> zclFindAttrRec
      0     60   bdb_tcLinkKeyExchangeAttempt
        0     15   -> bdb_SendMsg
        0     13   -> osal_stop_timerEx
      0      0   bdb_touchlinkSendFNReset
      0     25   bdb_tryNwkAssoc
        0     13   -> bdb_SendMsg
        0     11   -> bdb_joinProcess
        0     11   -> bdb_nwkDescFree
      0     26   bdb_zclRespondentListClean
        0     12   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      19  ?<Initializer for bdbAttributes>
       1  ?<Initializer for vDoPrimaryScan>
      18  ?<Initializer for zgBdbInstallCodeCRC>
       4  __Constant_0
       4  __Constant_10
       4  __Constant_1388
       4  __Constant_32
       4  __Constant_3a98
       4  __Constant_3e8
       4  __Constant_bb8
       4  __Constant_c8
      19  bdbAttributes
       4  bdbCommissioningProcedureState
     269  bdb_AddRespondentNode
      45  bdb_CBKETCLinkKeyExchangeAttempt
       3  bdb_ClearNetworkParams
      64  bdb_CreateRespondentList
       2  bdb_CurrEpDescriptorList
       1  bdb_FBStateSuccessLatch
       1  bdb_FB_InitiatorCurrentCyclesNumber
      51  bdb_GenerateInstallCodeCRC
       2  bdb_HeadEpDescriptorList
      46  bdb_Init
      90  bdb_NetworkRestoredResumeState
      72  bdb_NotifyCommissioningModeStart
     191  bdb_ProcessNodeDescRsp
     273  bdb_ProcessOSALMsg
      38  bdb_RegisterCBKETCLinkKeyExchangeCB
      19  bdb_RegisterCommissioningStatusCB
      23  bdb_RegisterForFilterNwkDescCB
      72  bdb_RegisterSimpleDescriptor
     113  bdb_SendMsg
     538  bdb_StartCommissioning
       1  bdb_TaskID
     164  bdb_ZclIdentifyCmdInd
       1  bdb_ZclTransactionSequenceNumber
      43  bdb_ZedAttemptRecoverNwk
     120  bdb_addInstallCode
     108  bdb_calculateCCITT_CRC
     146  bdb_crcBitByBitFast
     125  bdb_crcInit
      77  bdb_crcReflect
       5  bdb_doTrustCenterRequireKeyExchange
     710  bdb_event_loop
     333  bdb_filterNwkDisc
      19  bdb_getZCLFrameCounter
       1  bdb_initialization
      16  bdb_isDeviceNonFactoryNew
     204  bdb_joinProcess
     103  bdb_nwkAssocAttemt
       1  bdb_nwkAssocRetriesCount
     129  bdb_nwkDescFree
     113  bdb_nwkDiscoveryAttempt
      53  bdb_nwkFormationAttempt
     112  bdb_nwkJoiningFormation
      55  bdb_nwkSteeringDeviceOnNwk
     111  bdb_parentLost
      63  bdb_processTimeout
      57  bdb_processZDOMgs
     171  bdb_rejoinNwk
    1008  bdb_reportCommissioningState
      78  bdb_requestTCLinkKey
     163  bdb_requestTCStackVersion
     101  bdb_requestVerifyTCLinkKey
      70  bdb_resetLocalAction
     107  bdb_setActiveCentralizedLinkKey
      72  bdb_setChannel
      34  bdb_setChannelAttribute
      19  bdb_setCommissioningGroupID
      23  bdb_setFN
      76  bdb_setNodeIsOnANetwork
      16  bdb_setNodeJoinLinkKeyType
     633  bdb_startResumeCommissioningProcess
      83  bdb_tcLinkKeyExchangeAttempt
       3  bdb_touchlinkSendFNReset
     115  bdb_tryNwkAssoc
      84  bdb_zclRespondentListClean
       2  pBDBListNwk
       2  pRespondentCurr
       2  pRespondentHead
       2  pRespondentNext
       2  pfnCBKETCLinkKeyExchange
       2  pfnCommissioningStatusCB
       2  pfnFilterNwkDesc
       1  touchLinkTargetEnabled
       1  vDoPrimaryScan
      18  zgBdbInstallCodeCRC
     336  -- Other

 
 7 629 bytes in segment BANKED_CODE
   336 bytes in segment BANK_RELAYS
    38 bytes in segment XDATA_I
    38 bytes in segment XDATA_ID
    32 bytes in segment XDATA_ROM_C
    29 bytes in segment XDATA_Z
 
   374 bytes of CODE     memory
     0 bytes of CONST    memory (+ 32 bytes shared)
 7 629 bytes of HUGECODE memory
    67 bytes of XDATA    memory

Errors: none
Warnings: none
