###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               21/Jul/2020  00:36:35
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\stack\nwk\BindingTable.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW1C0C.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\nwk\BindingTable.c" -D BDB_REPORTING -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xPOWER_SAVING
#        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -D ZCL_GROUPS -D ZCL_ON_OFF -D ZCL_REPORT
#        -D ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Om --require_prototypes --no_unroll --no_inline --no_tbaa
#        --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\BindingTable.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\BindingTable.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\nwk\BindingTable.c
      1          /**************************************************************************************************
      2            Filename:       BindingTable.c
      3            Revised:        $Date: 2014-10-08 08:37:03 -0700 (Wed, 08 Oct 2014) $
      4            Revision:       $Revision: 40512 $
      5          
      6            Description:    Device binding table functions.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "nwk_globals.h"
     47          #include "AddrMgr.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "bdb.h"
     51          #include "bdb_interface.h"
     52          #if BDB_REPORTING  
     53          #include "bdb_Reporting.h"
     54          #endif
     55          
     56          /*********************************************************************
     57           * MACROS
     58           */
     59          
     60          /*********************************************************************
     61           * CONSTANTS
     62           */
     63          #define NV_BIND_EMPTY   0xFF
     64          #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
     65          #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
     66          
     67          /*********************************************************************
     68           * TYPEDEFS
     69           */
     70          typedef struct
     71          {
     72            uint8        srcEP;
     73            uint16       dstIndex;
     74            uint8        dstEP;
     75            uint8        dstAddrMode;
     76            uint8        clusterIDs;
     77            uint16*      clusterIDList;
     78          } bindFields_t;
     79          
     80          /*********************************************************************
     81           * GLOBAL VARIABLES
     82           */
     83          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
     84          extern bdbGCB_BindNotification_t        pfnBindNotificationCB;
     85          #endif
     86          
     87          /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
     91                              AddrMgrEntry_t *entryNew );
     92          BindingEntry_t *bindFindEmpty( void );
     93          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
     94          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
     95          void bindAddrMgrLocalLoad( void );
     96          
     97          #if !defined ( BINDINGTABLE_NV_SINGLES )
     98            #if !defined ( DONT_UPGRADE_BIND )
     99              static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen );
    100              static uint8 BindUpgradeTableInNV( void );
    101            #endif
    102          #endif // !BINDINGTABLE_NV_SINGLES
    103          
    104          
    105          /*********************************************************************
    106           * LOCAL VARIABLES
    107           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          static uint8 bindAddrMgrLocalLoaded = FALSE;
   \                     bindAddrMgrLocalLoaded:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    109          
    110          /*********************************************************************
    111           * Function Pointers
    112           */
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
   \                     pbindAddEntry:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    115                                            zAddrType_t *dstAddr, byte dstEpInt,
    116                                            byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
   \                     pbindNumOfEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
   \                     pbindRemoveDev:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          byte (*pBindInitNV)( void ) = (void*)NULL;
   \                     pBindInitNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          void (*pBindSetDefaultNV)( void ) = (void*)NULL;
   \                     pBindSetDefaultNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
   \                     pBindRestoreFromNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          void (*pBindWriteNV)( void ) = (void*)NULL;
   \                     pBindWriteNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    123          
    124          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    125          /*********************************************************************
    126           * @fn      BindAddrMgrCB()
    127           *
    128           * @brief   Address Manager Callback function
    129           *
    130           * @param   update -
    131           * @param   entry -
    132           *
    133           * @return  pointer to
    134           */
    135          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
    136                              AddrMgrEntry_t *entryOld )
    137          {
    138            // Check for either deleted items or changed Extended (Duplicate) addresses
    139          }
    140          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
    141          
    142          /*********************************************************************
    143           * @fn      InitBindingTable()
    144           *
    145           * @brief
    146           *
    147           *   This function is used to initialise the binding table
    148           *
    149           * @param   none
    150           *
    151           * @return  none
    152           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          void InitBindingTable( void )
   \                     InitBindingTable:
    154          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    155            osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
   \   000005                ; Setup parameters for call to function osal_memset
   \   000005   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000008   E4           CLR       A
   \   000009   93           MOVC      A,@A+DPTR
   \   00000A   FC           MOV       R4,A
   \   00000B   7401         MOV       A,#0x1
   \   00000D   93           MOVC      A,@A+DPTR
   \   00000E   FD           MOV       R5,A
   \   00000F   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000012   E4           CLR       A
   \   000013   93           MOVC      A,@A+DPTR
   \   000014   F5..         MOV       ?V0,A
   \   000016   EC           MOV       A,R4
   \   000017   85..F0       MOV       B,?V0
   \   00001A   A4           MUL       AB
   \   00001B   FC           MOV       R4,A
   \   00001C   A8F0         MOV       R0,B
   \   00001E   85..F0       MOV       B,?V0
   \   000021   ED           MOV       A,R5
   \   000022   A4           MUL       AB
   \   000023   28           ADD       A,R0
   \   000024   FD           MOV       R5,A
   \   000025   79FF         MOV       R1,#-0x1
   \   000027   7A..         MOV       R2,#BindingTable & 0xff
   \   000029   7B..         MOV       R3,#(BindingTable >> 8) & 0xff
   \   00002B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    156          
    157            pbindAddEntry = bindAddEntry;
   \   00002E   90....       MOV       DPTR,#pbindAddEntry
   \   000031   74..         MOV       A,#`??bindAddEntry::?relay` & 0xff
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   74..         MOV       A,#(`??bindAddEntry::?relay` >> 8) & 0xff
   \   000037   F0           MOVX      @DPTR,A
    158            pbindNumOfEntries = bindNumOfEntries;
   \   000038   90....       MOV       DPTR,#pbindNumOfEntries
   \   00003B   74..         MOV       A,#`??bindNumOfEntries::?relay` & 0xff
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   74..         MOV       A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
   \   000041   F0           MOVX      @DPTR,A
    159            pbindRemoveDev = bindRemoveDev;
   \   000042   90....       MOV       DPTR,#pbindRemoveDev
   \   000045   74..         MOV       A,#`??bindRemoveDev::?relay` & 0xff
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   74..         MOV       A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
   \   00004B   F0           MOVX      @DPTR,A
    160            pBindInitNV = BindInitNV;
   \   00004C   90....       MOV       DPTR,#pBindInitNV
   \   00004F   74..         MOV       A,#`??BindInitNV::?relay` & 0xff
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   74..         MOV       A,#(`??BindInitNV::?relay` >> 8) & 0xff
   \   000055   F0           MOVX      @DPTR,A
    161            pBindSetDefaultNV = BindSetDefaultNV;
   \   000056   90....       MOV       DPTR,#pBindSetDefaultNV
   \   000059   74..         MOV       A,#`??BindSetDefaultNV::?relay` & 0xff
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   74..         MOV       A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
   \   00005F   F0           MOVX      @DPTR,A
    162            pBindRestoreFromNV = BindRestoreFromNV;
   \   000060   90....       MOV       DPTR,#pBindRestoreFromNV
   \   000063   74..         MOV       A,#`??BindRestoreFromNV::?relay` & 0xff
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   74..         MOV       A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
   \   000069   F0           MOVX      @DPTR,A
    163            pBindWriteNV = BindWriteNV;
   \   00006A   90....       MOV       DPTR,#pBindWriteNV
   \   00006D   74..         MOV       A,#`??BindWriteNV::?relay` & 0xff
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   A3           INC       DPTR
   \   000071   74..         MOV       A,#(`??BindWriteNV::?relay` >> 8) & 0xff
   \   000073   F0           MOVX      @DPTR,A
    164          
    165            bindAddrMgrLocalLoaded = FALSE;
   \   000074   90....       MOV       DPTR,#bindAddrMgrLocalLoaded
   \   000077   E4           CLR       A
   \   000078   F0           MOVX      @DPTR,A
    166          
    167          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    168            // Register with the address manager
    169            AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
    170          #endif
    171          }
   \   000079   7F02         MOV       R7,#0x2
   \   00007B   02....       LJMP      ?BANKED_LEAVE_XDATA
    172          
    173          /*********************************************************************
    174           * @fn      bindFindEmpty()
    175           *
    176           * @brief   This function returns a pointer to an empty binding slot
    177           *
    178           * @param   none
    179           *
    180           * @return  pointer to binding table entry, NULL if not added
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          BindingEntry_t *bindFindEmpty( void )
   \                     bindFindEmpty:
    183          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            bindTableIndex_t x;
    185          
    186            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7A00         MOV       R2,#0x0
   \   000006   8001         SJMP      ??bindFindEmpty_0
   \                     ??bindFindEmpty_1:
   \   000008   0A           INC       R2
   \                     ??bindFindEmpty_0:
   \   000009   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000C   E4           CLR       A
   \   00000D   93           MOVC      A,@A+DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   EA           MOV       A,R2
   \   000010   C3           CLR       C
   \   000011   98           SUBB      A,R0
   \   000012   501C         JNC       ??bindFindEmpty_2
    187            {
    188              // It's empty if the index is "Not Found"
    189              if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
   \   000014   EA           MOV       A,R2
   \   000015   75F00E       MOV       B,#0xe
   \   000018   A4           MUL       AB
   \   000019   F8           MOV       R0,A
   \   00001A   A9F0         MOV       R1,B
   \   00001C   74..         MOV       A,#BindingTable & 0xff
   \   00001E   28           ADD       A,R0
   \   00001F   F582         MOV       DPL,A
   \   000021   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000023   39           ADDC      A,R1
   \   000024   F583         MOV       DPH,A
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F4           CPL       A
   \   000028   70DE         JNZ       ??bindFindEmpty_1
    190              {
    191                return ( &BindingTable[x] );
   \   00002A   AA82         MOV       R2,DPL
   \   00002C   AB83         MOV       R3,DPH
   \   00002E   8004         SJMP      ??bindFindEmpty_3
    192              }
    193            }
    194          
    195            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindEmpty_2:
   \   000030   7A00         MOV       R2,#0x0
   \   000032   7B00         MOV       R3,#0x0
   \                     ??bindFindEmpty_3:
   \   000034   D083         POP       DPH
   \   000036   D082         POP       DPL
   \   000038   02....       LJMP      ?BRET
    196          }
    197          
    198          /*********************************************************************
    199           * @fn      bindNumOfEntries()
    200           *
    201           * @brief   This function returns the number of binding table entries.
    202           *          The return for this is the number of clusters in the
    203           *          table NOT the number of entries.
    204           *
    205           * @param   none
    206           *
    207           * @return  number of entries
    208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    209          uint16 bindNumOfEntries( void )
   \                     bindNumOfEntries:
    210          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    211            bindTableIndex_t x;
    212            uint16 found;
    213          
    214            for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B00         MOV       R3,#0x0
   \   000008   7C00         MOV       R4,#0x0
   \   00000A   8024         SJMP      ??bindNumOfEntries_0
    215            {
    216              // It's empty if the index is "Not Found"
    217              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \                     ??bindNumOfEntries_1:
   \   00000C   EC           MOV       A,R4
   \   00000D   75F00E       MOV       B,#0xe
   \   000010   A4           MUL       AB
   \   000011   F8           MOV       R0,A
   \   000012   A9F0         MOV       R1,B
   \   000014   74..         MOV       A,#BindingTable & 0xff
   \   000016   28           ADD       A,R0
   \   000017   F582         MOV       DPL,A
   \   000019   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00001B   39           ADDC      A,R1
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F4           CPL       A
   \   000020   600D         JZ        ??bindNumOfEntries_2
    218              {
    219                found += BindingTable[x].numClusterIds;
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   EA           MOV       A,R2
   \   00002A   28           ADD       A,R0
   \   00002B   FA           MOV       R2,A
   \   00002C   E4           CLR       A
   \   00002D   3B           ADDC      A,R3
   \   00002E   FB           MOV       R3,A
    220              }
    221            }
   \                     ??bindNumOfEntries_2:
   \   00002F   0C           INC       R4
   \                     ??bindNumOfEntries_0:
   \   000030   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000033   E4           CLR       A
   \   000034   93           MOVC      A,@A+DPTR
   \   000035   F8           MOV       R0,A
   \   000036   EC           MOV       A,R4
   \   000037   C3           CLR       C
   \   000038   98           SUBB      A,R0
   \   000039   40D1         JC        ??bindNumOfEntries_1
    222          
    223            return ( found );
   \   00003B   D083         POP       DPH
   \   00003D   D082         POP       DPL
   \   00003F   02....       LJMP      ?BRET
    224          }
    225          
    226          /*********************************************************************
    227           * @fn      bindCapacity()
    228           *
    229           * @brief   This function returns the number of binding entries
    230           *          possible and used.
    231           *
    232           * @param   maxEntries - pointer to a place to put the max entries
    233           * @param   usedEntries - pointer to a place to put the number
    234           *               of used entries
    235           *
    236           * @return  none
    237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
   \                     bindCapacity:
    239          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    240            bindTableIndex_t x;
    241            bindTableIndex_t used;
    242          
    243            for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000005   7F00         MOV       R7,#0x0
   \   000007   7E00         MOV       R6,#0x0
   \   000009   801B         SJMP      ??bindCapacity_0
    244            {
    245              // It's empty if the index is "Not Found"
    246              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \                     ??bindCapacity_1:
   \   00000B   EE           MOV       A,R6
   \   00000C   75F00E       MOV       B,#0xe
   \   00000F   A4           MUL       AB
   \   000010   F8           MOV       R0,A
   \   000011   85F0..       MOV       ?V0,B
   \   000014   A9..         MOV       R1,?V0
   \   000016   74..         MOV       A,#BindingTable & 0xff
   \   000018   28           ADD       A,R0
   \   000019   F582         MOV       DPL,A
   \   00001B   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00001D   39           ADDC      A,R1
   \   00001E   F583         MOV       DPH,A
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F4           CPL       A
   \   000022   6001         JZ        ??bindCapacity_2
    247              {
    248                used++;
   \   000024   0F           INC       R7
    249              }
    250            }
   \                     ??bindCapacity_2:
   \   000025   0E           INC       R6
   \                     ??bindCapacity_0:
   \   000026   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000029   E4           CLR       A
   \   00002A   93           MOVC      A,@A+DPTR
   \   00002B   F8           MOV       R0,A
   \   00002C   EE           MOV       A,R6
   \   00002D   C3           CLR       C
   \   00002E   98           SUBB      A,R0
   \   00002F   40DA         JC        ??bindCapacity_1
    251          
    252            *maxEntries = gNWK_MAX_BINDING_ENTRIES;
   \   000031   E4           CLR       A
   \   000032   93           MOVC      A,@A+DPTR
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   E4           CLR       A
   \   00003A   F0           MOVX      @DPTR,A
    253            *usedEntries = used;
   \   00003B   EF           MOV       A,R7
   \   00003C   8C82         MOV       DPL,R4
   \   00003E   8D83         MOV       DPH,R5
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E4           CLR       A
   \   000043   F0           MOVX      @DPTR,A
    254          }
   \   000044   7F01         MOV       R7,#0x1
   \   000046   02....       LJMP      ?BANKED_LEAVE_XDATA
    255          
    256          /*********************************************************************
    257           * @fn      bindAddEntry()
    258           *
    259           * @brief   This function is used to Add an entry to the binding table
    260           *
    261           * @param       srcEpInt - source endpoint
    262           * @param       dstAddr - destination Address
    263           * @param       dstEpInt - destination endpoint
    264           * @param       numClusterIds - number of cluster Ids in the list
    265           * @param       clusterIds - pointer to the Object ID list
    266           *
    267           * @return  pointer to binding table entry, NULL if not added
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          BindingEntry_t *bindAddEntry( byte srcEpInt,
   \                     bindAddEntry:
    270                                        zAddrType_t *dstAddr, byte dstEpInt,
    271                                        byte numClusterIds, uint16 *clusterIds )
    272          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V11,R4
   \   000012   8D..         MOV       ?V2,R5
    273            uint8            index;
    274            bindTableIndex_t bindIdx;
    275            BindingEntry_t*  entry;
    276            bindFields_t     fields;
    277            bdbBindNotificationData_t bindData;
    278          #ifdef BDB_REPORTING  
    279            uint8 bindAdded = FALSE;
   \   000014   75..00       MOV       ?V1,#0x0
    280          #endif
    281          
    282            //Zigbee Spec 2.2.4.3.1.1
    283            //Cannot create an endpoint for invalid endpoint index, neither for non-Group 
    284            //or Non-Extended IEEE Address modes
    285            if( (dstAddr->addrMode != AddrGroup) && (dstAddr->addrMode != Addr64Bit) ||
    286                (srcEpInt == 0) || (srcEpInt == 0xFF) )
   \   000017   EA           MOV       A,R2
   \   000018   2408         ADD       A,#0x8
   \   00001A   F5..         MOV       ?V6,A
   \   00001C   E4           CLR       A
   \   00001D   35..         ADDC      A,?V5
   \   00001F   F5..         MOV       ?V7,A
   \   000021   85..82       MOV       DPL,?V6
   \   000024   F583         MOV       DPH,A
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   7401         MOV       A,#0x1
   \   00002A   68           XRL       A,R0
   \   00002B   6005         JZ        ??bindAddEntry_0
   \   00002D   7403         MOV       A,#0x3
   \   00002F   68           XRL       A,R0
   \   000030   7010         JNZ       ??bindAddEntry_1
   \                     ??bindAddEntry_0:
   \   000032   E9           MOV       A,R1
   \   000033   600D         JZ        ??bindAddEntry_1
   \   000035   74FF         MOV       A,#-0x1
   \   000037   69           XRL       A,R1
   \   000038   6008         JZ        ??bindAddEntry_1
    287            {
    288              return NULL;
    289            }
    290            //Do not accept neither binds to IEEE Addr with invalid endpoints
    291            if(( dstAddr->addrMode == Addr64Bit ) && (dstEpInt == 0))
   \   00003A   7403         MOV       A,#0x3
   \   00003C   68           XRL       A,R0
   \   00003D   700A         JNZ       ??bindAddEntry_2
   \   00003F   EC           MOV       A,R4
   \   000040   7007         JNZ       ??bindAddEntry_2
    292            {
    293              return NULL;
   \                     ??bindAddEntry_1:
   \   000042   7A00         MOV       R2,#0x0
   \   000044   7B00         MOV       R3,#0x0
   \   000046   02....       LJMP      ??bindAddEntry_3 & 0xFFFF
    294            }
    295            
    296              
    297            osal_memcpy( &bindData.dstAddr, dstAddr, sizeof( zAddrType_t) );
   \                     ??bindAddEntry_2:
   \   000049                ; Setup parameters for call to function osal_memcpy
   \   000049   8A..         MOV       ?V8,R2
   \   00004B   8B..         MOV       ?V9,R3
   \   00004D   75..00       MOV       ?V10,#0x0
   \   000050   78..         MOV       R0,#?V8
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000055   7C09         MOV       R4,#0x9
   \   000057   7D00         MOV       R5,#0x0
   \   000059   7403         MOV       A,#0x3
   \   00005B   12....       LCALL     ?XSTACK_DISP101_8
   \   00005E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000061   7403         MOV       A,#0x3
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
    298            bindData.ep = dstEpInt;
   \   000066   7409         MOV       A,#0x9
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   E5..         MOV       A,?V11
   \   00006D   F0           MOVX      @DPTR,A
    299              
    300            // initialize results
    301            entry = NULL;
   \   00006E   7E00         MOV       R6,#0x0
   \   000070   7F00         MOV       R7,#0x0
    302          
    303            // make sure local addresses have been loaded
    304            bindAddrMgrLocalLoad();
   \   000072                ; Setup parameters for call to function bindAddrMgrLocalLoad
   \   000072   12....       LCALL     `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
    305          
    306            // setup fields
    307            fields.dstIndex = bindAddrIndexGet( dstAddr );
   \   000075                ; Setup parameters for call to function bindAddrIndexGet
   \   000075   AA..         MOV       R2,?V4
   \   000077   AB..         MOV       R3,?V5
   \   000079   12....       LCALL     `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   \   00007C   8A..         MOV       ?V4,R2
   \   00007E   8B..         MOV       ?V5,R3
    308            fields.srcEP    = srcEpInt;
    309          
    310            if ( dstAddr->addrMode == AddrGroup )
   \   000080   85..82       MOV       DPL,?V6
   \   000083   85..83       MOV       DPH,?V7
   \   000086   E0           MOVX      A,@DPTR
   \   000087   6401         XRL       A,#0x1
   \   000089   7008         JNZ       ??bindAddEntry_4
    311            {
    312              fields.dstAddrMode = DSTGROUPMODE_GROUP;
   \   00008B   75..01       MOV       ?V0,#0x1
    313              fields.dstEP       = 0;
   \   00008E   75..00       MOV       ?V7,#0x0
   \   000091   8006         SJMP      ??bindAddEntry_5
    314            }
    315            else
    316            {
    317              fields.dstAddrMode = DSTGROUPMODE_ADDR;
   \                     ??bindAddEntry_4:
   \   000093   75..00       MOV       ?V0,#0x0
    318              fields.dstEP       = dstEpInt;
   \   000096   85....       MOV       ?V7,?V11
    319            }
    320          
    321            if ( fields.dstIndex != INVALID_NODE_ADDR  )
   \                     ??bindAddEntry_5:
   \   000099   74FE         MOV       A,#-0x2
   \   00009B   6A           XRL       A,R2
   \   00009C   7003         JNZ       ??bindAddEntry_6
   \   00009E   74FF         MOV       A,#-0x1
   \   0000A0   6B           XRL       A,R3
   \                     ??bindAddEntry_6:
   \   0000A1   7003         JNZ       $+5
   \   0000A3   02....       LJMP      ??bindAddEntry_7 & 0xFFFF
    322            {
    323              for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
   \   0000A6   7A00         MOV       R2,#0x0
   \   0000A8   8001         SJMP      ??bindAddEntry_8
   \                     ??bindAddEntry_9:
   \   0000AA   0A           INC       R2
   \                     ??bindAddEntry_8:
   \   0000AB   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000AE   E4           CLR       A
   \   0000AF   93           MOVC      A,@A+DPTR
   \   0000B0   F8           MOV       R0,A
   \   0000B1   EA           MOV       A,R2
   \   0000B2   C3           CLR       C
   \   0000B3   98           SUBB      A,R0
   \   0000B4   5040         JNC       ??bindAddEntry_10
    324              {
    325                if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
    326                     ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
    327                     ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
    328                     ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
   \   0000B6   EA           MOV       A,R2
   \   0000B7   75F00E       MOV       B,#0xe
   \   0000BA   A4           MUL       AB
   \   0000BB   F8           MOV       R0,A
   \   0000BC   A9F0         MOV       R1,B
   \   0000BE   74..         MOV       A,#BindingTable & 0xff
   \   0000C0   28           ADD       A,R0
   \   0000C1   F8           MOV       R0,A
   \   0000C2   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   0000C4   39           ADDC      A,R1
   \   0000C5   F9           MOV       R1,A
   \   0000C6   8882         MOV       DPL,R0
   \   0000C8   F583         MOV       DPH,A
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   65..         XRL       A,?V3
   \   0000CD   70DB         JNZ       ??bindAddEntry_9
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   65..         XRL       A,?V0
   \   0000D3   70D5         JNZ       ??bindAddEntry_9
   \   0000D5   8882         MOV       DPL,R0
   \   0000D7   8983         MOV       DPH,R1
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   65..         XRL       A,?V4
   \   0000DE   7003         JNZ       ??bindAddEntry_11
   \   0000E0   A3           INC       DPTR
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   6B           XRL       A,R3
   \                     ??bindAddEntry_11:
   \   0000E3   70C5         JNZ       ??bindAddEntry_9
   \   0000E5   8882         MOV       DPL,R0
   \   0000E7   8983         MOV       DPH,R1
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   65..         XRL       A,?V7
   \   0000F0   70B8         JNZ       ??bindAddEntry_9
    329                {
    330                  entry = &BindingTable[bindIdx];
   \   0000F2   E8           MOV       A,R0
   \   0000F3   FE           MOV       R6,A
   \   0000F4   E9           MOV       A,R1
   \   0000F5   FF           MOV       R7,A
    331          
    332                  // break from loop
    333                  break;
   \                     ??bindAddEntry_10:
   \   0000F6   7422         MOV       A,#0x22
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   F5..         MOV       ?V12,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   F5..         MOV       ?V13,A
    334                }
    335              }
    336          
    337              if ( entry != NULL )
   \   000102   EE           MOV       A,R6
   \   000103   4F           ORL       A,R7
   \   000104   7003         JNZ       $+5
   \   000106   02....       LJMP      ??bindAddEntry_12 & 0xFFFF
    338              {
    339                // Loop through the cluster IDs
    340                for ( index = 0; index < numClusterIds; index++ )
   \   000109   75..00       MOV       ?V0,#0x0
   \   00010C   804C         SJMP      ??bindAddEntry_13
    341                {
    342                  // Found - is the cluster already defined?
    343                  if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
    344                  {
    345                    // Nope, add this cluster
    346                    if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
    347                    {
    348                      // Indicate error if cluster list was full
    349                      entry = NULL;
    350                    }
    351                    else
    352                    {
    353                      // new bind added - notify application
    354                      bindData.clusterId = clusterIds[index];
   \                     ??bindAddEntry_14:
   \   00010E   85..82       MOV       DPL,?V4
   \   000111   85..83       MOV       DPH,?V5
   \   000114   E0           MOVX      A,@DPTR
   \   000115   F8           MOV       R0,A
   \   000116   A3           INC       DPTR
   \   000117   E0           MOVX      A,@DPTR
   \   000118   F9           MOV       R1,A
   \   000119   740A         MOV       A,#0xa
   \   00011B   12....       LCALL     ?XSTACK_DISP0_8
   \   00011E   E8           MOV       A,R0
   \   00011F   F0           MOVX      @DPTR,A
   \   000120   A3           INC       DPTR
   \   000121   E9           MOV       A,R1
   \   000122   F0           MOVX      @DPTR,A
    355          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)             
    356                      if ( pfnBindNotificationCB != NULL )
   \   000123   90....       MOV       DPTR,#pfnBindNotificationCB
   \   000126   E0           MOVX      A,@DPTR
   \   000127   F8           MOV       R0,A
   \   000128   A3           INC       DPTR
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   F9           MOV       R1,A
   \   00012B   E8           MOV       A,R0
   \   00012C   49           ORL       A,R1
   \   00012D   6012         JZ        ??bindAddEntry_15
    357                      {
    358                        pfnBindNotificationCB( &bindData );
   \   00012F                ; Setup parameters for indirect call
   \   00012F   AA..         MOV       R2,?XSP + 0
   \   000131   AB..         MOV       R3,?XSP + 1
   \   000133   90....       MOV       DPTR,#pfnBindNotificationCB
   \   000136   E0           MOVX      A,@DPTR
   \   000137   F8           MOV       R0,A
   \   000138   A3           INC       DPTR
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   F583         MOV       DPH,A
   \   00013C   8882         MOV       DPL,R0
   \   00013E   12....       LCALL     ?CALL_IND
    359                      }
    360          #endif
    361          #ifdef BDB_REPORTING  
    362                      bdb_RepMarkHasBindingInEndpointClusterArray(srcEpInt, clusterIds[index], BDBREPORTING_FALSE, BDBREPORTING_TRUE); 
   \                     ??bindAddEntry_15:
   \   000141                ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
   \   000141   7D01         MOV       R5,#0x1
   \   000143   7C00         MOV       R4,#0x0
   \   000145   85..82       MOV       DPL,?V4
   \   000148   85..83       MOV       DPH,?V5
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   FA           MOV       R2,A
   \   00014D   A3           INC       DPTR
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   FB           MOV       R3,A
   \   000150   A9..         MOV       R1,?V3
   \   000152   12....       LCALL     `??bdb_RepMarkHasBindingInEndpointClusterArray::`; Banked call to: bdb_RepMarkHasBindingInEndpointClusterArray
    363                      bindAdded = TRUE;
   \   000155   75..01       MOV       ?V1,#0x1
    364          #endif
    365                    }
   \                     ??bindAddEntry_16:
   \   000158   05..         INC       ?V0
   \                     ??bindAddEntry_13:
   \   00015A   E5..         MOV       A,?V0
   \   00015C   C3           CLR       C
   \   00015D   95..         SUBB      A,?V2
   \   00015F   4003         JC        $+5
   \   000161   02....       LJMP      ??bindAddEntry_7 & 0xFFFF
   \   000164   A8..         MOV       R0,?V0
   \   000166   E8           MOV       A,R0
   \   000167   28           ADD       A,R0
   \   000168   F8           MOV       R0,A
   \   000169   E4           CLR       A
   \   00016A   33           RLC       A
   \   00016B   F9           MOV       R1,A
   \   00016C   E5..         MOV       A,?V12
   \   00016E   28           ADD       A,R0
   \   00016F   F5..         MOV       ?V4,A
   \   000171   E5..         MOV       A,?V13
   \   000173   39           ADDC      A,R1
   \   000174   F5..         MOV       ?V5,A
   \   000176                ; Setup parameters for call to function bindIsClusterIDinList
   \   000176   85..82       MOV       DPL,?V4
   \   000179   F583         MOV       DPH,A
   \   00017B   E0           MOVX      A,@DPTR
   \   00017C   FC           MOV       R4,A
   \   00017D   A3           INC       DPTR
   \   00017E   E0           MOVX      A,@DPTR
   \   00017F   FD           MOV       R5,A
   \   000180   EE           MOV       A,R6
   \   000181   FA           MOV       R2,A
   \   000182   EF           MOV       A,R7
   \   000183   FB           MOV       R3,A
   \   000184   12....       LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   000187   E9           MOV       A,R1
   \   000188   70CE         JNZ       ??bindAddEntry_16
   \   00018A                ; Setup parameters for call to function bindAddClusterIdToList
   \   00018A   85..82       MOV       DPL,?V4
   \   00018D   85..83       MOV       DPH,?V5
   \   000190   E0           MOVX      A,@DPTR
   \   000191   FC           MOV       R4,A
   \   000192   A3           INC       DPTR
   \   000193   E0           MOVX      A,@DPTR
   \   000194   FD           MOV       R5,A
   \   000195   EE           MOV       A,R6
   \   000196   FA           MOV       R2,A
   \   000197   EF           MOV       A,R7
   \   000198   FB           MOV       R3,A
   \   000199   12....       LCALL     `??bindAddClusterIdToList::?relay`; Banked call to: bindAddClusterIdToList
   \   00019C   E9           MOV       A,R1
   \   00019D   6003         JZ        $+5
   \   00019F   02....       LJMP      ??bindAddEntry_14 & 0xFFFF
   \   0001A2   7E00         MOV       R6,#0x0
   \   0001A4   7F00         MOV       R7,#0x0
   \   0001A6   80B0         SJMP      ??bindAddEntry_16
    366                  }
    367                }
    368              }
    369              else
    370              {
    371                // Find an empty slot
    372                entry = bindFindEmpty();
   \                     ??bindAddEntry_12:
   \   0001A8                ; Setup parameters for call to function bindFindEmpty
   \   0001A8   12....       LCALL     `??bindFindEmpty::?relay`; Banked call to: bindFindEmpty
   \   0001AB   8A..         MOV       ?V8,R2
   \   0001AD   8B..         MOV       ?V9,R3
   \   0001AF   AE..         MOV       R6,?V8
   \   0001B1   AF..         MOV       R7,?V9
    373          
    374                // Check against the maximum number allowed
    375                if ( entry != NULL )
   \   0001B3   EA           MOV       A,R2
   \   0001B4   4F           ORL       A,R7
   \   0001B5   7003         JNZ       $+5
   \   0001B7   02....       LJMP      ??bindAddEntry_7 & 0xFFFF
    376                {
    377                  // Add new entry
    378                  entry->srcEP         = fields.srcEP;
   \   0001BA   8A82         MOV       DPL,R2
   \   0001BC   8B83         MOV       DPH,R3
   \   0001BE   E5..         MOV       A,?V3
   \   0001C0   F0           MOVX      @DPTR,A
    379                  entry->dstGroupMode  = fields.dstAddrMode;
   \   0001C1   A3           INC       DPTR
   \   0001C2   E5..         MOV       A,?V0
   \   0001C4   F0           MOVX      @DPTR,A
    380                  entry->dstIdx        = fields.dstIndex;
   \   0001C5   8A82         MOV       DPL,R2
   \   0001C7   8B83         MOV       DPH,R3
   \   0001C9   A3           INC       DPTR
   \   0001CA   A3           INC       DPTR
   \   0001CB   E5..         MOV       A,?V4
   \   0001CD   F0           MOVX      @DPTR,A
   \   0001CE   A3           INC       DPTR
   \   0001CF   E5..         MOV       A,?V5
   \   0001D1   F0           MOVX      @DPTR,A
    381                  entry->dstEP         = fields.dstEP;
   \   0001D2   8A82         MOV       DPL,R2
   \   0001D4   8B83         MOV       DPH,R3
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   A3           INC       DPTR
   \   0001D9   A3           INC       DPTR
   \   0001DA   E5..         MOV       A,?V7
   \   0001DC   F0           MOVX      @DPTR,A
    382          
    383                  if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
   \   0001DD   90....       MOV       DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   0001E0   E4           CLR       A
   \   0001E1   93           MOVC      A,@A+DPTR
   \   0001E2   C3           CLR       C
   \   0001E3   95..         SUBB      A,?V2
   \   0001E5   5004         JNC       ??bindAddEntry_17
    384                  {
    385                    numClusterIds = gMAX_BINDING_CLUSTER_IDS;
   \   0001E7   E4           CLR       A
   \   0001E8   93           MOVC      A,@A+DPTR
   \   0001E9   F5..         MOV       ?V2,A
    386                  }
    387                  
    388                  for(index = 0; index < numClusterIds; index++)
   \                     ??bindAddEntry_17:
   \   0001EB   75..00       MOV       ?V0,#0x0
   \   0001EE   805D         SJMP      ??bindAddEntry_18
    389                  {
    390                    // new bind added - notify application
    391                    bindData.clusterId = clusterIds[index];
   \                     ??bindAddEntry_19:
   \   0001F0   A8..         MOV       R0,?V0
   \   0001F2   E8           MOV       A,R0
   \   0001F3   28           ADD       A,R0
   \   0001F4   F8           MOV       R0,A
   \   0001F5   E4           CLR       A
   \   0001F6   33           RLC       A
   \   0001F7   F9           MOV       R1,A
   \   0001F8   E5..         MOV       A,?V12
   \   0001FA   28           ADD       A,R0
   \   0001FB   F5..         MOV       ?V4,A
   \   0001FD   E5..         MOV       A,?V13
   \   0001FF   39           ADDC      A,R1
   \   000200   F5..         MOV       ?V5,A
   \   000202   85..82       MOV       DPL,?V4
   \   000205   F583         MOV       DPH,A
   \   000207   E0           MOVX      A,@DPTR
   \   000208   F8           MOV       R0,A
   \   000209   A3           INC       DPTR
   \   00020A   E0           MOVX      A,@DPTR
   \   00020B   F9           MOV       R1,A
   \   00020C   740A         MOV       A,#0xa
   \   00020E   12....       LCALL     ?XSTACK_DISP0_8
   \   000211   E8           MOV       A,R0
   \   000212   F0           MOVX      @DPTR,A
   \   000213   A3           INC       DPTR
   \   000214   E9           MOV       A,R1
   \   000215   F0           MOVX      @DPTR,A
    392          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    393                    if ( pfnBindNotificationCB != NULL )
   \   000216   90....       MOV       DPTR,#pfnBindNotificationCB
   \   000219   E0           MOVX      A,@DPTR
   \   00021A   F8           MOV       R0,A
   \   00021B   A3           INC       DPTR
   \   00021C   E0           MOVX      A,@DPTR
   \   00021D   F9           MOV       R1,A
   \   00021E   E8           MOV       A,R0
   \   00021F   49           ORL       A,R1
   \   000220   6012         JZ        ??bindAddEntry_20
    394                    {
    395                      pfnBindNotificationCB( &bindData );
   \   000222                ; Setup parameters for indirect call
   \   000222   AA..         MOV       R2,?XSP + 0
   \   000224   AB..         MOV       R3,?XSP + 1
   \   000226   90....       MOV       DPTR,#pfnBindNotificationCB
   \   000229   E0           MOVX      A,@DPTR
   \   00022A   F8           MOV       R0,A
   \   00022B   A3           INC       DPTR
   \   00022C   E0           MOVX      A,@DPTR
   \   00022D   F583         MOV       DPH,A
   \   00022F   8882         MOV       DPL,R0
   \   000231   12....       LCALL     ?CALL_IND
    396                    }
    397          #endif
    398          #ifdef BDB_REPORTING   
    399                      bdb_RepMarkHasBindingInEndpointClusterArray(srcEpInt, clusterIds[index], BDBREPORTING_FALSE, BDBREPORTING_TRUE); 
   \                     ??bindAddEntry_20:
   \   000234                ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
   \   000234   7D01         MOV       R5,#0x1
   \   000236   7C00         MOV       R4,#0x0
   \   000238   85..82       MOV       DPL,?V4
   \   00023B   85..83       MOV       DPH,?V5
   \   00023E   E0           MOVX      A,@DPTR
   \   00023F   FA           MOV       R2,A
   \   000240   A3           INC       DPTR
   \   000241   E0           MOVX      A,@DPTR
   \   000242   FB           MOV       R3,A
   \   000243   A9..         MOV       R1,?V3
   \   000245   12....       LCALL     `??bdb_RepMarkHasBindingInEndpointClusterArray::`; Banked call to: bdb_RepMarkHasBindingInEndpointClusterArray
    400                      bindAdded = TRUE;
   \   000248   75..01       MOV       ?V1,#0x1
    401          #endif
    402                  }
   \   00024B   05..         INC       ?V0
   \                     ??bindAddEntry_18:
   \   00024D   E5..         MOV       A,?V0
   \   00024F   C3           CLR       C
   \   000250   95..         SUBB      A,?V2
   \   000252   409C         JC        ??bindAddEntry_19
    403          
    404                  entry->numClusterIds = numClusterIds;
   \   000254   8E82         MOV       DPL,R6
   \   000256   8F83         MOV       DPH,R7
   \   000258   A3           INC       DPTR
   \   000259   A3           INC       DPTR
   \   00025A   A3           INC       DPTR
   \   00025B   A3           INC       DPTR
   \   00025C   A3           INC       DPTR
   \   00025D   E5..         MOV       A,?V2
   \   00025F   F0           MOVX      @DPTR,A
    405          
    406                  osal_memcpy( entry->clusterIdList,
    407                               clusterIds,
    408                               numClusterIds * sizeof(uint16) );
   \   000260                ; Setup parameters for call to function osal_memcpy
   \   000260   85....       MOV       ?V4,?V12
   \   000263   85....       MOV       ?V5,?V13
   \   000266   75..00       MOV       ?V6,#0x0
   \   000269   78..         MOV       R0,#?V4
   \   00026B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00026E   AC..         MOV       R4,?V2
   \   000270   EC           MOV       A,R4
   \   000271   2C           ADD       A,R4
   \   000272   FC           MOV       R4,A
   \   000273   E4           CLR       A
   \   000274   33           RLC       A
   \   000275   FD           MOV       R5,A
   \   000276   EE           MOV       A,R6
   \   000277   2406         ADD       A,#0x6
   \   000279   FA           MOV       R2,A
   \   00027A   E4           CLR       A
   \   00027B   3F           ADDC      A,R7
   \   00027C   FB           MOV       R3,A
   \   00027D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000280   7403         MOV       A,#0x3
   \   000282   12....       LCALL     ?DEALLOC_XSTACK8
    409                }
    410              }
    411            }
    412          #ifdef BDB_REPORTING
    413            if(bindAdded == TRUE)
   \                     ??bindAddEntry_7:
   \   000285   7401         MOV       A,#0x1
   \   000287   65..         XRL       A,?V1
   \   000289   7003         JNZ       ??bindAddEntry_21
    414            {
    415              bdb_RepStartOrContinueReporting( );
   \   00028B                ; Setup parameters for call to function bdb_RepStartOrContinueReporting
   \   00028B   12....       LCALL     `??bdb_RepStartOrContinueReporting::?relay`; Banked call to: bdb_RepStartOrContinueReporting
    416            }
    417          #endif
    418            return entry;
   \                     ??bindAddEntry_21:
   \   00028E   EE           MOV       A,R6
   \   00028F   FA           MOV       R2,A
   \   000290   EF           MOV       A,R7
   \   000291   FB           MOV       R3,A
   \                     ??bindAddEntry_3:
   \   000292   740C         MOV       A,#0xc
   \   000294   12....       LCALL     ?DEALLOC_XSTACK8
   \   000297   7F0E         MOV       R7,#0xe
   \   000299   02....       LJMP      ?BANKED_LEAVE_XDATA
    419          }
    420          
    421          /*********************************************************************
    422           * @fn      bindRemoveEntry
    423           *
    424           * @brief   Removes a binding table entry.
    425           *
    426           * @param   pBind - pointer to binding table entry to delete
    427           *
    428           * @return  TRUE if Removed, FALSE if not
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          byte bindRemoveEntry( BindingEntry_t *pBind )
   \                     bindRemoveEntry:
    431          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    432            osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
   \   000004                ; Setup parameters for call to function osal_memset
   \   000004   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000007   E4           CLR       A
   \   000008   93           MOVC      A,@A+DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   7401         MOV       A,#0x1
   \   00000C   93           MOVC      A,@A+DPTR
   \   00000D   FD           MOV       R5,A
   \   00000E   79FF         MOV       R1,#-0x1
   \   000010   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    433          #ifdef BDB_REPORTING
    434            bdb_RepUpdateMarkBindings();
   \   000013                ; Setup parameters for call to function bdb_RepUpdateMarkBindings
   \   000013   12....       LCALL     `??bdb_RepUpdateMarkBindings::?relay`; Banked call to: bdb_RepUpdateMarkBindings
    435          #endif
    436            return ( TRUE );
   \   000016   7901         MOV       R1,#0x1
   \   000018   D083         POP       DPH
   \   00001A   D082         POP       DPL
   \   00001C   02....       LJMP      ?BRET
    437          }
    438          
    439          /*********************************************************************
    440           * @fn      bindIsClusterIDinList()
    441           *
    442           * @brief   Is the clusterID in the clusterID list?
    443           *
    444           * @param   enter - binding table entry
    445           * @param   clusterId  - Cluster ID to look for
    446           *
    447           * @return  TRUE if found, FALSE if not found
    448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindIsClusterIDinList:
    450          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    451            uint8 x;
    452          
    453            if ( entry != NULL )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   6037         JZ        ??bindIsClusterIDinList_0
    454            {
    455              for ( x = 0; x < entry->numClusterIds; x++ )
   \   000009   7E00         MOV       R6,#0x0
   \   00000B   8001         SJMP      ??bindIsClusterIDinList_1
   \                     ??bindIsClusterIDinList_2:
   \   00000D   0E           INC       R6
   \                     ??bindIsClusterIDinList_1:
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   EE           MOV       A,R6
   \   00001A   C3           CLR       C
   \   00001B   98           SUBB      A,R0
   \   00001C   5022         JNC       ??bindIsClusterIDinList_0
    456              {
    457                if ( entry->clusterIdList[x] == clusterId )
   \   00001E   EE           MOV       A,R6
   \   00001F   25E0         ADD       A,0xE0 /* A   */
   \   000021   F8           MOV       R0,A
   \   000022   E4           CLR       A
   \   000023   33           RLC       A
   \   000024   F9           MOV       R1,A
   \   000025   EA           MOV       A,R2
   \   000026   28           ADD       A,R0
   \   000027   F582         MOV       DPL,A
   \   000029   EB           MOV       A,R3
   \   00002A   39           ADDC      A,R1
   \   00002B   F583         MOV       DPH,A
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   6C           XRL       A,R4
   \   000035   7003         JNZ       ??bindIsClusterIDinList_3
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6D           XRL       A,R5
   \                     ??bindIsClusterIDinList_3:
   \   00003A   70D1         JNZ       ??bindIsClusterIDinList_2
    458                {
    459                  return ( TRUE );
   \   00003C   7901         MOV       R1,#0x1
   \   00003E   8002         SJMP      ??bindIsClusterIDinList_4
    460                }
    461              }
    462            }
    463          
    464            return ( FALSE );
   \                     ??bindIsClusterIDinList_0:
   \   000040   7900         MOV       R1,#0x0
   \                     ??bindIsClusterIDinList_4:
   \   000042   7F01         MOV       R7,#0x1
   \   000044   02....       LJMP      ?BANKED_LEAVE_XDATA
    465          }
    466          
    467          /*********************************************************************
    468           * @fn      bindRemoveClusterIdFromList()
    469           *
    470           * @brief   Removes a ClusterID from a list of ClusterIDs.
    471           *
    472           * @param   enter - binding table entry
    473           * @param   clusterId  - Cluster ID to look for
    474           *
    475           * @return  TRUE if there are at least 1 clusterID left, FALSE if none
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindRemoveClusterIdFromList:
    478          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    479            byte x;
    480            uint16 *listPtr;
    481            byte numIds;
    482          
    483          #ifdef BDB_REPORTING
    484            uint8 numRemoved = 0;
   \   000009   75..00       MOV       ?V2,#0x0
    485          #endif
    486            if ( entry )
   \   00000C   EA           MOV       A,R2
   \   00000D   4F           ORL       A,R7
   \   00000E   6075         JZ        ??bindRemoveClusterIdFromList_0
    487            {
    488              if ( entry->numClusterIds > 0 )
   \   000010   EA           MOV       A,R2
   \   000011   2405         ADD       A,#0x5
   \   000013   F8           MOV       R0,A
   \   000014   E4           CLR       A
   \   000015   3F           ADDC      A,R7
   \   000016   F9           MOV       R1,A
   \   000017   E8           MOV       A,R0
   \   000018   FA           MOV       R2,A
   \   000019   E9           MOV       A,R1
   \   00001A   FB           MOV       R3,A
   \   00001B   8882         MOV       DPL,R0
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V0,A
   \   000022   6061         JZ        ??bindRemoveClusterIdFromList_0
    489              {
    490                listPtr = entry->clusterIdList;
   \   000024   EE           MOV       A,R6
   \   000025   2406         ADD       A,#0x6
   \   000027   08           INC       R0
   \   000028   E4           CLR       A
   \   000029   3F           ADDC      A,R7
   \   00002A   F9           MOV       R1,A
    491                numIds = entry->numClusterIds;
   \   00002B   85....       MOV       ?V4,?V0
    492          
    493                // Copy the new list over
    494                for ( x = 0; x < numIds; x++ )
   \   00002E   75..00       MOV       ?V3,#0x0
   \   000031   8014         SJMP      ??bindRemoveClusterIdFromList_1
    495                {
    496                  if ( entry->clusterIdList[x] != clusterId )
    497                  {
    498                    *listPtr++ = entry->clusterIdList[x];
   \                     ??bindRemoveClusterIdFromList_2:
   \   000033   8882         MOV       DPL,R0
   \   000035   8983         MOV       DPH,R1
   \   000037   E5..         MOV       A,?V0
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   E5..         MOV       A,?V1
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   E8           MOV       A,R0
   \   00003F   2402         ADD       A,#0x2
   \   000041   F8           MOV       R0,A
   \   000042   5001         JNC       ??bindRemoveClusterIdFromList_3
   \   000044   09           INC       R1
    499                  }
   \                     ??bindRemoveClusterIdFromList_3:
   \   000045   05..         INC       ?V3
   \                     ??bindRemoveClusterIdFromList_1:
   \   000047   E5..         MOV       A,?V3
   \   000049   C3           CLR       C
   \   00004A   95..         SUBB      A,?V4
   \   00004C   5037         JNC       ??bindRemoveClusterIdFromList_0
   \   00004E   E5..         MOV       A,?V3
   \   000050   25E0         ADD       A,0xE0 /* A   */
   \   000052   F5..         MOV       ?V0,A
   \   000054   E4           CLR       A
   \   000055   33           RLC       A
   \   000056   F5..         MOV       ?V1,A
   \   000058   EE           MOV       A,R6
   \   000059   25..         ADD       A,?V0
   \   00005B   F582         MOV       DPL,A
   \   00005D   EF           MOV       A,R7
   \   00005E   35..         ADDC      A,?V1
   \   000060   F583         MOV       DPH,A
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F5..         MOV       ?V0,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F5..         MOV       ?V1,A
   \   00006F   EC           MOV       A,R4
   \   000070   65..         XRL       A,?V0
   \   000072   7003         JNZ       ??bindRemoveClusterIdFromList_4
   \   000074   ED           MOV       A,R5
   \   000075   65..         XRL       A,?V1
   \                     ??bindRemoveClusterIdFromList_4:
   \   000077   70BA         JNZ       ??bindRemoveClusterIdFromList_2
    500                  else
    501                  {
    502                    entry->numClusterIds--;
   \   000079   8A82         MOV       DPL,R2
   \   00007B   8B83         MOV       DPH,R3
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   14           DEC       A
   \   00007F   F0           MOVX      @DPTR,A
    503                    
    504          #ifdef BDB_REPORTING
    505                     numRemoved++;
   \   000080   05..         INC       ?V2
    506          #endif          
    507                    if ( entry->numClusterIds == 0 )
   \   000082   E0           MOVX      A,@DPTR
   \   000083   70C0         JNZ       ??bindRemoveClusterIdFromList_3
    508                    {
    509                      break;
    510                    }
    511                  }
    512                }
    513                
    514              }
    515            }
    516          
    517          #ifdef BDB_REPORTING
    518            if(numRemoved>0)
   \                     ??bindRemoveClusterIdFromList_0:
   \   000085   E5..         MOV       A,?V2
   \   000087   6003         JZ        ??bindRemoveClusterIdFromList_5
    519              bdb_RepUpdateMarkBindings();
   \   000089                ; Setup parameters for call to function bdb_RepUpdateMarkBindings
   \   000089   12....       LCALL     `??bdb_RepUpdateMarkBindings::?relay`; Banked call to: bdb_RepUpdateMarkBindings
    520          #endif 
    521            
    522            if ( entry && (entry->numClusterIds > 0) )
   \                     ??bindRemoveClusterIdFromList_5:
   \   00008C   EE           MOV       A,R6
   \   00008D   4F           ORL       A,R7
   \   00008E   6010         JZ        ??bindRemoveClusterIdFromList_6
   \   000090   8E82         MOV       DPL,R6
   \   000092   8F83         MOV       DPH,R7
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   6004         JZ        ??bindRemoveClusterIdFromList_6
    523            {
    524              return ( TRUE );
   \   00009C   7901         MOV       R1,#0x1
   \   00009E   8002         SJMP      ??bindRemoveClusterIdFromList_7
    525            }
    526            else
    527            {
    528              return ( FALSE );
   \                     ??bindRemoveClusterIdFromList_6:
   \   0000A0   7900         MOV       R1,#0x0
   \                     ??bindRemoveClusterIdFromList_7:
   \   0000A2   7F06         MOV       R7,#0x6
   \   0000A4   02....       LJMP      ?BANKED_LEAVE_XDATA
    529            }
    530          }
    531          
    532          /*********************************************************************
    533           * @fn      bindAddClusterIdToList()
    534           *
    535           * @brief   Adds a ClusterID to a list of ClusterIDs.
    536           *
    537           * @param   enter - binding table entry
    538           * @param   clusterId  - Cluster ID to Add
    539           *
    540           * @return  TRUE if Added, FALSE if not
    541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    542          byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindAddClusterIdToList:
    543          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    544            if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   603C         JZ        ??bindAddClusterIdToList_0
   \   000009   EA           MOV       A,R2
   \   00000A   2405         ADD       A,#0x5
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3B           ADDC      A,R3
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FE           MOV       R6,A
   \   000016   90....       MOV       DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000019   E4           CLR       A
   \   00001A   93           MOVC      A,@A+DPTR
   \   00001B   FF           MOV       R7,A
   \   00001C   EE           MOV       A,R6
   \   00001D   C3           CLR       C
   \   00001E   9F           SUBB      A,R7
   \   00001F   5024         JNC       ??bindAddClusterIdToList_0
    545            {
    546              // Add the new one
    547              entry->clusterIdList[entry->numClusterIds] = clusterId;
   \   000021   EE           MOV       A,R6
   \   000022   2E           ADD       A,R6
   \   000023   FE           MOV       R6,A
   \   000024   E4           CLR       A
   \   000025   33           RLC       A
   \   000026   FF           MOV       R7,A
   \   000027   EA           MOV       A,R2
   \   000028   2E           ADD       A,R6
   \   000029   F582         MOV       DPL,A
   \   00002B   EB           MOV       A,R3
   \   00002C   3F           ADDC      A,R7
   \   00002D   F583         MOV       DPH,A
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   EC           MOV       A,R4
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   ED           MOV       A,R5
   \   000039   F0           MOVX      @DPTR,A
    548              entry->numClusterIds++;
   \   00003A   8882         MOV       DPL,R0
   \   00003C   8983         MOV       DPH,R1
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   04           INC       A
   \   000040   F0           MOVX      @DPTR,A
    549              return ( TRUE );
   \   000041   7901         MOV       R1,#0x1
   \   000043   8002         SJMP      ??bindAddClusterIdToList_1
    550            }
    551            return ( FALSE );
   \                     ??bindAddClusterIdToList_0:
   \   000045   7900         MOV       R1,#0x0
   \                     ??bindAddClusterIdToList_1:
   \   000047   7F01         MOV       R7,#0x1
   \   000049   02....       LJMP      ?BANKED_LEAVE_XDATA
    552          }
    553          
    554          /*********************************************************************
    555           * @fn      bindFindExisting
    556           *
    557           * @brief   Finds an existing src/epint to dst/epint bind record
    558           *
    559           * @param   srcEpInt - Source Endpoint/Interface
    560           * @param   dstAddr - Destination address
    561           * @param   dstEpInt - Destination Endpoint/Interface
    562           *
    563           * @return  pointer to existing entry or NULL
    564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          BindingEntry_t *bindFindExisting( byte srcEpInt,
   \                     bindFindExisting:
    566                                            zAddrType_t *dstAddr, byte dstEpInt )
    567          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8C..         MOV       ?V1,R4
    568            uint16 dstIdx;
    569            bindTableIndex_t x;
    570          
    571            // Find the records in the assoc list
    572            if ( dstAddr->addrMode == AddrGroup )
   \   000009   EA           MOV       A,R2
   \   00000A   2408         ADD       A,#0x8
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3B           ADDC      A,R3
   \   00000F   F9           MOV       R1,A
   \   000010   E8           MOV       A,R0
   \   000011   FE           MOV       R6,A
   \   000012   E9           MOV       A,R1
   \   000013   FF           MOV       R7,A
   \   000014   8882         MOV       DPL,R0
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   6401         XRL       A,#0x1
   \   00001B   700B         JNZ       ??bindFindExisting_0
    573            {
    574              dstIdx = dstAddr->addr.shortAddr;
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   800B         SJMP      ??bindFindExisting_1
    575            }
    576            else
    577            {
    578              dstIdx = bindingAddrMgsHelperFind( dstAddr );
   \                     ??bindFindExisting_0:
   \   000028                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000028   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00002B   8A..         MOV       ?V2,R2
   \   00002D   8B..         MOV       ?V3,R3
   \   00002F   A8..         MOV       R0,?V2
   \   000031   A9..         MOV       R1,?V3
    579            }
    580          
    581            if ( dstIdx == INVALID_NODE_ADDR )
   \                     ??bindFindExisting_1:
   \   000033   74FE         MOV       A,#-0x2
   \   000035   68           XRL       A,R0
   \   000036   7003         JNZ       ??bindFindExisting_2
   \   000038   74FF         MOV       A,#-0x1
   \   00003A   69           XRL       A,R1
   \                     ??bindFindExisting_2:
   \   00003B   607A         JZ        ??bindFindExisting_3
    582            {
    583              return ( (BindingEntry_t *)NULL );
    584            }
    585          
    586            // Start at the beginning
    587            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   8001         SJMP      ??bindFindExisting_4
   \                     ??bindFindExisting_5:
   \   000041   0C           INC       R4
   \                     ??bindFindExisting_4:
   \   000042   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000045   E4           CLR       A
   \   000046   93           MOVC      A,@A+DPTR
   \   000047   FA           MOV       R2,A
   \   000048   EC           MOV       A,R4
   \   000049   C3           CLR       C
   \   00004A   9A           SUBB      A,R2
   \   00004B   506A         JNC       ??bindFindExisting_3
    588            {
    589              if ( (BindingTable[x].srcEP == srcEpInt) )
   \   00004D   EC           MOV       A,R4
   \   00004E   75F00E       MOV       B,#0xe
   \   000051   A4           MUL       AB
   \   000052   FA           MOV       R2,A
   \   000053   ABF0         MOV       R3,B
   \   000055   74..         MOV       A,#BindingTable & 0xff
   \   000057   2A           ADD       A,R2
   \   000058   FA           MOV       R2,A
   \   000059   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00005B   3B           ADDC      A,R3
   \   00005C   FB           MOV       R3,A
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   F583         MOV       DPH,A
   \   000061   E0           MOVX      A,@DPTR
   \   000062   65..         XRL       A,?V0
   \   000064   70DB         JNZ       ??bindFindExisting_5
    590              {
    591                if ( ((dstAddr->addrMode == AddrGroup)
    592                        && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    593                        && (dstIdx == BindingTable[x].dstIdx))
    594                   || ((dstAddr->addrMode != AddrGroup)
    595                       && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    596                       && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   6401         XRL       A,#0x1
   \   00006D   7019         JNZ       ??bindFindExisting_6
   \   00006F   8A82         MOV       DPL,R2
   \   000071   8B83         MOV       DPH,R3
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   6401         XRL       A,#0x1
   \   000077   700F         JNZ       ??bindFindExisting_6
   \   000079   8A82         MOV       DPL,R2
   \   00007B   8B83         MOV       DPH,R3
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   68           XRL       A,R0
   \   000081   7003         JNZ       ??bindFindExisting_7
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   69           XRL       A,R1
   \                     ??bindFindExisting_7:
   \   000086   6033         JZ        ??bindFindExisting_8
   \                     ??bindFindExisting_6:
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   6401         XRL       A,#0x1
   \   00008F   60B0         JZ        ??bindFindExisting_5
   \   000091   8A82         MOV       DPL,R2
   \   000093   8B83         MOV       DPH,R3
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   70A8         JNZ       ??bindFindExisting_5
   \   000099   8A82         MOV       DPL,R2
   \   00009B   8B83         MOV       DPH,R3
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   68           XRL       A,R0
   \   0000A1   7003         JNZ       ??bindFindExisting_9
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   69           XRL       A,R1
   \                     ??bindFindExisting_9:
   \   0000A6   7099         JNZ       ??bindFindExisting_5
   \   0000A8   8A82         MOV       DPL,R2
   \   0000AA   8B83         MOV       DPH,R3
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   65..         XRL       A,?V1
   \   0000B3   708C         JNZ       ??bindFindExisting_5
    597                {
    598                  return ( &BindingTable[x] );
   \   0000B5   8004         SJMP      ??bindFindExisting_8
    599                }
    600              }
    601            }
    602          
    603            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindExisting_3:
   \   0000B7   7A00         MOV       R2,#0x0
   \   0000B9   7B00         MOV       R3,#0x0
   \                     ??bindFindExisting_8:
   \   0000BB   7F04         MOV       R7,#0x4
   \   0000BD   02....       LJMP      ?BANKED_LEAVE_XDATA
    604          }
    605          
    606          /*********************************************************************
    607           * @fn       bindRemoveDev()
    608           *
    609           * @brief
    610           *
    611           *   Remove all bind(s) entries associated to a device address (destination).
    612           *   Updates binding table.
    613           *
    614           * @param   Addr - address of device to be removed from Binding Table
    615           *
    616           * @return  none
    617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    618          void bindRemoveDev( zAddrType_t *Addr )
   \                     bindRemoveDev:
    619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    620            uint16 idx;
    621            bindTableIndex_t x;
    622          
    623            if ( Addr->addrMode == AddrGroup )
   \   000005   EA           MOV       A,R2
   \   000006   2408         ADD       A,#0x8
   \   000008   F5..         MOV       ?V0,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F5..         MOV       ?V1,A
   \   00000E   85..82       MOV       DPL,?V0
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   6401         XRL       A,#0x1
   \   000016   700B         JNZ       ??bindRemoveDev_0
    624            {
    625              idx = Addr->addr.shortAddr;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FE           MOV       R6,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FF           MOV       R7,A
   \   000021   800B         SJMP      ??bindRemoveDev_1
    626            }
    627            else
    628            {
    629              idx = bindingAddrMgsHelperFind( Addr );
   \                     ??bindRemoveDev_0:
   \   000023                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000023   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000026   8A..         MOV       ?V2,R2
   \   000028   8B..         MOV       ?V3,R3
   \   00002A   AE..         MOV       R6,?V2
   \   00002C   AF..         MOV       R7,?V3
    630            }
    631          
    632            if ( idx == INVALID_NODE_ADDR )
   \                     ??bindRemoveDev_1:
   \   00002E   74FE         MOV       A,#-0x2
   \   000030   6E           XRL       A,R6
   \   000031   7003         JNZ       ??bindRemoveDev_2
   \   000033   74FF         MOV       A,#-0x1
   \   000035   6F           XRL       A,R7
   \                     ??bindRemoveDev_2:
   \   000036   7003         JNZ       $+5
   \   000038   02....       LJMP      ??bindRemoveDev_3 & 0xFFFF
    633            {
    634              return;
    635            }
    636          
    637            // Removes all the entries that match the destination Address/Index
    638            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00003B   75..00       MOV       ?V2,#0x0
   \   00003E   02....       LJMP      ??bindRemoveDev_4 & 0xFFFF
    639            {
    640              if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    641                                                   && (BindingTable[x].dstIdx == idx) ) ||
    642                   ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    643                                                   && (BindingTable[x].dstIdx == idx) ) )
   \                     ??bindRemoveDev_5:
   \   000041   85..82       MOV       DPL,?V0
   \   000044   85..83       MOV       DPH,?V1
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6401         XRL       A,#0x1
   \   00004A   702C         JNZ       ??bindRemoveDev_6
   \   00004C   E5..         MOV       A,?V2
   \   00004E   75F00E       MOV       B,#0xe
   \   000051   A4           MUL       AB
   \   000052   F8           MOV       R0,A
   \   000053   AAF0         MOV       R2,B
   \   000055   EA           MOV       A,R2
   \   000056   F9           MOV       R1,A
   \   000057   74..         MOV       A,#BindingTable & 0xff
   \   000059   28           ADD       A,R0
   \   00005A   F8           MOV       R0,A
   \   00005B   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00005D   39           ADDC      A,R1
   \   00005E   F9           MOV       R1,A
   \   00005F   8882         MOV       DPL,R0
   \   000061   F583         MOV       DPH,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   6401         XRL       A,#0x1
   \   000067   700F         JNZ       ??bindRemoveDev_6
   \   000069   8882         MOV       DPL,R0
   \   00006B   8983         MOV       DPH,R1
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   6E           XRL       A,R6
   \   000071   7003         JNZ       ??bindRemoveDev_7
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   6F           XRL       A,R7
   \                     ??bindRemoveDev_7:
   \   000076   6035         JZ        ??bindRemoveDev_8
   \                     ??bindRemoveDev_6:
   \   000078   85..82       MOV       DPL,?V0
   \   00007B   85..83       MOV       DPH,?V1
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   6401         XRL       A,#0x1
   \   000081   603E         JZ        ??bindRemoveDev_9
   \   000083   E5..         MOV       A,?V2
   \   000085   75F00E       MOV       B,#0xe
   \   000088   A4           MUL       AB
   \   000089   F8           MOV       R0,A
   \   00008A   AAF0         MOV       R2,B
   \   00008C   EA           MOV       A,R2
   \   00008D   F9           MOV       R1,A
   \   00008E   74..         MOV       A,#BindingTable & 0xff
   \   000090   28           ADD       A,R0
   \   000091   F8           MOV       R0,A
   \   000092   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000094   39           ADDC      A,R1
   \   000095   F9           MOV       R1,A
   \   000096   8882         MOV       DPL,R0
   \   000098   F583         MOV       DPH,A
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   7023         JNZ       ??bindRemoveDev_9
   \   00009E   8882         MOV       DPL,R0
   \   0000A0   8983         MOV       DPH,R1
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   6E           XRL       A,R6
   \   0000A6   7003         JNZ       ??bindRemoveDev_10
   \   0000A8   A3           INC       DPTR
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   6F           XRL       A,R7
   \                     ??bindRemoveDev_10:
   \   0000AB   7014         JNZ       ??bindRemoveDev_9
    644              {
    645                bindRemoveEntry( &BindingTable[x] );
   \                     ??bindRemoveDev_8:
   \   0000AD                ; Setup parameters for call to function bindRemoveEntry
   \   0000AD   E5..         MOV       A,?V2
   \   0000AF   75F00E       MOV       B,#0xe
   \   0000B2   A4           MUL       AB
   \   0000B3   F8           MOV       R0,A
   \   0000B4   EA           MOV       A,R2
   \   0000B5   F9           MOV       R1,A
   \   0000B6   74..         MOV       A,#BindingTable & 0xff
   \   0000B8   28           ADD       A,R0
   \   0000B9   FA           MOV       R2,A
   \   0000BA   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   0000BC   39           ADDC      A,R1
   \   0000BD   FB           MOV       R3,A
   \   0000BE   12....       LCALL     `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
    646              }
    647            }
   \                     ??bindRemoveDev_9:
   \   0000C1   05..         INC       ?V2
   \                     ??bindRemoveDev_4:
   \   0000C3   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000C6   E4           CLR       A
   \   0000C7   93           MOVC      A,@A+DPTR
   \   0000C8   F8           MOV       R0,A
   \   0000C9   E5..         MOV       A,?V2
   \   0000CB   C3           CLR       C
   \   0000CC   98           SUBB      A,R0
   \   0000CD   5003         JNC       $+5
   \   0000CF   02....       LJMP      ??bindRemoveDev_5 & 0xFFFF
    648          
    649            // If this is the last Bind Entry for that idx then clear BINDING
    650            // user from Address Manager
    651            bindAddressClear( idx );
   \   0000D2                ; Setup parameters for call to function bindAddressClear
   \   0000D2   EE           MOV       A,R6
   \   0000D3   FA           MOV       R2,A
   \   0000D4   EF           MOV       A,R7
   \   0000D5   FB           MOV       R3,A
   \   0000D6   12....       LCALL     `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    652          }
   \                     ??bindRemoveDev_3:
   \   0000D9   7F04         MOV       R7,#0x4
   \   0000DB   02....       LJMP      ?BANKED_LEAVE_XDATA
    653          
    654          /*********************************************************************
    655           * @fn       bindRemoveSrcDev()
    656           *
    657           * @brief
    658           *
    659           *   Remove binds(s) associated to device address (source).
    660           *   Updates binding table.
    661           *
    662           * @param   ep - endpoint to remove, 0xFF is all endpoints
    663           *
    664           * @return  none
    665           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    666          void bindRemoveSrcDev( uint8 ep )
   \                     bindRemoveSrcDev:
    667          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    668            bindTableIndex_t x;
    669          
    670            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000007   75..00       MOV       ?V0,#0x0
   \   00000A   8037         SJMP      ??bindRemoveSrcDev_0
    671            {
    672              if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
   \                     ??bindRemoveSrcDev_1:
   \   00000C   E5..         MOV       A,?V0
   \   00000E   75F00E       MOV       B,#0xe
   \   000011   A4           MUL       AB
   \   000012   F8           MOV       R0,A
   \   000013   A9F0         MOV       R1,B
   \   000015   74..         MOV       A,#BindingTable & 0xff
   \   000017   28           ADD       A,R0
   \   000018   FA           MOV       R2,A
   \   000019   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00001B   39           ADDC      A,R1
   \   00001C   FB           MOV       R3,A
   \   00001D   74FF         MOV       A,#-0x1
   \   00001F   65..         XRL       A,?V1
   \   000021   6009         JZ        ??bindRemoveSrcDev_2
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   E0           MOVX      A,@DPTR
   \   000028   65..         XRL       A,?V1
   \   00002A   7015         JNZ       ??bindRemoveSrcDev_3
    673              {
    674                uint16 idx = BindingTable[x].dstIdx;
   \                     ??bindRemoveSrcDev_2:
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FE           MOV       R6,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FF           MOV       R7,A
    675          
    676                bindRemoveEntry( &BindingTable[x] );
   \   000037                ; Setup parameters for call to function bindRemoveEntry
   \   000037   12....       LCALL     `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
    677          
    678                // If this is the last Bind Entry for that idx then clear BINDING
    679                // user from Address Manager
    680                bindAddressClear( idx );
   \   00003A                ; Setup parameters for call to function bindAddressClear
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    681              }
    682            }
   \                     ??bindRemoveSrcDev_3:
   \   000041   05..         INC       ?V0
   \                     ??bindRemoveSrcDev_0:
   \   000043   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000046   E4           CLR       A
   \   000047   93           MOVC      A,@A+DPTR
   \   000048   F8           MOV       R0,A
   \   000049   E5..         MOV       A,?V0
   \   00004B   C3           CLR       C
   \   00004C   98           SUBB      A,R0
   \   00004D   40BD         JC        ??bindRemoveSrcDev_1
    683          }
   \   00004F   7F02         MOV       R7,#0x2
   \   000051   02....       LJMP      ?BANKED_LEAVE_XDATA
    684          
    685          /*********************************************************************
    686           * @fn          bindNumBoundTo
    687           *
    688           * @brief       Calculate the number items this device is bound to.
    689           *              When srcMode is set to TRUE, discard what value devAddr
    690           *              has, it returns number count bound to the local dev.
    691           *
    692           * @param       devAddr - device Address
    693           * @param       devEP - endpoint
    694           * @param       srcMode - TRUE - assume devHandle is a source address
    695           *                        FALSE - destination address
    696           *
    697           * @return      status
    698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
   \                     bindNumBoundTo:
    700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
   \   000007   8C..         MOV       ?V2,R4
    701            BindingEntry_t *pBind;
    702            uint16 idx;
    703            byte   num;
    704            bindTableIndex_t x;
    705          
    706            // Init
    707            num = 0;
   \   000009   75..00       MOV       ?V0,#0x0
    708          
    709            if ( devAddr->addrMode == AddrGroup )
   \   00000C   EA           MOV       A,R2
   \   00000D   2408         ADD       A,#0x8
   \   00000F   F8           MOV       R0,A
   \   000010   E4           CLR       A
   \   000011   3B           ADDC      A,R3
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
   \   000017   8882         MOV       DPL,R0
   \   000019   F583         MOV       DPH,A
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6401         XRL       A,#0x1
   \   00001E   700B         JNZ       ??bindNumBoundTo_0
    710            {
    711              idx = devAddr->addr.shortAddr;
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   E0           MOVX      A,@DPTR
   \   000025   FA           MOV       R2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FB           MOV       R3,A
   \   000029   8003         SJMP      ??bindNumBoundTo_1
    712            }
    713            else
    714            {
    715              idx = bindingAddrMgsHelperFind( devAddr );
   \                     ??bindNumBoundTo_0:
   \   00002B                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00002B   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
    716            }
    717          
    718            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindNumBoundTo_1:
   \   00002E   7C00         MOV       R4,#0x0
   \   000030   8050         SJMP      ??bindNumBoundTo_2
    719            {
    720              pBind = &BindingTable[x];
    721              if ( srcMode )
    722              {
    723                if ( pBind->srcEP == devEpInt )
    724                {
    725                  num++;
    726                }
    727              }
    728              else
    729              {
    730                if ( ((devAddr->addrMode == AddrGroup)
    731                        && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
    732                    || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
    733                                          && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
   \                     ??bindNumBoundTo_3:
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FD           MOV       R5,A
   \   000038   7401         MOV       A,#0x1
   \   00003A   6D           XRL       A,R5
   \   00003B   7019         JNZ       ??bindNumBoundTo_4
   \   00003D   8882         MOV       DPL,R0
   \   00003F   8983         MOV       DPH,R1
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6401         XRL       A,#0x1
   \   000045   700F         JNZ       ??bindNumBoundTo_4
   \   000047   8882         MOV       DPL,R0
   \   000049   8983         MOV       DPH,R1
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   6A           XRL       A,R2
   \   00004F   7003         JNZ       ??bindNumBoundTo_5
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   6B           XRL       A,R3
   \                     ??bindNumBoundTo_5:
   \   000054   6029         JZ        ??bindNumBoundTo_6
   \                     ??bindNumBoundTo_4:
   \   000056   7401         MOV       A,#0x1
   \   000058   6D           XRL       A,R5
   \   000059   6026         JZ        ??bindNumBoundTo_7
   \   00005B   8882         MOV       DPL,R0
   \   00005D   8983         MOV       DPH,R1
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   701E         JNZ       ??bindNumBoundTo_7
   \   000063   8882         MOV       DPL,R0
   \   000065   8983         MOV       DPH,R1
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   6A           XRL       A,R2
   \   00006B   7003         JNZ       ??bindNumBoundTo_8
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   6B           XRL       A,R3
   \                     ??bindNumBoundTo_8:
   \   000070   700F         JNZ       ??bindNumBoundTo_7
   \   000072   8882         MOV       DPL,R0
   \   000074   8983         MOV       DPH,R1
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   65..         XRL       A,?V1
   \   00007D   7002         JNZ       ??bindNumBoundTo_7
    734                {
    735                  num++;
   \                     ??bindNumBoundTo_6:
   \   00007F   05..         INC       ?V0
    736                }
    737              }
   \                     ??bindNumBoundTo_7:
   \   000081   0C           INC       R4
   \                     ??bindNumBoundTo_2:
   \   000082   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000085   E4           CLR       A
   \   000086   93           MOVC      A,@A+DPTR
   \   000087   F8           MOV       R0,A
   \   000088   EC           MOV       A,R4
   \   000089   C3           CLR       C
   \   00008A   98           SUBB      A,R0
   \   00008B   501F         JNC       ??bindNumBoundTo_9
   \   00008D   EC           MOV       A,R4
   \   00008E   75F00E       MOV       B,#0xe
   \   000091   A4           MUL       AB
   \   000092   F8           MOV       R0,A
   \   000093   A9F0         MOV       R1,B
   \   000095   74..         MOV       A,#BindingTable & 0xff
   \   000097   28           ADD       A,R0
   \   000098   F8           MOV       R0,A
   \   000099   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00009B   39           ADDC      A,R1
   \   00009C   F9           MOV       R1,A
   \   00009D   E5..         MOV       A,?V2
   \   00009F   6091         JZ        ??bindNumBoundTo_3
   \   0000A1   8882         MOV       DPL,R0
   \   0000A3   8983         MOV       DPH,R1
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   65..         XRL       A,?V1
   \   0000A8   70D7         JNZ       ??bindNumBoundTo_7
   \   0000AA   80D3         SJMP      ??bindNumBoundTo_6
    738            }
    739          
    740            return num;
   \                     ??bindNumBoundTo_9:
   \   0000AC   A9..         MOV       R1,?V0
   \   0000AE   7F06         MOV       R7,#0x6
   \   0000B0   02....       LJMP      ?BANKED_LEAVE_XDATA
    741          }
    742          
    743          /*********************************************************************
    744           * @fn          bindNumReflections
    745           *
    746           * @brief       Counts the number of reflections needed for a
    747           *              endpoint and cluster ID combo.
    748           *
    749           * @param       ep - source endpoint
    750           * @param       clusterID - matching clusterID
    751           *
    752           * @return      number of reflections needed.
    753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    754          uint16 bindNumReflections( uint8 ep, uint16 clusterID )
   \                     bindNumReflections:
    755          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
    756            bindTableIndex_t x;
    757            BindingEntry_t *pBind;
    758            uint16 cnt = 0;
   \   00000B   7E00         MOV       R6,#0x0
   \   00000D   7F00         MOV       R7,#0x0
    759            uint8 bindEP;
    760          
    761            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00000F   75..00       MOV       ?V2,#0x0
   \   000012   802D         SJMP      ??bindNumReflections_0
    762            {
    763              pBind = &BindingTable[x];
   \                     ??bindNumReflections_1:
   \   000014   E5..         MOV       A,?V2
   \   000016   75F00E       MOV       B,#0xe
   \   000019   A4           MUL       AB
   \   00001A   F8           MOV       R0,A
   \   00001B   A9F0         MOV       R1,B
   \   00001D   74..         MOV       A,#BindingTable & 0xff
   \   00001F   28           ADD       A,R0
   \   000020   F582         MOV       DPL,A
   \   000022   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000024   39           ADDC      A,R1
   \   000025   F583         MOV       DPH,A
    764              bindEP = pBind->srcEP;
    765          
    766              if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
   \   000027   E0           MOVX      A,@DPTR
   \   000028   65..         XRL       A,?V3
   \   00002A   7013         JNZ       ??bindNumReflections_2
   \   00002C                ; Setup parameters for call to function bindIsClusterIDinList
   \   00002C   AC..         MOV       R4,?V0
   \   00002E   AD..         MOV       R5,?V1
   \   000030   AA82         MOV       R2,DPL
   \   000032   AB83         MOV       R3,DPH
   \   000034   12....       LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   000037   E9           MOV       A,R1
   \   000038   6005         JZ        ??bindNumReflections_2
    767              {
    768                cnt++;
   \   00003A   0E           INC       R6
   \   00003B   EE           MOV       A,R6
   \   00003C   7001         JNZ       ??bindNumReflections_2
   \   00003E   0F           INC       R7
    769              }
    770            }
   \                     ??bindNumReflections_2:
   \   00003F   05..         INC       ?V2
   \                     ??bindNumReflections_0:
   \   000041   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000044   E4           CLR       A
   \   000045   93           MOVC      A,@A+DPTR
   \   000046   F8           MOV       R0,A
   \   000047   E5..         MOV       A,?V2
   \   000049   C3           CLR       C
   \   00004A   98           SUBB      A,R0
   \   00004B   40C7         JC        ??bindNumReflections_1
    771          
    772            return ( cnt );
   \   00004D   EE           MOV       A,R6
   \   00004E   FA           MOV       R2,A
   \   00004F   EF           MOV       A,R7
   \   000050   FB           MOV       R3,A
   \   000051   7F04         MOV       R7,#0x4
   \   000053   02....       LJMP      ?BANKED_LEAVE_XDATA
    773          }
    774          
    775          /*********************************************************************
    776           * @fn          bindFind
    777           *
    778           * @brief       Finds the binding entry for the source address, endpoint
    779           *              and cluster ID passed in as a parameter.
    780           *
    781           * @param       ep - source endpoint
    782           * @param       clusterID - matching clusterID
    783           * @param       skip - number of matches to skip before returning
    784           *
    785           * @return      pointer to the binding table entry, NULL if not found
    786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
   \                     bindFind:
    788          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   8C..         MOV       ?V5,R4
    789            BindingEntry_t *pBind;
    790            byte skipped = 0;
   \   00000D   75..00       MOV       ?V2,#0x0
    791            bindTableIndex_t x;
    792          
    793            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000010   75..00       MOV       ?V3,#0x0
   \   000013   8004         SJMP      ??bindFind_0
    794            {
    795              pBind = &BindingTable[x];
    796          
    797              if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
    798              {
    799                if ( skipped < skipping )
    800                {
    801                  skipped++;
   \                     ??bindFind_1:
   \   000015   05..         INC       ?V2
    802                }
   \                     ??bindFind_2:
   \   000017   05..         INC       ?V3
   \                     ??bindFind_0:
   \   000019   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001C   E4           CLR       A
   \   00001D   93           MOVC      A,@A+DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   E5..         MOV       A,?V3
   \   000021   C3           CLR       C
   \   000022   98           SUBB      A,R0
   \   000023   5035         JNC       ??bindFind_3
   \   000025   E5..         MOV       A,?V3
   \   000027   75F00E       MOV       B,#0xe
   \   00002A   A4           MUL       AB
   \   00002B   F8           MOV       R0,A
   \   00002C   A9F0         MOV       R1,B
   \   00002E   74..         MOV       A,#BindingTable & 0xff
   \   000030   28           ADD       A,R0
   \   000031   FE           MOV       R6,A
   \   000032   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000034   39           ADDC      A,R1
   \   000035   FF           MOV       R7,A
   \   000036   8E82         MOV       DPL,R6
   \   000038   F583         MOV       DPH,A
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   65..         XRL       A,?V4
   \   00003D   70D8         JNZ       ??bindFind_2
   \   00003F                ; Setup parameters for call to function bindIsClusterIDinList
   \   00003F   AC..         MOV       R4,?V0
   \   000041   AD..         MOV       R5,?V1
   \   000043   EE           MOV       A,R6
   \   000044   FA           MOV       R2,A
   \   000045   EF           MOV       A,R7
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   00004A   E9           MOV       A,R1
   \   00004B   60CA         JZ        ??bindFind_2
   \   00004D   E5..         MOV       A,?V2
   \   00004F   C3           CLR       C
   \   000050   95..         SUBB      A,?V5
   \   000052   40C1         JC        ??bindFind_1
    803                else
    804                {
    805                  return ( pBind );
   \   000054   EE           MOV       A,R6
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   FB           MOV       R3,A
   \   000058   8004         SJMP      ??bindFind_4
    806                }
    807              }
    808            }
    809          
    810            return ( (BindingEntry_t *)NULL );
   \                     ??bindFind_3:
   \   00005A   7A00         MOV       R2,#0x0
   \   00005C   7B00         MOV       R3,#0x0
   \                     ??bindFind_4:
   \   00005E   7F06         MOV       R7,#0x6
   \   000060   02....       LJMP      ?BANKED_LEAVE_XDATA
    811          }
    812          
    813          /*********************************************************************
    814           * @fn      bindAddressClear
    815           *
    816           * @brief   Lookup a binding entry by specific Idx, if none is found
    817           *          clears the BINDING user from Address Manager.
    818           *
    819           * @param   dstIdx - Source Address Manager Index
    820           *
    821           * @return  none
    822           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    823          void bindAddressClear( uint16 dstIdx )
   \                     bindAddressClear:
    824          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    825            bindTableIndex_t i;
    826          
    827            if ( dstIdx != INVALID_NODE_ADDR )
   \   000009   74FE         MOV       A,#-0x2
   \   00000B   6A           XRL       A,R2
   \   00000C   7003         JNZ       ??bindAddressClear_0
   \   00000E   74FF         MOV       A,#-0x1
   \   000010   6B           XRL       A,R3
   \                     ??bindAddressClear_0:
   \   000011   6060         JZ        ??bindAddressClear_1
    828            {
    829              // Looks for a specific Idx
    830              for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
   \   000013   7C00         MOV       R4,#0x0
   \   000015   8001         SJMP      ??bindAddressClear_2
   \                     ??bindAddressClear_3:
   \   000017   0C           INC       R4
   \                     ??bindAddressClear_2:
   \   000018   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001B   E4           CLR       A
   \   00001C   93           MOVC      A,@A+DPTR
   \   00001D   F8           MOV       R0,A
   \   00001E   EC           MOV       A,R4
   \   00001F   C3           CLR       C
   \   000020   98           SUBB      A,R0
   \   000021   502E         JNC       ??bindAddressClear_4
    831              {
    832                if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
    833                     ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
    834                     ( BindingTable[i].dstIdx == dstIdx ) )
   \   000023   EC           MOV       A,R4
   \   000024   75F00E       MOV       B,#0xe
   \   000027   A4           MUL       AB
   \   000028   F8           MOV       R0,A
   \   000029   A9F0         MOV       R1,B
   \   00002B   74..         MOV       A,#BindingTable & 0xff
   \   00002D   28           ADD       A,R0
   \   00002E   F8           MOV       R0,A
   \   00002F   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000031   39           ADDC      A,R1
   \   000032   F9           MOV       R1,A
   \   000033   8882         MOV       DPL,R0
   \   000035   F583         MOV       DPH,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FD           MOV       R5,A
   \   00003A   7401         MOV       A,#0x1
   \   00003C   6D           XRL       A,R5
   \   00003D   60D8         JZ        ??bindAddressClear_3
   \   00003F   ED           MOV       A,R5
   \   000040   70D5         JNZ       ??bindAddressClear_3
   \   000042   8882         MOV       DPL,R0
   \   000044   8983         MOV       DPH,R1
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   6A           XRL       A,R2
   \   00004A   7003         JNZ       ??bindAddressClear_5
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   6B           XRL       A,R3
   \                     ??bindAddressClear_5:
   \   00004F   70C6         JNZ       ??bindAddressClear_3
    835                {
    836                  break;  // found at least one
    837                }
    838              }
    839          
    840              if ( i == gNWK_MAX_BINDING_ENTRIES )
   \                     ??bindAddressClear_4:
   \   000051   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000054   E4           CLR       A
   \   000055   93           MOVC      A,@A+DPTR
   \   000056   6C           XRL       A,R4
   \   000057   701A         JNZ       ??bindAddressClear_1
    841              {
    842                // No binding entry is associated with dstIdx.
    843                // Remove user binding bit from the address manager entry corresponding to dstIdx.
    844                AddrMgrEntry_t addrEntry;
    845          
    846                addrEntry.user = ADDRMGR_USER_BINDING;
   \   000059   85..82       MOV       DPL,?XSP + 0
   \   00005C   85..83       MOV       DPH,?XSP + 1
   \   00005F   7404         MOV       A,#0x4
   \   000061   F0           MOVX      @DPTR,A
    847                addrEntry.index = dstIdx;
   \   000062   740B         MOV       A,#0xb
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   EA           MOV       A,R2
   \   000068   F0           MOVX      @DPTR,A
   \   000069   A3           INC       DPTR
   \   00006A   EB           MOV       A,R3
   \   00006B   F0           MOVX      @DPTR,A
    848          
    849                AddrMgrEntryRelease( &addrEntry );
   \   00006C                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00006C   AA..         MOV       R2,?XSP + 0
   \   00006E   AB..         MOV       R3,?XSP + 1
   \   000070   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
    850              }
    851            }
    852          }
   \                     ??bindAddressClear_1:
   \   000073   740D         MOV       A,#0xd
   \   000075   12....       LCALL     ?DEALLOC_XSTACK8
   \   000078   D083         POP       DPH
   \   00007A   D082         POP       DPL
   \   00007C   02....       LJMP      ?BRET
    853          
    854          /*********************************************************************
    855           * @fn          bindUpdateAddr
    856           *
    857           * @brief       Update the network address in the binding table.
    858           *
    859           * @param       oldAddr - old network address
    860           * @param       newAddr - new network address
    861           *
    862           * @return      none
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
   \                     bindUpdateAddr:
    865          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    866            uint16 oldIdx;
    867            uint16 newIdx;
    868            zAddrType_t addr;
    869            bindTableIndex_t x;
    870            BindingEntry_t *pBind;
    871          
    872            addr.addrMode = Addr16Bit;
   \   00000E   7408         MOV       A,#0x8
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   7402         MOV       A,#0x2
   \   000015   F0           MOVX      @DPTR,A
    873            addr.addr.shortAddr = oldAddr;
   \   000016   85..82       MOV       DPL,?XSP + 0
   \   000019   85..83       MOV       DPH,?XSP + 1
   \   00001C   EA           MOV       A,R2
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   EB           MOV       A,R3
   \   000020   F0           MOVX      @DPTR,A
    874            oldIdx = bindingAddrMgsHelperFind( &addr );
   \   000021                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000021   AA..         MOV       R2,?XSP + 0
   \   000023   AB..         MOV       R3,?XSP + 1
   \   000025   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000028   8A..         MOV       ?V0,R2
   \   00002A   8B..         MOV       ?V1,R3
    875            addr.addr.shortAddr = newAddr;
   \   00002C   85..82       MOV       DPL,?XSP + 0
   \   00002F   85..83       MOV       DPH,?XSP + 1
   \   000032   EE           MOV       A,R6
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   EF           MOV       A,R7
   \   000036   F0           MOVX      @DPTR,A
    876            newIdx = bindingAddrMgsHelperFind( &addr );
   \   000037                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000037   AA..         MOV       R2,?XSP + 0
   \   000039   AB..         MOV       R3,?XSP + 1
   \   00003B   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00003E   8A..         MOV       ?V2,R2
    877          
    878            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000040   7A00         MOV       R2,#0x0
   \   000042   8031         SJMP      ??bindUpdateAddr_0
    879            {
    880              pBind = &BindingTable[x];
   \                     ??bindUpdateAddr_1:
   \   000044   EA           MOV       A,R2
   \   000045   75F00E       MOV       B,#0xe
   \   000048   A4           MUL       AB
   \   000049   F8           MOV       R0,A
   \   00004A   A9F0         MOV       R1,B
   \   00004C   74..         MOV       A,#BindingTable & 0xff
   \   00004E   28           ADD       A,R0
   \   00004F   F8           MOV       R0,A
   \   000050   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000052   39           ADDC      A,R1
   \   000053   F9           MOV       R1,A
    881          
    882              if ( pBind->dstIdx == oldIdx )
   \   000054   E8           MOV       A,R0
   \   000055   2402         ADD       A,#0x2
   \   000057   F8           MOV       R0,A
   \   000058   5001         JNC       ??bindUpdateAddr_2
   \   00005A   09           INC       R1
   \                     ??bindUpdateAddr_2:
   \   00005B   F582         MOV       DPL,A
   \   00005D   8983         MOV       DPH,R1
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   65..         XRL       A,?V0
   \   000062   7004         JNZ       ??bindUpdateAddr_3
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   65..         XRL       A,?V1
   \                     ??bindUpdateAddr_3:
   \   000068   700A         JNZ       ??bindUpdateAddr_4
    883              {
    884                pBind->dstIdx = newIdx;
   \   00006A   8882         MOV       DPL,R0
   \   00006C   8983         MOV       DPH,R1
   \   00006E   E5..         MOV       A,?V2
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   EB           MOV       A,R3
   \   000073   F0           MOVX      @DPTR,A
    885              }
    886            }
   \                     ??bindUpdateAddr_4:
   \   000074   0A           INC       R2
   \                     ??bindUpdateAddr_0:
   \   000075   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000078   E4           CLR       A
   \   000079   93           MOVC      A,@A+DPTR
   \   00007A   F8           MOV       R0,A
   \   00007B   EA           MOV       A,R2
   \   00007C   C3           CLR       C
   \   00007D   98           SUBB      A,R0
   \   00007E   40C4         JC        ??bindUpdateAddr_1
    887          }
   \   000080   7409         MOV       A,#0x9
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   7F04         MOV       R7,#0x4
   \   000087   02....       LJMP      ?BANKED_LEAVE_XDATA
    888          
    889          /*********************************************************************
    890           * @fn      bindingAddrMgsHelperFind
    891           *
    892           * @brief   Turns an zAddrType_t to an Addr Manager index
    893           *
    894           * @param   addr - zAddrType_t
    895           *
    896           * @return  INVALID_NODE_ADDR if not found, otherwise an index
    897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    898          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
   \                     bindingAddrMgsHelperFind:
    899          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    900            AddrMgrEntry_t entry;
    901          
    902            // Resolve addresses with the address manager
    903            entry.user = ADDRMGR_USER_BINDING;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   7404         MOV       A,#0x4
   \   000011   F0           MOVX      @DPTR,A
    904            if ( addr->addrMode == Addr16Bit )
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6402         XRL       A,#0x2
   \   000021   701C         JNZ       ??bindingAddrMgsHelperFind_0
    905            {
    906              entry.nwkAddr = addr->addr.shortAddr;
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F9           MOV       R1,A
   \   00002C   7401         MOV       A,#0x1
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E8           MOV       A,R0
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   E9           MOV       A,R1
   \   000035   F0           MOVX      @DPTR,A
    907              AddrMgrEntryLookupNwk( &entry );
   \   000036                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000036   AA..         MOV       R2,?XSP + 0
   \   000038   AB..         MOV       R3,?XSP + 1
   \   00003A   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00003D   8017         SJMP      ??bindingAddrMgsHelperFind_1
    908            }
    909            else
    910            {
    911              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \                     ??bindingAddrMgsHelperFind_0:
   \   00003F                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00003F   EA           MOV       A,R2
   \   000040   FC           MOV       R4,A
   \   000041   EB           MOV       A,R3
   \   000042   FD           MOV       R5,A
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   AA82         MOV       R2,DPL
   \   00004A   AB83         MOV       R3,DPH
   \   00004C   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    912              AddrMgrEntryLookupExt( &entry );
   \   00004F                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00004F   AA..         MOV       R2,?XSP + 0
   \   000051   AB..         MOV       R3,?XSP + 1
   \   000053   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
    913            }
    914          
    915            return ( entry.index );
   \                     ??bindingAddrMgsHelperFind_1:
   \   000056   740B         MOV       A,#0xb
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   FA           MOV       R2,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   FB           MOV       R3,A
   \   000060   740D         MOV       A,#0xd
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
   \   000065   D083         POP       DPH
   \   000067   D082         POP       DPL
   \   000069   02....       LJMP      ?BRET
    916          }
    917          
    918          /*********************************************************************
    919           * @fn      bindingAddrMgsHelperConvert
    920           *
    921           * @brief   Convert an index into an zAddrType_t
    922           *
    923           * @param   idx -
    924           * @param   addr - zAddrType_t
    925           *
    926           * @return  TRUE if found, FALSE if not
    927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
   \                     bindingAddrMgsHelperConvert:
    929          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    930            AddrMgrEntry_t entry;
    931            uint8 stat;
    932          
    933            // Resolve addresses with the address manager
    934            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7404         MOV       A,#0x4
   \   000016   F0           MOVX      @DPTR,A
    935            entry.index = idx;
   \   000017   740B         MOV       A,#0xb
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   EA           MOV       A,R2
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   EB           MOV       A,R3
   \   000020   F0           MOVX      @DPTR,A
    936            stat = AddrMgrEntryGet( &entry );
   \   000021                ; Setup parameters for call to function AddrMgrEntryGet
   \   000021   AA..         MOV       R2,?XSP + 0
   \   000023   AB..         MOV       R3,?XSP + 1
   \   000025   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000028   E9           MOV       A,R1
   \   000029   F5..         MOV       ?V0,A
    937            if ( stat )
   \   00002B   601D         JZ        ??bindingAddrMgsHelperConvert_0
    938            {
    939              addr->addrMode = Addr64Bit;
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   7403         MOV       A,#0x3
   \   00003B   F0           MOVX      @DPTR,A
    940              osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
   \   00003C                ; Setup parameters for call to function sAddrExtCpy
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   AC82         MOV       R4,DPL
   \   000041   AD83         MOV       R5,DPH
   \   000043   EE           MOV       A,R6
   \   000044   FA           MOV       R2,A
   \   000045   EF           MOV       A,R7
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    941            }
    942          
    943            return ( stat );
   \                     ??bindingAddrMgsHelperConvert_0:
   \   00004A   A9..         MOV       R1,?V0
   \   00004C   740D         MOV       A,#0xd
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000051   7F01         MOV       R7,#0x1
   \   000053   02....       LJMP      ?BANKED_LEAVE_XDATA
    944          }
    945          
    946          /*********************************************************************
    947           * @fn      bindingAddrMgsHelperConvertShort
    948           *
    949           * @brief   Convert an index into a short address
    950           *
    951           * @param   idx -
    952           *
    953           * @return  INVALID_NODE_ADDR if not available, otherwise the short address
    954           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    955          uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
   \                     bindingAddrMgsHelperConvertShort:
    956          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    957            AddrMgrEntry_t entry;
    958          
    959            // Resolve addresses with the address manager
    960            entry.user = ADDRMGR_USER_BINDING;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   7404         MOV       A,#0x4
   \   000011   F0           MOVX      @DPTR,A
    961            entry.index = idx;
   \   000012   740B         MOV       A,#0xb
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   EA           MOV       A,R2
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   EB           MOV       A,R3
   \   00001B   F0           MOVX      @DPTR,A
    962            AddrMgrEntryGet( &entry );
   \   00001C                ; Setup parameters for call to function AddrMgrEntryGet
   \   00001C   AA..         MOV       R2,?XSP + 0
   \   00001E   AB..         MOV       R3,?XSP + 1
   \   000020   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
    963          
    964            return ( entry.nwkAddr );
   \   000023   7401         MOV       A,#0x1
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   FA           MOV       R2,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FB           MOV       R3,A
   \   00002D   740D         MOV       A,#0xd
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   D083         POP       DPH
   \   000034   D082         POP       DPL
   \   000036   02....       LJMP      ?BRET
    965          }
    966          
    967          /*********************************************************************
    968           * @fn      bindAddrMgrLocalLoad
    969           *
    970           * @brief   Load local(self and parent) address information into
    971           *          Address Manager
    972           *
    973           * @param   none
    974           *
    975           * @return  none
    976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    977          void bindAddrMgrLocalLoad( void )
   \                     bindAddrMgrLocalLoad:
    978          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    979            AddrMgrEntry_t entry;
    980            uint16         parent;
    981          
    982            // add "local"(self and parent) address informtion into the Address
    983            // Manager
    984            if ( bindAddrMgrLocalLoaded == FALSE )
   \   00000A   90....       MOV       DPTR,#bindAddrMgrLocalLoaded
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   707F         JNZ       ??bindAddrMgrLocalLoad_0
    985            {
    986              // add the device's address information
    987              entry.user    = ADDRMGR_USER_BINDING;
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   7404         MOV       A,#0x4
   \   000018   F0           MOVX      @DPTR,A
    988              entry.nwkAddr = _NIB.nwkDevAddress;
   \   000019   90....       MOV       DPTR,#_NIB + 20
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F8           MOV       R0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F9           MOV       R1,A
   \   000021   7401         MOV       A,#0x1
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E8           MOV       A,R0
   \   000027   F0           MOVX      @DPTR,A
   \   000028   A3           INC       DPTR
   \   000029   E9           MOV       A,R1
   \   00002A   F0           MOVX      @DPTR,A
    989              AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
   \   00002B                ; Setup parameters for call to function NLME_GetExtAddr
   \   00002B   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00002E   8A..         MOV       ?V0,R2
   \   000030   8B..         MOV       ?V1,R3
   \   000032   AC..         MOV       R4,?V0
   \   000034   AD..         MOV       R5,?V1
   \   000036                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   AA82         MOV       R2,DPL
   \   00003D   AB83         MOV       R3,DPH
   \   00003F   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    990              AddrMgrEntryUpdate( &entry );
   \   000042                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000042   AA..         MOV       R2,?XSP + 0
   \   000044   AB..         MOV       R3,?XSP + 1
   \   000046   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
    991          
    992              // make sure parent address is valid
    993              parent = NLME_GetCoordShortAddr();
   \   000049                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000049   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00004C   8A..         MOV       ?V0,R2
   \   00004E   8B..         MOV       ?V1,R3
   \   000050   A8..         MOV       R0,?V0
   \   000052   A9..         MOV       R1,?V1
    994              if ( ( parent != entry.nwkAddr     ) &&
    995                   ( parent != INVALID_NODE_ADDR )    )
   \   000054   7401         MOV       A,#0x1
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   68           XRL       A,R0
   \   00005B   7003         JNZ       ??bindAddrMgrLocalLoad_1
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   69           XRL       A,R1
   \                     ??bindAddrMgrLocalLoad_1:
   \   000060   6027         JZ        ??bindAddrMgrLocalLoad_2
   \   000062   74FE         MOV       A,#-0x2
   \   000064   68           XRL       A,R0
   \   000065   7003         JNZ       ??bindAddrMgrLocalLoad_3
   \   000067   74FF         MOV       A,#-0x1
   \   000069   69           XRL       A,R1
   \                     ??bindAddrMgrLocalLoad_3:
   \   00006A   601D         JZ        ??bindAddrMgrLocalLoad_2
    996              {
    997                // add the parent's address information
    998                entry.nwkAddr = parent;
   \   00006C   7401         MOV       A,#0x1
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   EA           MOV       A,R2
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   EB           MOV       A,R3
   \   000075   F0           MOVX      @DPTR,A
    999                NLME_GetCoordExtAddr( entry.extAddr );
   \   000076                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000076   7403         MOV       A,#0x3
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   AA82         MOV       R2,DPL
   \   00007D   AB83         MOV       R3,DPH
   \   00007F   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1000                AddrMgrEntryUpdate( &entry );
   \   000082                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000082   AA..         MOV       R2,?XSP + 0
   \   000084   AB..         MOV       R3,?XSP + 1
   \   000086   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1001              }
   1002          
   1003              bindAddrMgrLocalLoaded = TRUE;
   \                     ??bindAddrMgrLocalLoad_2:
   \   000089   90....       MOV       DPTR,#bindAddrMgrLocalLoaded
   \   00008C   7401         MOV       A,#0x1
   \   00008E   F0           MOVX      @DPTR,A
   1004            }
   1005          }
   \                     ??bindAddrMgrLocalLoad_0:
   \   00008F   740D         MOV       A,#0xd
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
   \   000094   7F02         MOV       R7,#0x2
   \   000096   02....       LJMP      ?BANKED_LEAVE_XDATA
   1006          
   1007          /*********************************************************************
   1008           * @fn      bindAddrIndexGet
   1009           *
   1010           * @brief   Get bind address index.
   1011           *
   1012           * @param   addr - <zAddrType_t>
   1013           *
   1014           * @return  (uint16) address index
   1015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          uint16 bindAddrIndexGet( zAddrType_t* addr )
   \                     bindAddrIndexGet:
   1017          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1018            AddrMgrEntry_t entry;
   1019            uint8          update;
   1020          
   1021            update = FALSE;
   \   00000A   7E00         MOV       R6,#0x0
   1022          
   1023            // sync binding addresses with the address manager
   1024            entry.user = ADDRMGR_USER_BINDING;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7404         MOV       A,#0x4
   \   000014   F0           MOVX      @DPTR,A
   1025          
   1026            if ( addr->addrMode == Addr16Bit )
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   7402         MOV       A,#0x2
   \   000025   68           XRL       A,R0
   \   000026   701F         JNZ       ??bindAddrIndexGet_0
   1027            {
   1028              entry.nwkAddr = addr->addr.shortAddr;
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F8           MOV       R0,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   7401         MOV       A,#0x1
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E8           MOV       A,R0
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   E9           MOV       A,R1
   \   00003A   F0           MOVX      @DPTR,A
   1029          
   1030              if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
   \   00003B                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00003B   AA..         MOV       R2,?XSP + 0
   \   00003D   AB..         MOV       R3,?XSP + 1
   \   00003F   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000042   E9           MOV       A,R1
   \   000043   7049         JNZ       ??bindAddrIndexGet_1
   \   000045   801F         SJMP      ??bindAddrIndexGet_2
   1031              {
   1032                update = TRUE;
   1033              }
   1034            }
   1035            else if ( addr->addrMode == Addr64Bit )
   \                     ??bindAddrIndexGet_0:
   \   000047   7403         MOV       A,#0x3
   \   000049   68           XRL       A,R0
   \   00004A   701E         JNZ       ??bindAddrIndexGet_3
   1036            {
   1037              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \   00004C                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00004C   EA           MOV       A,R2
   \   00004D   FC           MOV       R4,A
   \   00004E   EB           MOV       A,R3
   \   00004F   FD           MOV       R5,A
   \   000050   7403         MOV       A,#0x3
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   AA82         MOV       R2,DPL
   \   000057   AB83         MOV       R3,DPH
   \   000059   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1038          
   1039              if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
   \   00005C                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00005C   AA..         MOV       R2,?XSP + 0
   \   00005E   AB..         MOV       R3,?XSP + 1
   \   000060   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000063   E9           MOV       A,R1
   \   000064   7028         JNZ       ??bindAddrIndexGet_1
   1040              {
   1041                update = TRUE;
   \                     ??bindAddrIndexGet_2:
   \   000066   7E01         MOV       R6,#0x1
   \   000068   8024         SJMP      ??bindAddrIndexGet_1
   1042              }
   1043            }
   1044            else if ( addr->addrMode == AddrGroup )
   \                     ??bindAddrIndexGet_3:
   \   00006A   7401         MOV       A,#0x1
   \   00006C   68           XRL       A,R0
   \   00006D   7014         JNZ       ??bindAddrIndexGet_4
   1045            {
   1046              entry.index = addr->addr.shortAddr;
   \   00006F   8A82         MOV       DPL,R2
   \   000071   8B83         MOV       DPH,R3
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F8           MOV       R0,A
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F9           MOV       R1,A
   \   000078   740B         MOV       A,#0xb
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   E8           MOV       A,R0
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   A3           INC       DPTR
   \   000080   E9           MOV       A,R1
   \   000081   800A         SJMP      ??bindAddrIndexGet_5
   1047            }
   1048            else
   1049            {
   1050              entry.index = INVALID_NODE_ADDR;
   \                     ??bindAddrIndexGet_4:
   \   000083   740B         MOV       A,#0xb
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   74FE         MOV       A,#-0x2
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   04           INC       A
   \                     ??bindAddrIndexGet_5:
   \   00008D   F0           MOVX      @DPTR,A
   1051            }
   1052          
   1053            if ( update )
   \                     ??bindAddrIndexGet_1:
   \   00008E   EE           MOV       A,R6
   \   00008F   6007         JZ        ??bindAddrIndexGet_6
   1054            {
   1055              AddrMgrEntryUpdate( &entry );
   \   000091                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000091   AA..         MOV       R2,?XSP + 0
   \   000093   AB..         MOV       R3,?XSP + 1
   \   000095   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1056            }
   1057          
   1058            return entry.index;
   \                     ??bindAddrIndexGet_6:
   \   000098   740B         MOV       A,#0xb
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   FA           MOV       R2,A
   \   00009F   A3           INC       DPTR
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   FB           MOV       R3,A
   \   0000A2   740D         MOV       A,#0xd
   \   0000A4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A7   7F01         MOV       R7,#0x1
   \   0000A9   02....       LJMP      ?BANKED_LEAVE_XDATA
   1059          }
   1060          
   1061          /*********************************************************************
   1062           * @fn      GetBindingTableEntry
   1063           *
   1064           * @brief   Get a pointer to the Nth valid binding table entry.
   1065           *
   1066           * @param   Nth valid entry being requested.
   1067           *
   1068           * @return  The Nth valid binding table entry.
   1069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1070          BindingEntry_t *GetBindingTableEntry( uint16 Nth )
   \                     GetBindingTableEntry:
   1071          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1072            BindingEntry_t *rtrn = NULL;
   \   000005   7800         MOV       R0,#0x0
   \   000007   7900         MOV       R1,#0x0
   1073          
   1074          #if defined ( REFLECTOR )
   1075            bindTableIndex_t idx, cnt = 0;
   \   000009   7C00         MOV       R4,#0x0
   1076          
   1077            for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   8001         SJMP      ??GetBindingTableEntry_0
   \                     ??GetBindingTableEntry_1:
   \   00000F   0D           INC       R5
   \                     ??GetBindingTableEntry_0:
   \   000010   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000013   E4           CLR       A
   \   000014   93           MOVC      A,@A+DPTR
   \   000015   FE           MOV       R6,A
   \   000016   ED           MOV       A,R5
   \   000017   C3           CLR       C
   \   000018   9E           SUBB      A,R6
   \   000019   502A         JNC       ??GetBindingTableEntry_2
   1078            {
   1079              if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
   \   00001B   ED           MOV       A,R5
   \   00001C   75F00E       MOV       B,#0xe
   \   00001F   A4           MUL       AB
   \   000020   FE           MOV       R6,A
   \   000021   85F0..       MOV       ?V0,B
   \   000024   AF..         MOV       R7,?V0
   \   000026   74..         MOV       A,#BindingTable & 0xff
   \   000028   2E           ADD       A,R6
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00002D   3F           ADDC      A,R7
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F4           CPL       A
   \   000032   60DB         JZ        ??GetBindingTableEntry_1
   1080              {
   1081                if ( cnt++ == Nth )
   \   000034   8C..         MOV       ?V0,R4
   \   000036   7401         MOV       A,#0x1
   \   000038   2C           ADD       A,R4
   \   000039   FC           MOV       R4,A
   \   00003A   AE..         MOV       R6,?V0
   \   00003C   EA           MOV       A,R2
   \   00003D   6E           XRL       A,R6
   \   00003E   4B           ORL       A,R3
   \   00003F   70CE         JNZ       ??GetBindingTableEntry_1
   1082                {
   1083                  rtrn = BindingTable+idx;
   \   000041   A882         MOV       R0,DPL
   \   000043   A983         MOV       R1,DPH
   1084                  break;
   1085                }
   1086              }
   1087            }
   1088          #else
   1089            (void)Nth;
   1090          #endif
   1091          
   1092            return rtrn;
   \                     ??GetBindingTableEntry_2:
   \   000045   E8           MOV       A,R0
   \   000046   FA           MOV       R2,A
   \   000047   E9           MOV       A,R1
   \   000048   FB           MOV       R3,A
   \   000049   7F01         MOV       R7,#0x1
   \   00004B   02....       LJMP      ?BANKED_LEAVE_XDATA
   1093          }
   1094          
   1095          #if !defined ( BINDINGTABLE_NV_SINGLES )
   1096          /*********************************************************************
   1097           * @fn          BindInitNV
   1098           *
   1099           * @brief       Initialize the Binding NV Item
   1100           *
   1101           * @param       none
   1102           *
   1103           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1104           *              exist in NV, NV_OPER_FAILED if failure.
   1105           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1106          byte BindInitNV( void )
   \                     BindInitNV:
   1107          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1108            byte ret;
   1109          
   1110            // Initialize the device list
   1111            ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
   1112                            (uint16)( sizeof( nvBindingHdr_t ) + NV_BIND_ITEM_SIZE ), NULL );
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V0,A
   \   000008   F5..         MOV       ?V1,A
   \   00000A   78..         MOV       R0,#?V0
   \   00000C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000F   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000012   E4           CLR       A
   \   000013   93           MOVC      A,@A+DPTR
   \   000014   F8           MOV       R0,A
   \   000015   7401         MOV       A,#0x1
   \   000017   93           MOVC      A,@A+DPTR
   \   000018   F9           MOV       R1,A
   \   000019   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001C   E4           CLR       A
   \   00001D   93           MOVC      A,@A+DPTR
   \   00001E   F5..         MOV       ?V0,A
   \   000020   E8           MOV       A,R0
   \   000021   85..F0       MOV       B,?V0
   \   000024   A4           MUL       AB
   \   000025   F8           MOV       R0,A
   \   000026   AAF0         MOV       R2,B
   \   000028   85..F0       MOV       B,?V0
   \   00002B   E9           MOV       A,R1
   \   00002C   A4           MUL       AB
   \   00002D   2A           ADD       A,R2
   \   00002E   F9           MOV       R1,A
   \   00002F   E8           MOV       A,R0
   \   000030   2402         ADD       A,#0x2
   \   000032   FC           MOV       R4,A
   \   000033   E4           CLR       A
   \   000034   39           ADDC      A,R1
   \   000035   FD           MOV       R5,A
   \   000036   7A41         MOV       R2,#0x41
   \   000038   7B00         MOV       R3,#0x0
   \   00003A   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003D   7402         MOV       A,#0x2
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000042   E9           MOV       A,R1
   \   000043   FE           MOV       R6,A
   1113          
   1114            if (ret == NV_ITEM_UNINIT) 
   \   000044   7409         MOV       A,#0x9
   \   000046   6E           XRL       A,R6
   \   000047   7003         JNZ       ??BindInitNV_0
   1115            {
   1116              BindSetDefaultNV();
   \   000049                ; Setup parameters for call to function BindSetDefaultNV
   \   000049   12....       LCALL     `??BindSetDefaultNV::?relay`; Banked call to: BindSetDefaultNV
   1117            }
   1118          
   1119            return ( ret );
   \                     ??BindInitNV_0:
   \   00004C   EE           MOV       A,R6
   \   00004D   F9           MOV       R1,A
   \   00004E   7F02         MOV       R7,#0x2
   \   000050   02....       LJMP      ?BANKED_LEAVE_XDATA
   1120          }
   1121          
   1122          /*********************************************************************
   1123           * @fn          BindSetDefaultNV
   1124           *
   1125           * @brief       Write the defaults to NV
   1126           *
   1127           * @param       none
   1128           *
   1129           * @return      none
   1130           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1131          void BindSetDefaultNV( void )
   \                     BindSetDefaultNV:
   1132          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1133            nvBindingHdr_t hdr;
   1134          
   1135            // Initialize the header
   1136            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
   1137          
   1138            // Save off the header
   1139            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
   \   000014                ; Setup parameters for call to function osal_nv_write
   \   000014   A8..         MOV       R0,?XSP + 0
   \   000016   A9..         MOV       R1,?XSP + 1
   \   000018   88..         MOV       ?V0,R0
   \   00001A   89..         MOV       ?V1,R1
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   75..02       MOV       ?V0,#0x2
   \   000024   75..00       MOV       ?V1,#0x0
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   7C00         MOV       R4,#0x0
   \   00002E   7D00         MOV       R5,#0x0
   \   000030   7A41         MOV       R2,#0x41
   \   000032   7B00         MOV       R3,#0x0
   \   000034   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000037   7404         MOV       A,#0x4
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
   1140          }
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   7F02         MOV       R7,#0x2
   \   000043   02....       LJMP      ?BANKED_LEAVE_XDATA
   1141          
   1142          #if !defined ( DONT_UPGRADE_BIND )
   1143          /*********************************************************************
   1144           * @fn          BindCopyBackupToNewNV
   1145           *
   1146           * @brief       Creates the New NV item, copies the backup data into
   1147           *              the New NV ID, and Deletes the duplicate NV item.
   1148           *
   1149           * @param       dupLen - NV item length of the old Binding table.
   1150           * @param       newLen - NV item length of the new Binding table to be created.
   1151           *
   1152           * @return      ZSuccess - All the actions were successful.
   1153           *              ZFailure - Any of the actions failed.
   1154           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1155          static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen )
   \                     BindCopyBackupToNewNV:
   1156          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   1157            uint8 status = ZSuccess;
   \   000012   7E00         MOV       R6,#0x0
   1158            uint16 bindLen;
   1159          
   1160            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000014                ; Setup parameters for call to function osal_nv_item_len
   \   000014   7A41         MOV       R2,#0x41
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00001B   8A..         MOV       ?V4,R2
   \   00001D   8B..         MOV       ?V5,R3
   \   00001F   AC..         MOV       R4,?V4
   \   000021   AD..         MOV       R5,?V5
   1161          
   1162          
   1163            if ( ( bindLen > 0 ) && ( bindLen != newLen ) )
   \   000023   EA           MOV       A,R2
   \   000024   4D           ORL       A,R5
   \   000025   6011         JZ        ??BindCopyBackupToNewNV_0
   \   000027   E5..         MOV       A,?V2
   \   000029   6C           XRL       A,R4
   \   00002A   7003         JNZ       ??BindCopyBackupToNewNV_1
   \   00002C   E5..         MOV       A,?V3
   \   00002E   6D           XRL       A,R5
   \                     ??BindCopyBackupToNewNV_1:
   \   00002F   6007         JZ        ??BindCopyBackupToNewNV_0
   1164            {
   1165              // The existing item does not match the New length
   1166              osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen );
   \   000031                ; Setup parameters for call to function osal_nv_delete
   \   000031   7A41         MOV       R2,#0x41
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   1167            }
   1168          
   1169            // Create Binding Table NV item with the NEW legth
   1170            if ( osal_nv_item_init( ZCD_NV_BINDING_TABLE, newLen, NULL ) != NV_OPER_FAILED )
   \                     ??BindCopyBackupToNewNV_0:
   \   000038                ; Setup parameters for call to function osal_nv_item_init
   \   000038   E4           CLR       A
   \   000039   F5..         MOV       ?V4,A
   \   00003B   F5..         MOV       ?V5,A
   \   00003D   78..         MOV       R0,#?V4
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   AC..         MOV       R4,?V2
   \   000044   AD..         MOV       R5,?V3
   \   000046   7A41         MOV       R2,#0x41
   \   000048   7B00         MOV       R3,#0x0
   \   00004A   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00004D   7402         MOV       A,#0x2
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   E9           MOV       A,R1
   \   000053   640A         XRL       A,#0xa
   \   000055   7003         JNZ       $+5
   \   000057   02....       LJMP      ??BindCopyBackupToNewNV_2 & 0xFFFF
   1171            {
   1172              nvBindingHdr_t hdrBackup;
   1173          
   1174              // Copy ONLY the valid records from the duplicate NV table into the new table
   1175              // at the end of this process the table content will be compacted
   1176              if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdrBackup ) == ZSuccess )
   \   00005A                ; Setup parameters for call to function osal_nv_read
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?XSTACK_DISP100_8
   \   00005F   88..         MOV       ?V2,R0
   \   000061   89..         MOV       ?V3,R1
   \   000063   78..         MOV       R0,#?V2
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   75..02       MOV       ?V2,#0x2
   \   00006B   8E..         MOV       ?V3,R6
   \   00006D   78..         MOV       R0,#?V2
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000072   7C00         MOV       R4,#0x0
   \   000074   7D00         MOV       R5,#0x0
   \   000076   7A00         MOV       R2,#0x0
   \   000078   7B03         MOV       R3,#0x3
   \   00007A   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007D   7404         MOV       A,#0x4
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000082   E9           MOV       A,R1
   \   000083   6003         JZ        $+5
   \   000085   02....       LJMP      ??BindCopyBackupToNewNV_2 & 0xFFFF
   1177              {
   1178                bindTableIndex_t i;
   1179                uint16 validBackupRecs = 0;
   \   000088   85..82       MOV       DPL,?XSP + 0
   \   00008B   85..83       MOV       DPH,?XSP + 1
   \   00008E   E4           CLR       A
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   F0           MOVX      @DPTR,A
   1180                BindingEntry_t backupRec;
   1181          
   1182                // Read in the device list. This loop will stop when:
   1183                // The total number of valid records has been reached either because:
   1184                //          The new table is full of valid records OR
   1185                //          The old table has less valid records than the size of the table
   1186                for ( i = 0; ( validBackupRecs < gNWK_MAX_BINDING_ENTRIES ) && ( validBackupRecs < hdrBackup.numRecs ); i++ )
   \   000092   7F00         MOV       R7,#0x0
   \   000094   8010         SJMP      ??BindCopyBackupToNewNV_3
   1187                {
   1188                  if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE,
   1189                                    (uint16)(sizeof(nvBindingHdr_t) + (i * NV_BIND_REC_SIZE)),
   1190                                    NV_BIND_REC_SIZE, &backupRec ) == ZSuccess )
   1191                  {
   1192                    if ( backupRec.srcEP != NV_BIND_EMPTY )
   1193                    {
   1194                      // Save the valid record into the NEW NV table.
   1195                      if ( osal_nv_write( ZCD_NV_BINDING_TABLE,
   1196                                          (uint16)((sizeof(nvBindingHdr_t)) + (validBackupRecs * NV_BIND_REC_SIZE)),
   1197                                          NV_BIND_REC_SIZE, &backupRec ) != ZSuccess )
   1198                      {
   1199                         status = ZFailure;
   1200                         break; // Terminate the loop as soon as a problem with NV is detected
   1201                      }
   1202          
   1203                      validBackupRecs++;
   \                     ??BindCopyBackupToNewNV_4:
   \   000096   85..82       MOV       DPL,?XSP + 0
   \   000099   85..83       MOV       DPH,?XSP + 1
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   2401         ADD       A,#0x1
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   3400         ADDC      A,#0x0
   \   0000A4   F0           MOVX      @DPTR,A
   \                     ??BindCopyBackupToNewNV_5:
   \   0000A5   0F           INC       R7
   \                     ??BindCopyBackupToNewNV_3:
   \   0000A6   85..82       MOV       DPL,?XSP + 0
   \   0000A9   85..83       MOV       DPH,?XSP + 1
   \   0000AC   C082         PUSH      DPL
   \   0000AE   C083         PUSH      DPH
   \   0000B0   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000B3   E4           CLR       A
   \   0000B4   93           MOVC      A,@A+DPTR
   \   0000B5   F8           MOV       R0,A
   \   0000B6   D083         POP       DPH
   \   0000B8   D082         POP       DPL
   \   0000BA   C3           CLR       C
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   98           SUBB      A,R0
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   9400         SUBB      A,#0x0
   \   0000C1   4003         JC        $+5
   \   0000C3   02....       LJMP      ??BindCopyBackupToNewNV_6 & 0xFFFF
   \   0000C6   85..82       MOV       DPL,?XSP + 0
   \   0000C9   85..83       MOV       DPH,?XSP + 1
   \   0000CC   C082         PUSH      DPL
   \   0000CE   C083         PUSH      DPH
   \   0000D0   7402         MOV       A,#0x2
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F8           MOV       R0,A
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   F9           MOV       R1,A
   \   0000DA   D083         POP       DPH
   \   0000DC   D082         POP       DPL
   \   0000DE   C3           CLR       C
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   98           SUBB      A,R0
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   99           SUBB      A,R1
   \   0000E4   4003         JC        $+5
   \   0000E6   02....       LJMP      ??BindCopyBackupToNewNV_6 & 0xFFFF
   \   0000E9                ; Setup parameters for call to function osal_nv_read
   \   0000E9   7404         MOV       A,#0x4
   \   0000EB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000EE   88..         MOV       ?V2,R0
   \   0000F0   89..         MOV       ?V3,R1
   \   0000F2   78..         MOV       R0,#?V2
   \   0000F4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F7   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   0000FA   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   0000FD   EF           MOV       A,R7
   \   0000FE   F8           MOV       R0,A
   \   0000FF   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000102   E4           CLR       A
   \   000103   93           MOVC      A,@A+DPTR
   \   000104   F5..         MOV       ?V2,A
   \   000106   7401         MOV       A,#0x1
   \   000108   93           MOVC      A,@A+DPTR
   \   000109   F5..         MOV       ?V3,A
   \   00010B   E8           MOV       A,R0
   \   00010C   85..F0       MOV       B,?V2
   \   00010F   A4           MUL       AB
   \   000110   C8           XCH       A,R0
   \   000111   AAF0         MOV       R2,B
   \   000113   85..F0       MOV       B,?V3
   \   000116   A4           MUL       AB
   \   000117   2A           ADD       A,R2
   \   000118   F9           MOV       R1,A
   \   000119   E8           MOV       A,R0
   \   00011A   2402         ADD       A,#0x2
   \   00011C   FC           MOV       R4,A
   \   00011D   E4           CLR       A
   \   00011E   39           ADDC      A,R1
   \   00011F   FD           MOV       R5,A
   \   000120   7A00         MOV       R2,#0x0
   \   000122   7B03         MOV       R3,#0x3
   \   000124   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000127   7404         MOV       A,#0x4
   \   000129   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012C   E9           MOV       A,R1
   \   00012D   7064         JNZ       ??BindCopyBackupToNewNV_7
   \   00012F   7404         MOV       A,#0x4
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   E0           MOVX      A,@DPTR
   \   000135   F4           CPL       A
   \   000136   7003         JNZ       $+5
   \   000138   02....       LJMP      ??BindCopyBackupToNewNV_5 & 0xFFFF
   \   00013B                ; Setup parameters for call to function osal_nv_write
   \   00013B   7404         MOV       A,#0x4
   \   00013D   12....       LCALL     ?XSTACK_DISP100_8
   \   000140   88..         MOV       ?V2,R0
   \   000142   89..         MOV       ?V3,R1
   \   000144   78..         MOV       R0,#?V2
   \   000146   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000149   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   00014C   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   00014F   7404         MOV       A,#0x4
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   E0           MOVX      A,@DPTR
   \   000155   F8           MOV       R0,A
   \   000156   A3           INC       DPTR
   \   000157   E0           MOVX      A,@DPTR
   \   000158   F9           MOV       R1,A
   \   000159   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   00015C   E4           CLR       A
   \   00015D   93           MOVC      A,@A+DPTR
   \   00015E   F5..         MOV       ?V2,A
   \   000160   7401         MOV       A,#0x1
   \   000162   93           MOVC      A,@A+DPTR
   \   000163   F5..         MOV       ?V3,A
   \   000165   E8           MOV       A,R0
   \   000166   85..F0       MOV       B,?V2
   \   000169   A4           MUL       AB
   \   00016A   C8           XCH       A,R0
   \   00016B   AAF0         MOV       R2,B
   \   00016D   85..F0       MOV       B,?V3
   \   000170   A4           MUL       AB
   \   000171   2A           ADD       A,R2
   \   000172   FA           MOV       R2,A
   \   000173   85..F0       MOV       B,?V2
   \   000176   E9           MOV       A,R1
   \   000177   A4           MUL       AB
   \   000178   2A           ADD       A,R2
   \   000179   F9           MOV       R1,A
   \   00017A   E8           MOV       A,R0
   \   00017B   2402         ADD       A,#0x2
   \   00017D   FC           MOV       R4,A
   \   00017E   E4           CLR       A
   \   00017F   39           ADDC      A,R1
   \   000180   FD           MOV       R5,A
   \   000181   7A41         MOV       R2,#0x41
   \   000183   7B00         MOV       R3,#0x0
   \   000185   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000188   7404         MOV       A,#0x4
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018D   E9           MOV       A,R1
   \   00018E   7003         JNZ       $+5
   \   000190   02....       LJMP      ??BindCopyBackupToNewNV_4 & 0xFFFF
   1204                    }
   1205                  }
   1206                  else
   1207                  {
   1208                     status = ZFailure;
   \                     ??BindCopyBackupToNewNV_7:
   \   000193   7E01         MOV       R6,#0x1
   1209                     break; // Terminate the loop as soon as a problem with NV is detected
   1210                  }
   1211                }
   1212          
   1213                // Only save the header and delete the duplicate element if the previous
   1214                // process was successful
   1215                if ( status == ZSuccess )
   \                     ??BindCopyBackupToNewNV_6:
   \   000195   EE           MOV       A,R6
   \   000196   703B         JNZ       ??BindCopyBackupToNewNV_8
   1216                {
   1217                  // Save off the header
   1218                  if ( osal_nv_write( ZCD_NV_BINDING_TABLE, 0,
   1219                                      sizeof(nvBindingHdr_t), &validBackupRecs ) == ZSuccess )
   \   000198                ; Setup parameters for call to function osal_nv_write
   \   000198   A8..         MOV       R0,?XSP + 0
   \   00019A   A9..         MOV       R1,?XSP + 1
   \   00019C   88..         MOV       ?V2,R0
   \   00019E   89..         MOV       ?V3,R1
   \   0001A0   78..         MOV       R0,#?V2
   \   0001A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A5   75..02       MOV       ?V2,#0x2
   \   0001A8   75..00       MOV       ?V3,#0x0
   \   0001AB   78..         MOV       R0,#?V2
   \   0001AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B0   7C00         MOV       R4,#0x0
   \   0001B2   7D00         MOV       R5,#0x0
   \   0001B4   7A41         MOV       R2,#0x41
   \   0001B6   7B00         MOV       R3,#0x0
   \   0001B8   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001BB   7404         MOV       A,#0x4
   \   0001BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C0   E9           MOV       A,R1
   \   0001C1   700E         JNZ       ??BindCopyBackupToNewNV_2
   1220                  {
   1221                    // Delete the duplicate NV Item, once the data has been stored in the NEW table
   1222                    if ( osal_nv_delete( ZCD_NV_DUPLICATE_BINDING_TABLE, dupLen ) != ZSuccess )
   \   0001C3                ; Setup parameters for call to function osal_nv_delete
   \   0001C3   AC..         MOV       R4,?V0
   \   0001C5   AD..         MOV       R5,?V1
   \   0001C7   7A00         MOV       R2,#0x0
   \   0001C9   7B03         MOV       R3,#0x3
   \   0001CB   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   0001CE   E9           MOV       A,R1
   \   0001CF   6002         JZ        ??BindCopyBackupToNewNV_8
   1223                    {
   1224                      status = ZFailure;
   1225                    }
   1226                  }
   1227                  else
   1228                  {
   1229                    status = ZFailure;
   1230                  }
   1231                }
   1232              }
   1233              else
   1234              {
   1235                status = ZFailure;
   1236              }
   1237            }
   1238            else
   1239            {
   1240              status = ZFailure;
   \                     ??BindCopyBackupToNewNV_2:
   \   0001D1   7E01         MOV       R6,#0x1
   1241            }
   1242          
   1243            return ( status );
   \                     ??BindCopyBackupToNewNV_8:
   \   0001D3   EE           MOV       A,R6
   \   0001D4   F9           MOV       R1,A
   \   0001D5   7412         MOV       A,#0x12
   \   0001D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DA   7F06         MOV       R7,#0x6
   \   0001DC   02....       LJMP      ?BANKED_LEAVE_XDATA
   1244          }
   1245          #endif // !DONT_UPGRADE_BIND
   1246          
   1247          #if !defined ( DONT_UPGRADE_BIND )
   1248          /*********************************************************************
   1249           * @fn          BindUpgradeTableInNV
   1250           *
   1251           * @brief       Verifies if the existing table in NV has different size
   1252           *              than the table defined by parameters in the current code.
   1253           *              If different, creates a backup table, deletes the existing
   1254           *              table and creates the new table with the new size. After
   1255           *              this process is done ZCD_NV_BINDING_TABLE NV item contains
   1256           *              only valid records retrieved from the original table, up to
   1257           *              the maximum number of records defined by gNWK_MAX_BINDING_ENTRIES
   1258           *
   1259           * @param       none
   1260           *
   1261           * @return      ZSuccess - the Update process was sucessful.
   1262           *              ZFailure - otherwise.
   1263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1264          static uint8 BindUpgradeTableInNV( void )
   \                     BindUpgradeTableInNV:
   1265          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1266            uint8 status = ZSuccess;
   \   00000A   75..00       MOV       ?V2,#0x0
   1267            nvBindingHdr_t hdr;
   1268            uint16 dupLen;
   1269            uint16 bindLen;
   1270            uint16 newLen;
   1271            bool duplicateReady = FALSE;
   \   00000D   75..00       MOV       ?V3,#0x0
   1272          
   1273            // Size of the Binding table based on current paramenters in the code
   1274            newLen = sizeof(nvBindingHdr_t) + NV_BIND_ITEM_SIZE;
   \   000010   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000013   E4           CLR       A
   \   000014   93           MOVC      A,@A+DPTR
   \   000015   F8           MOV       R0,A
   \   000016   7401         MOV       A,#0x1
   \   000018   93           MOVC      A,@A+DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001D   E4           CLR       A
   \   00001E   93           MOVC      A,@A+DPTR
   \   00001F   F5..         MOV       ?V0,A
   \   000021   E8           MOV       A,R0
   \   000022   85..F0       MOV       B,?V0
   \   000025   A4           MUL       AB
   \   000026   F8           MOV       R0,A
   \   000027   AAF0         MOV       R2,B
   \   000029   85..F0       MOV       B,?V0
   \   00002C   E9           MOV       A,R1
   \   00002D   A4           MUL       AB
   \   00002E   2A           ADD       A,R2
   \   00002F   F9           MOV       R1,A
   \   000030   E8           MOV       A,R0
   \   000031   2402         ADD       A,#0x2
   \   000033   F5..         MOV       ?V0,A
   \   000035   E4           CLR       A
   \   000036   39           ADDC      A,R1
   \   000037   F5..         MOV       ?V1,A
   1275          
   1276            // Size of the Binding table NV item, this is the whole size of the item,
   1277            // it could inculde invalid records also
   1278            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000039                ; Setup parameters for call to function osal_nv_item_len
   \   000039   7A41         MOV       R2,#0x41
   \   00003B   7B00         MOV       R3,#0x0
   \   00003D   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000040   8A..         MOV       ?V4,R2
   \   000042   8B..         MOV       ?V5,R3
   \   000044   AE..         MOV       R6,?V4
   \   000046   AF..         MOV       R7,?V5
   1279          
   1280            // Get the number of valid records from the Binding table
   1281            osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \   000048                ; Setup parameters for call to function osal_nv_read
   \   000048   A8..         MOV       R0,?XSP + 0
   \   00004A   A9..         MOV       R1,?XSP + 1
   \   00004C   88..         MOV       ?V4,R0
   \   00004E   89..         MOV       ?V5,R1
   \   000050   78..         MOV       R0,#?V4
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V4,#0x2
   \   000058   75..00       MOV       ?V5,#0x0
   \   00005B   78..         MOV       R0,#?V4
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   7C00         MOV       R4,#0x0
   \   000062   7D00         MOV       R5,#0x0
   \   000064   7A41         MOV       R2,#0x41
   \   000066   7B00         MOV       R3,#0x0
   \   000068   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00006B   7404         MOV       A,#0x4
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   1282          
   1283            // Identify if there is a duplicate NV item, if it is there, that means an
   1284            // Upgrade process did not finish properly last time
   1285            // The length function will return 0 if the Backup NV ID does not exist.
   1286            dupLen = osal_nv_item_len( ZCD_NV_DUPLICATE_BINDING_TABLE );
   \   000070                ; Setup parameters for call to function osal_nv_item_len
   \   000070   7A00         MOV       R2,#0x0
   \   000072   7B03         MOV       R3,#0x3
   \   000074   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000077   8A..         MOV       ?V4,R2
   \   000079   8B..         MOV       ?V5,R3
   \   00007B   A8..         MOV       R0,?V4
   \   00007D   A9..         MOV       R1,?V5
   1287          
   1288            // A duplicate of the original Binding item will be done if:
   1289            // 1) A duplicate NV item DOES NOT exist AND the size of the original Binding
   1290            //    item in NV is different (larger/smaller) than the the length calculated
   1291            //    from the parameters in the code. If they are the same there is no need
   1292            //    to do the Upgrade process.
   1293            // 2) A duplicate NV item exists (probably because the previous upgrade
   1294            //    process was interrupted) and [the original Binding NV items exists AND
   1295            //    has valid recods (it is important to make sure that valid records exist
   1296            //    in the binding table because it is possible that the item was created
   1297            //    but the data was not copied in the previous upgrade process).
   1298            if ( ( ( dupLen == 0 ) && ( bindLen != newLen ) ) ||
   1299                 ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs > 0 ) ) )
   \   00007F   EA           MOV       A,R2
   \   000080   49           ORL       A,R1
   \   000081   700A         JNZ       ??BindUpgradeTableInNV_0
   \   000083   E5..         MOV       A,?V0
   \   000085   6E           XRL       A,R6
   \   000086   7003         JNZ       ??BindUpgradeTableInNV_1
   \   000088   E5..         MOV       A,?V1
   \   00008A   6F           XRL       A,R7
   \                     ??BindUpgradeTableInNV_1:
   \   00008B   7017         JNZ       ??BindUpgradeTableInNV_2
   \                     ??BindUpgradeTableInNV_0:
   \   00008D   EA           MOV       A,R2
   \   00008E   49           ORL       A,R1
   \   00008F   6037         JZ        ??BindUpgradeTableInNV_3
   \   000091   EE           MOV       A,R6
   \   000092   4F           ORL       A,R7
   \   000093   6033         JZ        ??BindUpgradeTableInNV_3
   \   000095   85..82       MOV       DPL,?XSP + 0
   \   000098   85..83       MOV       DPH,?XSP + 1
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   FA           MOV       R2,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   FB           MOV       R3,A
   \   0000A0   EA           MOV       A,R2
   \   0000A1   4B           ORL       A,R3
   \   0000A2   6024         JZ        ??BindUpgradeTableInNV_3
   1300            {
   1301              // Create a copy from original NV item into a duplicate NV item
   1302              if ( ( status = nwkCreateDuplicateNV( ZCD_NV_BINDING_TABLE,
   1303                                                    ZCD_NV_DUPLICATE_BINDING_TABLE ) ) == ZSuccess )
   \                     ??BindUpgradeTableInNV_2:
   \   0000A4                ; Setup parameters for call to function nwkCreateDuplicateNV
   \   0000A4   7C00         MOV       R4,#0x0
   \   0000A6   7D03         MOV       R5,#0x3
   \   0000A8   7A41         MOV       R2,#0x41
   \   0000AA   7B00         MOV       R3,#0x0
   \   0000AC   12....       LCALL     `??nwkCreateDuplicateNV::?relay`; Banked call to: nwkCreateDuplicateNV
   \   0000AF   E9           MOV       A,R1
   \   0000B0   F8           MOV       R0,A
   \   0000B1   F5..         MOV       ?V2,A
   \   0000B3   7039         JNZ       ??BindUpgradeTableInNV_4
   1304              {
   1305                // Delete the original NV item once the duplicate is ready
   1306                if ( osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen ) != ZSuccess )
   \   0000B5                ; Setup parameters for call to function osal_nv_delete
   \   0000B5   EE           MOV       A,R6
   \   0000B6   FC           MOV       R4,A
   \   0000B7   EF           MOV       A,R7
   \   0000B8   FD           MOV       R5,A
   \   0000B9   7A41         MOV       R2,#0x41
   \   0000BB   7B00         MOV       R3,#0x0
   \   0000BD   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   0000C0   E9           MOV       A,R1
   \   0000C1   6028         JZ        ??BindUpgradeTableInNV_5
   1307                {
   1308                  status = ZFailure;
   \   0000C3   75..01       MOV       ?V2,#0x1
   \   0000C6   8026         SJMP      ??BindUpgradeTableInNV_4
   1309                }
   1310                else
   1311                {
   1312                  duplicateReady = TRUE;
   1313                }
   1314              }
   1315            }
   1316            else if ( ( ( dupLen > 0 ) && ( bindLen == 0 ) ) ||
   1317                      ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs == 0 ) ) )
   \                     ??BindUpgradeTableInNV_3:
   \   0000C8   E8           MOV       A,R0
   \   0000C9   49           ORL       A,R1
   \   0000CA   6004         JZ        ??BindUpgradeTableInNV_6
   \   0000CC   EE           MOV       A,R6
   \   0000CD   4F           ORL       A,R7
   \   0000CE   6017         JZ        ??BindUpgradeTableInNV_7
   \                     ??BindUpgradeTableInNV_6:
   \   0000D0   E8           MOV       A,R0
   \   0000D1   49           ORL       A,R1
   \   0000D2   601A         JZ        ??BindUpgradeTableInNV_4
   \   0000D4   EE           MOV       A,R6
   \   0000D5   4F           ORL       A,R7
   \   0000D6   6016         JZ        ??BindUpgradeTableInNV_4
   \   0000D8   85..82       MOV       DPL,?XSP + 0
   \   0000DB   85..83       MOV       DPH,?XSP + 1
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   FA           MOV       R2,A
   \   0000E0   A3           INC       DPTR
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   FB           MOV       R3,A
   \   0000E3   EA           MOV       A,R2
   \   0000E4   4B           ORL       A,R3
   \   0000E5   7007         JNZ       ??BindUpgradeTableInNV_4
   1318            {
   1319              // If for some reason a duplicate NV item was left in the system from a
   1320              // previous upgrade process and:
   1321              // 1) The original Binding NV item DOES NOT exist OR
   1322              // 2) The original Binding NV item exist, but has no valid records.
   1323              // it is necessary to rely in the data in the Duplicate item to create
   1324              // the Binding table
   1325              bindLen = dupLen;
   \                     ??BindUpgradeTableInNV_7:
   \   0000E7   E8           MOV       A,R0
   \   0000E8   FE           MOV       R6,A
   \   0000E9   E9           MOV       A,R1
   \   0000EA   FF           MOV       R7,A
   1326          
   1327              duplicateReady = TRUE;
   \                     ??BindUpgradeTableInNV_5:
   \   0000EB   75..01       MOV       ?V3,#0x1
   1328            }
   1329          
   1330            if ( duplicateReady == TRUE )
   \                     ??BindUpgradeTableInNV_4:
   \   0000EE   7401         MOV       A,#0x1
   \   0000F0   65..         XRL       A,?V3
   \   0000F2   700E         JNZ       ??BindUpgradeTableInNV_8
   1331            {
   1332              // Creates the New Binding table, Copy data from backup and Delete backup NV ID
   1333              status = BindCopyBackupToNewNV( bindLen, newLen );
   \   0000F4                ; Setup parameters for call to function BindCopyBackupToNewNV
   \   0000F4   AC..         MOV       R4,?V0
   \   0000F6   AD..         MOV       R5,?V1
   \   0000F8   EE           MOV       A,R6
   \   0000F9   FA           MOV       R2,A
   \   0000FA   EF           MOV       A,R7
   \   0000FB   FB           MOV       R3,A
   \   0000FC   12....       LCALL     `??BindCopyBackupToNewNV::?relay`; Banked call to: BindCopyBackupToNewNV
   \   0000FF   E9           MOV       A,R1
   \   000100   F5..         MOV       ?V2,A
   1334            }
   1335            return ( status );
   \                     ??BindUpgradeTableInNV_8:
   \   000102   A9..         MOV       R1,?V2
   \   000104   7402         MOV       A,#0x2
   \   000106   12....       LCALL     ?DEALLOC_XSTACK8
   \   000109   7F06         MOV       R7,#0x6
   \   00010B   02....       LJMP      ?BANKED_LEAVE_XDATA
   1336          }
   1337          #endif // !DONT_UPGRADE_BIND
   1338          
   1339          /*********************************************************************
   1340           * @fn          BindRestoreFromNV
   1341           *
   1342           * @brief       Restore the binding table from NV
   1343           *
   1344           * @param       none
   1345           *
   1346           * @return      Number of entries restored
   1347           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1348          uint16 BindRestoreFromNV( void )
   \                     BindRestoreFromNV:
   1349          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1350            nvBindingHdr_t hdr;
   1351          
   1352            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
   1353          
   1354          #if !defined ( DONT_UPGRADE_BIND )
   1355            if ( BindUpgradeTableInNV() == ZSuccess )
   \   000014                ; Setup parameters for call to function BindUpgradeTableInNV
   \   000014   12....       LCALL     `??BindUpgradeTableInNV::?relay`; Banked call to: BindUpgradeTableInNV
   \   000017   E9           MOV       A,R1
   \   000018   6003         JZ        $+5
   \   00001A   02....       LJMP      ??BindRestoreFromNV_0 & 0xFFFF
   1356          #endif
   1357            {
   1358              if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
   \   00001D                ; Setup parameters for call to function osal_nv_read
   \   00001D   A8..         MOV       R0,?XSP + 0
   \   00001F   A9..         MOV       R1,?XSP + 1
   \   000021   88..         MOV       ?V0,R0
   \   000023   89..         MOV       ?V1,R1
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..02       MOV       ?V0,#0x2
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV       R4,#0x0
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7A41         MOV       R2,#0x41
   \   00003B   7B00         MOV       R3,#0x0
   \   00003D   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   E9           MOV       A,R1
   \   000046   6003         JZ        $+5
   \   000048   02....       LJMP      ??BindRestoreFromNV_0 & 0xFFFF
   1359              {
   1360                bindTableIndex_t x;
   1361                uint16 validRecsCount = 0;
   \   00004B   7E00         MOV       R6,#0x0
   \   00004D   7F00         MOV       R7,#0x0
   1362          
   1363                // Read in the device list
   1364                for ( x = 0; ( x < gNWK_MAX_BINDING_ENTRIES ) && ( validRecsCount < hdr.numRecs ); x++ )
   \   00004F   75..00       MOV       ?V0,#0x0
   \   000052   8061         SJMP      ??BindRestoreFromNV_1
   1365                {
   1366                  if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
   1367                                     (uint16)(sizeof(nvBindingHdr_t) + (x * NV_BIND_REC_SIZE)),
   1368                                     NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
   \                     ??BindRestoreFromNV_2:
   \   000054   E5..         MOV       A,?V0
   \   000056   75F00E       MOV       B,#0xe
   \   000059   A4           MUL       AB
   \   00005A   F8           MOV       R0,A
   \   00005B   A9F0         MOV       R1,B
   \   00005D   74..         MOV       A,#BindingTable & 0xff
   \   00005F   28           ADD       A,R0
   \   000060   F5..         MOV       ?V2,A
   \   000062   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000064   39           ADDC      A,R1
   \   000065   F5..         MOV       ?V3,A
   \   000067                ; Setup parameters for call to function osal_nv_read
   \   000067   78..         MOV       R0,#?V2
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   00006F   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   000072   A8..         MOV       R0,?V0
   \   000074   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000077   E4           CLR       A
   \   000078   93           MOVC      A,@A+DPTR
   \   000079   F5..         MOV       ?V4,A
   \   00007B   7401         MOV       A,#0x1
   \   00007D   93           MOVC      A,@A+DPTR
   \   00007E   F5..         MOV       ?V5,A
   \   000080   E8           MOV       A,R0
   \   000081   85..F0       MOV       B,?V4
   \   000084   A4           MUL       AB
   \   000085   C8           XCH       A,R0
   \   000086   AAF0         MOV       R2,B
   \   000088   85..F0       MOV       B,?V5
   \   00008B   A4           MUL       AB
   \   00008C   2A           ADD       A,R2
   \   00008D   F9           MOV       R1,A
   \   00008E   E8           MOV       A,R0
   \   00008F   2402         ADD       A,#0x2
   \   000091   FC           MOV       R4,A
   \   000092   E4           CLR       A
   \   000093   39           ADDC      A,R1
   \   000094   FD           MOV       R5,A
   \   000095   7A41         MOV       R2,#0x41
   \   000097   7B00         MOV       R3,#0x0
   \   000099   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00009C   7404         MOV       A,#0x4
   \   00009E   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A1   E9           MOV       A,R1
   \   0000A2   700F         JNZ       ??BindRestoreFromNV_3
   1369                  {
   1370                    if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   0000A4   85..82       MOV       DPL,?V2
   \   0000A7   85..83       MOV       DPH,?V3
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F4           CPL       A
   \   0000AC   6005         JZ        ??BindRestoreFromNV_3
   1371                    {
   1372                      validRecsCount++;
   \   0000AE   0E           INC       R6
   \   0000AF   EE           MOV       A,R6
   \   0000B0   7001         JNZ       ??BindRestoreFromNV_3
   \   0000B2   0F           INC       R7
   1373                    }
   1374                  }
   1375                }
   \                     ??BindRestoreFromNV_3:
   \   0000B3   05..         INC       ?V0
   \                     ??BindRestoreFromNV_1:
   \   0000B5   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000B8   E4           CLR       A
   \   0000B9   93           MOVC      A,@A+DPTR
   \   0000BA   F8           MOV       R0,A
   \   0000BB   E5..         MOV       A,?V0
   \   0000BD   C3           CLR       C
   \   0000BE   98           SUBB      A,R0
   \   0000BF   5012         JNC       ??BindRestoreFromNV_0
   \   0000C1   85..82       MOV       DPL,?XSP + 0
   \   0000C4   85..83       MOV       DPH,?XSP + 1
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   F8           MOV       R0,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   F9           MOV       R1,A
   \   0000CC   C3           CLR       C
   \   0000CD   EE           MOV       A,R6
   \   0000CE   98           SUBB      A,R0
   \   0000CF   EF           MOV       A,R7
   \   0000D0   99           SUBB      A,R1
   \   0000D1   4081         JC        ??BindRestoreFromNV_2
   1376              }
   1377            }
   1378            return ( hdr.numRecs );
   \                     ??BindRestoreFromNV_0:
   \   0000D3   85..82       MOV       DPL,?XSP + 0
   \   0000D6   85..83       MOV       DPH,?XSP + 1
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   FA           MOV       R2,A
   \   0000DB   A3           INC       DPTR
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   FB           MOV       R3,A
   \   0000DE   7402         MOV       A,#0x2
   \   0000E0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E3   7F06         MOV       R7,#0x6
   \   0000E5   02....       LJMP      ?BANKED_LEAVE_XDATA
   1379          }
   1380          
   1381          /*********************************************************************
   1382           * @fn          BindWriteNV
   1383           *
   1384           * @brief       Save the Binding Table in NV
   1385           *
   1386           * @param       none
   1387           *
   1388           * @return      none
   1389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1390          void BindWriteNV( void )
   \                     BindWriteNV:
   1391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1392            BindingEntry_t *pBind;
   1393            BindingEntry_t bind;
   1394            nvBindingHdr_t hdr;
   1395            bindTableIndex_t x;
   1396          
   1397            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
   1398          
   1399            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000014   7E00         MOV       R6,#0x0
   \   000016   02....       LJMP      ??BindWriteNV_0 & 0xFFFF
   1400            {
   1401              pBind = &BindingTable[x];
   \                     ??BindWriteNV_1:
   \   000019   EE           MOV       A,R6
   \   00001A   75F00E       MOV       B,#0xe
   \   00001D   A4           MUL       AB
   \   00001E   F8           MOV       R0,A
   \   00001F   A9F0         MOV       R1,B
   \   000021   74..         MOV       A,#BindingTable & 0xff
   \   000023   28           ADD       A,R0
   \   000024   F5..         MOV       ?V0,A
   \   000026   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000028   39           ADDC      A,R1
   \   000029   F5..         MOV       ?V1,A
   1402          
   1403              osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
   \   00002B                ; Setup parameters for call to function osal_memcpy
   \   00002B   85....       MOV       ?V4,?V0
   \   00002E   F5..         MOV       ?V5,A
   \   000030   75..00       MOV       ?V6,#0x0
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000038   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   00003B   E4           CLR       A
   \   00003C   93           MOVC      A,@A+DPTR
   \   00003D   FC           MOV       R4,A
   \   00003E   7401         MOV       A,#0x1
   \   000040   93           MOVC      A,@A+DPTR
   \   000041   FD           MOV       R5,A
   \   000042   7405         MOV       A,#0x5
   \   000044   12....       LCALL     ?XSTACK_DISP101_8
   \   000047   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004A   7403         MOV       A,#0x3
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   1404          
   1405              // Save the record to NV
   1406              osal_nv_write( ZCD_NV_BINDING_TABLE,
   1407                             (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
   1408                             NV_BIND_REC_SIZE, &bind );
   \   00004F                ; Setup parameters for call to function osal_nv_write
   \   00004F   7402         MOV       A,#0x2
   \   000051   12....       LCALL     ?XSTACK_DISP100_8
   \   000054   88..         MOV       ?V2,R0
   \   000056   89..         MOV       ?V3,R1
   \   000058   78..         MOV       R0,#?V2
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000060   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   000063   EE           MOV       A,R6
   \   000064   F8           MOV       R0,A
   \   000065   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000068   E4           CLR       A
   \   000069   93           MOVC      A,@A+DPTR
   \   00006A   F5..         MOV       ?V2,A
   \   00006C   7401         MOV       A,#0x1
   \   00006E   93           MOVC      A,@A+DPTR
   \   00006F   F5..         MOV       ?V3,A
   \   000071   E8           MOV       A,R0
   \   000072   85..F0       MOV       B,?V2
   \   000075   A4           MUL       AB
   \   000076   C8           XCH       A,R0
   \   000077   AAF0         MOV       R2,B
   \   000079   85..F0       MOV       B,?V3
   \   00007C   A4           MUL       AB
   \   00007D   2A           ADD       A,R2
   \   00007E   F9           MOV       R1,A
   \   00007F   E8           MOV       A,R0
   \   000080   2402         ADD       A,#0x2
   \   000082   FC           MOV       R4,A
   \   000083   E4           CLR       A
   \   000084   39           ADDC      A,R1
   \   000085   FD           MOV       R5,A
   \   000086   7A41         MOV       R2,#0x41
   \   000088   7B00         MOV       R3,#0x0
   \   00008A   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00008D   7404         MOV       A,#0x4
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
   1409          
   1410              if ( pBind->srcEP != NV_BIND_EMPTY )
   \   000092   85..82       MOV       DPL,?V0
   \   000095   85..83       MOV       DPH,?V1
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F4           CPL       A
   \   00009A   600F         JZ        ??BindWriteNV_2
   1411              {
   1412                hdr.numRecs++;
   \   00009C   85..82       MOV       DPL,?XSP + 0
   \   00009F   85..83       MOV       DPH,?XSP + 1
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   2401         ADD       A,#0x1
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   3400         ADDC      A,#0x0
   \   0000AA   F0           MOVX      @DPTR,A
   1413              }
   1414            }
   \                     ??BindWriteNV_2:
   \   0000AB   0E           INC       R6
   \                     ??BindWriteNV_0:
   \   0000AC   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000AF   E4           CLR       A
   \   0000B0   93           MOVC      A,@A+DPTR
   \   0000B1   F8           MOV       R0,A
   \   0000B2   EE           MOV       A,R6
   \   0000B3   C3           CLR       C
   \   0000B4   98           SUBB      A,R0
   \   0000B5   5003         JNC       $+5
   \   0000B7   02....       LJMP      ??BindWriteNV_1 & 0xFFFF
   1415          
   1416            // Save off the header
   1417            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \   0000BA                ; Setup parameters for call to function osal_nv_write
   \   0000BA   A8..         MOV       R0,?XSP + 0
   \   0000BC   A9..         MOV       R1,?XSP + 1
   \   0000BE   88..         MOV       ?V0,R0
   \   0000C0   89..         MOV       ?V1,R1
   \   0000C2   78..         MOV       R0,#?V0
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C7   75..02       MOV       ?V0,#0x2
   \   0000CA   75..00       MOV       ?V1,#0x0
   \   0000CD   78..         MOV       R0,#?V0
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D2   7C00         MOV       R4,#0x0
   \   0000D4   7D00         MOV       R5,#0x0
   \   0000D6   7A41         MOV       R2,#0x41
   \   0000D8   7B00         MOV       R3,#0x0
   \   0000DA   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000DD   7404         MOV       A,#0x4
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
   1418          }
   \   0000E2   7410         MOV       A,#0x10
   \   0000E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E7   7F07         MOV       R7,#0x7
   \   0000E9   02....       LJMP      ?BANKED_LEAVE_XDATA
   1419          
   1420          #else // !BINDINGTABLE_NV_SINGLES
   1421          /*********************************************************************
   1422           * @fn          BindInitNV
   1423           *
   1424           * @brief       Initialize the Binding NV Item
   1425           *
   1426           * @param       none
   1427           *
   1428           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1429           *              exist in NV, NV_OPER_FAILED if failure.
   1430           */
   1431          byte BindInitNV( void )
   1432          {
   1433            bindTableIndex_t x;
   1434          
   1435            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1436            {
   1437              // Initialize each binding record
   1438              osal_nv_item_init_ex( ZCD_NV_EX_BINDING_TABLE, x, NV_BIND_REC_SIZE, NULL );
   1439            }
   1440            return ( ZSUCCESS );
   1441          }
   1442          
   1443          /*********************************************************************
   1444           * @fn          BindSetDefaultNV
   1445           *
   1446           * @brief       Write the defaults to NV
   1447           *
   1448           * @param       none
   1449           *
   1450           * @return      none
   1451           */
   1452          void BindSetDefaultNV( void )
   1453          {
   1454            BindingEntry_t bind;
   1455            bindTableIndex_t x;
   1456          
   1457            // Initialize a binding record
   1458            osal_memset( &bind, 0xFF, sizeof ( BindingEntry_t ) );
   1459          
   1460            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1461            {
   1462              // Over write each binding record with an "empty" record
   1463              osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0, NV_BIND_REC_SIZE, &bind );
   1464            }
   1465          }
   1466          
   1467          /*********************************************************************
   1468           * @fn          BindRestoreFromNV
   1469           *
   1470           * @brief       Restore the binding table from NV
   1471           *
   1472           * @param       none
   1473           *
   1474           * @return      Number of entries restored (non-emtpy)
   1475           */
   1476          uint16 BindRestoreFromNV( void )
   1477          {
   1478            bindTableIndex_t x;
   1479            uint16 validRecsCount = 0;
   1480          
   1481            // Read in the device list
   1482            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1483            {
   1484              if ( osal_nv_read_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
   1485                               (uint16)NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
   1486              {
   1487                // Check for non-empty record
   1488                if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   1489                {
   1490                  // Count non-empty records
   1491                  validRecsCount++;
   1492                }
   1493              }
   1494            }
   1495            return ( validRecsCount );
   1496          }
   1497          
   1498          /*********************************************************************
   1499           * @fn          BindWriteNV
   1500           *
   1501           * @brief       Copy the Binding Table in NV
   1502           *
   1503           * @param       none
   1504           *
   1505           * @return      none
   1506           */
   1507          void BindWriteNV( void )
   1508          {
   1509            bindTableIndex_t x;
   1510          
   1511            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1512            {
   1513              // Save the record to NV
   1514              osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
   1515                               (uint16)NV_BIND_REC_SIZE, &BindingTable[x] );
   1516            }
   1517          }
   1518          #endif // BINDINGTABLE_NV_SINGLES
   1519          
   1520          /*********************************************************************
   1521          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     52   BindCopyBackupToNewNV
        0     32   -> osal_nv_delete
        0     34   -> osal_nv_item_init
        0     32   -> osal_nv_item_len
        0     36   -> osal_nv_read
        0     36   -> osal_nv_write
      0     12   BindInitNV
        0     10   -> BindSetDefaultNV
        0     12   -> osal_nv_item_init
      0     20   BindRestoreFromNV
        0     16   -> BindUpgradeTableInNV
        0     20   -> osal_nv_read
      0     26   BindSetDefaultNV
        0     16   -> osal_nv_write
      0     36   BindUpgradeTableInNV
        0     16   -> BindCopyBackupToNewNV
        0     16   -> nwkCreateDuplicateNV
        0     16   -> osal_nv_delete
        0     16   -> osal_nv_item_len
        0     20   -> osal_nv_read
      0     35   BindWriteNV
        0     34   -> osal_memcpy
        0     35   -> osal_nv_write
      0      9   GetBindingTableEntry
      0     10   InitBindingTable
        0     10   -> osal_memset
      0     43   bindAddClusterIdToList
      1     39   bindAddEntry
        0     34   -> bdb_RepMarkHasBindingInEndpointClusterArray
        0     34   -> bdb_RepStartOrContinueReporting
        0     34   -> bindAddClusterIdToList
        0     34   -> bindAddrIndexGet
        0     34   -> bindAddrMgrLocalLoad
        0     34   -> bindFindEmpty
        0     34   -> bindIsClusterIDinList
        0     37   -> osal_memcpy
      0     56   bindAddrIndexGet
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrEntryLookupNwk
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      0     57   bindAddrMgrLocalLoad
        0     23   -> AddrMgrEntryUpdate
        0     23   -> AddrMgrExtAddrSet
        0     23   -> NLME_GetCoordExtAddr
        0     23   -> NLME_GetCoordShortAddr
        0     23   -> NLME_GetExtAddr
      2     25   bindAddressClear
        2     13   -> AddrMgrEntryRelease
      0      9   bindCapacity
      0     14   bindFind
        0     14   -> bindIsClusterIDinList
      2     34   bindFindEmpty
      0     12   bindFindExisting
        0     12   -> bindingAddrMgsHelperFind
      0     43   bindIsClusterIDinList
      0     14   bindNumBoundTo
        0     14   -> bindingAddrMgsHelperFind
      2      0   bindNumOfEntries
      0     12   bindNumReflections
        0     12   -> bindIsClusterIDinList
      0     14   bindRemoveClusterIdFromList
        0     14   -> bdb_RepUpdateMarkBindings
      0     12   bindRemoveDev
        0     12   -> bindAddressClear
        0     12   -> bindRemoveEntry
        0     12   -> bindingAddrMgsHelperFind
      2     12   bindRemoveEntry
        2      0   -> bdb_RepUpdateMarkBindings
        2      0   -> osal_memset
      0     10   bindRemoveSrcDev
        0     10   -> bindAddressClear
        0     10   -> bindRemoveEntry
      0     21   bindUpdateAddr
        0     21   -> bindingAddrMgsHelperFind
      0     22   bindingAddrMgsHelperConvert
        0     22   -> AddrMgrEntryGet
        0     22   -> sAddrExtCpy
      2     13   bindingAddrMgsHelperConvertShort
        2     13   -> AddrMgrEntryGet
      2     34   bindingAddrMgsHelperFind
        2     13   -> AddrMgrEntryLookupExt
        2     13   -> AddrMgrEntryLookupNwk
        2     13   -> AddrMgrExtAddrSet


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     479  BindCopyBackupToNewNV
      83  BindInitNV
     232  BindRestoreFromNV
      70  BindSetDefaultNV
     270  BindUpgradeTableInNV
     236  BindWriteNV
      78  GetBindingTableEntry
     126  InitBindingTable
      76  bindAddClusterIdToList
     668  bindAddEntry
     172  bindAddrIndexGet
     153  bindAddrMgrLocalLoad
       1  bindAddrMgrLocalLoaded
     127  bindAddressClear
      73  bindCapacity
      99  bindFind
      59  bindFindEmpty
     192  bindFindExisting
      71  bindIsClusterIDinList
     179  bindNumBoundTo
      66  bindNumOfEntries
      86  bindNumReflections
     167  bindRemoveClusterIdFromList
     222  bindRemoveDev
      31  bindRemoveEntry
      84  bindRemoveSrcDev
     138  bindUpdateAddr
      86  bindingAddrMgsHelperConvert
      57  bindingAddrMgsHelperConvertShort
     108  bindingAddrMgsHelperFind
       2  pBindInitNV
       2  pBindRestoreFromNV
       2  pBindSetDefaultNV
       2  pBindWriteNV
       2  pbindAddEntry
       2  pbindNumOfEntries
       2  pbindRemoveDev
     174  -- Other

 
 4 488 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
    15 bytes in segment XDATA_Z
 
   174 bytes of CODE     memory
 4 488 bytes of HUGECODE memory
    15 bytes of XDATA    memory

Errors: none
Warnings: none
