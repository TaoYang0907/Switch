///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              22/Jul/2020  11:58:17
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EW7FDD.tmp ("D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c"
//        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
//        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_DIV_MOD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_SUB
        EXTERN ?L_SUB_FROM_X
        EXTERN ?L_SUB_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?US_DIV_MOD
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??gp_ChangeChannelReq::?relay`,0203H
        FUNCTION `??gp_CommissioningMode::?relay`,0203H
        FUNCTION `??zclSampleApp_BatteryWarningCB::?relay`,0203H
        FUNCTION `??zclSampleLight_AdjustLightLevel::?relay`,0203H
        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_LevelControlMoveCB::?relay`,0203H
        FUNCTION `??zclSampleLight_LevelControlMoveToLevelCB::?re`,0203H
        FUNCTION `??zclSampleLight_LevelControlStepCB::?relay`,0203H
        FUNCTION `??zclSampleLight_LevelControlStopCB::?relay`,0203H
        FUNCTION `??zclSampleLight_MoveBasedOnRate::?relay`,0203H
        FUNCTION `??zclSampleLight_MoveBasedOnTime::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessCommissioningStatus::?r`,0203H
        FUNCTION `??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`,0203H
        FUNCTION `??zclSampleLight_ProcessIncomingMsg::?relay`,0203H
        FUNCTION `??zclSampleLight_TimeRateHelper::?relay`,0203H
        PUBLIC `??zclSampleLight_UpdateLedState::?relay`
        FUNCTION `??zclSampleLight_UpdateLedState::?relay`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_64
        FUNCTION gp_ChangeChannelReq,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION gp_CommissioningMode,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC reportableChange
        PUBLIC reportableChangeTest
        PUBLIC sLightLevel
        PUBLIC sLightOff
        PUBLIC sLightOn
        FUNCTION zclSampleApp_BatteryWarningCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_AdjustLightLevel,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_CurrentLevel32
        PUBLIC zclSampleLight_DstAddr
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC zclSampleLight_LevelChangeCmd
        FUNCTION zclSampleLight_LevelControlMoveCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION zclSampleLight_LevelControlMoveToLevelCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_LevelControlStepCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_LevelControlStopCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_LevelLastLevel
        FUNCTION zclSampleLight_MoveBasedOnRate,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclSampleLight_MoveBasedOnTime,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC zclSampleLight_NewLevel
        PUBLIC zclSampleLight_NewLevelUp
        FUNCTION zclSampleLight_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION zclSampleLight_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_ProcessInDiscCmdsRspCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_ProcessIncomingMsg,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclSampleLight_Rate32
        PUBLIC zclSampleLight_TaskID
        FUNCTION zclSampleLight_TimeRateHelper,080203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC zclSampleLight_UpdateLedState
        FUNCTION zclSampleLight_UpdateLedState,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_WithOnOff
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
RegisterVoltageWarningCB SYMBOL "RegisterVoltageWarningCB"
`??RegisterVoltageWarningCB::?relay` SYMBOL "?relay", RegisterVoltageWarningCB
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_RepAddAttrCfgRecordDefaultToList SYMBOL "bdb_RepAddAttrCfgRecordDefaultToList"
`??bdb_RepAddAttrCfgRecordDefaultToList::?relay` SYMBOL "?relay", bdb_RepAddAttrCfgRecordDefaultToList
bdb_RepChangedAttrValue SYMBOL "bdb_RepChangedAttrValue"
`??bdb_RepChangedAttrValue::?relay` SYMBOL "?relay", bdb_RepChangedAttrValue
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
gp_RegisterCommissioningModeCB SYMBOL "gp_RegisterCommissioningModeCB"
`??gp_RegisterCommissioningModeCB::?relay` SYMBOL "?relay", gp_RegisterCommissioningModeCB
gp_RegisterGPChangeChannelReqCB SYMBOL "gp_RegisterGPChangeChannelReqCB"
`??gp_RegisterGPChangeChannelReqCB::?relay` SYMBOL "?relay", gp_RegisterGPChangeChannelReqCB
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclSampleLight_ResetAttributesToDefaultValues SYMBOL "zclSampleLight_ResetAttributesToDefaultValues"
??zclSampleLight_ResetAttributesToDefaultValues SYMBOL "?relay", zclSampleLight_ResetAttributesToDefaultValues
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerCmdList SYMBOL "zcl_registerCmdList"
`??zcl_registerCmdList::?relay` SYMBOL "?relay", zcl_registerCmdList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_UpdateLedState SYMBOL "zclSampleLight_UpdateLedState"
`??zclSampleLight_UpdateLedState::?relay` SYMBOL "?relay", zclSampleLight_UpdateLedState
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??RegisterVoltageWarningCB::?relay`
        FUNCTION `??RegisterVoltageWarningCB::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`
        FUNCTION `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`,00H
        EXTERN `??bdb_RepChangedAttrValue::?relay`
        FUNCTION `??bdb_RepChangedAttrValue::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??gp_RegisterCommissioningModeCB::?relay`
        FUNCTION `??gp_RegisterCommissioningModeCB::?relay`,00H
        EXTERN `??gp_RegisterGPChangeChannelReqCB::?relay`
        FUNCTION `??gp_RegisterGPChangeChannelReqCB::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN ??zclSampleLight_ResetAttributesToDefaultValues
        FUNCTION ??zclSampleLight_ResetAttributesToDefaultValues,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerCmdList::?relay`
        FUNCTION `??zcl_registerCmdList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterVoltageWarningCB
        FUNCTION RegisterVoltageWarningCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepAddAttrCfgRecordDefaultToList
        FUNCTION bdb_RepAddAttrCfgRecordDefaultToList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepChangedAttrValue
        FUNCTION bdb_RepChangedAttrValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_RegisterCommissioningModeCB
        FUNCTION gp_RegisterCommissioningModeCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_RegisterGPChangeChannelReqCB
        FUNCTION gp_RegisterGPChangeChannelReqCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclCmdsArraySize
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_Cmds
        EXTERN zclSampleLight_LevelCurrentLevel
        EXTERN zclSampleLight_LevelOffTransitionTime
        EXTERN zclSampleLight_LevelOnLevel
        EXTERN zclSampleLight_LevelOnOffTransitionTime
        EXTERN zclSampleLight_LevelOnTransitionTime
        EXTERN zclSampleLight_LevelRemainingTime
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_ResetAttributesToDefaultValues
        FUNCTION zclSampleLight_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerCmdList
        FUNCTION zcl_registerCmdList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdpExternalStateTaskID

// D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample light application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee Light, based on Z-Stack 3.0. It can be configured as an
//   43   On/Off light or as a dimmable light, by undefining or defining ZCL_LEVEL_CTRL, respectively.
//   44 
//   45   This application is based on the common sample-application user interface. Please see the main
//   46   comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
//   47   this sample applicetion.
//   48   
//   49   Application-specific UI peripherals being used:
//   50 
//   51   - LEDs:
//   52     LED1 reflect the current light state (On / Off accordingly).
//   53 
//   54   Application-specific menu system:
//   55 
//   56     <TOGGLE LIGHT> Toggle the local light and display its status and level
//   57       Press OK to toggle the local light on and off.
//   58       This screen shows the following information
//   59         Line1: (only populated if ZCL_LEVEL_CTRL is defined)
//   60           LEVEL XXX - xxx is the current level of the light if the light state is ON, or the target level
//   61             of the light when the light state is off. The target level is the level that the light will be
//   62             set to when it is switched from off to on using the on or the toggle commands.
//   63         Line2:
//   64           LIGHT OFF / ON: shows the current state of the light.
//   65       Note when ZCL_LEVEL_CTRL is enabled:
//   66         - If the light state is ON and the light level is X, and then the light receives the OFF or TOGGLE 
//   67           commands: The level will decrease gradually until it reaches 1, and only then the light state will
//   68           be changed to OFF. The level then will be restored to X, with the state staying OFF. At this stage
//   69           the light is not lighting, and the level represent the target level for the next ON or TOGGLE 
//   70           commands.
//   71         - If the light state is OFF and the light level is X, and then the light receives the ON or TOGGLE
//   72           commands; The level will be set to 1, the light state will be set to ON, and then the level will
//   73           increase gradually until it reaches level X.
//   74         - Any level-setting command will affect the level directly, and may also affect the on/off state,
//   75           depending on the command's arguments.       
//   76 
//   77 *********************************************************************/
//   78 
//   79 /*********************************************************************
//   80  * INCLUDES
//   81  */
//   82 #include "ZComDef.h"
//   83 #include "OSAL.h"
//   84 #include "AF.h"
//   85 #include "ZDApp.h"
//   86 #include "ZDObject.h"
//   87 #include "MT_SYS.h"
//   88 
//   89 #include "nwk_util.h"
//   90 
//   91 #include "zcl.h"
//   92 #include "zcl_general.h"
//   93 #include "zcl_ha.h"
//   94 #include "zcl_diagnostic.h"
//   95 
//   96 #include "zcl_samplelight.h"
//   97    
//   98 #include "bdb.h"
//   99 #include "bdb_interface.h"
//  100 #include "bdb_Reporting.h"
//  101 
//  102  //GP_UPDATE
//  103 #include "gp_interface.h"
//  104    
//  105 #include "onboard.h"
//  106 
//  107 /* HAL */
//  108 #include "hal_lcd.h"
//  109 #include "hal_led.h"
//  110 #include "hal_key.h"
//  111 
//  112 #include "NLMEDE.h"
//  113 
//  114 // Added to include TouchLink initiator functionality 
//  115 #if defined ( BDB_TL_INITIATOR )
//  116   #include "bdb_touchlink_initiator.h"
//  117 #endif // BDB_TL_INITIATOR
//  118 
//  119 #if defined ( BDB_TL_TARGET )
//  120   #include "bdb_touchlink_target.h"
//  121 #endif // BDB_TL_TARGET
//  122 
//  123 #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
//  124   #include "bdb_touchlink.h"
//  125 #endif
//  126 
//  127 
//  128 /*********************************************************************
//  129  * MACROS
//  130  */
//  131 #define APP_TITLE "TI Sample Light"
//  132 
//  133 /*********************************************************************
//  134  * TYPEDEFS
//  135  */
//  136 
//  137 /*********************************************************************
//  138  * GLOBAL VARIABLES
//  139  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 
//  143 /*********************************************************************
//  144  * GLOBAL FUNCTIONS
//  145  */
//  146 
//  147 /*********************************************************************
//  148  * LOCAL VARIABLES
//  149  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  151 
//  152 // Test Endpoint to allow SYS_APP_MSGs
//  153 //static endPointDesc_t sampleLight_TestEp =
//  154 //{
//  155 //  SAMPLELIGHT_ENDPOINT,
//  156 //  0,
//  157 //  &zclSampleLight_TaskID,
//  158 //  (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  159 //  (afNetworkLatencyReq_t)0            // No Network Latency req
//  160 //};
//  161 
//  162 #ifdef ZCL_LEVEL_CTRL

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  163 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
zclSampleLight_WithOnOff:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164 uint8 zclSampleLight_NewLevel;        // new level when done moving
zclSampleLight_NewLevel:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  165 uint8 zclSampleLight_LevelChangeCmd; // current level change was triggered by an on/off command
zclSampleLight_LevelChangeCmd:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
zclSampleLight_NewLevelUp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  167 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
zclSampleLight_CurrentLevel32:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  168 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
zclSampleLight_Rate32:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
zclSampleLight_LevelLastLevel:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  170 #endif
//  171 
//  172 #ifdef BDB_REPORTING
//  173 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
//  174   uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0x2C01 is 300 in int16
//  175   uint8 reportableChangeTest[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
//  176 #endif
//  177 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4

        RSEG XDATA_I:XDATA:NOROOT(0)
//  178   uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00}; // 0x2C01 is 300 in int16   0x012c
reportableChange:
        DATA32
        DS 4
        REQUIRE `?<Initializer for reportableChange>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  179   uint8 reportableChangeTest[] = {0x00, 0x00, 0x00, 0x00};     
reportableChangeTest:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  180 #endif 
//  181 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
//  182   uint8 reportableChange[] = {0x2C, 0x01}; // 0x2C01 is 300 in int16
//  183   uint8 reportableChangeTest[] = {0x00, 0x00};
//  184 #endif 
//  185 #endif
//  186 
//  187 /*********************************************************************
//  188  * LOCAL FUNCTIONS
//  189  */
//  190 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  191 static void zclSampleLight_BasicResetCB( void );
//  192 static void zclSampleLight_OnOffCB( uint8 cmd );
//  193 //GP_UPDATE
//  194 #if (ZG_BUILD_RTR_TYPE)
//  195 static void gp_CommissioningMode(bool isEntering);
//  196 static uint8 gp_ChangeChannelReq(void);
//  197 #endif
//  198 
//  199 
//  200 static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
//  201 
//  202 
//  203 #ifdef ZCL_LEVEL_CTRL
//  204 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  205 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  206 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  207 static void zclSampleLight_LevelControlStopCB( void );
//  208 static void zclSampleLight_DefaultMove( uint8 OnOff );
//  209 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  210 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  211 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  212 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  213 static void zclSampleLight_AdjustLightLevel( void );
//  214 #endif
//  215 
//  216 // Functions to process ZCL Foundation incoming Command/Response messages
//  217 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  218 #ifdef ZCL_READ
//  219 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  220 #endif
//  221 #ifdef ZCL_WRITE
//  222 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  223 #endif
//  224 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  225 #ifdef ZCL_DISCOVER
//  226 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  227 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  228 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  229 #endif
//  230 
//  231 static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
//  232 
//  233 void zclSampleLight_UpdateLedState(void);
//  234 
//  235 /*********************************************************************
//  236  * CONSTANTS
//  237  */
//  238 
//  239 #define LEVEL_CHANGED_BY_LEVEL_CMD  0
//  240 #define LEVEL_CHANGED_BY_ON_CMD     1
//  241 #define LEVEL_CHANGED_BY_OFF_CMD    2
//  242 
//  243 /*********************************************************************
//  244  * STATUS STRINGS
//  245  */
//  246 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  247   const char sLightOn[]      = "   LIGHT ON     ";
sLightOn:
        DB "   LIGHT ON     "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  248   const char sLightOff[]     = "   LIGHT OFF    ";
sLightOff:
        DB "   LIGHT OFF    "
//  249   #ifdef ZCL_LEVEL_CTRL

        RSEG XDATA_I:XDATA:NOROOT(0)
//  250     char sLightLevel[]        = "   LEVEL ###    "; // displays level 1-254
sLightLevel:
        DATA8
        DS 17
        REQUIRE `?<Initializer for sLightLevel>`
        REQUIRE __INIT_XDATA_I
//  251   #endif
//  252 #endif
//  253 
//  254 /*********************************************************************
//  255  * REFERENCED EXTERNALS
//  256  */
//  257 extern int16 zdpExternalStateTaskID;
//  258 
//  259 /*********************************************************************
//  260  * ZCL General Profile Callback table
//  261  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  262 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 32
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  263 {
//  264   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  265   NULL,                                   // Identify Trigger Effect command
//  266   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  267   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  268   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  269   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  270 #ifdef ZCL_LEVEL_CTRL
//  271   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  272   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  273   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  274   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  275 #endif
//  276 #ifdef ZCL_GROUPS
//  277   NULL,                                   // Group Response commands
//  278 #endif
//  279 #ifdef ZCL_SCENES
//  280   NULL,                                  // Scene Store Request command
//  281   NULL,                                  // Scene Recall Request command
//  282   NULL,                                  // Scene Response command
//  283 #endif
//  284 #ifdef ZCL_ALARMS
//  285   NULL,                                  // Alarm (Response) commands
//  286 #endif
//  287 #ifdef SE_UK_EXT
//  288   NULL,                                  // Get Event Log command
//  289   NULL,                                  // Publish Event Log command
//  290 #endif
//  291   NULL,                                  // RSSI Location command
//  292   NULL                                   // RSSI Location Response command
//  293 };
//  294 
//  295 /*********************************************************************
//  296  * @fn          zclSampleLight_Init
//  297  *
//  298  * @brief       Initialization function for the zclGeneral layer.
//  299  *
//  300  * @param       none
//  301  *
//  302  * @return      none
//  303  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  304 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  305 {
        FUNCALL zclSampleLight_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclSampleLight_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerCmdList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterVoltageWarningCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, gp_RegisterCommissioningModeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, gp_RegisterGPChangeChannelReqCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, bdb_RepAddAttrCfgRecordDefaultToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
//  306   zclSampleLight_TaskID = task_id;
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      @DPTR,A
//  307 
//  308   // Set destination address to indirect
//  309   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV       DPTR,#zclSampleLight_DstAddr + 8
        CLR       A
        MOVX      @DPTR,A
//  310   zclSampleLight_DstAddr.endPoint = 0;
        INC       DPTR
        MOVX      @DPTR,A
//  311   zclSampleLight_DstAddr.addr.shortAddr = 0;
        MOV       DPTR,#zclSampleLight_DstAddr
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  312 
//  313   // Register the Simple Descriptor for this application
//  314   bdb_RegisterSimpleDescriptor( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclSampleLight_SimpleDesc & 0xff
        MOV       R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  315 
//  316   // Register the ZCL General Cluster Library callback functions
//  317   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x8
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  318 
//  319   // Register the application's attribute list
//  320   zclSampleLight_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
        LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
//  321   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclSampleLight_Attrs & 0xff
        MOV       R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV       DPTR,#zclSampleLight_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  322 
//  323 #ifdef ZCL_LEVEL_CTRL
//  324   zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_LevelLastLevel
        MOVX      @DPTR,A
//  325 #endif
//  326 
//  327   // Register the Application to receive the unprocessed Foundation command/response messages
//  328   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  329 
//  330 #ifdef ZCL_DISCOVER
//  331   // Register the application's command list
//  332   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
        ; Setup parameters for call to function zcl_registerCmdList
        MOV       R4,#zclSampleLight_Cmds & 0xff
        MOV       R5,#(zclSampleLight_Cmds >> 8) & 0xff
        MOV       DPTR,#zclCmdsArraySize
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??zcl_registerCmdList::?relay`; Banked call to: zcl_registerCmdList
//  333 #endif
//  334 
//  335   // Register low voltage NV memory protection application callback
//  336   RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
        ; Setup parameters for call to function RegisterVoltageWarningCB
        MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
        MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
        LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
//  337 
//  338   // Register for all key events - This app will handle all key events
//  339   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  340   
//  341   bdb_RegisterCommissioningStatusCB( zclSampleLight_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV       R2,#`??zclSampleLight_ProcessCommissioningStatus::?r` & 0xff
        MOV       R3,#(`??zclSampleLight_ProcessCommissioningStatus::?r` >> 8) & 0xff
        LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  342   
//  343   // Register for a test endpoint
//  344   //afRegister( &sampleLight_TestEp );
//  345 
//  346 #ifdef ZCL_DIAGNOSTIC
//  347   // Register the application's callback function to read/write attribute data.
//  348   // This is only required when the attribute data format is unknown to ZCL.
//  349   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  350 
//  351   if ( zclDiagnostic_InitStats() == ZSuccess )
//  352   {
//  353     // Here the user could start the timer to save Diagnostics to NV
//  354   }
//  355 #endif
//  356   
//  357 //GP_UPDATE  
//  358 #if (ZG_BUILD_RTR_TYPE)  
//  359   gp_RegisterCommissioningModeCB(gp_CommissioningMode);
        ; Setup parameters for call to function gp_RegisterCommissioningModeCB
        MOV       R2,#`??gp_CommissioningMode::?relay` & 0xff
        MOV       R3,#(`??gp_CommissioningMode::?relay` >> 8) & 0xff
        LCALL     `??gp_RegisterCommissioningModeCB::?relay`; Banked call to: gp_RegisterCommissioningModeCB
//  360   gp_RegisterGPChangeChannelReqCB(gp_ChangeChannelReq);
        ; Setup parameters for call to function gp_RegisterGPChangeChannelReqCB
        MOV       R2,#`??gp_ChangeChannelReq::?relay` & 0xff
        MOV       R3,#(`??gp_ChangeChannelReq::?relay` >> 8) & 0xff
        LCALL     `??gp_RegisterGPChangeChannelReqCB::?relay`; Banked call to: gp_RegisterGPChangeChannelReqCB
//  361 #endif
//  362   
//  363   zdpExternalStateTaskID = zclSampleLight_TaskID;
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       DPTR,#zdpExternalStateTaskID
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  364   
//  365   bdb_RepAddAttrCfgRecordDefaultToList(SAMPLELIGHT_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF, ATTRID_ON_OFF, 0, 0xFF, reportableChangeTest);
        ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
        MOV       ?V0,#reportableChangeTest & 0xff
        MOV       ?V1,#(reportableChangeTest >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#-0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x6
        MOV       R3,#0x0
        MOV       R1,#0x8
        LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  366   
//  367 //  bdb_RepAddAttrCfgRecordDefaultToList(SAMPLELIGHT_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG, ATTRID_ON_OFF, 0, 10, reportableChangeTest);
//  368 }
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  369 
//  370 /*********************************************************************
//  371  * @fn          zclSample_event_loop
//  372  *
//  373  * @brief       Event Loop Processor for zclGeneral.
//  374  *
//  375  * @param       none
//  376  *
//  377  * @return      none
//  378  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  379 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  380 {
        FUNCALL zclSampleLight_event_loop, zclSampleLight_AdjustLightLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, bdb_RepChangedAttrValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIncomingMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  381   afIncomingMSGPacket_t *MSGpkt;
//  382 
//  383   (void)task_id;  // Intentionally unreferenced parameter
//  384 
//  385   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclSampleLight_event_loop_0
//  386   {
//  387     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  388     {
//  389       switch ( MSGpkt->hdr.event )
//  390       {
//  391         case ZCL_INCOMING_MSG:
//  392           // Incoming ZCL Foundation command/response messages
//  393           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  394           break;
//  395 
//  396         case KEY_CHANGE:
//  397           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  398           break;
//  399 
//  400         case ZDO_STATE_CHANGE:
//  401           break;
//  402 
//  403         default:
//  404           break;
//  405       }
//  406 
//  407       // Release the memory
//  408       osal_msg_deallocate( (uint8 *)MSGpkt );
//  409     }
//  410 
//  411     // return unprocessed events
//  412     return (events ^ SYS_EVENT_MSG);
//  413   }
//  414 
//  415 #ifdef ZCL_LEVEL_CTRL
//  416   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
        MOV       A,R2
        ANL       A,#0x2
        JZ        ??zclSampleLight_event_loop_1
//  417   {
//  418     zclSampleLight_AdjustLightLevel();
        ; Setup parameters for call to function zclSampleLight_AdjustLightLevel
        LCALL     `??zclSampleLight_AdjustLightLevel::?relay`; Banked call to: zclSampleLight_AdjustLightLevel
//  419     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
        MOV       A,R6
        XRL       A,#0x2
        MOV       R2,A
        MOV       A,R7
        SJMP      ??zclSampleLight_event_loop_2
//  420   }
??zclSampleLight_event_loop_3:
        CLR       A
??zclSampleLight_event_loop_4:
        MOVX      @DPTR,A
        ; Setup parameters for call to function bdb_RepChangedAttrValue
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x6
        MOV       R3,#0x0
        MOV       R1,#0x8
        LCALL     `??bdb_RepChangedAttrValue::?relay`; Banked call to: bdb_RepChangedAttrValue
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
??zclSampleLight_event_loop_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleLight_event_loop_6
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x34
        JZ        ??zclSampleLight_event_loop_7
        ADD       A,#0x74
        JZ        ??zclSampleLight_event_loop_8
        SJMP      ??zclSampleLight_event_loop_5
??zclSampleLight_event_loop_7:
        ; Setup parameters for call to function zclSampleLight_ProcessIncomingMsg
        LCALL     `??zclSampleLight_ProcessIncomingMsg::?relay`; Banked call to: zclSampleLight_ProcessIncomingMsg
        SJMP      ??zclSampleLight_event_loop_5
??zclSampleLight_event_loop_8:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       C,0xE0 /* A   */.5
        JNC       ??zclSampleLight_event_loop_9
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xa
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
??zclSampleLight_event_loop_9:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.2
        JNC       ??zclSampleLight_event_loop_5
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x2
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_event_loop_3
        MOV       A,#0x1
        SJMP      ??zclSampleLight_event_loop_4
??zclSampleLight_event_loop_6:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
??zclSampleLight_event_loop_2:
        MOV       R3,A
        SJMP      ??zclSampleLight_event_loop_10
//  421 #endif
//  422 
//  423 #if ZG_BUILD_ENDDEVICE_TYPE    
//  424   if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
//  425   {
//  426     bdb_ZedAttemptRecoverNwk();
//  427     return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
//  428   }
//  429 #endif
//  430 
//  431   if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
??zclSampleLight_event_loop_1:
        MOV       A,R2
        ANL       A,#0x10
        JZ        ??zclSampleLight_event_loop_11
//  432   {
//  433     return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
        MOV       A,R2
        XRL       A,#0x10
        SJMP      ??zclSampleLight_event_loop_12
//  434   }
//  435 
//  436   if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
??zclSampleLight_event_loop_11:
        MOV       A,R2
        ANL       A,#0x20
        JZ        ??zclSampleLight_event_loop_13
//  437   {
//  438     return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
        MOV       A,R2
        XRL       A,#0x20
??zclSampleLight_event_loop_12:
        MOV       R2,A
        SJMP      ??zclSampleLight_event_loop_10
//  439   }
//  440 
//  441   // Discard unknown events
//  442   return 0;
??zclSampleLight_event_loop_13:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclSampleLight_event_loop_10:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  443 }
          CFI EndBlock cfiBlock1
//  444 
//  445 
//  446 /*********************************************************************
//  447  * @fn      zclSampleLight_HandleKeys
//  448  *
//  449  * @brief   Handles all key events for this device.
//  450  *
//  451  * @param   shift - true if in shift/alt.
//  452  * @param   keys - bit field for key events. Valid entries:
//  453  *                 HAL_KEY_SW_5
//  454  *                 HAL_KEY_SW_4
//  455  *                 HAL_KEY_SW_2
//  456  *                 HAL_KEY_SW_1
//  457  *
//  458  * @return  none
//  459  */
//  460 static void zclSampleLight_HandleKeys( byte shift, byte keys )
//  461 {
//  462   if ( keys & HAL_KEY_SW_6 )  // Switch 6
//  463   {     
//  464     HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  465     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING  );
//  466   }
//  467   if ( keys & HAL_KEY_SW_5 )  // Switch 5
//  468   {     
//  469     HalLedSet ( HAL_LED_2, HAL_LED_MODE_BLINK );
//  470     if ( zclSampleLight_OnOff == LIGHT_OFF )
//  471     {
//  472       zclSampleLight_OnOff = LIGHT_ON;
//  473     }
//  474     else
//  475     {
//  476       zclSampleLight_OnOff = LIGHT_OFF;
//  477     }
//  478     bdb_RepChangedAttrValue(SAMPLELIGHT_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF, ATTRID_ON_OFF);
//  479     zclSampleLight_UpdateLedState();
//  480   }
//  481 }
//  482 
//  483 //GP_UPDATE
//  484 #if (ZG_BUILD_RTR_TYPE)
//  485 /*********************************************************************
//  486  * @fn      gp_CommissioningMode
//  487  *
//  488  * @brief   Callback that notifies the application that gp Proxy is entering 
//  489  *          into commissioning mode
//  490  *
//  491  * @param   isEntering - 
//  492  *
//  493  * @return  
//  494  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  495 static void gp_CommissioningMode(bool isEntering)
gp_CommissioningMode:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function gp_CommissioningMode
        CODE
//  496 {
        ; Saved register size: 0
        ; Auto size: 0
//  497   if(isEntering)
//  498   {
//  499     //Led on indicating enter commissioning mode
//  500   }
//  501   else
//  502   {
//  503     //Led off indicating enter commissioning mode
//  504   }
//  505 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock2
//  506 
//  507 
//  508 
//  509 //GP_UPDATE
//  510 /*********************************************************************
//  511  * @fn      gp_ChangeChannelReq
//  512  *
//  513  * @brief   Callback function to notify the application about a GP commissioning 
//  514  * request that will change the current channel for at most 
//  515  * gpBirectionalCommissioningChangeChannelTimeout ms
//  516  *
//  517  * @param   channel - Channel in which the commissioning will take place
//  518  *
//  519  * @return  TRUE to allow change channel, FALSE to do not allow
//  520  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  521 static uint8 gp_ChangeChannelReq(void)
gp_ChangeChannelReq:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function gp_ChangeChannelReq
        CODE
//  522 {
        ; Saved register size: 0
        ; Auto size: 0
//  523   bool allowChangeChannel = TRUE;
//  524   
//  525   //Check application state to decide if allow change channel or not
//  526   
//  527   return allowChangeChannel;
        MOV       R1,#0x1
        LJMP      ?BRET
//  528 }
          CFI EndBlock cfiBlock3
//  529 
//  530 #endif
//  531 
//  532 
//  533 /*********************************************************************
//  534  * @fn      zclSampleLight_ProcessCommissioningStatus
//  535  *
//  536  * @brief   Callback in which the status of the commissioning process are reported
//  537  *
//  538  * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
//  539  *
//  540  * @return  none
//  541  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  542 static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
zclSampleLight_ProcessCommissioningStatus:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zclSampleLight_ProcessCommissioningStatus
        CODE
//  543 {
        FUNCALL zclSampleLight_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessCommissioningStatus, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  544   switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleLight_ProcessCommissioningStatus_0
        DEC       A
        JNZ       ??zclSampleLight_ProcessCommissioningStatus_1
//  545   {
//  546     case BDB_COMMISSIONING_FORMATION:
//  547       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_ProcessCommissioningStatus_1
//  548       {
//  549         //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
//  550         bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x2
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
        SJMP      ??zclSampleLight_ProcessCommissioningStatus_1
//  551       }
//  552       else
//  553       {
//  554         //Want to try other channels?
//  555         //try with bdb_setChannelAttribute
//  556       }
//  557     break;
//  558     case BDB_COMMISSIONING_NWK_STEERING:
//  559       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
??zclSampleLight_ProcessCommissioningStatus_0:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_ProcessCommissioningStatus_1
//  560       {
//  561         //YOUR JOB:
//  562         //We are on the nwk, what now?
//  563         HalLedSet ( HAL_LED_1, HAL_LED_MODE_FLASH );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x4
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  564       }
//  565       else
//  566       {
//  567         //See the possible errors for nwk steering procedure
//  568         //No suitable networks found
//  569         //Want to try other channels?
//  570         //try with bdb_setChannelAttribute
//  571       }
//  572     break;
//  573     case BDB_COMMISSIONING_FINDING_BINDING:
//  574       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  575       {
//  576         //YOUR JOB:
//  577       }
//  578       else
//  579       {
//  580         //YOUR JOB:
//  581         //retry?, wait for user interaction?
//  582       }
//  583     break;
//  584     case BDB_COMMISSIONING_INITIALIZATION:
//  585       //Initialization notification can only be successful. Failure on initialization 
//  586       //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  587       
//  588       //YOUR JOB:
//  589       //We are on a network, what now?
//  590       
//  591     break;
//  592 #if ZG_BUILD_ENDDEVICE_TYPE    
//  593     case BDB_COMMISSIONING_PARENT_LOST:
//  594       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
//  595       {
//  596         //We did recover from losing parent
//  597       }
//  598       else
//  599       {
//  600         //Parent not found, attempt to rejoin again after a fixed delay
//  601         osal_start_timerEx(zclSampleLight_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
//  602       }
//  603     break;
//  604 #endif 
//  605   }
//  606 
//  607 }
??zclSampleLight_ProcessCommissioningStatus_1:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock4
//  608 
//  609 /*********************************************************************
//  610  * @fn      zclSampleLight_BasicResetCB
//  611  *
//  612  * @brief   Callback from the ZCL General Cluster Library
//  613  *          to set all the Basic Cluster attributes to default values.
//  614  *
//  615  * @param   none
//  616  *
//  617  * @return  none
//  618  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  619 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  620 {
        FUNCALL zclSampleLight_BasicResetCB, zclSampleLight_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  621   //Reset every attribute in all supported cluster to their default value.
//  622 
//  623   zclSampleLight_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
        LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
//  624 
//  625   zclSampleLight_UpdateLedState();
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
//  626 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock5
//  627 
//  628 /*********************************************************************
//  629  * @fn      zclSampleLight_OnOffCB
//  630  *
//  631  * @brief   Callback from the ZCL General Cluster Library when
//  632  *          it received an On/Off Command for this application.
//  633  *
//  634  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  635  *
//  636  * @return  none
//  637  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  638 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  639 {
        FUNCALL zclSampleLight_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, zclSampleLight_MoveBasedOnRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, bdb_RepChangedAttrValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
//  640   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL     `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV       DPL,R2
        MOV       DPH,R3
//  641 
//  642   uint8 OnOff;
//  643 
//  644   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV       DPTR,#zclSampleLight_DstAddr
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  645 
//  646 
//  647   // Turn on the light
//  648   if ( cmd == COMMAND_ON )
        MOV       A,#0x1
        XRL       A,R7
        JZ        ??zclSampleLight_OnOffCB_0
//  649   {
//  650     OnOff = LIGHT_ON;
//  651   }
//  652   // Turn off the light
//  653   else if ( cmd == COMMAND_OFF )
        MOV       A,R7
        JZ        ??zclSampleLight_OnOffCB_1
//  654   {
//  655     OnOff = LIGHT_OFF;
//  656   }
//  657   // Toggle the light
//  658   else if ( cmd == COMMAND_TOGGLE )
        MOV       A,#0x2
        XRL       A,R7
        JNZ       ??zclSampleLight_OnOffCB_2
//  659   {
//  660 #ifdef ZCL_LEVEL_CTRL
//  661     if (zclSampleLight_LevelRemainingTime > 0) 
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ        ??zclSampleLight_OnOffCB_3
//  662     {
//  663       if (zclSampleLight_NewLevelUp)
        MOV       DPTR,#zclSampleLight_NewLevelUp
        MOVX      A,@DPTR
        JZ        ??zclSampleLight_OnOffCB_0
??zclSampleLight_OnOffCB_1:
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        MOV       A,#0x2
        MOVX      @DPTR,A
        MOV       R6,#0x1
        MOV       DPTR,#zclSampleLight_LevelOffTransitionTime
        SJMP      ??zclSampleLight_OnOffCB_4
//  664       {
//  665         OnOff = LIGHT_OFF;
//  666       }
//  667       else
//  668       {
//  669         OnOff = LIGHT_ON;
//  670       }
//  671     }
//  672     else
//  673     {
//  674       if (zclSampleLight_OnOff == LIGHT_ON)
??zclSampleLight_OnOffCB_3:
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclSampleLight_OnOffCB_0
        SJMP      ??zclSampleLight_OnOffCB_1
//  675       {
//  676         OnOff = LIGHT_OFF;
//  677       }
//  678       else
//  679       {
//  680         OnOff = LIGHT_ON;
//  681       }
//  682     }
//  683 #else
//  684     if (zclSampleLight_OnOff == LIGHT_ON)
//  685     {
//  686       OnOff = LIGHT_OFF;
//  687     }
//  688     else
//  689     {
//  690       OnOff = LIGHT_ON;
//  691     }
//  692 #endif
//  693   }
//  694 
//  695 #ifdef ZCL_LEVEL_CTRL
//  696   zclSampleLight_LevelChangeCmd = (OnOff == LIGHT_ON ? LEVEL_CHANGED_BY_ON_CMD : LEVEL_CHANGED_BY_OFF_CMD);
??zclSampleLight_OnOffCB_2:
        MOV       A,R2
        JZ        ??zclSampleLight_OnOffCB_1
??zclSampleLight_OnOffCB_0:
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        MOV       A,#0x1
        MOVX      @DPTR,A
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_OnOffCB_5
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOV       A,#0x1
        MOVX      @DPTR,A
??zclSampleLight_OnOffCB_5:
        MOV       DPTR,#zclSampleLight_LevelOnLevel
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??zclSampleLight_OnOffCB_6
        MOV       DPTR,#zclSampleLight_LevelLastLevel
??zclSampleLight_OnOffCB_6:
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       DPTR,#zclSampleLight_LevelOnTransitionTime
??zclSampleLight_OnOffCB_4:
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??zclSampleLight_OnOffCB_7
        MOV       A,#-0x1
        XRL       A,R1
??zclSampleLight_OnOffCB_7:
        JNZ       ??CrossCallReturnLabel_23
        MOV       DPTR,#zclSampleLight_LevelOnOffTransitionTime
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??zclSampleLight_OnOffCB_8
        MOV       A,#-0x1
        XRL       A,R1
??zclSampleLight_OnOffCB_8:
        JNZ       ??zclSampleLight_OnOffCB_9
        MOV       R0,#0x1
        MOV       R1,#0x0
??zclSampleLight_OnOffCB_9:
        MOV       DPTR,#zclSampleLight_WithOnOff
        MOV       A,#0x1
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclSampleLight_MoveBasedOnRate
        MOV       ?V0,#0x18
        MOV       ?V1,#-0x1c
        MOV       ?V2,#0x3
        MOV       ?V3,#0x0
        MOV       ?V4,R0
        MOV       ?V5,R1
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_DIV_MOD
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zclSampleLight_MoveBasedOnRate::?relay`; Banked call to: zclSampleLight_MoveBasedOnRate
//  697 
//  698   zclSampleLight_DefaultMove(OnOff);
//  699 #else
//  700   zclSampleLight_OnOff = OnOff;
//  701 #endif
//  702   bdb_RepChangedAttrValue(SAMPLELIGHT_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF, ATTRID_ON_OFF);
        ; Setup parameters for call to function bdb_RepChangedAttrValue
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x6
        MOV       R3,#0x0
        MOV       R1,#0x8
        LCALL     `??bdb_RepChangedAttrValue::?relay`; Banked call to: bdb_RepChangedAttrValue
//  703   zclSampleLight_UpdateLedState();
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
//  704 }
        LJMP      ??Subroutine11_0 & 0xFFFF
          CFI EndBlock cfiBlock6
//  705 
//  706 #ifdef ZCL_LEVEL_CTRL
//  707 /*********************************************************************
//  708  * @fn      zclSampleLight_TimeRateHelper
//  709  *
//  710  * @brief   Calculate time based on rate, and startup level state machine
//  711  *
//  712  * @param   newLevel - new level for current level
//  713  *
//  714  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
//  715  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  716 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
zclSampleLight_TimeRateHelper:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zclSampleLight_TimeRateHelper
        CODE
//  717 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  718   uint32 diff;
//  719   uint32 newLevel32;
//  720 
//  721   // remember current and new level
//  722   zclSampleLight_NewLevel = newLevel;
        MOV       DPTR,#zclSampleLight_NewLevel
        MOVX      @DPTR,A
//  723   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_MUL
        MOV       DPTR,#zclSampleLight_CurrentLevel32
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
//  724 
//  725   // calculate diff
//  726   newLevel32 = (uint32)1000 * newLevel;
        MOV       ?V4,R6
        CLR       A
        MOV       ?V5,A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_MUL
//  727   if ( zclSampleLight_LevelCurrentLevel > newLevel )
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        MOV       DPTR,#zclSampleLight_CurrentLevel32
        JNC       ??zclSampleLight_TimeRateHelper_0
//  728   {
//  729     diff = zclSampleLight_CurrentLevel32 - newLevel32;
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_SUB
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,?V2
        MOV       ?V7,?V3
//  730     zclSampleLight_NewLevelUp = FALSE;  // moving down
        MOV       DPTR,#zclSampleLight_NewLevelUp
        CLR       A
        SJMP      ??zclSampleLight_TimeRateHelper_1
//  731   }
//  732   else
//  733   {
//  734     diff = newLevel32 - zclSampleLight_CurrentLevel32;
??zclSampleLight_TimeRateHelper_0:
        MOV       R0,#?V4
        LCALL     ?L_SUB_X
//  735     zclSampleLight_NewLevelUp = TRUE;   // moving up
        MOV       DPTR,#zclSampleLight_NewLevelUp
        MOV       A,#0x1
??zclSampleLight_TimeRateHelper_1:
        MOVX      @DPTR,A
//  736   }
//  737 
//  738   return ( diff );
        MOV       R2,?V4
        MOV       R3,?V5
        MOV       R4,?V6
        MOV       R5,?V7
        SJMP      ??Subroutine11_0
//  739 }
          CFI EndBlock cfiBlock7
//  740 
//  741 /*********************************************************************
//  742  * @fn      zclSampleLight_MoveBasedOnRate
//  743  *
//  744  * @brief   Calculate time based on rate, and startup level state machine
//  745  *
//  746  * @param   newLevel - new level for current level
//  747  * @param   rate16   - fixed point rate (e.g. 16.123)
//  748  *
//  749  * @return  none
//  750  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       DPTR,#__Constant_64
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock8
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  751 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
zclSampleLight_MoveBasedOnRate:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zclSampleLight_MoveBasedOnRate
        CODE
//  752 {
        FUNCALL zclSampleLight_MoveBasedOnRate, zclSampleLight_TimeRateHelper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_MoveBasedOnRate, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
//  753   uint32 diff;
//  754 
//  755   // determine how much time (in 10ths of seconds) based on the difference and rate
//  756   zclSampleLight_Rate32 = rate;
        MOV       DPTR,#zclSampleLight_Rate32
        MOV       R0,#?V4
        LCALL     ?L_MOV_TO_X
//  757   diff = zclSampleLight_TimeRateHelper( newLevel );
//  758   zclSampleLight_LevelRemainingTime = diff / rate;
        ; Setup parameters for call to function zclSampleLight_TimeRateHelper
        LCALL     `??zclSampleLight_TimeRateHelper::?relay`; Banked call to: zclSampleLight_TimeRateHelper
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?UL_DIV_MOD
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  759   if ( !zclSampleLight_LevelRemainingTime )
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JNZ       ??zclSampleLight_MoveBasedOnRate_0
//  760   {
//  761     zclSampleLight_LevelRemainingTime = 1;
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  762   }
//  763 
//  764   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
??zclSampleLight_MoveBasedOnRate_0:
        ; Setup parameters for call to function osal_start_timerEx
        SJMP      ?Subroutine1
//  765 }
          CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclSampleLight_MoveBasedOnRate
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zclSampleLight_AdjustLightLevel
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zclSampleLight_AdjustLightLevel
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zclSampleLight_OnOffCB
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclSampleLight_OnOffCB
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zclSampleLight_OnOffCB
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_2
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-4
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function zclSampleLight_MoveBasedOnRate
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_3
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-4
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zclSampleLight_AdjustLightLevel
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_4
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-4
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zclSampleLight_AdjustLightLevel
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_5
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-4
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_19
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-4
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_20
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-4
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zclSampleLight_ProcessInDiscCmdsRspCmd
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_18
          CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond25) CFA_SP SP+-9
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26
//  766 
//  767 /*********************************************************************
//  768  * @fn      zclSampleLight_MoveBasedOnTime
//  769  *
//  770  * @brief   Calculate rate based on time, and startup level state machine
//  771  *
//  772  * @param   newLevel  - new level for current level
//  773  * @param   time      - in 10ths of seconds
//  774  *
//  775  * @return  none
//  776  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  777 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
zclSampleLight_MoveBasedOnTime:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function zclSampleLight_MoveBasedOnTime
        CODE
//  778 {
        FUNCALL zclSampleLight_MoveBasedOnTime, zclSampleLight_TimeRateHelper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_MoveBasedOnTime, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  779   uint16 diff;
//  780 
//  781   // determine rate (in units) based on difference and time
//  782   diff = zclSampleLight_TimeRateHelper( newLevel );
        ; Setup parameters for call to function zclSampleLight_TimeRateHelper
        LCALL     `??zclSampleLight_TimeRateHelper::?relay`; Banked call to: zclSampleLight_TimeRateHelper
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
//  783   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??zclSampleLight_MoveBasedOnTime_0
        MOV       A,#-0x1
        XRL       A,R3
??zclSampleLight_MoveBasedOnTime_0:
        JNZ       ??zclSampleLight_MoveBasedOnTime_1
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,?V0
        CLR       C
        SUBB      A,R2
        JNC       ??zclSampleLight_MoveBasedOnTime_2
        MOV       DPTR,#zclSampleLight_LevelOffTransitionTime
        SJMP      ??zclSampleLight_MoveBasedOnTime_3
??zclSampleLight_MoveBasedOnTime_2:
        MOV       DPTR,#zclSampleLight_LevelOnTransitionTime
??zclSampleLight_MoveBasedOnTime_3:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??zclSampleLight_MoveBasedOnTime_4
        MOV       A,#-0x1
        XRL       A,R3
??zclSampleLight_MoveBasedOnTime_4:
        JNZ       ??CrossCallReturnLabel_7
        MOV       DPTR,#zclSampleLight_LevelOnOffTransitionTime
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??zclSampleLight_MoveBasedOnTime_5
        MOV       A,#-0x1
        XRL       A,R3
??zclSampleLight_MoveBasedOnTime_5:
        JZ        ??zclSampleLight_MoveBasedOnTime_6
??zclSampleLight_MoveBasedOnTime_1:
        MOV       A,R2
        ORL       A,R3
        JNZ       ??zclSampleLight_MoveBasedOnTime_7
??zclSampleLight_MoveBasedOnTime_6:
        MOV       R2,#0x1
        MOV       R3,#0x0
??zclSampleLight_MoveBasedOnTime_7:
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  784   zclSampleLight_Rate32 = diff / time;
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ?US_DIV_MOD
        MOV       DPTR,#zclSampleLight_Rate32
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  785 
//  786   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        LJMP      ?Subroutine1 & 0xFFFF
//  787 }
          CFI EndBlock cfiBlock27
//  788 
//  789 /*********************************************************************
//  790  * @fn      zclSampleLight_GetTime
//  791  *
//  792  * @brief   Determine amount of time that MoveXXX will take to complete.
//  793  *
//  794  * @param   level = new level to move to
//  795  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
//  796  *
//  797  * @return  none
//  798  */
//  799 static uint16 zclSampleLight_GetTime( uint8 newLevel, uint16 time )
//  800 {
//  801   // there is a hiearchy of the amount of time to use for transistioning
//  802   // check each one in turn. If none of defaults are set, then use fastest
//  803   // time possible.
//  804   if ( time == 0xFFFF )
//  805   {
//  806     // use On or Off Transition Time if set (not 0xffff)
//  807     if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  808     {
//  809       time = zclSampleLight_LevelOffTransitionTime;
//  810     }
//  811     else
//  812     {
//  813       time = zclSampleLight_LevelOnTransitionTime;
//  814     }
//  815 
//  816     // else use OnOffTransitionTime if set (not 0xffff)
//  817     if ( time == 0xFFFF )
//  818     {
//  819       time = zclSampleLight_LevelOnOffTransitionTime;
//  820     }
//  821 
//  822     // else as fast as possible
//  823     if ( time == 0xFFFF )
//  824     {
//  825       time = 1;
//  826     }
//  827   }
//  828 
//  829   if ( time == 0 )
//  830   {
//  831     time = 1; // as fast as possible
//  832   }
//  833 
//  834   return ( time );
//  835 }
//  836 
//  837 /*********************************************************************
//  838  * @fn      zclSampleLight_DefaultMove
//  839  *
//  840  * @brief   We were turned on/off. Use default time to move to on or off.
//  841  *
//  842  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
//  843  *
//  844  * @return  none
//  845  */
//  846 static void zclSampleLight_DefaultMove( uint8 OnOff )
//  847 {
//  848   uint8  newLevel;
//  849   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
//  850   uint16 time;
//  851 
//  852   // if moving to on position, move to on level
//  853   if ( OnOff )
//  854   {
//  855     if (zclSampleLight_OnOff == LIGHT_OFF)
//  856     {
//  857       zclSampleLight_LevelCurrentLevel = ATTR_LEVEL_MIN_LEVEL;
//  858     }
//  859     
//  860     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
//  861     {
//  862       // The last Level (before going OFF) should be used)
//  863       newLevel = zclSampleLight_LevelLastLevel;
//  864     }
//  865     else
//  866     {
//  867       newLevel = zclSampleLight_LevelOnLevel;
//  868     }
//  869 
//  870     time = zclSampleLight_LevelOnTransitionTime;
//  871 
//  872   }
//  873   else
//  874   {
//  875     newLevel = ATTR_LEVEL_MIN_LEVEL;
//  876 
//  877     time = zclSampleLight_LevelOffTransitionTime;
//  878   }
//  879 
//  880   // else use OnOffTransitionTime if set (not 0xffff)
//  881   if ( time == 0xFFFF )
//  882   {
//  883     time = zclSampleLight_LevelOnOffTransitionTime;
//  884   }
//  885 
//  886   // else as fast as possible
//  887   if ( time == 0xFFFF )
//  888   {
//  889     time = 1;
//  890   }
//  891 
//  892   // calculate rate based on time (int 10ths) for full transition (1-254)
//  893   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
//  894 
//  895   // start up state machine.
//  896   zclSampleLight_WithOnOff = TRUE;
//  897   zclSampleLight_MoveBasedOnRate( newLevel, rate );
//  898 }
//  899 
//  900 /*********************************************************************
//  901  * @fn      zclSampleLight_AdjustLightLevel
//  902  *
//  903  * @brief   Called each 10th of a second while state machine running
//  904  *
//  905  * @param   none
//  906  *
//  907  * @return  none
//  908  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  909 static void zclSampleLight_AdjustLightLevel( void )
zclSampleLight_AdjustLightLevel:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function zclSampleLight_AdjustLightLevel
        CODE
//  910 {
        FUNCALL zclSampleLight_AdjustLightLevel, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_AdjustLightLevel, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  911   // one tick (10th of a second) less
//  912   if ( zclSampleLight_LevelRemainingTime )
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ        ??zclSampleLight_AdjustLightLevel_0
//  913   {
//  914     --zclSampleLight_LevelRemainingTime;
//  915   }
//  916 
//  917   // no time left, done
//  918   if ( zclSampleLight_LevelRemainingTime == 0)
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
        DEC       R0
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOVX      @DPTR,A
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zclSampleLight_AdjustLightLevel_1
//  919   {
//  920     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
??zclSampleLight_AdjustLightLevel_0:
        MOV       DPTR,#zclSampleLight_NewLevel
        MOVX      A,@DPTR
        SJMP      ??zclSampleLight_AdjustLightLevel_2
//  921   }
//  922 
//  923   // still time left, keep increment/decrementing
//  924   else
//  925   {
//  926     if ( zclSampleLight_NewLevelUp )
??zclSampleLight_AdjustLightLevel_1:
        MOV       DPTR,#zclSampleLight_NewLevelUp
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_Rate32
        MOV       R0,#?V0
        JZ        ??zclSampleLight_AdjustLightLevel_3
//  927     {
//  928       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
        LCALL     ?L_MOV_X
        MOV       DPTR,#zclSampleLight_CurrentLevel32
        MOV       R0,#?V0
        LCALL     ?L_ADD_TO_X
        SJMP      ??zclSampleLight_AdjustLightLevel_4
//  929     }
//  930     else
//  931     {
//  932       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
??zclSampleLight_AdjustLightLevel_3:
        LCALL     ?L_MOV_X
        MOV       DPTR,#zclSampleLight_CurrentLevel32
        MOV       R0,#?V0
        LCALL     ?L_SUB_FROM_X
//  933     }
//  934     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
??zclSampleLight_AdjustLightLevel_4:
        MOV       DPTR,#zclSampleLight_CurrentLevel32
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_DIV_MOD
        MOV       A,?V0
??zclSampleLight_AdjustLightLevel_2:
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      @DPTR,A
//  935   }
//  936 
//  937   if (( zclSampleLight_LevelChangeCmd == LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_AdjustLightLevel_5
        MOV       DPTR,#zclSampleLight_LevelOnLevel
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??zclSampleLight_AdjustLightLevel_5
//  938   {
//  939     zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_LevelLastLevel
        MOVX      @DPTR,A
//  940   }
//  941 
//  942   // also affect on/off
//  943   if ( zclSampleLight_WithOnOff )
??zclSampleLight_AdjustLightLevel_5:
        MOV       DPTR,#zclSampleLight_WithOnOff
        MOVX      A,@DPTR
        JZ        ??zclSampleLight_AdjustLightLevel_6
//  944   {
//  945     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x2
        JC        ??zclSampleLight_AdjustLightLevel_7
//  946     {
//  947       zclSampleLight_OnOff = LIGHT_ON;
        MOV       DPTR,#zclSampleLight_OnOff
        MOV       A,#0x1
        SJMP      ??zclSampleLight_AdjustLightLevel_8
//  948     }
//  949     else
//  950     {
//  951       if (zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_ON_CMD)
??zclSampleLight_AdjustLightLevel_7:
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        MOVX      A,@DPTR
        XRL       A,#0x1
        MOV       DPTR,#zclSampleLight_OnOff
        JZ        ??zclSampleLight_AdjustLightLevel_9
//  952       {
//  953         zclSampleLight_OnOff = LIGHT_OFF;
        CLR       A
        MOVX      @DPTR,A
//  954       }
//  955       else
//  956       {
//  957         zclSampleLight_OnOff = LIGHT_ON;
//  958       }
//  959       
//  960       if (( zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_AdjustLightLevel_10
        SJMP      ??zclSampleLight_AdjustLightLevel_6
??zclSampleLight_AdjustLightLevel_9:
        MOV       A,#0x1
        MOVX      @DPTR,A
??zclSampleLight_AdjustLightLevel_10:
        MOV       DPTR,#zclSampleLight_LevelOnLevel
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??zclSampleLight_AdjustLightLevel_6
//  961       {
//  962         zclSampleLight_LevelCurrentLevel = zclSampleLight_LevelLastLevel;
        MOV       DPTR,#zclSampleLight_LevelLastLevel
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
??zclSampleLight_AdjustLightLevel_8:
        MOVX      @DPTR,A
//  963       }
//  964     }
//  965   }
//  966 
//  967   zclSampleLight_UpdateLedState();
??zclSampleLight_AdjustLightLevel_6:
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
//  968 
//  969   // keep ticking away
//  970   if ( zclSampleLight_LevelRemainingTime )
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ        ??zclSampleLight_AdjustLightLevel_11
//  971   {
//  972     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_64
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  973   }
//  974 }
??zclSampleLight_AdjustLightLevel_11:
        LJMP      ??Subroutine11_0 & 0xFFFF
          CFI EndBlock cfiBlock28
//  975 
//  976 /*********************************************************************
//  977  * @fn      zclSampleLight_LevelControlMoveToLevelCB
//  978  *
//  979  * @brief   Callback from the ZCL General Cluster Library when
//  980  *          it received a LevelControlMoveToLevel Command for this application.
//  981  *
//  982  * @param   pCmd - ZigBee command parameters
//  983  *
//  984  * @return  none
//  985  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  986 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
zclSampleLight_LevelControlMoveToLevelCB:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlMoveToLevelCB
        CODE
//  987 {
        FUNCALL zclSampleLight_LevelControlMoveToLevelCB, zclSampleLight_MoveBasedOnTime
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
//  988   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
        LCALL     ?Subroutine3 & 0xFFFF
//  989 
//  990   zclSampleLight_WithOnOff = pCmd->withOnOff;
??CrossCallReturnLabel_0:
        LCALL     ?Subroutine4 & 0xFFFF
//  991   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
??CrossCallReturnLabel_15:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclSampleLight_MoveBasedOnTime::?relay`; Banked call to: zclSampleLight_MoveBasedOnTime
//  992 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlMoveToLevelCB
          CFI Conditional ??CrossCallReturnLabel_15
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclSampleLight_LevelControlStepCB
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_WithOnOff
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlMoveCB
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zclSampleLight_LevelControlMoveToLevelCB
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond34) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond34) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond34) CFA_SP SP+-7
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zclSampleLight_LevelControlStepCB
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclSampleLight_MoveBasedOnTime
        ; Setup parameters for call to function zclSampleLight_MoveBasedOnTime
        ; Setup parameters for call to function zclSampleLight_MoveBasedOnRate
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36
//  993 
//  994 /*********************************************************************
//  995  * @fn      zclSampleLight_LevelControlMoveCB
//  996  *
//  997  * @brief   Callback from the ZCL General Cluster Library when
//  998  *          it received a LevelControlMove Command for this application.
//  999  *
// 1000  * @param   pCmd - ZigBee command parameters
// 1001  *
// 1002  * @return  none
// 1003  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1004 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
zclSampleLight_LevelControlMoveCB:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlMoveCB
        CODE
// 1005 {
        FUNCALL zclSampleLight_LevelControlMoveCB, zclSampleLight_MoveBasedOnRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 1006   uint8 newLevel;
// 1007   uint32 rate;
// 1008 
// 1009   // convert rate from units per second to units per tick (10ths of seconds)
// 1010   // and move at that right up or down
// 1011   zclSampleLight_WithOnOff = pCmd->withOnOff;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_WithOnOff
        MOVX      @DPTR,A
// 1012 
// 1013   if ( pCmd->moveMode == LEVEL_MOVE_UP )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_LevelControlMoveCB_0
// 1014   {
// 1015     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
        MOV       R6,#-0x2
        SJMP      ??zclSampleLight_LevelControlMoveCB_1
// 1016   }
// 1017   else
// 1018   {
// 1019     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
??zclSampleLight_LevelControlMoveCB_0:
        MOV       R6,#0x1
// 1020   }
// 1021 
// 1022   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
??zclSampleLight_LevelControlMoveCB_1:
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        CLR       A
        LCALL     ??Subroutine12_0 & 0xFFFF
// 1023 
// 1024   rate = (uint32)100 * pCmd->rate;
// 1025   zclSampleLight_MoveBasedOnRate( newLevel, rate );
??CrossCallReturnLabel_17:
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV       DPTR,#__Constant_64
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_MUL
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zclSampleLight_MoveBasedOnRate::?relay`; Banked call to: zclSampleLight_MoveBasedOnRate
// 1026 }
        LJMP      ??Subroutine11_0 & 0xFFFF
          CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function zclSampleLight_TimeRateHelper
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zclSampleLight_LevelControlMoveCB
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        CLR       A
        MOV       ?V1,A
        MOV       ?V2,A
        MOV       ?V3,A
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40
// 1027 
// 1028 /*********************************************************************
// 1029  * @fn      zclSampleLight_LevelControlStepCB
// 1030  *
// 1031  * @brief   Callback from the ZCL General Cluster Library when
// 1032  *          it received an On/Off Command for this application.
// 1033  *
// 1034  * @param   pCmd - ZigBee command parameters
// 1035  *
// 1036  * @return  none
// 1037  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1038 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
zclSampleLight_LevelControlStepCB:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlStepCB
        CODE
// 1039 {
        FUNCALL zclSampleLight_LevelControlStepCB, zclSampleLight_MoveBasedOnTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1040   uint8 newLevel;
// 1041 
// 1042   // determine new level, but don't exceed boundaries
// 1043   if ( pCmd->stepMode == LEVEL_MOVE_UP )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        JNZ       ??zclSampleLight_LevelControlStepCB_0
// 1044   {
// 1045     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
        MOVX      A,@DPTR
        ADD       A,R4
        MOV       R0,A
        CLR       A
        ADDC      A,#0x0
        MOV       R1,A
        MOV       A,R0
        SUBB      A,#-0x1
        MOV       A,R1
        SUBB      A,#0x0
        JC        ??zclSampleLight_LevelControlStepCB_1
// 1046     {
// 1047       newLevel = ATTR_LEVEL_MAX_LEVEL;
        MOV       R1,#-0x2
        SJMP      ??zclSampleLight_LevelControlStepCB_2
// 1048     }
// 1049     else
// 1050     {
// 1051       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
??zclSampleLight_LevelControlStepCB_1:
        MOVX      A,@DPTR
        ADD       A,R4
        SJMP      ??zclSampleLight_LevelControlStepCB_3
// 1052     }
// 1053   }
// 1054   else
// 1055   {
// 1056     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
??zclSampleLight_LevelControlStepCB_0:
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R4
        CLR       C
        SUBB      A,R0
        JC        ??zclSampleLight_LevelControlStepCB_4
// 1057     {
// 1058       newLevel = ATTR_LEVEL_MIN_LEVEL;
        MOV       R1,#0x1
        SJMP      ??zclSampleLight_LevelControlStepCB_2
// 1059     }
// 1060     else
// 1061     {
// 1062       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
??zclSampleLight_LevelControlStepCB_4:
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R4
??zclSampleLight_LevelControlStepCB_3:
        MOV       R1,A
// 1063     }
// 1064   }
// 1065   
// 1066   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
??zclSampleLight_LevelControlStepCB_2:
        LCALL     ?Subroutine3 & 0xFFFF
// 1067 
// 1068   // move to the new level
// 1069   zclSampleLight_WithOnOff = pCmd->withOnOff;
??CrossCallReturnLabel_1:
        INC       DPTR
        LCALL     ?Subroutine4 & 0xFFFF
// 1070   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
??CrossCallReturnLabel_16:
        INC       DPTR
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL     `??zclSampleLight_MoveBasedOnTime::?relay`; Banked call to: zclSampleLight_MoveBasedOnTime
// 1071 }
          CFI EndBlock cfiBlock41
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function zclSampleLight_MoveBasedOnTime
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zclSampleLight_MoveBasedOnTime
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zclSampleLight_LevelControlMoveToLevelCB
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond45) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond45) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond45) CFA_SP SP+-7
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zclSampleLight_LevelControlStepCB
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlMoveToLevelCB
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zclSampleLight_LevelControlStepCB
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        CLR       A
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51
// 1072 
// 1073 /*********************************************************************
// 1074  * @fn      zclSampleLight_LevelControlStopCB
// 1075  *
// 1076  * @brief   Callback from the ZCL General Cluster Library when
// 1077  *          it received an Level Control Stop Command for this application.
// 1078  *
// 1079  * @param   pCmd - ZigBee command parameters
// 1080  *
// 1081  * @return  none
// 1082  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1083 static void zclSampleLight_LevelControlStopCB( void )
zclSampleLight_LevelControlStopCB:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlStopCB
        CODE
// 1084 {
        FUNCALL zclSampleLight_LevelControlStopCB, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1085   // stop immediately
// 1086   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1087   zclSampleLight_LevelRemainingTime = 0;
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1088 }
          CFI EndBlock cfiBlock52
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock53
// 1089 #endif
// 1090 
// 1091 /*********************************************************************
// 1092  * @fn      zclSampleApp_BatteryWarningCB
// 1093  *
// 1094  * @brief   Called to handle battery-low situation.
// 1095  *
// 1096  * @param   voltLevel - level of severity
// 1097  *
// 1098  * @return  none
// 1099  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1100 void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
zclSampleApp_BatteryWarningCB:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function zclSampleApp_BatteryWarningCB
        CODE
// 1101 {
        ; Saved register size: 0
        ; Auto size: 0
// 1102   if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
// 1103   {
// 1104     // Send warning message to the gateway and blink LED
// 1105   }
// 1106   else if ( voltLevel == VOLT_LEVEL_BAD )
// 1107   {
// 1108     // Shut down the system
// 1109   }
// 1110 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock54
// 1111 
// 1112 /******************************************************************************
// 1113  *
// 1114  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1115  *
// 1116  *****************************************************************************/
// 1117 
// 1118 /*********************************************************************
// 1119  * @fn      zclSampleLight_ProcessIncomingMsg
// 1120  *
// 1121  * @brief   Process ZCL Foundation incoming message
// 1122  *
// 1123  * @param   pInMsg - pointer to the received message
// 1124  *
// 1125  * @return  none
// 1126  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1127 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
zclSampleLight_ProcessIncomingMsg:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIncomingMsg
        CODE
// 1128 {
        FUNCALL zclSampleLight_ProcessIncomingMsg, zclSampleLight_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIncomingMsg, zclSampleLight_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIncomingMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1129   switch ( pInMsg->zclHdr.commandID )
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleLight_ProcessIncomingMsg_0
        ADD       A,#-0x3
        JZ        ??zclSampleLight_ProcessIncomingMsg_1
        ADD       A,#-0x9
        JZ        ??zclSampleLight_ProcessIncomingMsg_2
        ADD       A,#-0x5
        JZ        ??zclSampleLight_ProcessIncomingMsg_3
        ADD       A,#-0x2
        JZ        ??zclSampleLight_ProcessIncomingMsg_3
        ADD       A,#-0x2
        JZ        ??zclSampleLight_ProcessIncomingMsg_4
        SJMP      ??zclSampleLight_ProcessIncomingMsg_5
// 1130   {
// 1131 #ifdef ZCL_READ
// 1132     case ZCL_CMD_READ_RSP:
// 1133       zclSampleLight_ProcessInReadRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_0:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleLight_ProcessIncomingMsg_5
        INC       R0
        SJMP      ??CrossCallReturnLabel_11
// 1134       break;
// 1135 #endif
// 1136 #ifdef ZCL_WRITE
// 1137     case ZCL_CMD_WRITE_RSP:
// 1138       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_1:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_12:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleLight_ProcessIncomingMsg_5
        INC       R0
        SJMP      ??CrossCallReturnLabel_12
// 1139       break;
// 1140 #endif
// 1141     case ZCL_CMD_CONFIG_REPORT:
// 1142     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1143     case ZCL_CMD_READ_REPORT_CFG:
// 1144     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1145     case ZCL_CMD_REPORT:
// 1146       //bdb_ProcessIncomingReportingMsg( pInMsg );
// 1147       break;
// 1148 
// 1149     case ZCL_CMD_DEFAULT_RSP:
// 1150       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1151       break;
// 1152 #ifdef ZCL_DISCOVER
// 1153     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1154       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_3:
        ; Setup parameters for call to function zclSampleLight_ProcessInDiscCmdsRspCmd
// 1155       break;
// 1156 
// 1157     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1158       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
        ; Setup parameters for call to function zclSampleLight_ProcessInDiscCmdsRspCmd
        LCALL     `??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`; Banked call to: zclSampleLight_ProcessInDiscCmdsRspCmd
// 1159       break;
        SJMP      ??zclSampleLight_ProcessIncomingMsg_5
// 1160 
// 1161     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1162       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_2:
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JNC       ??zclSampleLight_ProcessIncomingMsg_5
        INC       R2
        SJMP      ??CrossCallReturnLabel_19
// 1163       break;
// 1164 
// 1165     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1166       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_4:
        LCALL     ?Subroutine6 & 0xFFFF
// 1167       break;
// 1168 #endif
// 1169     default:
// 1170       break;
// 1171   }
??CrossCallReturnLabel_20:
        SJMP      ??zclSampleLight_ProcessIncomingMsg_6
??zclSampleLight_ProcessIncomingMsg_7:
        INC       R2
??zclSampleLight_ProcessIncomingMsg_6:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleLight_ProcessIncomingMsg_7
// 1172 
// 1173   if ( pInMsg->attrCmd )
??zclSampleLight_ProcessIncomingMsg_5:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleLight_ProcessIncomingMsg_8
// 1174     osal_mem_free( pInMsg->attrCmd );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1175 }
??zclSampleLight_ProcessIncomingMsg_8:
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock55

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOV       DPL,R0
        MOV       DPH,R1
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function zclSampleLight_ProcessInDiscCmdsRspCmd
          CFI Conditional ??CrossCallReturnLabel_18
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV       R2,#0x0
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65
// 1176 
// 1177 #ifdef ZCL_READ
// 1178 /*********************************************************************
// 1179  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1180  *
// 1181  * @brief   Process the "Profile" Read Response Command
// 1182  *
// 1183  * @param   pInMsg - incoming message to process
// 1184  *
// 1185  * @return  none
// 1186  */
// 1187 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1188 {
// 1189   zclReadRspCmd_t *readRspCmd;
// 1190   uint8 i;
// 1191 
// 1192   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1193   for (i = 0; i < readRspCmd->numAttr; i++)
// 1194   {
// 1195     // Notify the originator of the results of the original read attributes
// 1196     // attempt and, for each successfull request, the value of the requested
// 1197     // attribute
// 1198   }
// 1199 
// 1200   return ( TRUE );
// 1201 }
// 1202 #endif // ZCL_READ
// 1203 
// 1204 #ifdef ZCL_WRITE
// 1205 /*********************************************************************
// 1206  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1207  *
// 1208  * @brief   Process the "Profile" Write Response Command
// 1209  *
// 1210  * @param   pInMsg - incoming message to process
// 1211  *
// 1212  * @return  none
// 1213  */
// 1214 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1215 {
// 1216   zclWriteRspCmd_t *writeRspCmd;
// 1217   uint8 i;
// 1218 
// 1219   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1220   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1221   {
// 1222     // Notify the device of the results of the its original write attributes
// 1223     // command.
// 1224   }
// 1225 
// 1226   return ( TRUE );
// 1227 }
// 1228 #endif // ZCL_WRITE
// 1229 
// 1230 /*********************************************************************
// 1231  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1232  *
// 1233  * @brief   Process the "Profile" Default Response Command
// 1234  *
// 1235  * @param   pInMsg - incoming message to process
// 1236  *
// 1237  * @return  none
// 1238  */
// 1239 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1240 {
// 1241   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1242 
// 1243   // Device is notified of the Default Response command.
// 1244   (void)pInMsg;
// 1245 
// 1246   return ( TRUE );
// 1247 }
// 1248 
// 1249 #ifdef ZCL_DISCOVER
// 1250 /*********************************************************************
// 1251  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1252  *
// 1253  * @brief   Process the Discover Commands Response Command
// 1254  *
// 1255  * @param   pInMsg - incoming message to process
// 1256  *
// 1257  * @return  none
// 1258  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1259 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleLight_ProcessInDiscCmdsRspCmd:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI Function zclSampleLight_ProcessInDiscCmdsRspCmd
        CODE
// 1260 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1261   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1262   uint8 i;
// 1263 
// 1264   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        LCALL     ??Subroutine13_0 & 0xFFFF
// 1265   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
??CrossCallReturnLabel_18:
        SJMP      ??zclSampleLight_ProcessInDiscCmdsRspCmd_0
??zclSampleLight_ProcessInDiscCmdsRspCmd_1:
        INC       R2
??zclSampleLight_ProcessInDiscCmdsRspCmd_0:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleLight_ProcessInDiscCmdsRspCmd_1
// 1266   {
// 1267     // Device is notified of the result of its attribute discovery command.
// 1268   }
// 1269 
// 1270   return ( TRUE );
        MOV       R1,#0x1
        LJMP      ?Subroutine0 & 0xFFFF
// 1271 }
          CFI EndBlock cfiBlock66
// 1272 
// 1273 /*********************************************************************
// 1274  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1275  *
// 1276  * @brief   Process the "Profile" Discover Attributes Response Command
// 1277  *
// 1278  * @param   pInMsg - incoming message to process
// 1279  *
// 1280  * @return  none
// 1281  */
// 1282 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1283 {
// 1284   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1285   uint8 i;
// 1286 
// 1287   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1288   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1289   {
// 1290     // Device is notified of the result of its attribute discovery command.
// 1291   }
// 1292 
// 1293   return ( TRUE );
// 1294 }
// 1295 
// 1296 /*********************************************************************
// 1297  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1298  *
// 1299  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1300  *
// 1301  * @param   pInMsg - incoming message to process
// 1302  *
// 1303  * @return  none
// 1304  */
// 1305 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1306 {
// 1307   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1308   uint8 i;
// 1309 
// 1310   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1311   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1312   {
// 1313     // Device is notified of the result of its attribute discovery command.
// 1314   }
// 1315 
// 1316   return ( TRUE );
// 1317 }
// 1318 #endif // ZCL_DISCOVER
// 1319 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1320 void zclSampleLight_UpdateLedState(void)
zclSampleLight_UpdateLedState:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function zclSampleLight_UpdateLedState
        CODE
// 1321 {
        FUNCALL zclSampleLight_UpdateLedState, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_UpdateLedState, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1322   // set the LED1 based on light (on or off)
// 1323   if ( zclSampleLight_OnOff == LIGHT_ON )
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclSampleLight_UpdateLedState_0
// 1324   {
// 1325     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        SJMP      ??zclSampleLight_UpdateLedState_1
// 1326   }
// 1327   else
// 1328   {
// 1329     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
??zclSampleLight_UpdateLedState_0:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
??zclSampleLight_UpdateLedState_1:
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1330   }
// 1331 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock67

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for reportableChange>`:
        DATA8
        DB 44
        DB 1
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sLightLevel>`:
        DB "   LEVEL ###    "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW 0H
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zclSampleLight_LevelControlMoveToLevelCB::?re`
        DW `??zclSampleLight_LevelControlMoveCB::?relay`
        DW `??zclSampleLight_LevelControlStepCB::?relay`
        DW `??zclSampleLight_LevelControlStopCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_CommissioningMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_CommissioningMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_ChangeChannelReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_ChangeChannelReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessCommissioningStatus::?r`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_TimeRateHelper::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_TimeRateHelper

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_MoveBasedOnRate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_MoveBasedOnRate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_MoveBasedOnTime::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_MoveBasedOnTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_AdjustLightLevel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_AdjustLightLevel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LevelControlMoveToLevelCB::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LevelControlMoveToLevelCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LevelControlMoveCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LevelControlMoveCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LevelControlStepCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LevelControlStepCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LevelControlStopCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LevelControlStopCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleApp_BatteryWarningCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleApp_BatteryWarningCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIncomingMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIncomingMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessInDiscCmdsRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_UpdateLedState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_UpdateLedState

        END
// 1332 
// 1333 
// 1334 
// 1335 /****************************************************************************
// 1336 ****************************************************************************/
// 1337 
// 1338 
// 
// 1 695 bytes in segment BANKED_CODE
//   114 bytes in segment BANK_RELAYS
//    53 bytes in segment XDATA_I
//    53 bytes in segment XDATA_ID
//    42 bytes in segment XDATA_ROM_C
//    31 bytes in segment XDATA_Z
// 
//   167 bytes of CODE     memory
//    34 bytes of CONST    memory (+ 8 bytes shared)
// 1 695 bytes of HUGECODE memory
//    84 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
