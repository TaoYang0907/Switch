###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               22/Jul/2020  11:58:17
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW7FDD.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c"
#        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List\zcl_samplelight.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj\zcl_samplelight.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleLight.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample light application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee Light, based on Z-Stack 3.0. It can be configured as an
     43            On/Off light or as a dimmable light, by undefining or defining ZCL_LEVEL_CTRL, respectively.
     44          
     45            This application is based on the common sample-application user interface. Please see the main
     46            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     47            this sample applicetion.
     48            
     49            Application-specific UI peripherals being used:
     50          
     51            - LEDs:
     52              LED1 reflect the current light state (On / Off accordingly).
     53          
     54            Application-specific menu system:
     55          
     56              <TOGGLE LIGHT> Toggle the local light and display its status and level
     57                Press OK to toggle the local light on and off.
     58                This screen shows the following information
     59                  Line1: (only populated if ZCL_LEVEL_CTRL is defined)
     60                    LEVEL XXX - xxx is the current level of the light if the light state is ON, or the target level
     61                      of the light when the light state is off. The target level is the level that the light will be
     62                      set to when it is switched from off to on using the on or the toggle commands.
     63                  Line2:
     64                    LIGHT OFF / ON: shows the current state of the light.
     65                Note when ZCL_LEVEL_CTRL is enabled:
     66                  - If the light state is ON and the light level is X, and then the light receives the OFF or TOGGLE 
     67                    commands: The level will decrease gradually until it reaches 1, and only then the light state will
     68                    be changed to OFF. The level then will be restored to X, with the state staying OFF. At this stage
     69                    the light is not lighting, and the level represent the target level for the next ON or TOGGLE 
     70                    commands.
     71                  - If the light state is OFF and the light level is X, and then the light receives the ON or TOGGLE
     72                    commands; The level will be set to 1, the light state will be set to ON, and then the level will
     73                    increase gradually until it reaches level X.
     74                  - Any level-setting command will affect the level directly, and may also affect the on/off state,
     75                    depending on the command's arguments.       
     76          
     77          *********************************************************************/
     78          
     79          /*********************************************************************
     80           * INCLUDES
     81           */
     82          #include "ZComDef.h"
     83          #include "OSAL.h"
     84          #include "AF.h"
     85          #include "ZDApp.h"
     86          #include "ZDObject.h"
     87          #include "MT_SYS.h"
     88          
     89          #include "nwk_util.h"
     90          
     91          #include "zcl.h"
     92          #include "zcl_general.h"
     93          #include "zcl_ha.h"
     94          #include "zcl_diagnostic.h"
     95          
     96          #include "zcl_samplelight.h"
     97             
     98          #include "bdb.h"
     99          #include "bdb_interface.h"
    100          #include "bdb_Reporting.h"
    101          
    102           //GP_UPDATE
    103          #include "gp_interface.h"
    104             
    105          #include "onboard.h"
    106          
    107          /* HAL */
    108          #include "hal_lcd.h"
    109          #include "hal_led.h"
    110          #include "hal_key.h"
    111          
    112          #include "NLMEDE.h"
    113          
    114          // Added to include TouchLink initiator functionality 
    115          #if defined ( BDB_TL_INITIATOR )
    116            #include "bdb_touchlink_initiator.h"
    117          #endif // BDB_TL_INITIATOR
    118          
    119          #if defined ( BDB_TL_TARGET )
    120            #include "bdb_touchlink_target.h"
    121          #endif // BDB_TL_TARGET
    122          
    123          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
    124            #include "bdb_touchlink.h"
    125          #endif
    126          
    127          
    128          /*********************************************************************
    129           * MACROS
    130           */
    131          #define APP_TITLE "TI Sample Light"
    132          
    133          /*********************************************************************
    134           * TYPEDEFS
    135           */
    136          
    137          /*********************************************************************
    138           * GLOBAL VARIABLES
    139           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          byte zclSampleLight_TaskID;
   \                     zclSampleLight_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 zclSampleLightSeqNum;
   \                     zclSampleLightSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          
    143          /*********************************************************************
    144           * GLOBAL FUNCTIONS
    145           */
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          afAddrType_t zclSampleLight_DstAddr;
   \                     zclSampleLight_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    151          
    152          // Test Endpoint to allow SYS_APP_MSGs
    153          //static endPointDesc_t sampleLight_TestEp =
    154          //{
    155          //  SAMPLELIGHT_ENDPOINT,
    156          //  0,
    157          //  &zclSampleLight_TaskID,
    158          //  (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    159          //  (afNetworkLatencyReq_t)0            // No Network Latency req
    160          //};
    161          
    162          #ifdef ZCL_LEVEL_CTRL

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
   \                     zclSampleLight_WithOnOff:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          uint8 zclSampleLight_NewLevel;        // new level when done moving
   \                     zclSampleLight_NewLevel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 zclSampleLight_LevelChangeCmd; // current level change was triggered by an on/off command
   \                     zclSampleLight_LevelChangeCmd:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
   \                     zclSampleLight_NewLevelUp:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
   \                     zclSampleLight_CurrentLevel32:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
   \                     zclSampleLight_Rate32:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
   \                     zclSampleLight_LevelLastLevel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          #endif
    171          
    172          #ifdef BDB_REPORTING
    173          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
    174            uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0x2C01 is 300 in int16
    175            uint8 reportableChangeTest[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    176          #endif
    177          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4

   \                                 In  segment XDATA_I, align 1, keep-with-next
    178            uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00}; // 0x2C01 is 300 in int16   0x012c
   \                     reportableChange:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for reportableChange>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179            uint8 reportableChangeTest[] = {0x00, 0x00, 0x00, 0x00};     
   \                     reportableChangeTest:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    180          #endif 
    181          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
    182            uint8 reportableChange[] = {0x2C, 0x01}; // 0x2C01 is 300 in int16
    183            uint8 reportableChangeTest[] = {0x00, 0x00};
    184          #endif 
    185          #endif
    186          
    187          /*********************************************************************
    188           * LOCAL FUNCTIONS
    189           */
    190          static void zclSampleLight_HandleKeys( byte shift, byte keys );
    191          static void zclSampleLight_BasicResetCB( void );
    192          static void zclSampleLight_OnOffCB( uint8 cmd );
    193          //GP_UPDATE
    194          #if (ZG_BUILD_RTR_TYPE)
    195          static void gp_CommissioningMode(bool isEntering);
    196          static uint8 gp_ChangeChannelReq(void);
    197          #endif
    198          
    199          
    200          static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    201          
    202          
    203          #ifdef ZCL_LEVEL_CTRL
    204          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    205          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
    206          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
    207          static void zclSampleLight_LevelControlStopCB( void );
    208          static void zclSampleLight_DefaultMove( uint8 OnOff );
    209          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
    210          static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
    211          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    212          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
    213          static void zclSampleLight_AdjustLightLevel( void );
    214          #endif
    215          
    216          // Functions to process ZCL Foundation incoming Command/Response messages
    217          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    218          #ifdef ZCL_READ
    219          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    220          #endif
    221          #ifdef ZCL_WRITE
    222          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    223          #endif
    224          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    225          #ifdef ZCL_DISCOVER
    226          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    227          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    228          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    229          #endif
    230          
    231          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    232          
    233          void zclSampleLight_UpdateLedState(void);
    234          
    235          /*********************************************************************
    236           * CONSTANTS
    237           */
    238          
    239          #define LEVEL_CHANGED_BY_LEVEL_CMD  0
    240          #define LEVEL_CHANGED_BY_ON_CMD     1
    241          #define LEVEL_CHANGED_BY_OFF_CMD    2
    242          
    243          /*********************************************************************
    244           * STATUS STRINGS
    245           */
    246          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    247            const char sLightOn[]      = "   LIGHT ON     ";
   \                     sLightOn:
   \   000000   2020204C     DB "   LIGHT ON     "
   \            49474854
   \            204F4E20
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    248            const char sLightOff[]     = "   LIGHT OFF    ";
   \                     sLightOff:
   \   000000   2020204C     DB "   LIGHT OFF    "
   \            49474854
   \            204F4646
   \            20202020
   \            00      
    249            #ifdef ZCL_LEVEL_CTRL

   \                                 In  segment XDATA_I, align 1, keep-with-next
    250              char sLightLevel[]        = "   LEVEL ###    "; // displays level 1-254
   \                     sLightLevel:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for sLightLevel>`
   \   000011                REQUIRE __INIT_XDATA_I
    251            #endif
    252          #endif
    253          
    254          /*********************************************************************
    255           * REFERENCED EXTERNALS
    256           */
    257          extern int16 zdpExternalStateTaskID;
    258          
    259          /*********************************************************************
    260           * ZCL General Profile Callback table
    261           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    262          static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
   \                     zclSampleLight_CmdCallbacks:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
   \   000020                REQUIRE __INIT_XDATA_I
    263          {
    264            zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
    265            NULL,                                   // Identify Trigger Effect command
    266            zclSampleLight_OnOffCB,                 // On/Off cluster commands
    267            NULL,                                   // On/Off cluster enhanced command Off with Effect
    268            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    269            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    270          #ifdef ZCL_LEVEL_CTRL
    271            zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
    272            zclSampleLight_LevelControlMoveCB,        // Level Control Move command
    273            zclSampleLight_LevelControlStepCB,        // Level Control Step command
    274            zclSampleLight_LevelControlStopCB,        // Level Control Stop command
    275          #endif
    276          #ifdef ZCL_GROUPS
    277            NULL,                                   // Group Response commands
    278          #endif
    279          #ifdef ZCL_SCENES
    280            NULL,                                  // Scene Store Request command
    281            NULL,                                  // Scene Recall Request command
    282            NULL,                                  // Scene Response command
    283          #endif
    284          #ifdef ZCL_ALARMS
    285            NULL,                                  // Alarm (Response) commands
    286          #endif
    287          #ifdef SE_UK_EXT
    288            NULL,                                  // Get Event Log command
    289            NULL,                                  // Publish Event Log command
    290          #endif
    291            NULL,                                  // RSSI Location command
    292            NULL                                   // RSSI Location Response command
    293          };
    294          
    295          /*********************************************************************
    296           * @fn          zclSampleLight_Init
    297           *
    298           * @brief       Initialization function for the zclGeneral layer.
    299           *
    300           * @param       none
    301           *
    302           * @return      none
    303           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    304          void zclSampleLight_Init( byte task_id )
   \                     zclSampleLight_Init:
    305          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    306            zclSampleLight_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   000009   F0           MOVX      @DPTR,A
    307          
    308            // Set destination address to indirect
    309            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV       DPTR,#zclSampleLight_DstAddr + 8
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
    310            zclSampleLight_DstAddr.endPoint = 0;
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
    311            zclSampleLight_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV       DPTR,#zclSampleLight_DstAddr
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    312          
    313            // Register the Simple Descriptor for this application
    314            bdb_RegisterSimpleDescriptor( &zclSampleLight_SimpleDesc );
   \   000017                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000017   7A..         MOV       R2,#zclSampleLight_SimpleDesc & 0xff
   \   000019   7B..         MOV       R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
   \   00001B   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    315          
    316            // Register the ZCL General Cluster Library callback functions
    317            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
   \   00001E                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001E   7A..         MOV       R2,#zclSampleLight_CmdCallbacks & 0xff
   \   000020   7B..         MOV       R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
   \   000022   7908         MOV       R1,#0x8
   \   000024   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    318          
    319            // Register the application's attribute list
    320            zclSampleLight_ResetAttributesToDefaultValues();
   \   000027                ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
   \   000027   12....       LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
    321            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
   \   00002A                ; Setup parameters for call to function zcl_registerAttrList
   \   00002A   7C..         MOV       R4,#zclSampleLight_Attrs & 0xff
   \   00002C   7D..         MOV       R5,#(zclSampleLight_Attrs >> 8) & 0xff
   \   00002E   90....       MOV       DPTR,#zclSampleLight_NumAttributes
   \   000031   E4           CLR       A
   \   000032   93           MOVC      A,@A+DPTR
   \   000033   FA           MOV       R2,A
   \   000034   7908         MOV       R1,#0x8
   \   000036   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    322          
    323          #ifdef ZCL_LEVEL_CTRL
    324            zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
   \   000039   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   90....       MOV       DPTR,#zclSampleLight_LevelLastLevel
   \   000040   F0           MOVX      @DPTR,A
    325          #endif
    326          
    327            // Register the Application to receive the unprocessed Foundation command/response messages
    328            zcl_registerForMsg( zclSampleLight_TaskID );
   \   000041                ; Setup parameters for call to function zcl_registerForMsg
   \   000041   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
   \   000046   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    329          
    330          #ifdef ZCL_DISCOVER
    331            // Register the application's command list
    332            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
   \   000049                ; Setup parameters for call to function zcl_registerCmdList
   \   000049   7C..         MOV       R4,#zclSampleLight_Cmds & 0xff
   \   00004B   7D..         MOV       R5,#(zclSampleLight_Cmds >> 8) & 0xff
   \   00004D   90....       MOV       DPTR,#zclCmdsArraySize
   \   000050   E4           CLR       A
   \   000051   93           MOVC      A,@A+DPTR
   \   000052   FA           MOV       R2,A
   \   000053   7908         MOV       R1,#0x8
   \   000055   12....       LCALL     `??zcl_registerCmdList::?relay`; Banked call to: zcl_registerCmdList
    333          #endif
    334          
    335            // Register low voltage NV memory protection application callback
    336            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   000058                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000058   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   00005A   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   00005C   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    337          
    338            // Register for all key events - This app will handle all key events
    339            RegisterForKeys( zclSampleLight_TaskID );
   \   00005F                ; Setup parameters for call to function RegisterForKeys
   \   00005F   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    340            
    341            bdb_RegisterCommissioningStatusCB( zclSampleLight_ProcessCommissioningStatus );
   \   000067                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   000067   7A..         MOV       R2,#`??zclSampleLight_ProcessCommissioningStatus::?r` & 0xff
   \   000069   7B..         MOV       R3,#(`??zclSampleLight_ProcessCommissioningStatus::?r` >> 8) & 0xff
   \   00006B   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    342            
    343            // Register for a test endpoint
    344            //afRegister( &sampleLight_TestEp );
    345          
    346          #ifdef ZCL_DIAGNOSTIC
    347            // Register the application's callback function to read/write attribute data.
    348            // This is only required when the attribute data format is unknown to ZCL.
    349            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    350          
    351            if ( zclDiagnostic_InitStats() == ZSuccess )
    352            {
    353              // Here the user could start the timer to save Diagnostics to NV
    354            }
    355          #endif
    356            
    357          //GP_UPDATE  
    358          #if (ZG_BUILD_RTR_TYPE)  
    359            gp_RegisterCommissioningModeCB(gp_CommissioningMode);
   \   00006E                ; Setup parameters for call to function gp_RegisterCommissioningModeCB
   \   00006E   7A..         MOV       R2,#`??gp_CommissioningMode::?relay` & 0xff
   \   000070   7B..         MOV       R3,#(`??gp_CommissioningMode::?relay` >> 8) & 0xff
   \   000072   12....       LCALL     `??gp_RegisterCommissioningModeCB::?relay`; Banked call to: gp_RegisterCommissioningModeCB
    360            gp_RegisterGPChangeChannelReqCB(gp_ChangeChannelReq);
   \   000075                ; Setup parameters for call to function gp_RegisterGPChangeChannelReqCB
   \   000075   7A..         MOV       R2,#`??gp_ChangeChannelReq::?relay` & 0xff
   \   000077   7B..         MOV       R3,#(`??gp_ChangeChannelReq::?relay` >> 8) & 0xff
   \   000079   12....       LCALL     `??gp_RegisterGPChangeChannelReqCB::?relay`; Banked call to: gp_RegisterGPChangeChannelReqCB
    361          #endif
    362            
    363            zdpExternalStateTaskID = zclSampleLight_TaskID;
   \   00007C   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   000083   F0           MOVX      @DPTR,A
   \   000084   A3           INC       DPTR
   \   000085   E4           CLR       A
   \   000086   F0           MOVX      @DPTR,A
    364            
    365            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLELIGHT_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF, ATTRID_ON_OFF, 0, 0xFF, reportableChangeTest);
   \   000087                ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
   \   000087   75....       MOV       ?V0,#reportableChangeTest & 0xff
   \   00008A   75....       MOV       ?V1,#(reportableChangeTest >> 8) & 0xff
   \   00008D   78..         MOV       R0,#?V0
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   75..FF       MOV       ?V0,#-0x1
   \   000095   75..00       MOV       ?V1,#0x0
   \   000098   78..         MOV       R0,#?V0
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   E4           CLR       A
   \   00009E   F5..         MOV       ?V0,A
   \   0000A0   78..         MOV       R0,#?V0
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A5   7C00         MOV       R4,#0x0
   \   0000A7   7D00         MOV       R5,#0x0
   \   0000A9   7A06         MOV       R2,#0x6
   \   0000AB   7B00         MOV       R3,#0x0
   \   0000AD   7908         MOV       R1,#0x8
   \   0000AF   12....       LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
   \   0000B2   7406         MOV       A,#0x6
   \   0000B4   12....       LCALL     ?DEALLOC_XSTACK8
    366            
    367          //  bdb_RepAddAttrCfgRecordDefaultToList(SAMPLELIGHT_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG, ATTRID_ON_OFF, 0, 10, reportableChangeTest);
    368          }
   \   0000B7   7F02         MOV       R7,#0x2
   \   0000B9   02....       LJMP      ?BANKED_LEAVE_XDATA
    369          
    370          /*********************************************************************
    371           * @fn          zclSample_event_loop
    372           *
    373           * @brief       Event Loop Processor for zclGeneral.
    374           *
    375           * @param       none
    376           *
    377           * @return      none
    378           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    379          uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleLight_event_loop:
    380          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    381            afIncomingMSGPacket_t *MSGpkt;
    382          
    383            (void)task_id;  // Intentionally unreferenced parameter
    384          
    385            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   7028         JNZ       ??zclSampleLight_event_loop_0
    386            {
    387              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
    388              {
    389                switch ( MSGpkt->hdr.event )
    390                {
    391                  case ZCL_INCOMING_MSG:
    392                    // Incoming ZCL Foundation command/response messages
    393                    zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    394                    break;
    395          
    396                  case KEY_CHANGE:
    397                    zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    398                    break;
    399          
    400                  case ZDO_STATE_CHANGE:
    401                    break;
    402          
    403                  default:
    404                    break;
    405                }
    406          
    407                // Release the memory
    408                osal_msg_deallocate( (uint8 *)MSGpkt );
    409              }
    410          
    411              // return unprocessed events
    412              return (events ^ SYS_EVENT_MSG);
    413            }
    414          
    415          #ifdef ZCL_LEVEL_CTRL
    416            if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
   \   00000D   EA           MOV       A,R2
   \   00000E   5402         ANL       A,#0x2
   \   000010   607C         JZ        ??zclSampleLight_event_loop_1
    417            {
    418              zclSampleLight_AdjustLightLevel();
   \   000012                ; Setup parameters for call to function zclSampleLight_AdjustLightLevel
   \   000012   12....       LCALL     `??zclSampleLight_AdjustLightLevel::?relay`; Banked call to: zclSampleLight_AdjustLightLevel
    419              return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
   \   000015   EE           MOV       A,R6
   \   000016   6402         XRL       A,#0x2
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   806F         SJMP      ??zclSampleLight_event_loop_2
    420            }
   \                     ??zclSampleLight_event_loop_3:
   \   00001C   E4           CLR       A
   \                     ??zclSampleLight_event_loop_4:
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E                ; Setup parameters for call to function bdb_RepChangedAttrValue
   \   00001E   7C00         MOV       R4,#0x0
   \   000020   7D00         MOV       R5,#0x0
   \   000022   7A06         MOV       R2,#0x6
   \   000024   7B00         MOV       R3,#0x0
   \   000026   7908         MOV       R1,#0x8
   \   000028   12....       LCALL     `??bdb_RepChangedAttrValue::?relay`; Banked call to: bdb_RepChangedAttrValue
   \   00002B                ; Setup parameters for call to function zclSampleLight_UpdateLedState
   \   00002B   12....       LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
   \                     ??zclSampleLight_event_loop_5:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV       R2,?V0
   \   000030   AB..         MOV       R3,?V1
   \   000032   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleLight_event_loop_0:
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \   000035   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003D   8A..         MOV       ?V0,R2
   \   00003F   8B..         MOV       ?V1,R3
   \   000041   EA           MOV       A,R2
   \   000042   4B           ORL       A,R3
   \   000043   6041         JZ        ??zclSampleLight_event_loop_6
   \   000045   8A82         MOV       DPL,R2
   \   000047   8B83         MOV       DPH,R3
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   24CC         ADD       A,#-0x34
   \   00004C   6006         JZ        ??zclSampleLight_event_loop_7
   \   00004E   2474         ADD       A,#0x74
   \   000050   6007         JZ        ??zclSampleLight_event_loop_8
   \   000052   80DA         SJMP      ??zclSampleLight_event_loop_5
   \                     ??zclSampleLight_event_loop_7:
   \   000054                ; Setup parameters for call to function zclSampleLight_ProcessIncomingMsg
   \   000054   12....       LCALL     `??zclSampleLight_ProcessIncomingMsg::?relay`; Banked call to: zclSampleLight_ProcessIncomingMsg
   \   000057   80D5         SJMP      ??zclSampleLight_event_loop_5
   \                     ??zclSampleLight_event_loop_8:
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F5..         MOV       ?V2,A
   \   00005F   A2E5         MOV       C,0xE0 /* A   */.5
   \   000061   500C         JNC       ??zclSampleLight_event_loop_9
   \   000063                ; Setup parameters for call to function HalLedSet
   \   000063   7A01         MOV       R2,#0x1
   \   000065   7902         MOV       R1,#0x2
   \   000067   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00006A                ; Setup parameters for call to function bdb_StartCommissioning
   \   00006A   790A         MOV       R1,#0xa
   \   00006C   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \                     ??zclSampleLight_event_loop_9:
   \   00006F   E5..         MOV       A,?V2
   \   000071   A2E2         MOV       C,0xE0 /* A   */.2
   \   000073   50B9         JNC       ??zclSampleLight_event_loop_5
   \   000075                ; Setup parameters for call to function HalLedSet
   \   000075   7A02         MOV       R2,#0x2
   \   000077   7902         MOV       R1,#0x2
   \   000079   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00007C   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   709A         JNZ       ??zclSampleLight_event_loop_3
   \   000082   7401         MOV       A,#0x1
   \   000084   8097         SJMP      ??zclSampleLight_event_loop_4
   \                     ??zclSampleLight_event_loop_6:
   \   000086   EE           MOV       A,R6
   \   000087   FA           MOV       R2,A
   \   000088   EF           MOV       A,R7
   \   000089   6480         XRL       A,#0x80
   \                     ??zclSampleLight_event_loop_2:
   \   00008B   FB           MOV       R3,A
   \   00008C   8019         SJMP      ??zclSampleLight_event_loop_10
    421          #endif
    422          
    423          #if ZG_BUILD_ENDDEVICE_TYPE    
    424            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
    425            {
    426              bdb_ZedAttemptRecoverNwk();
    427              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
    428            }
    429          #endif
    430          
    431            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \                     ??zclSampleLight_event_loop_1:
   \   00008E   EA           MOV       A,R2
   \   00008F   5410         ANL       A,#0x10
   \   000091   6005         JZ        ??zclSampleLight_event_loop_11
    432            {
    433              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   000093   EA           MOV       A,R2
   \   000094   6410         XRL       A,#0x10
   \   000096   8008         SJMP      ??zclSampleLight_event_loop_12
    434            }
    435          
    436            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleLight_event_loop_11:
   \   000098   EA           MOV       A,R2
   \   000099   5420         ANL       A,#0x20
   \   00009B   6006         JZ        ??zclSampleLight_event_loop_13
    437            {
    438              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   00009D   EA           MOV       A,R2
   \   00009E   6420         XRL       A,#0x20
   \                     ??zclSampleLight_event_loop_12:
   \   0000A0   FA           MOV       R2,A
   \   0000A1   8004         SJMP      ??zclSampleLight_event_loop_10
    439            }
    440          
    441            // Discard unknown events
    442            return 0;
   \                     ??zclSampleLight_event_loop_13:
   \   0000A3   7A00         MOV       R2,#0x0
   \   0000A5   7B00         MOV       R3,#0x0
   \                     ??zclSampleLight_event_loop_10:
   \   0000A7   7F04         MOV       R7,#0x4
   \   0000A9   02....       LJMP      ?BANKED_LEAVE_XDATA
    443          }
    444          
    445          
    446          /*********************************************************************
    447           * @fn      zclSampleLight_HandleKeys
    448           *
    449           * @brief   Handles all key events for this device.
    450           *
    451           * @param   shift - true if in shift/alt.
    452           * @param   keys - bit field for key events. Valid entries:
    453           *                 HAL_KEY_SW_5
    454           *                 HAL_KEY_SW_4
    455           *                 HAL_KEY_SW_2
    456           *                 HAL_KEY_SW_1
    457           *
    458           * @return  none
    459           */
    460          static void zclSampleLight_HandleKeys( byte shift, byte keys )
    461          {
    462            if ( keys & HAL_KEY_SW_6 )  // Switch 6
    463            {     
    464              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    465              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING  );
    466            }
    467            if ( keys & HAL_KEY_SW_5 )  // Switch 5
    468            {     
    469              HalLedSet ( HAL_LED_2, HAL_LED_MODE_BLINK );
    470              if ( zclSampleLight_OnOff == LIGHT_OFF )
    471              {
    472                zclSampleLight_OnOff = LIGHT_ON;
    473              }
    474              else
    475              {
    476                zclSampleLight_OnOff = LIGHT_OFF;
    477              }
    478              bdb_RepChangedAttrValue(SAMPLELIGHT_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF, ATTRID_ON_OFF);
    479              zclSampleLight_UpdateLedState();
    480            }
    481          }
    482          
    483          //GP_UPDATE
    484          #if (ZG_BUILD_RTR_TYPE)
    485          /*********************************************************************
    486           * @fn      gp_CommissioningMode
    487           *
    488           * @brief   Callback that notifies the application that gp Proxy is entering 
    489           *          into commissioning mode
    490           *
    491           * @param   isEntering - 
    492           *
    493           * @return  
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void gp_CommissioningMode(bool isEntering)
   \                     gp_CommissioningMode:
    496          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    497            if(isEntering)
    498            {
    499              //Led on indicating enter commissioning mode
    500            }
    501            else
    502            {
    503              //Led off indicating enter commissioning mode
    504            }
    505          }
   \   000000   02....       LJMP      ?BRET
    506          
    507          
    508          
    509          //GP_UPDATE
    510          /*********************************************************************
    511           * @fn      gp_ChangeChannelReq
    512           *
    513           * @brief   Callback function to notify the application about a GP commissioning 
    514           * request that will change the current channel for at most 
    515           * gpBirectionalCommissioningChangeChannelTimeout ms
    516           *
    517           * @param   channel - Channel in which the commissioning will take place
    518           *
    519           * @return  TRUE to allow change channel, FALSE to do not allow
    520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          static uint8 gp_ChangeChannelReq(void)
   \                     gp_ChangeChannelReq:
    522          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    523            bool allowChangeChannel = TRUE;
    524            
    525            //Check application state to decide if allow change channel or not
    526            
    527            return allowChangeChannel;
   \   000000   7901         MOV       R1,#0x1
   \   000002   02....       LJMP      ?BRET
    528          }
    529          
    530          #endif
    531          
    532          
    533          /*********************************************************************
    534           * @fn      zclSampleLight_ProcessCommissioningStatus
    535           *
    536           * @brief   Callback in which the status of the commissioning process are reported
    537           *
    538           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    539           *
    540           * @return  none
    541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    542          static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleLight_ProcessCommissioningStatus:
    543          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    544            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   14           DEC       A
   \   00000B   6015         JZ        ??zclSampleLight_ProcessCommissioningStatus_0
   \   00000D   14           DEC       A
   \   00000E   7020         JNZ       ??zclSampleLight_ProcessCommissioningStatus_1
    545            {
    546              case BDB_COMMISSIONING_FORMATION:
    547                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7019         JNZ       ??zclSampleLight_ProcessCommissioningStatus_1
    548                {
    549                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    550                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000017                ; Setup parameters for call to function bdb_StartCommissioning
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   4402         ORL       A,#0x2
   \   00001C   F9           MOV       R1,A
   \   00001D   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   000020   800E         SJMP      ??zclSampleLight_ProcessCommissioningStatus_1
    551                }
    552                else
    553                {
    554                  //Want to try other channels?
    555                  //try with bdb_setChannelAttribute
    556                }
    557              break;
    558              case BDB_COMMISSIONING_NWK_STEERING:
    559                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclSampleLight_ProcessCommissioningStatus_0:
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   E0           MOVX      A,@DPTR
   \   000027   7007         JNZ       ??zclSampleLight_ProcessCommissioningStatus_1
    560                {
    561                  //YOUR JOB:
    562                  //We are on the nwk, what now?
    563                  HalLedSet ( HAL_LED_1, HAL_LED_MODE_FLASH );
   \   000029                ; Setup parameters for call to function HalLedSet
   \   000029   7A04         MOV       R2,#0x4
   \   00002B   7901         MOV       R1,#0x1
   \   00002D   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    564                }
    565                else
    566                {
    567                  //See the possible errors for nwk steering procedure
    568                  //No suitable networks found
    569                  //Want to try other channels?
    570                  //try with bdb_setChannelAttribute
    571                }
    572              break;
    573              case BDB_COMMISSIONING_FINDING_BINDING:
    574                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    575                {
    576                  //YOUR JOB:
    577                }
    578                else
    579                {
    580                  //YOUR JOB:
    581                  //retry?, wait for user interaction?
    582                }
    583              break;
    584              case BDB_COMMISSIONING_INITIALIZATION:
    585                //Initialization notification can only be successful. Failure on initialization 
    586                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    587                
    588                //YOUR JOB:
    589                //We are on a network, what now?
    590                
    591              break;
    592          #if ZG_BUILD_ENDDEVICE_TYPE    
    593              case BDB_COMMISSIONING_PARENT_LOST:
    594                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    595                {
    596                  //We did recover from losing parent
    597                }
    598                else
    599                {
    600                  //Parent not found, attempt to rejoin again after a fixed delay
    601                  osal_start_timerEx(zclSampleLight_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
    602                }
    603              break;
    604          #endif 
    605            }
    606          
    607          }
   \                     ??zclSampleLight_ProcessCommissioningStatus_1:
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    608          
    609          /*********************************************************************
    610           * @fn      zclSampleLight_BasicResetCB
    611           *
    612           * @brief   Callback from the ZCL General Cluster Library
    613           *          to set all the Basic Cluster attributes to default values.
    614           *
    615           * @param   none
    616           *
    617           * @return  none
    618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    619          static void zclSampleLight_BasicResetCB( void )
   \                     zclSampleLight_BasicResetCB:
    620          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    621            //Reset every attribute in all supported cluster to their default value.
    622          
    623            zclSampleLight_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
    624          
    625            zclSampleLight_UpdateLedState();
   \   000007                ; Setup parameters for call to function zclSampleLight_UpdateLedState
   \   000007   12....       LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
    626          }
   \   00000A   02....       LJMP      ?Subroutine0 & 0xFFFF
    627          
    628          /*********************************************************************
    629           * @fn      zclSampleLight_OnOffCB
    630           *
    631           * @brief   Callback from the ZCL General Cluster Library when
    632           *          it received an On/Off Command for this application.
    633           *
    634           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    635           *
    636           * @return  none
    637           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    638          static void zclSampleLight_OnOffCB( uint8 cmd )
   \                     zclSampleLight_OnOffCB:
    639          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    640            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL     `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
    641          
    642            uint8 OnOff;
    643          
    644            zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000017   90....       MOV       DPTR,#zclSampleLight_DstAddr
   \   00001A   E8           MOV       A,R0
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   E9           MOV       A,R1
   \   00001E   F0           MOVX      @DPTR,A
    645          
    646          
    647            // Turn on the light
    648            if ( cmd == COMMAND_ON )
   \   00001F   7401         MOV       A,#0x1
   \   000021   6F           XRL       A,R7
   \   000022   602D         JZ        ??zclSampleLight_OnOffCB_0
    649            {
    650              OnOff = LIGHT_ON;
    651            }
    652            // Turn off the light
    653            else if ( cmd == COMMAND_OFF )
   \   000024   EF           MOV       A,R7
   \   000025   6010         JZ        ??zclSampleLight_OnOffCB_1
    654            {
    655              OnOff = LIGHT_OFF;
    656            }
    657            // Toggle the light
    658            else if ( cmd == COMMAND_TOGGLE )
   \   000027   7402         MOV       A,#0x2
   \   000029   6F           XRL       A,R7
   \   00002A   7022         JNZ       ??zclSampleLight_OnOffCB_2
    659            {
    660          #ifdef ZCL_LEVEL_CTRL
    661              if (zclSampleLight_LevelRemainingTime > 0) 
   \   00002C   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00002F   6013         JZ        ??zclSampleLight_OnOffCB_3
    662              {
    663                if (zclSampleLight_NewLevelUp)
   \   000031   90....       MOV       DPTR,#zclSampleLight_NewLevelUp
   \   000034   E0           MOVX      A,@DPTR
   \   000035   601A         JZ        ??zclSampleLight_OnOffCB_0
   \                     ??zclSampleLight_OnOffCB_1:
   \   000037   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   00003A   7402         MOV       A,#0x2
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   7E01         MOV       R6,#0x1
   \   00003F   90....       MOV       DPTR,#zclSampleLight_LevelOffTransitionTime
   \   000042   802E         SJMP      ??zclSampleLight_OnOffCB_4
    664                {
    665                  OnOff = LIGHT_OFF;
    666                }
    667                else
    668                {
    669                  OnOff = LIGHT_ON;
    670                }
    671              }
    672              else
    673              {
    674                if (zclSampleLight_OnOff == LIGHT_ON)
   \                     ??zclSampleLight_OnOffCB_3:
   \   000044   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6401         XRL       A,#0x1
   \   00004A   7005         JNZ       ??zclSampleLight_OnOffCB_0
   \   00004C   80E9         SJMP      ??zclSampleLight_OnOffCB_1
    675                {
    676                  OnOff = LIGHT_OFF;
    677                }
    678                else
    679                {
    680                  OnOff = LIGHT_ON;
    681                }
    682              }
    683          #else
    684              if (zclSampleLight_OnOff == LIGHT_ON)
    685              {
    686                OnOff = LIGHT_OFF;
    687              }
    688              else
    689              {
    690                OnOff = LIGHT_ON;
    691              }
    692          #endif
    693            }
    694          
    695          #ifdef ZCL_LEVEL_CTRL
    696            zclSampleLight_LevelChangeCmd = (OnOff == LIGHT_ON ? LEVEL_CHANGED_BY_ON_CMD : LEVEL_CHANGED_BY_OFF_CMD);
   \                     ??zclSampleLight_OnOffCB_2:
   \   00004E   EA           MOV       A,R2
   \   00004F   60E6         JZ        ??zclSampleLight_OnOffCB_1
   \                     ??zclSampleLight_OnOffCB_0:
   \   000051   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   000054   7401         MOV       A,#0x1
   \   000056   F0           MOVX      @DPTR,A
   \   000057   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   7006         JNZ       ??zclSampleLight_OnOffCB_5
   \   00005D   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000060   7401         MOV       A,#0x1
   \   000062   F0           MOVX      @DPTR,A
   \                     ??zclSampleLight_OnOffCB_5:
   \   000063   90....       MOV       DPTR,#zclSampleLight_LevelOnLevel
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F4           CPL       A
   \   000068   7003         JNZ       ??zclSampleLight_OnOffCB_6
   \   00006A   90....       MOV       DPTR,#zclSampleLight_LevelLastLevel
   \                     ??zclSampleLight_OnOffCB_6:
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   FE           MOV       R6,A
   \   00006F   90....       MOV       DPTR,#zclSampleLight_LevelOnTransitionTime
   \                     ??zclSampleLight_OnOffCB_4:
   \   000072   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000075   74FF         MOV       A,#-0x1
   \   000077   68           XRL       A,R0
   \   000078   7003         JNZ       ??zclSampleLight_OnOffCB_7
   \   00007A   74FF         MOV       A,#-0x1
   \   00007C   69           XRL       A,R1
   \                     ??zclSampleLight_OnOffCB_7:
   \   00007D   7006         JNZ       ??CrossCallReturnLabel_23
   \   00007F   90....       MOV       DPTR,#zclSampleLight_LevelOnOffTransitionTime
   \   000082   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000085   74FF         MOV       A,#-0x1
   \   000087   68           XRL       A,R0
   \   000088   7003         JNZ       ??zclSampleLight_OnOffCB_8
   \   00008A   74FF         MOV       A,#-0x1
   \   00008C   69           XRL       A,R1
   \                     ??zclSampleLight_OnOffCB_8:
   \   00008D   7004         JNZ       ??zclSampleLight_OnOffCB_9
   \   00008F   7801         MOV       R0,#0x1
   \   000091   7900         MOV       R1,#0x0
   \                     ??zclSampleLight_OnOffCB_9:
   \   000093   90....       MOV       DPTR,#zclSampleLight_WithOnOff
   \   000096   7401         MOV       A,#0x1
   \   000098   F0           MOVX      @DPTR,A
   \   000099                ; Setup parameters for call to function zclSampleLight_MoveBasedOnRate
   \   000099   75..18       MOV       ?V0,#0x18
   \   00009C   75..E4       MOV       ?V1,#-0x1c
   \   00009F   75..03       MOV       ?V2,#0x3
   \   0000A2   75..00       MOV       ?V3,#0x0
   \   0000A5   88..         MOV       ?V4,R0
   \   0000A7   89..         MOV       ?V5,R1
   \   0000A9   E4           CLR       A
   \   0000AA   F5..         MOV       ?V6,A
   \   0000AC   F5..         MOV       ?V7,A
   \   0000AE   78..         MOV       R0,#?V0
   \   0000B0   79..         MOV       R1,#?V4
   \   0000B2   12....       LCALL     ?L_DIV_MOD
   \   0000B5   AA..         MOV       R2,?V0
   \   0000B7   AB..         MOV       R3,?V1
   \   0000B9   AC..         MOV       R4,?V2
   \   0000BB   AD..         MOV       R5,?V3
   \   0000BD   EE           MOV       A,R6
   \   0000BE   F9           MOV       R1,A
   \   0000BF   12....       LCALL     `??zclSampleLight_MoveBasedOnRate::?relay`; Banked call to: zclSampleLight_MoveBasedOnRate
    697          
    698            zclSampleLight_DefaultMove(OnOff);
    699          #else
    700            zclSampleLight_OnOff = OnOff;
    701          #endif
    702            bdb_RepChangedAttrValue(SAMPLELIGHT_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF, ATTRID_ON_OFF);
   \   0000C2                ; Setup parameters for call to function bdb_RepChangedAttrValue
   \   0000C2   7C00         MOV       R4,#0x0
   \   0000C4   7D00         MOV       R5,#0x0
   \   0000C6   7A06         MOV       R2,#0x6
   \   0000C8   7B00         MOV       R3,#0x0
   \   0000CA   7908         MOV       R1,#0x8
   \   0000CC   12....       LCALL     `??bdb_RepChangedAttrValue::?relay`; Banked call to: bdb_RepChangedAttrValue
    703            zclSampleLight_UpdateLedState();
   \   0000CF                ; Setup parameters for call to function zclSampleLight_UpdateLedState
   \   0000CF   12....       LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
    704          }
   \   0000D2   02....       LJMP      ??Subroutine11_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   000003   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000006   E8           MOV       A,R0
   \   000007   49           ORL       A,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    705          
    706          #ifdef ZCL_LEVEL_CTRL
    707          /*********************************************************************
    708           * @fn      zclSampleLight_TimeRateHelper
    709           *
    710           * @brief   Calculate time based on rate, and startup level state machine
    711           *
    712           * @param   newLevel - new level for current level
    713           *
    714           * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
    715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    716          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
   \                     zclSampleLight_TimeRateHelper:
    717          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    718            uint32 diff;
    719            uint32 newLevel32;
    720          
    721            // remember current and new level
    722            zclSampleLight_NewLevel = newLevel;
   \   000007   90....       MOV       DPTR,#zclSampleLight_NewLevel
   \   00000A   F0           MOVX      @DPTR,A
    723            zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
   \   00000B   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   00000E   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000011   90....       MOV       DPTR,#__Constant_3e8
   \   000014   78..         MOV       R0,#?V4
   \   000016   12....       LCALL     ?L_MOV_X
   \   000019   78..         MOV       R0,#?V0
   \   00001B   79..         MOV       R1,#?V4
   \   00001D   12....       LCALL     ?L_MUL
   \   000020   90....       MOV       DPTR,#zclSampleLight_CurrentLevel32
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?L_MOV_TO_X
    724          
    725            // calculate diff
    726            newLevel32 = (uint32)1000 * newLevel;
   \   000028   8E..         MOV       ?V4,R6
   \   00002A   E4           CLR       A
   \   00002B   F5..         MOV       ?V5,A
   \   00002D   F5..         MOV       ?V6,A
   \   00002F   F5..         MOV       ?V7,A
   \   000031   90....       MOV       DPTR,#__Constant_3e8
   \   000034   78..         MOV       R0,#?V0
   \   000036   12....       LCALL     ?L_MOV_X
   \   000039   78..         MOV       R0,#?V4
   \   00003B   79..         MOV       R1,#?V0
   \   00003D   12....       LCALL     ?L_MUL
    727            if ( zclSampleLight_LevelCurrentLevel > newLevel )
   \   000040   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F8           MOV       R0,A
   \   000045   EE           MOV       A,R6
   \   000046   C3           CLR       C
   \   000047   98           SUBB      A,R0
   \   000048   90....       MOV       DPTR,#zclSampleLight_CurrentLevel32
   \   00004B   501E         JNC       ??zclSampleLight_TimeRateHelper_0
    728            {
    729              diff = zclSampleLight_CurrentLevel32 - newLevel32;
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?L_MOV_X
   \   000052   78..         MOV       R0,#?V0
   \   000054   79..         MOV       R1,#?V4
   \   000056   12....       LCALL     ?L_SUB
   \   000059   85....       MOV       ?V4,?V0
   \   00005C   85....       MOV       ?V5,?V1
   \   00005F   85....       MOV       ?V6,?V2
   \   000062   85....       MOV       ?V7,?V3
    730              zclSampleLight_NewLevelUp = FALSE;  // moving down
   \   000065   90....       MOV       DPTR,#zclSampleLight_NewLevelUp
   \   000068   E4           CLR       A
   \   000069   800A         SJMP      ??zclSampleLight_TimeRateHelper_1
    731            }
    732            else
    733            {
    734              diff = newLevel32 - zclSampleLight_CurrentLevel32;
   \                     ??zclSampleLight_TimeRateHelper_0:
   \   00006B   78..         MOV       R0,#?V4
   \   00006D   12....       LCALL     ?L_SUB_X
    735              zclSampleLight_NewLevelUp = TRUE;   // moving up
   \   000070   90....       MOV       DPTR,#zclSampleLight_NewLevelUp
   \   000073   7401         MOV       A,#0x1
   \                     ??zclSampleLight_TimeRateHelper_1:
   \   000075   F0           MOVX      @DPTR,A
    736            }
    737          
    738            return ( diff );
   \   000076   AA..         MOV       R2,?V4
   \   000078   AB..         MOV       R3,?V5
   \   00007A   AC..         MOV       R4,?V6
   \   00007C   AD..         MOV       R5,?V7
   \   00007E   80..         SJMP      ??Subroutine11_0
    739          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V1,A
   \   000006   F5..         MOV       ?V2,A
   \   000008   F5..         MOV       ?V3,A
   \   00000A   22           RET
    740          
    741          /*********************************************************************
    742           * @fn      zclSampleLight_MoveBasedOnRate
    743           *
    744           * @brief   Calculate time based on rate, and startup level state machine
    745           *
    746           * @param   newLevel - new level for current level
    747           * @param   rate16   - fixed point rate (e.g. 16.123)
    748           *
    749           * @return  none
    750           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV       DPTR,#__Constant_64
   \   000003   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000006   7A02         MOV       R2,#0x2
   \   000008   7B00         MOV       R3,#0x0
   \   00000A   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000012   7404         MOV       A,#0x4
   \   000014   12....       LCALL     ?DEALLOC_XSTACK8
   \   000017                REQUIRE ??Subroutine11_0
   \   000017                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    751          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
   \                     zclSampleLight_MoveBasedOnRate:
    752          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V6,R4
   \   00000B   8D..         MOV       ?V7,R5
    753            uint32 diff;
    754          
    755            // determine how much time (in 10ths of seconds) based on the difference and rate
    756            zclSampleLight_Rate32 = rate;
   \   00000D   90....       MOV       DPTR,#zclSampleLight_Rate32
   \   000010   78..         MOV       R0,#?V4
   \   000012   12....       LCALL     ?L_MOV_TO_X
    757            diff = zclSampleLight_TimeRateHelper( newLevel );
    758            zclSampleLight_LevelRemainingTime = diff / rate;
   \   000015                ; Setup parameters for call to function zclSampleLight_TimeRateHelper
   \   000015   12....       LCALL     `??zclSampleLight_TimeRateHelper::?relay`; Banked call to: zclSampleLight_TimeRateHelper
   \   000018   8A..         MOV       ?V0,R2
   \   00001A   8B..         MOV       ?V1,R3
   \   00001C   8C..         MOV       ?V2,R4
   \   00001E   8D..         MOV       ?V3,R5
   \   000020   78..         MOV       R0,#?V0
   \   000022   79..         MOV       R1,#?V4
   \   000024   12....       LCALL     ?UL_DIV_MOD
   \   000027   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   00002A   E5..         MOV       A,?V0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E5..         MOV       A,?V1
   \   000030   F0           MOVX      @DPTR,A
    759            if ( !zclSampleLight_LevelRemainingTime )
   \   000031   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000034   7009         JNZ       ??zclSampleLight_MoveBasedOnRate_0
    760            {
    761              zclSampleLight_LevelRemainingTime = 1;
   \   000036   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   000039   7401         MOV       A,#0x1
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   E4           CLR       A
   \   00003E   F0           MOVX      @DPTR,A
    762            }
    763          
    764            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   \                     ??zclSampleLight_MoveBasedOnRate_0:
   \   00003F                ; Setup parameters for call to function osal_start_timerEx
   \   00003F   80..         SJMP      ?Subroutine1
    765          }
    766          
    767          /*********************************************************************
    768           * @fn      zclSampleLight_MoveBasedOnTime
    769           *
    770           * @brief   Calculate rate based on time, and startup level state machine
    771           *
    772           * @param   newLevel  - new level for current level
    773           * @param   time      - in 10ths of seconds
    774           *
    775           * @return  none
    776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    777          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
   \                     zclSampleLight_MoveBasedOnTime:
    778          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    779            uint16 diff;
    780          
    781            // determine rate (in units) based on difference and time
    782            diff = zclSampleLight_TimeRateHelper( newLevel );
   \   00000B                ; Setup parameters for call to function zclSampleLight_TimeRateHelper
   \   00000B   12....       LCALL     `??zclSampleLight_TimeRateHelper::?relay`; Banked call to: zclSampleLight_TimeRateHelper
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
   \   000012   A8..         MOV       R0,?V4
   \   000014   A9..         MOV       R1,?V5
    783            zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
   \   000016   EE           MOV       A,R6
   \   000017   FA           MOV       R2,A
   \   000018   EF           MOV       A,R7
   \   000019   FB           MOV       R3,A
   \   00001A   74FF         MOV       A,#-0x1
   \   00001C   6A           XRL       A,R2
   \   00001D   7003         JNZ       ??zclSampleLight_MoveBasedOnTime_0
   \   00001F   74FF         MOV       A,#-0x1
   \   000021   6B           XRL       A,R3
   \                     ??zclSampleLight_MoveBasedOnTime_0:
   \   000022   7030         JNZ       ??zclSampleLight_MoveBasedOnTime_1
   \   000024   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FA           MOV       R2,A
   \   000029   E5..         MOV       A,?V0
   \   00002B   C3           CLR       C
   \   00002C   9A           SUBB      A,R2
   \   00002D   5005         JNC       ??zclSampleLight_MoveBasedOnTime_2
   \   00002F   90....       MOV       DPTR,#zclSampleLight_LevelOffTransitionTime
   \   000032   8003         SJMP      ??zclSampleLight_MoveBasedOnTime_3
   \                     ??zclSampleLight_MoveBasedOnTime_2:
   \   000034   90....       MOV       DPTR,#zclSampleLight_LevelOnTransitionTime
   \                     ??zclSampleLight_MoveBasedOnTime_3:
   \   000037   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00003A   74FF         MOV       A,#-0x1
   \   00003C   6A           XRL       A,R2
   \   00003D   7003         JNZ       ??zclSampleLight_MoveBasedOnTime_4
   \   00003F   74FF         MOV       A,#-0x1
   \   000041   6B           XRL       A,R3
   \                     ??zclSampleLight_MoveBasedOnTime_4:
   \   000042   7006         JNZ       ??CrossCallReturnLabel_7
   \   000044   90....       MOV       DPTR,#zclSampleLight_LevelOnOffTransitionTime
   \   000047   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00004A   74FF         MOV       A,#-0x1
   \   00004C   6A           XRL       A,R2
   \   00004D   7003         JNZ       ??zclSampleLight_MoveBasedOnTime_5
   \   00004F   74FF         MOV       A,#-0x1
   \   000051   6B           XRL       A,R3
   \                     ??zclSampleLight_MoveBasedOnTime_5:
   \   000052   6004         JZ        ??zclSampleLight_MoveBasedOnTime_6
   \                     ??zclSampleLight_MoveBasedOnTime_1:
   \   000054   EA           MOV       A,R2
   \   000055   4B           ORL       A,R3
   \   000056   7004         JNZ       ??zclSampleLight_MoveBasedOnTime_7
   \                     ??zclSampleLight_MoveBasedOnTime_6:
   \   000058   7A01         MOV       R2,#0x1
   \   00005A   7B00         MOV       R3,#0x0
   \                     ??zclSampleLight_MoveBasedOnTime_7:
   \   00005C   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   00005F   EA           MOV       A,R2
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   EB           MOV       A,R3
   \   000063   F0           MOVX      @DPTR,A
    784            zclSampleLight_Rate32 = diff / time;
   \   000064   EE           MOV       A,R6
   \   000065   FA           MOV       R2,A
   \   000066   EF           MOV       A,R7
   \   000067   FB           MOV       R3,A
   \   000068   12....       LCALL     ?US_DIV_MOD
   \   00006B   90....       MOV       DPTR,#zclSampleLight_Rate32
   \   00006E   E8           MOV       A,R0
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   A3           INC       DPTR
   \   000071   E9           MOV       A,R1
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   E4           CLR       A
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   F0           MOVX      @DPTR,A
    785          
    786            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   \   000078                ; Setup parameters for call to function osal_start_timerEx
   \   000078   02....       LJMP      ?Subroutine1 & 0xFFFF
    787          }
    788          
    789          /*********************************************************************
    790           * @fn      zclSampleLight_GetTime
    791           *
    792           * @brief   Determine amount of time that MoveXXX will take to complete.
    793           *
    794           * @param   level = new level to move to
    795           *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
    796           *
    797           * @return  none
    798           */
    799          static uint16 zclSampleLight_GetTime( uint8 newLevel, uint16 time )
    800          {
    801            // there is a hiearchy of the amount of time to use for transistioning
    802            // check each one in turn. If none of defaults are set, then use fastest
    803            // time possible.
    804            if ( time == 0xFFFF )
    805            {
    806              // use On or Off Transition Time if set (not 0xffff)
    807              if ( zclSampleLight_LevelCurrentLevel > newLevel )
    808              {
    809                time = zclSampleLight_LevelOffTransitionTime;
    810              }
    811              else
    812              {
    813                time = zclSampleLight_LevelOnTransitionTime;
    814              }
    815          
    816              // else use OnOffTransitionTime if set (not 0xffff)
    817              if ( time == 0xFFFF )
    818              {
    819                time = zclSampleLight_LevelOnOffTransitionTime;
    820              }
    821          
    822              // else as fast as possible
    823              if ( time == 0xFFFF )
    824              {
    825                time = 1;
    826              }
    827            }
    828          
    829            if ( time == 0 )
    830            {
    831              time = 1; // as fast as possible
    832            }
    833          
    834            return ( time );
    835          }
    836          
    837          /*********************************************************************
    838           * @fn      zclSampleLight_DefaultMove
    839           *
    840           * @brief   We were turned on/off. Use default time to move to on or off.
    841           *
    842           * @param   zclSampleLight_OnOff - must be set prior to calling this function.
    843           *
    844           * @return  none
    845           */
    846          static void zclSampleLight_DefaultMove( uint8 OnOff )
    847          {
    848            uint8  newLevel;
    849            uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
    850            uint16 time;
    851          
    852            // if moving to on position, move to on level
    853            if ( OnOff )
    854            {
    855              if (zclSampleLight_OnOff == LIGHT_OFF)
    856              {
    857                zclSampleLight_LevelCurrentLevel = ATTR_LEVEL_MIN_LEVEL;
    858              }
    859              
    860              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
    861              {
    862                // The last Level (before going OFF) should be used)
    863                newLevel = zclSampleLight_LevelLastLevel;
    864              }
    865              else
    866              {
    867                newLevel = zclSampleLight_LevelOnLevel;
    868              }
    869          
    870              time = zclSampleLight_LevelOnTransitionTime;
    871          
    872            }
    873            else
    874            {
    875              newLevel = ATTR_LEVEL_MIN_LEVEL;
    876          
    877              time = zclSampleLight_LevelOffTransitionTime;
    878            }
    879          
    880            // else use OnOffTransitionTime if set (not 0xffff)
    881            if ( time == 0xFFFF )
    882            {
    883              time = zclSampleLight_LevelOnOffTransitionTime;
    884            }
    885          
    886            // else as fast as possible
    887            if ( time == 0xFFFF )
    888            {
    889              time = 1;
    890            }
    891          
    892            // calculate rate based on time (int 10ths) for full transition (1-254)
    893            rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
    894          
    895            // start up state machine.
    896            zclSampleLight_WithOnOff = TRUE;
    897            zclSampleLight_MoveBasedOnRate( newLevel, rate );
    898          }
    899          
    900          /*********************************************************************
    901           * @fn      zclSampleLight_AdjustLightLevel
    902           *
    903           * @brief   Called each 10th of a second while state machine running
    904           *
    905           * @param   none
    906           *
    907           * @return  none
    908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    909          static void zclSampleLight_AdjustLightLevel( void )
   \                     zclSampleLight_AdjustLightLevel:
    910          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    911            // one tick (10th of a second) less
    912            if ( zclSampleLight_LevelRemainingTime )
   \   000005   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000008   6012         JZ        ??zclSampleLight_AdjustLightLevel_0
    913            {
    914              --zclSampleLight_LevelRemainingTime;
    915            }
    916          
    917            // no time left, done
    918            if ( zclSampleLight_LevelRemainingTime == 0)
   \   00000A   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   24FF         ADD       A,#-0x1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   18           DEC       R0
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   34FF         ADDC      A,#-0x1
   \   000016   F0           MOVX      @DPTR,A
   \   000017   F9           MOV       R1,A
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   7006         JNZ       ??zclSampleLight_AdjustLightLevel_1
    919            {
    920              zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
   \                     ??zclSampleLight_AdjustLightLevel_0:
   \   00001C   90....       MOV       DPTR,#zclSampleLight_NewLevel
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   803C         SJMP      ??zclSampleLight_AdjustLightLevel_2
    921            }
    922          
    923            // still time left, keep increment/decrementing
    924            else
    925            {
    926              if ( zclSampleLight_NewLevelUp )
   \                     ??zclSampleLight_AdjustLightLevel_1:
   \   000022   90....       MOV       DPTR,#zclSampleLight_NewLevelUp
   \   000025   E0           MOVX      A,@DPTR
   \   000026   90....       MOV       DPTR,#zclSampleLight_Rate32
   \   000029   78..         MOV       R0,#?V0
   \   00002B   600D         JZ        ??zclSampleLight_AdjustLightLevel_3
    927              {
    928                zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
   \   00002D   12....       LCALL     ?L_MOV_X
   \   000030   90....       MOV       DPTR,#zclSampleLight_CurrentLevel32
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?L_ADD_TO_X
   \   000038   800B         SJMP      ??zclSampleLight_AdjustLightLevel_4
    929              }
    930              else
    931              {
    932                zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
   \                     ??zclSampleLight_AdjustLightLevel_3:
   \   00003A   12....       LCALL     ?L_MOV_X
   \   00003D   90....       MOV       DPTR,#zclSampleLight_CurrentLevel32
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?L_SUB_FROM_X
    933              }
    934              zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
   \                     ??zclSampleLight_AdjustLightLevel_4:
   \   000045   90....       MOV       DPTR,#zclSampleLight_CurrentLevel32
   \   000048   78..         MOV       R0,#?V0
   \   00004A   12....       LCALL     ?L_MOV_X
   \   00004D   90....       MOV       DPTR,#__Constant_3e8
   \   000050   78..         MOV       R0,#?V4
   \   000052   12....       LCALL     ?L_MOV_X
   \   000055   78..         MOV       R0,#?V0
   \   000057   79..         MOV       R1,#?V4
   \   000059   12....       LCALL     ?L_DIV_MOD
   \   00005C   E5..         MOV       A,?V0
   \                     ??zclSampleLight_AdjustLightLevel_2:
   \   00005E   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000061   F0           MOVX      @DPTR,A
    935            }
    936          
    937            if (( zclSampleLight_LevelChangeCmd == LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
   \   000062   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   000065   E0           MOVX      A,@DPTR
   \   000066   700F         JNZ       ??zclSampleLight_AdjustLightLevel_5
   \   000068   90....       MOV       DPTR,#zclSampleLight_LevelOnLevel
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F4           CPL       A
   \   00006D   7008         JNZ       ??zclSampleLight_AdjustLightLevel_5
    938            {
    939              zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
   \   00006F   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000072   E0           MOVX      A,@DPTR
   \   000073   90....       MOV       DPTR,#zclSampleLight_LevelLastLevel
   \   000076   F0           MOVX      @DPTR,A
    940            }
    941          
    942            // also affect on/off
    943            if ( zclSampleLight_WithOnOff )
   \                     ??zclSampleLight_AdjustLightLevel_5:
   \   000077   90....       MOV       DPTR,#zclSampleLight_WithOnOff
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   6037         JZ        ??zclSampleLight_AdjustLightLevel_6
    944            {
    945              if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
   \   00007D   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000080   E0           MOVX      A,@DPTR
   \   000081   C3           CLR       C
   \   000082   9402         SUBB      A,#0x2
   \   000084   4007         JC        ??zclSampleLight_AdjustLightLevel_7
    946              {
    947                zclSampleLight_OnOff = LIGHT_ON;
   \   000086   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   000089   7401         MOV       A,#0x1
   \   00008B   8026         SJMP      ??zclSampleLight_AdjustLightLevel_8
    948              }
    949              else
    950              {
    951                if (zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_ON_CMD)
   \                     ??zclSampleLight_AdjustLightLevel_7:
   \   00008D   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   000090   E0           MOVX      A,@DPTR
   \   000091   6401         XRL       A,#0x1
   \   000093   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   000096   600A         JZ        ??zclSampleLight_AdjustLightLevel_9
    952                {
    953                  zclSampleLight_OnOff = LIGHT_OFF;
   \   000098   E4           CLR       A
   \   000099   F0           MOVX      @DPTR,A
    954                }
    955                else
    956                {
    957                  zclSampleLight_OnOff = LIGHT_ON;
    958                }
    959                
    960                if (( zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
   \   00009A   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   7005         JNZ       ??zclSampleLight_AdjustLightLevel_10
   \   0000A0   8012         SJMP      ??zclSampleLight_AdjustLightLevel_6
   \                     ??zclSampleLight_AdjustLightLevel_9:
   \   0000A2   7401         MOV       A,#0x1
   \   0000A4   F0           MOVX      @DPTR,A
   \                     ??zclSampleLight_AdjustLightLevel_10:
   \   0000A5   90....       MOV       DPTR,#zclSampleLight_LevelOnLevel
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   F4           CPL       A
   \   0000AA   7008         JNZ       ??zclSampleLight_AdjustLightLevel_6
    961                {
    962                  zclSampleLight_LevelCurrentLevel = zclSampleLight_LevelLastLevel;
   \   0000AC   90....       MOV       DPTR,#zclSampleLight_LevelLastLevel
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \                     ??zclSampleLight_AdjustLightLevel_8:
   \   0000B3   F0           MOVX      @DPTR,A
    963                }
    964              }
    965            }
    966          
    967            zclSampleLight_UpdateLedState();
   \                     ??zclSampleLight_AdjustLightLevel_6:
   \   0000B4                ; Setup parameters for call to function zclSampleLight_UpdateLedState
   \   0000B4   12....       LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
    968          
    969            // keep ticking away
    970            if ( zclSampleLight_LevelRemainingTime )
   \   0000B7   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000BA   6017         JZ        ??zclSampleLight_AdjustLightLevel_11
    971            {
    972              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   \   0000BC                ; Setup parameters for call to function osal_start_timerEx
   \   0000BC   90....       MOV       DPTR,#__Constant_64
   \   0000BF   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000C2   7A02         MOV       R2,#0x2
   \   0000C4   7B00         MOV       R3,#0x0
   \   0000C6   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F9           MOV       R1,A
   \   0000CB   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000CE   7404         MOV       A,#0x4
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
    973            }
    974          }
   \                     ??zclSampleLight_AdjustLightLevel_11:
   \   0000D3   02....       LJMP      ??Subroutine11_0 & 0xFFFF
    975          
    976          /*********************************************************************
    977           * @fn      zclSampleLight_LevelControlMoveToLevelCB
    978           *
    979           * @brief   Callback from the ZCL General Cluster Library when
    980           *          it received a LevelControlMoveToLevel Command for this application.
    981           *
    982           * @param   pCmd - ZigBee command parameters
    983           *
    984           * @return  none
    985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    986          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
   \                     zclSampleLight_LevelControlMoveToLevelCB:
    987          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   F8           MOV       R0,A
   \   000006   EB           MOV       A,R3
   \   000007   F9           MOV       R1,A
    988            zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
   \   000008   12....       LCALL     ?Subroutine3 & 0xFFFF
    989          
    990            zclSampleLight_WithOnOff = pCmd->withOnOff;
   \                     ??CrossCallReturnLabel_0:
   \   00000B   12....       LCALL     ?Subroutine4 & 0xFFFF
    991            zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
   \                     ??CrossCallReturnLabel_15:
   \   00000E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000011   8882         MOV       DPL,R0
   \   000013   8983         MOV       DPH,R1
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   12....       LCALL     `??zclSampleLight_MoveBasedOnTime::?relay`; Banked call to: zclSampleLight_MoveBasedOnTime
    992          }
   \   00001A   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   90....       MOV       DPTR,#zclSampleLight_WithOnOff
   \   000004                REQUIRE ??Subroutine12_0
   \   000004                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zclSampleLight_MoveBasedOnTime
   \   000001                ; Setup parameters for call to function zclSampleLight_MoveBasedOnTime
   \   000001                ; Setup parameters for call to function zclSampleLight_MoveBasedOnRate
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET
    993          
    994          /*********************************************************************
    995           * @fn      zclSampleLight_LevelControlMoveCB
    996           *
    997           * @brief   Callback from the ZCL General Cluster Library when
    998           *          it received a LevelControlMove Command for this application.
    999           *
   1000           * @param   pCmd - ZigBee command parameters
   1001           *
   1002           * @return  none
   1003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1004          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
   \                     zclSampleLight_LevelControlMoveCB:
   1005          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   1006            uint8 newLevel;
   1007            uint32 rate;
   1008          
   1009            // convert rate from units per second to units per tick (10ths of seconds)
   1010            // and move at that right up or down
   1011            zclSampleLight_WithOnOff = pCmd->withOnOff;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   90....       MOV       DPTR,#zclSampleLight_WithOnOff
   \   00000F   F0           MOVX      @DPTR,A
   1012          
   1013            if ( pCmd->moveMode == LEVEL_MOVE_UP )
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7004         JNZ       ??zclSampleLight_LevelControlMoveCB_0
   1014            {
   1015              newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
   \   000017   7EFE         MOV       R6,#-0x2
   \   000019   8002         SJMP      ??zclSampleLight_LevelControlMoveCB_1
   1016            }
   1017            else
   1018            {
   1019              newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
   \                     ??zclSampleLight_LevelControlMoveCB_0:
   \   00001B   7E01         MOV       R6,#0x1
   1020            }
   1021          
   1022            zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
   \                     ??zclSampleLight_LevelControlMoveCB_1:
   \   00001D   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   000020   E4           CLR       A
   \   000021   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   1023          
   1024            rate = (uint32)100 * pCmd->rate;
   1025            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   \                     ??CrossCallReturnLabel_17:
   \   000024   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000027   90....       MOV       DPTR,#__Constant_64
   \   00002A   78..         MOV       R0,#?V4
   \   00002C   12....       LCALL     ?L_MOV_X
   \   00002F   78..         MOV       R0,#?V0
   \   000031   79..         MOV       R1,#?V4
   \   000033   12....       LCALL     ?L_MUL
   \   000036   AA..         MOV       R2,?V0
   \   000038   AB..         MOV       R3,?V1
   \   00003A   AC..         MOV       R4,?V2
   \   00003C   AD..         MOV       R5,?V3
   \   00003E   EE           MOV       A,R6
   \   00003F   F9           MOV       R1,A
   \   000040   12....       LCALL     `??zclSampleLight_MoveBasedOnRate::?relay`; Banked call to: zclSampleLight_MoveBasedOnRate
   1026          }
   \   000043   02....       LJMP      ??Subroutine11_0 & 0xFFFF
   1027          
   1028          /*********************************************************************
   1029           * @fn      zclSampleLight_LevelControlStepCB
   1030           *
   1031           * @brief   Callback from the ZCL General Cluster Library when
   1032           *          it received an On/Off Command for this application.
   1033           *
   1034           * @param   pCmd - ZigBee command parameters
   1035           *
   1036           * @return  none
   1037           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1038          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
   \                     zclSampleLight_LevelControlStepCB:
   1039          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1040            uint8 newLevel;
   1041          
   1042            // determine new level, but don't exceed boundaries
   1043            if ( pCmd->stepMode == LEVEL_MOVE_UP )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FC           MOV       R4,A
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   E0           MOVX      A,@DPTR
   \   000011   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000014   7017         JNZ       ??zclSampleLight_LevelControlStepCB_0
   1044            {
   1045              if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
   \   000016   E0           MOVX      A,@DPTR
   \   000017   2C           ADD       A,R4
   \   000018   F8           MOV       R0,A
   \   000019   E4           CLR       A
   \   00001A   3400         ADDC      A,#0x0
   \   00001C   F9           MOV       R1,A
   \   00001D   E8           MOV       A,R0
   \   00001E   94FF         SUBB      A,#-0x1
   \   000020   E9           MOV       A,R1
   \   000021   9400         SUBB      A,#0x0
   \   000023   4004         JC        ??zclSampleLight_LevelControlStepCB_1
   1046              {
   1047                newLevel = ATTR_LEVEL_MAX_LEVEL;
   \   000025   79FE         MOV       R1,#-0x2
   \   000027   8013         SJMP      ??zclSampleLight_LevelControlStepCB_2
   1048              }
   1049              else
   1050              {
   1051                newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
   \                     ??zclSampleLight_LevelControlStepCB_1:
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   2C           ADD       A,R4
   \   00002B   800E         SJMP      ??zclSampleLight_LevelControlStepCB_3
   1052              }
   1053            }
   1054            else
   1055            {
   1056              if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
   \                     ??zclSampleLight_LevelControlStepCB_0:
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F8           MOV       R0,A
   \   00002F   EC           MOV       A,R4
   \   000030   C3           CLR       C
   \   000031   98           SUBB      A,R0
   \   000032   4004         JC        ??zclSampleLight_LevelControlStepCB_4
   1057              {
   1058                newLevel = ATTR_LEVEL_MIN_LEVEL;
   \   000034   7901         MOV       R1,#0x1
   \   000036   8004         SJMP      ??zclSampleLight_LevelControlStepCB_2
   1059              }
   1060              else
   1061              {
   1062                newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
   \                     ??zclSampleLight_LevelControlStepCB_4:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C3           CLR       C
   \   00003A   9C           SUBB      A,R4
   \                     ??zclSampleLight_LevelControlStepCB_3:
   \   00003B   F9           MOV       R1,A
   1063              }
   1064            }
   1065            
   1066            zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
   \                     ??zclSampleLight_LevelControlStepCB_2:
   \   00003C   12....       LCALL     ?Subroutine3 & 0xFFFF
   1067          
   1068            // move to the new level
   1069            zclSampleLight_WithOnOff = pCmd->withOnOff;
   \                     ??CrossCallReturnLabel_1:
   \   00003F   A3           INC       DPTR
   \   000040   12....       LCALL     ?Subroutine4 & 0xFFFF
   1070            zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
   \                     ??CrossCallReturnLabel_16:
   \   000043   A3           INC       DPTR
   \   000044   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000047   12....       LCALL     `??zclSampleLight_MoveBasedOnTime::?relay`; Banked call to: zclSampleLight_MoveBasedOnTime
   1071          }
   \   00004A                REQUIRE ?Subroutine2
   \   00004A                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1072          
   1073          /*********************************************************************
   1074           * @fn      zclSampleLight_LevelControlStopCB
   1075           *
   1076           * @brief   Callback from the ZCL General Cluster Library when
   1077           *          it received an Level Control Stop Command for this application.
   1078           *
   1079           * @param   pCmd - ZigBee command parameters
   1080           *
   1081           * @return  none
   1082           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1083          static void zclSampleLight_LevelControlStopCB( void )
   \                     zclSampleLight_LevelControlStopCB:
   1084          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1085            // stop immediately
   1086            osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A02         MOV       R2,#0x2
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1087            zclSampleLight_LevelRemainingTime = 0;
   \   000010   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
   1088          }
   \   000017                REQUIRE ?Subroutine0
   \   000017                ; // Fall through to label ?Subroutine0
   1089          #endif
   1090          
   1091          /*********************************************************************
   1092           * @fn      zclSampleApp_BatteryWarningCB
   1093           *
   1094           * @brief   Called to handle battery-low situation.
   1095           *
   1096           * @param   voltLevel - level of severity
   1097           *
   1098           * @return  none
   1099           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1100          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
   1101          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1102            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
   1103            {
   1104              // Send warning message to the gateway and blink LED
   1105            }
   1106            else if ( voltLevel == VOLT_LEVEL_BAD )
   1107            {
   1108              // Shut down the system
   1109            }
   1110          }
   \   000000   02....       LJMP      ?BRET
   1111          
   1112          /******************************************************************************
   1113           *
   1114           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1115           *
   1116           *****************************************************************************/
   1117          
   1118          /*********************************************************************
   1119           * @fn      zclSampleLight_ProcessIncomingMsg
   1120           *
   1121           * @brief   Process ZCL Foundation incoming message
   1122           *
   1123           * @param   pInMsg - pointer to the received message
   1124           *
   1125           * @return  none
   1126           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1127          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     zclSampleLight_ProcessIncomingMsg:
   1128          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1129            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   FE           MOV       R6,A
   \   00000E   E9           MOV       A,R1
   \   00000F   FF           MOV       R7,A
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   14           DEC       A
   \   00001D   6016         JZ        ??zclSampleLight_ProcessIncomingMsg_0
   \   00001F   24FD         ADD       A,#-0x3
   \   000021   601F         JZ        ??zclSampleLight_ProcessIncomingMsg_1
   \   000023   24F7         ADD       A,#-0x9
   \   000025   602D         JZ        ??zclSampleLight_ProcessIncomingMsg_2
   \   000027   24FB         ADD       A,#-0x5
   \   000029   6024         JZ        ??zclSampleLight_ProcessIncomingMsg_3
   \   00002B   24FE         ADD       A,#-0x2
   \   00002D   6020         JZ        ??zclSampleLight_ProcessIncomingMsg_3
   \   00002F   24FE         ADD       A,#-0x2
   \   000031   6033         JZ        ??zclSampleLight_ProcessIncomingMsg_4
   \   000033   8043         SJMP      ??zclSampleLight_ProcessIncomingMsg_5
   1130            {
   1131          #ifdef ZCL_READ
   1132              case ZCL_CMD_READ_RSP:
   1133                zclSampleLight_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleLight_ProcessIncomingMsg_0:
   \   000035   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   E8           MOV       A,R0
   \   00003B   C3           CLR       C
   \   00003C   99           SUBB      A,R1
   \   00003D   5039         JNC       ??zclSampleLight_ProcessIncomingMsg_5
   \   00003F   08           INC       R0
   \   000040   80F6         SJMP      ??CrossCallReturnLabel_11
   1134                break;
   1135          #endif
   1136          #ifdef ZCL_WRITE
   1137              case ZCL_CMD_WRITE_RSP:
   1138                zclSampleLight_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleLight_ProcessIncomingMsg_1:
   \   000042   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   E8           MOV       A,R0
   \   000048   C3           CLR       C
   \   000049   99           SUBB      A,R1
   \   00004A   502C         JNC       ??zclSampleLight_ProcessIncomingMsg_5
   \   00004C   08           INC       R0
   \   00004D   80F6         SJMP      ??CrossCallReturnLabel_12
   1139                break;
   1140          #endif
   1141              case ZCL_CMD_CONFIG_REPORT:
   1142              case ZCL_CMD_CONFIG_REPORT_RSP:
   1143              case ZCL_CMD_READ_REPORT_CFG:
   1144              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1145              case ZCL_CMD_REPORT:
   1146                //bdb_ProcessIncomingReportingMsg( pInMsg );
   1147                break;
   1148          
   1149              case ZCL_CMD_DEFAULT_RSP:
   1150                zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
   1151                break;
   1152          #ifdef ZCL_DISCOVER
   1153              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1154                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleLight_ProcessIncomingMsg_3:
   \   00004F                ; Setup parameters for call to function zclSampleLight_ProcessInDiscCmdsRspCmd
   1155                break;
   1156          
   1157              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1158                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   \   00004F                ; Setup parameters for call to function zclSampleLight_ProcessInDiscCmdsRspCmd
   \   00004F   12....       LCALL     `??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`; Banked call to: zclSampleLight_ProcessInDiscCmdsRspCmd
   1159                break;
   \   000052   8024         SJMP      ??zclSampleLight_ProcessIncomingMsg_5
   1160          
   1161              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1162                zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleLight_ProcessIncomingMsg_2:
   \   000054   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000057   8882         MOV       DPL,R0
   \   000059   8983         MOV       DPH,R1
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FB           MOV       R3,A
   \   00005E   EA           MOV       A,R2
   \   00005F   C3           CLR       C
   \   000060   9B           SUBB      A,R3
   \   000061   5015         JNC       ??zclSampleLight_ProcessIncomingMsg_5
   \   000063   0A           INC       R2
   \   000064   80F1         SJMP      ??CrossCallReturnLabel_19
   1163                break;
   1164          
   1165              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1166                zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleLight_ProcessIncomingMsg_4:
   \   000066   12....       LCALL     ?Subroutine6 & 0xFFFF
   1167                break;
   1168          #endif
   1169              default:
   1170                break;
   1171            }
   \                     ??CrossCallReturnLabel_20:
   \   000069   8001         SJMP      ??zclSampleLight_ProcessIncomingMsg_6
   \                     ??zclSampleLight_ProcessIncomingMsg_7:
   \   00006B   0A           INC       R2
   \                     ??zclSampleLight_ProcessIncomingMsg_6:
   \   00006C   8882         MOV       DPL,R0
   \   00006E   8983         MOV       DPH,R1
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FB           MOV       R3,A
   \   000073   EA           MOV       A,R2
   \   000074   C3           CLR       C
   \   000075   9B           SUBB      A,R3
   \   000076   40F3         JC        ??zclSampleLight_ProcessIncomingMsg_7
   1172          
   1173            if ( pInMsg->attrCmd )
   \                     ??zclSampleLight_ProcessIncomingMsg_5:
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00007F   EA           MOV       A,R2
   \   000080   4B           ORL       A,R3
   \   000081   6003         JZ        ??zclSampleLight_ProcessIncomingMsg_8
   1174              osal_mem_free( pInMsg->attrCmd );
   \   000083                ; Setup parameters for call to function osal_mem_free
   \   000083   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1175          }
   \                     ??zclSampleLight_ProcessIncomingMsg_8:
   \   000086   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine13_0
   \   000004                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   7A00         MOV       R2,#0x0
   \   000005   22           RET
   1176          
   1177          #ifdef ZCL_READ
   1178          /*********************************************************************
   1179           * @fn      zclSampleLight_ProcessInReadRspCmd
   1180           *
   1181           * @brief   Process the "Profile" Read Response Command
   1182           *
   1183           * @param   pInMsg - incoming message to process
   1184           *
   1185           * @return  none
   1186           */
   1187          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1188          {
   1189            zclReadRspCmd_t *readRspCmd;
   1190            uint8 i;
   1191          
   1192            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1193            for (i = 0; i < readRspCmd->numAttr; i++)
   1194            {
   1195              // Notify the originator of the results of the original read attributes
   1196              // attempt and, for each successfull request, the value of the requested
   1197              // attribute
   1198            }
   1199          
   1200            return ( TRUE );
   1201          }
   1202          #endif // ZCL_READ
   1203          
   1204          #ifdef ZCL_WRITE
   1205          /*********************************************************************
   1206           * @fn      zclSampleLight_ProcessInWriteRspCmd
   1207           *
   1208           * @brief   Process the "Profile" Write Response Command
   1209           *
   1210           * @param   pInMsg - incoming message to process
   1211           *
   1212           * @return  none
   1213           */
   1214          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1215          {
   1216            zclWriteRspCmd_t *writeRspCmd;
   1217            uint8 i;
   1218          
   1219            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1220            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1221            {
   1222              // Notify the device of the results of the its original write attributes
   1223              // command.
   1224            }
   1225          
   1226            return ( TRUE );
   1227          }
   1228          #endif // ZCL_WRITE
   1229          
   1230          /*********************************************************************
   1231           * @fn      zclSampleLight_ProcessInDefaultRspCmd
   1232           *
   1233           * @brief   Process the "Profile" Default Response Command
   1234           *
   1235           * @param   pInMsg - incoming message to process
   1236           *
   1237           * @return  none
   1238           */
   1239          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1240          {
   1241            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1242          
   1243            // Device is notified of the Default Response command.
   1244            (void)pInMsg;
   1245          
   1246            return ( TRUE );
   1247          }
   1248          
   1249          #ifdef ZCL_DISCOVER
   1250          /*********************************************************************
   1251           * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
   1252           *
   1253           * @brief   Process the Discover Commands Response Command
   1254           *
   1255           * @param   pInMsg - incoming message to process
   1256           *
   1257           * @return  none
   1258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1259          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleLight_ProcessInDiscCmdsRspCmd:
   1260          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1261            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1262            uint8 i;
   1263          
   1264            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   EA           MOV       A,R2
   \   000005   2417         ADD       A,#0x17
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   1265            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_18:
   \   000010   8001         SJMP      ??zclSampleLight_ProcessInDiscCmdsRspCmd_0
   \                     ??zclSampleLight_ProcessInDiscCmdsRspCmd_1:
   \   000012   0A           INC       R2
   \                     ??zclSampleLight_ProcessInDiscCmdsRspCmd_0:
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   C3           CLR       C
   \   00001D   9B           SUBB      A,R3
   \   00001E   40F2         JC        ??zclSampleLight_ProcessInDiscCmdsRspCmd_1
   1266            {
   1267              // Device is notified of the result of its attribute discovery command.
   1268            }
   1269          
   1270            return ( TRUE );
   \   000020   7901         MOV       R1,#0x1
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   1271          }
   1272          
   1273          /*********************************************************************
   1274           * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
   1275           *
   1276           * @brief   Process the "Profile" Discover Attributes Response Command
   1277           *
   1278           * @param   pInMsg - incoming message to process
   1279           *
   1280           * @return  none
   1281           */
   1282          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1283          {
   1284            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1285            uint8 i;
   1286          
   1287            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1288            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1289            {
   1290              // Device is notified of the result of its attribute discovery command.
   1291            }
   1292          
   1293            return ( TRUE );
   1294          }
   1295          
   1296          /*********************************************************************
   1297           * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
   1298           *
   1299           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1300           *
   1301           * @param   pInMsg - incoming message to process
   1302           *
   1303           * @return  none
   1304           */
   1305          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1306          {
   1307            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1308            uint8 i;
   1309          
   1310            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1311            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1312            {
   1313              // Device is notified of the result of its attribute discovery command.
   1314            }
   1315          
   1316            return ( TRUE );
   1317          }
   1318          #endif // ZCL_DISCOVER
   1319          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1320          void zclSampleLight_UpdateLedState(void)
   \                     zclSampleLight_UpdateLedState:
   1321          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1322            // set the LED1 based on light (on or off)
   1323            if ( zclSampleLight_OnOff == LIGHT_ON )
   \   000004   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7004         JNZ       ??zclSampleLight_UpdateLedState_0
   1324            {
   1325              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV       R2,#0x1
   \   00000E   8002         SJMP      ??zclSampleLight_UpdateLedState_1
   1326            }
   1327            else
   1328            {
   1329              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   \                     ??zclSampleLight_UpdateLedState_0:
   \   000010                ; Setup parameters for call to function HalLedSet
   \   000010   7A00         MOV       R2,#0x0
   \                     ??zclSampleLight_UpdateLedState_1:
   \   000012   7901         MOV       R1,#0x1
   \   000014   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1330            }
   1331          }
   \   000017   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for reportableChange>`:
   \   000000   2C           DB 44
   \   000001   01           DB 1
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sLightLevel>`:
   \   000000   2020204C     DB "   LEVEL ###    "
   \            4556454C
   \            20232323
   \            20202020
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleLight_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   ....         DW `??zclSampleLight_OnOffCB::?relay`
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   ....         DW `??zclSampleLight_LevelControlMoveToLevelCB::?re`
   \   00000E   ....         DW `??zclSampleLight_LevelControlMoveCB::?relay`
   \   000010   ....         DW `??zclSampleLight_LevelControlStepCB::?relay`
   \   000012   ....         DW `??zclSampleLight_LevelControlStopCB::?relay`
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100
   1332          
   1333          
   1334          
   1335          /****************************************************************************
   1336          ****************************************************************************/
   1337          
   1338          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   gp_ChangeChannelReq
      0      0   gp_CommissioningMode
      0      0   zclSampleApp_BatteryWarningCB
      0     32   zclSampleLight_AdjustLightLevel
        0     20   -> osal_start_timerEx
        0     16   -> zclSampleLight_UpdateLedState
      2      0   zclSampleLight_BasicResetCB
        2      0   -> zclSampleLight_ResetAttributesToDefaultValues
        2      0   -> zclSampleLight_UpdateLedState
      0     16   zclSampleLight_Init
        0     10   -> RegisterForKeys
        0     10   -> RegisterVoltageWarningCB
        0     10   -> bdb_RegisterCommissioningStatusCB
        0     10   -> bdb_RegisterSimpleDescriptor
        0     16   -> bdb_RepAddAttrCfgRecordDefaultToList
        0     10   -> gp_RegisterCommissioningModeCB
        0     10   -> gp_RegisterGPChangeChannelReqCB
        0     10   -> zclGeneral_RegisterCmdCallbacks
        0     10   -> zclSampleLight_ResetAttributesToDefaultValues
        0     10   -> zcl_registerAttrList
        0     10   -> zcl_registerCmdList
        0     10   -> zcl_registerForMsg
      0     16   zclSampleLight_LevelControlMoveCB
        0     16   -> zclSampleLight_MoveBasedOnRate
      2      0   zclSampleLight_LevelControlMoveToLevelCB
        2      0   -> zclSampleLight_MoveBasedOnTime
      0      9   zclSampleLight_LevelControlStepCB
        0      9   -> zclSampleLight_MoveBasedOnTime
      2      0   zclSampleLight_LevelControlStopCB
        2      0   -> osal_stop_timerEx
      0     36   zclSampleLight_MoveBasedOnRate
        0     20   -> osal_start_timerEx
        0     16   -> zclSampleLight_TimeRateHelper
      0     29   zclSampleLight_MoveBasedOnTime
        0     20   -> osal_start_timerEx
        0     16   -> zclSampleLight_TimeRateHelper
      0     16   zclSampleLight_OnOffCB
        0     16   -> bdb_RepChangedAttrValue
        0     16   -> zclSampleLight_MoveBasedOnRate
        0     16   -> zclSampleLight_UpdateLedState
        0     16   -> zcl_getRawAFMsg
      2      0   zclSampleLight_ProcessCommissioningStatus
        2      0   -> HalLedSet
        2      0   -> bdb_StartCommissioning
      2      9   zclSampleLight_ProcessInDiscCmdsRspCmd
      0     21   zclSampleLight_ProcessIncomingMsg
        0      9   -> osal_mem_free
        0      9   -> zclSampleLight_ProcessInDiscCmdsRspCmd
      0     32   zclSampleLight_TimeRateHelper
      2     16   zclSampleLight_UpdateLedState
        2      0   -> HalLedSet
      0     12   zclSampleLight_event_loop
        0     12   -> HalLedSet
        0     12   -> bdb_RepChangedAttrValue
        0     12   -> bdb_StartCommissioning
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> zclSampleLight_AdjustLightLevel
        0     12   -> zclSampleLight_ProcessIncomingMsg
        0     12   -> zclSampleLight_UpdateLedState


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for reportableChange>
      17  ?<Initializer for sLightLevel>
      32  ?<Initializer for zclSampleLight_CmdCallbacks>
       5  ??Subroutine11_0
       7  ??Subroutine12_0
       6  ??Subroutine13_0
       7  ?Subroutine0
      23  ?Subroutine1
       6  ?Subroutine10
       5  ?Subroutine2
      13  ?Subroutine3
       4  ?Subroutine4
       9  ?Subroutine5
       4  ?Subroutine6
       6  ?Subroutine7
      15  ?Subroutine8
      11  ?Subroutine9
       4  __Constant_3e8
       4  __Constant_64
       5  gp_ChangeChannelReq
       3  gp_CommissioningMode
       4  reportableChange
       4  reportableChangeTest
      17  sLightLevel
      17  sLightOff
      17  sLightOn
       3  zclSampleApp_BatteryWarningCB
       1  zclSampleLightSeqNum
     214  zclSampleLight_AdjustLightLevel
      13  zclSampleLight_BasicResetCB
      32  zclSampleLight_CmdCallbacks
       4  zclSampleLight_CurrentLevel32
      12  zclSampleLight_DstAddr
     188  zclSampleLight_Init
       1  zclSampleLight_LevelChangeCmd
      70  zclSampleLight_LevelControlMoveCB
      29  zclSampleLight_LevelControlMoveToLevelCB
      74  zclSampleLight_LevelControlStepCB
      23  zclSampleLight_LevelControlStopCB
       1  zclSampleLight_LevelLastLevel
      65  zclSampleLight_MoveBasedOnRate
     123  zclSampleLight_MoveBasedOnTime
       1  zclSampleLight_NewLevel
       1  zclSampleLight_NewLevelUp
     213  zclSampleLight_OnOffCB
      51  zclSampleLight_ProcessCommissioningStatus
      37  zclSampleLight_ProcessInDiscCmdsRspCmd
     137  zclSampleLight_ProcessIncomingMsg
       4  zclSampleLight_Rate32
       1  zclSampleLight_TaskID
     128  zclSampleLight_TimeRateHelper
      26  zclSampleLight_UpdateLedState
       1  zclSampleLight_WithOnOff
     172  zclSampleLight_event_loop
     114  -- Other

 
 1 695 bytes in segment BANKED_CODE
   114 bytes in segment BANK_RELAYS
    53 bytes in segment XDATA_I
    53 bytes in segment XDATA_ID
    42 bytes in segment XDATA_ROM_C
    31 bytes in segment XDATA_Z
 
   167 bytes of CODE     memory
    34 bytes of CONST    memory (+ 8 bytes shared)
 1 695 bytes of HUGECODE memory
    84 bytes of XDATA    memory

Errors: none
Warnings: none
