///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              21/Jul/2020  11:27:41
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EW3F2E.tmp ("D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c"
//        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        xNV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
//        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS
//        -D ZCL_REPORT -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleApp_BatteryWarningCB::?relay`,0203H
        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessCommissioningStatus::?r`,0203H
        FUNCTION `??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`,0203H
        FUNCTION `??zclSampleLight_ProcessIncomingMsg::?relay`,0203H
        PUBLIC `??zclSampleLight_UpdateLedState::?relay`
        FUNCTION `??zclSampleLight_UpdateLedState::?relay`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_2710
        PUBLIC reportableChange
        PUBLIC reportableChangeTest
        PUBLIC sLightOff
        PUBLIC sLightOn
        FUNCTION zclSampleApp_BatteryWarningCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_DstAddr
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION zclSampleLight_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclSampleLight_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        FUNCTION zclSampleLight_ProcessInDiscCmdsRspCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_ProcessIncomingMsg,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclSampleLight_TaskID
        PUBLIC zclSampleLight_UpdateLedState
        FUNCTION zclSampleLight_UpdateLedState,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
RegisterVoltageWarningCB SYMBOL "RegisterVoltageWarningCB"
`??RegisterVoltageWarningCB::?relay` SYMBOL "?relay", RegisterVoltageWarningCB
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_RepAddAttrCfgRecordDefaultToList SYMBOL "bdb_RepAddAttrCfgRecordDefaultToList"
`??bdb_RepAddAttrCfgRecordDefaultToList::?relay` SYMBOL "?relay", bdb_RepAddAttrCfgRecordDefaultToList
bdb_RepChangedAttrValue SYMBOL "bdb_RepChangedAttrValue"
`??bdb_RepChangedAttrValue::?relay` SYMBOL "?relay", bdb_RepChangedAttrValue
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_ZedAttemptRecoverNwk SYMBOL "bdb_ZedAttemptRecoverNwk"
`??bdb_ZedAttemptRecoverNwk::?relay` SYMBOL "?relay", bdb_ZedAttemptRecoverNwk
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclSampleLight_ResetAttributesToDefaultValues SYMBOL "zclSampleLight_ResetAttributesToDefaultValues"
??zclSampleLight_ResetAttributesToDefaultValues SYMBOL "?relay", zclSampleLight_ResetAttributesToDefaultValues
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerCmdList SYMBOL "zcl_registerCmdList"
`??zcl_registerCmdList::?relay` SYMBOL "?relay", zcl_registerCmdList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_UpdateLedState SYMBOL "zclSampleLight_UpdateLedState"
`??zclSampleLight_UpdateLedState::?relay` SYMBOL "?relay", zclSampleLight_UpdateLedState
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??RegisterVoltageWarningCB::?relay`
        FUNCTION `??RegisterVoltageWarningCB::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`
        FUNCTION `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`,00H
        EXTERN `??bdb_RepChangedAttrValue::?relay`
        FUNCTION `??bdb_RepChangedAttrValue::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??bdb_ZedAttemptRecoverNwk::?relay`
        FUNCTION `??bdb_ZedAttemptRecoverNwk::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN ??zclSampleLight_ResetAttributesToDefaultValues
        FUNCTION ??zclSampleLight_ResetAttributesToDefaultValues,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerCmdList::?relay`
        FUNCTION `??zcl_registerCmdList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterVoltageWarningCB
        FUNCTION RegisterVoltageWarningCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepAddAttrCfgRecordDefaultToList
        FUNCTION bdb_RepAddAttrCfgRecordDefaultToList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepChangedAttrValue
        FUNCTION bdb_RepChangedAttrValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ZedAttemptRecoverNwk
        FUNCTION bdb_ZedAttemptRecoverNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclCmdsArraySize
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_Cmds
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_ResetAttributesToDefaultValues
        FUNCTION zclSampleLight_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerCmdList
        FUNCTION zcl_registerCmdList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdpExternalStateTaskID

// D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample light application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee Light, based on Z-Stack 3.0. It can be configured as an
//   43   On/Off light or as a dimmable light, by undefining or defining ZCL_LEVEL_CTRL, respectively.
//   44 
//   45   This application is based on the common sample-application user interface. Please see the main
//   46   comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
//   47   this sample applicetion.
//   48   
//   49   Application-specific UI peripherals being used:
//   50 
//   51   - LEDs:
//   52     LED1 reflect the current light state (On / Off accordingly).
//   53 
//   54   Application-specific menu system:
//   55 
//   56     <TOGGLE LIGHT> Toggle the local light and display its status and level
//   57       Press OK to toggle the local light on and off.
//   58       This screen shows the following information
//   59         Line1: (only populated if ZCL_LEVEL_CTRL is defined)
//   60           LEVEL XXX - xxx is the current level of the light if the light state is ON, or the target level
//   61             of the light when the light state is off. The target level is the level that the light will be
//   62             set to when it is switched from off to on using the on or the toggle commands.
//   63         Line2:
//   64           LIGHT OFF / ON: shows the current state of the light.
//   65       Note when ZCL_LEVEL_CTRL is enabled:
//   66         - If the light state is ON and the light level is X, and then the light receives the OFF or TOGGLE 
//   67           commands: The level will decrease gradually until it reaches 1, and only then the light state will
//   68           be changed to OFF. The level then will be restored to X, with the state staying OFF. At this stage
//   69           the light is not lighting, and the level represent the target level for the next ON or TOGGLE 
//   70           commands.
//   71         - If the light state is OFF and the light level is X, and then the light receives the ON or TOGGLE
//   72           commands; The level will be set to 1, the light state will be set to ON, and then the level will
//   73           increase gradually until it reaches level X.
//   74         - Any level-setting command will affect the level directly, and may also affect the on/off state,
//   75           depending on the command's arguments.       
//   76 
//   77 *********************************************************************/
//   78 
//   79 /*********************************************************************
//   80  * INCLUDES
//   81  */
//   82 #include "ZComDef.h"
//   83 #include "OSAL.h"
//   84 #include "AF.h"
//   85 #include "ZDApp.h"
//   86 #include "ZDObject.h"
//   87 #include "MT_SYS.h"
//   88 
//   89 #include "nwk_util.h"
//   90 
//   91 #include "zcl.h"
//   92 #include "zcl_general.h"
//   93 #include "zcl_ha.h"
//   94 #include "zcl_diagnostic.h"
//   95 
//   96 #include "zcl_samplelight.h"
//   97    
//   98 #include "bdb.h"
//   99 #include "bdb_interface.h"
//  100 #include "bdb_Reporting.h"
//  101 
//  102  //GP_UPDATE
//  103 #include "gp_interface.h"
//  104    
//  105 #include "onboard.h"
//  106 
//  107 /* HAL */
//  108 #include "hal_lcd.h"
//  109 #include "hal_led.h"
//  110 #include "hal_key.h"
//  111 
//  112 #include "NLMEDE.h"
//  113 
//  114 // Added to include TouchLink initiator functionality 
//  115 #if defined ( BDB_TL_INITIATOR )
//  116   #include "bdb_touchlink_initiator.h"
//  117 #endif // BDB_TL_INITIATOR
//  118 
//  119 #if defined ( BDB_TL_TARGET )
//  120   #include "bdb_touchlink_target.h"
//  121 #endif // BDB_TL_TARGET
//  122 
//  123 #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
//  124   #include "bdb_touchlink.h"
//  125 #endif
//  126 
//  127 
//  128 /*********************************************************************
//  129  * MACROS
//  130  */
//  131 #define APP_TITLE "TI Sample Light"
//  132 
//  133 /*********************************************************************
//  134  * TYPEDEFS
//  135  */
//  136 
//  137 /*********************************************************************
//  138  * GLOBAL VARIABLES
//  139  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 
//  143 /*********************************************************************
//  144  * GLOBAL FUNCTIONS
//  145  */
//  146 
//  147 /*********************************************************************
//  148  * LOCAL VARIABLES
//  149  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  151 
//  152 // Test Endpoint to allow SYS_APP_MSGs
//  153 //static endPointDesc_t sampleLight_TestEp =
//  154 //{
//  155 //  SAMPLELIGHT_ENDPOINT,
//  156 //  0,
//  157 //  &zclSampleLight_TaskID,
//  158 //  (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  159 //  (afNetworkLatencyReq_t)0            // No Network Latency req
//  160 //};
//  161 
//  162 #ifdef ZCL_LEVEL_CTRL
//  163 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
//  164 uint8 zclSampleLight_NewLevel;        // new level when done moving
//  165 uint8 zclSampleLight_LevelChangeCmd; // current level change was triggered by an on/off command
//  166 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
//  167 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  168 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  169 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  170 #endif
//  171 
//  172 #ifdef BDB_REPORTING
//  173 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
//  174   uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0x2C01 is 300 in int16
//  175   uint8 reportableChangeTest[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
//  176 #endif
//  177 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4

        RSEG XDATA_I:XDATA:NOROOT(0)
//  178   uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00}; // 0x2C01 is 300 in int16   0x012c
reportableChange:
        DATA32
        DS 4
        REQUIRE `?<Initializer for reportableChange>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  179   uint8 reportableChangeTest[] = {0x00, 0x00, 0x00, 0x00};     
reportableChangeTest:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  180 #endif 
//  181 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
//  182   uint8 reportableChange[] = {0x2C, 0x01}; // 0x2C01 is 300 in int16
//  183   uint8 reportableChangeTest[] = {0x00, 0x00};
//  184 #endif 
//  185 #endif
//  186 
//  187 /*********************************************************************
//  188  * LOCAL FUNCTIONS
//  189  */
//  190 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  191 static void zclSampleLight_BasicResetCB( void );
//  192 static void zclSampleLight_OnOffCB( uint8 cmd );
//  193 //GP_UPDATE
//  194 #if (ZG_BUILD_RTR_TYPE)
//  195 static void gp_CommissioningMode(bool isEntering);
//  196 static uint8 gp_ChangeChannelReq(void);
//  197 #endif
//  198 
//  199 
//  200 static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
//  201 
//  202 
//  203 #ifdef ZCL_LEVEL_CTRL
//  204 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  205 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  206 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  207 static void zclSampleLight_LevelControlStopCB( void );
//  208 static void zclSampleLight_DefaultMove( uint8 OnOff );
//  209 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  210 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  211 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  212 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  213 static void zclSampleLight_AdjustLightLevel( void );
//  214 #endif
//  215 
//  216 // Functions to process ZCL Foundation incoming Command/Response messages
//  217 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  218 #ifdef ZCL_READ
//  219 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  220 #endif
//  221 #ifdef ZCL_WRITE
//  222 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  223 #endif
//  224 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  225 #ifdef ZCL_DISCOVER
//  226 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  227 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  228 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  229 #endif
//  230 
//  231 static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
//  232 
//  233 void zclSampleLight_UpdateLedState(void);
//  234 
//  235 /*********************************************************************
//  236  * CONSTANTS
//  237  */
//  238 
//  239 #define LEVEL_CHANGED_BY_LEVEL_CMD  0
//  240 #define LEVEL_CHANGED_BY_ON_CMD     1
//  241 #define LEVEL_CHANGED_BY_OFF_CMD    2
//  242 
//  243 /*********************************************************************
//  244  * STATUS STRINGS
//  245  */
//  246 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  247   const char sLightOn[]      = "   LIGHT ON     ";
sLightOn:
        DB "   LIGHT ON     "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  248   const char sLightOff[]     = "   LIGHT OFF    ";
sLightOff:
        DB "   LIGHT OFF    "
//  249   #ifdef ZCL_LEVEL_CTRL
//  250     char sLightLevel[]        = "   LEVEL ###    "; // displays level 1-254
//  251   #endif
//  252 #endif
//  253 
//  254 /*********************************************************************
//  255  * REFERENCED EXTERNALS
//  256  */
//  257 extern int16 zdpExternalStateTaskID;
//  258 
//  259 /*********************************************************************
//  260  * ZCL General Profile Callback table
//  261  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  262 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 24
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  263 {
//  264   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  265   NULL,                                   // Identify Trigger Effect command
//  266   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  267   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  268   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  269   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  270 #ifdef ZCL_LEVEL_CTRL
//  271   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  272   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  273   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  274   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  275 #endif
//  276 #ifdef ZCL_GROUPS
//  277   NULL,                                   // Group Response commands
//  278 #endif
//  279 #ifdef ZCL_SCENES
//  280   NULL,                                  // Scene Store Request command
//  281   NULL,                                  // Scene Recall Request command
//  282   NULL,                                  // Scene Response command
//  283 #endif
//  284 #ifdef ZCL_ALARMS
//  285   NULL,                                  // Alarm (Response) commands
//  286 #endif
//  287 #ifdef SE_UK_EXT
//  288   NULL,                                  // Get Event Log command
//  289   NULL,                                  // Publish Event Log command
//  290 #endif
//  291   NULL,                                  // RSSI Location command
//  292   NULL                                   // RSSI Location Response command
//  293 };
//  294 
//  295 /*********************************************************************
//  296  * @fn          zclSampleLight_Init
//  297  *
//  298  * @brief       Initialization function for the zclGeneral layer.
//  299  *
//  300  * @param       none
//  301  *
//  302  * @return      none
//  303  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  304 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  305 {
        FUNCALL zclSampleLight_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclSampleLight_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerCmdList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterVoltageWarningCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, bdb_RepAddAttrCfgRecordDefaultToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
//  306   zclSampleLight_TaskID = task_id;
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      @DPTR,A
//  307 
//  308   // Set destination address to indirect
//  309   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV       DPTR,#zclSampleLight_DstAddr + 8
        CLR       A
        MOVX      @DPTR,A
//  310   zclSampleLight_DstAddr.endPoint = 0;
        INC       DPTR
        MOVX      @DPTR,A
//  311   zclSampleLight_DstAddr.addr.shortAddr = 0;
        MOV       DPTR,#zclSampleLight_DstAddr
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  312 
//  313   // Register the Simple Descriptor for this application
//  314   bdb_RegisterSimpleDescriptor( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclSampleLight_SimpleDesc & 0xff
        MOV       R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  315 
//  316   // Register the ZCL General Cluster Library callback functions
//  317   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x8
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  318 
//  319   // Register the application's attribute list
//  320   zclSampleLight_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
        LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
//  321   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclSampleLight_Attrs & 0xff
        MOV       R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV       DPTR,#zclSampleLight_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  322 
//  323 #ifdef ZCL_LEVEL_CTRL
//  324   zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
//  325 #endif
//  326 
//  327   // Register the Application to receive the unprocessed Foundation command/response messages
//  328   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  329 
//  330 #ifdef ZCL_DISCOVER
//  331   // Register the application's command list
//  332   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
        ; Setup parameters for call to function zcl_registerCmdList
        MOV       R4,#zclSampleLight_Cmds & 0xff
        MOV       R5,#(zclSampleLight_Cmds >> 8) & 0xff
        MOV       DPTR,#zclCmdsArraySize
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??zcl_registerCmdList::?relay`; Banked call to: zcl_registerCmdList
//  333 #endif
//  334 
//  335   // Register low voltage NV memory protection application callback
//  336   RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
        ; Setup parameters for call to function RegisterVoltageWarningCB
        MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
        MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
        LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
//  337 
//  338   // Register for all key events - This app will handle all key events
//  339   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  340   
//  341   bdb_RegisterCommissioningStatusCB( zclSampleLight_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV       R2,#`??zclSampleLight_ProcessCommissioningStatus::?r` & 0xff
        MOV       R3,#(`??zclSampleLight_ProcessCommissioningStatus::?r` >> 8) & 0xff
        LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  342   
//  343   // Register for a test endpoint
//  344   //afRegister( &sampleLight_TestEp );
//  345 
//  346 #ifdef ZCL_DIAGNOSTIC
//  347   // Register the application's callback function to read/write attribute data.
//  348   // This is only required when the attribute data format is unknown to ZCL.
//  349   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  350 
//  351   if ( zclDiagnostic_InitStats() == ZSuccess )
//  352   {
//  353     // Here the user could start the timer to save Diagnostics to NV
//  354   }
//  355 #endif
//  356   
//  357 //GP_UPDATE  
//  358 #if (ZG_BUILD_RTR_TYPE)  
//  359 //  gp_RegisterCommissioningModeCB(gp_CommissioningMode);
//  360 //  gp_RegisterGPChangeChannelReqCB(gp_ChangeChannelReq);
//  361 #endif
//  362   
//  363   zdpExternalStateTaskID = zclSampleLight_TaskID;
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       DPTR,#zdpExternalStateTaskID
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  364   
//  365   bdb_RepAddAttrCfgRecordDefaultToList(SAMPLELIGHT_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF, ATTRID_ON_OFF, 0, 5, reportableChangeTest);
        ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
        MOV       ?V0,#reportableChangeTest & 0xff
        MOV       ?V1,#(reportableChangeTest >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x5
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x6
        MOV       R3,#0x0
        MOV       R1,#0x8
        LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
//  366   
//  367 //  bdb_RepAddAttrCfgRecordDefaultToList(SAMPLELIGHT_ENDPOINT, ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG, ATTRID_ON_OFF, 0, 10, reportableChangeTest);
//  368 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  369 
//  370 /*********************************************************************
//  371  * @fn          zclSample_event_loop
//  372  *
//  373  * @brief       Event Loop Processor for zclGeneral.
//  374  *
//  375  * @param       none
//  376  *
//  377  * @return      none
//  378  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  379 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  380 {
        FUNCALL zclSampleLight_event_loop, bdb_ZedAttemptRecoverNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, bdb_RepChangedAttrValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIncomingMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  381   afIncomingMSGPacket_t *MSGpkt;
//  382 
//  383   (void)task_id;  // Intentionally unreferenced parameter
//  384 
//  385   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclSampleLight_event_loop_0
//  386   {
//  387     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  388     {
//  389       switch ( MSGpkt->hdr.event )
//  390       {
//  391         case ZCL_INCOMING_MSG:
//  392           // Incoming ZCL Foundation command/response messages
//  393           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  394           break;
//  395 
//  396         case KEY_CHANGE:
//  397           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  398           break;
//  399 
//  400         case ZDO_STATE_CHANGE:
//  401           break;
//  402 
//  403         default:
//  404           break;
//  405       }
//  406 
//  407       // Release the memory
//  408       osal_msg_deallocate( (uint8 *)MSGpkt );
//  409     }
//  410 
//  411     // return unprocessed events
//  412     return (events ^ SYS_EVENT_MSG);
//  413   }
//  414 
//  415 #ifdef ZCL_LEVEL_CTRL
//  416   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
//  417   {
//  418     zclSampleLight_AdjustLightLevel();
//  419     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
//  420   }
//  421 #endif
//  422 
//  423 #if ZG_BUILD_ENDDEVICE_TYPE    
//  424   if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
        MOV       A,R2
        ANL       A,#0x4
        JZ        ??zclSampleLight_event_loop_1
//  425   {
//  426     bdb_ZedAttemptRecoverNwk();
        ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
        LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
//  427     return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
        MOV       A,R6
        XRL       A,#0x4
        MOV       R2,A
        MOV       A,R7
        SJMP      ??zclSampleLight_event_loop_2
//  428   }
??zclSampleLight_event_loop_3:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       C,0xE0 /* A   */.5
        JNC       ??zclSampleLight_event_loop_4
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xa
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
??zclSampleLight_event_loop_4:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.2
        JNC       ??zclSampleLight_event_loop_5
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x8
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function bdb_RepChangedAttrValue
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#0x8
        LCALL     `??bdb_RepChangedAttrValue::?relay`; Banked call to: bdb_RepChangedAttrValue
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
??zclSampleLight_event_loop_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleLight_event_loop_6
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x34
        JZ        ??zclSampleLight_event_loop_7
        ADD       A,#0x74
        JZ        ??zclSampleLight_event_loop_3
        SJMP      ??zclSampleLight_event_loop_5
??zclSampleLight_event_loop_7:
        ; Setup parameters for call to function zclSampleLight_ProcessIncomingMsg
        LCALL     `??zclSampleLight_ProcessIncomingMsg::?relay`; Banked call to: zclSampleLight_ProcessIncomingMsg
        SJMP      ??zclSampleLight_event_loop_5
??zclSampleLight_event_loop_6:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
??zclSampleLight_event_loop_2:
        MOV       R3,A
        SJMP      ??zclSampleLight_event_loop_8
//  429 #endif
//  430 
//  431   if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
??zclSampleLight_event_loop_1:
        MOV       A,R2
        ANL       A,#0x10
        JZ        ??zclSampleLight_event_loop_9
//  432   {
//  433     return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
        MOV       A,R2
        XRL       A,#0x10
        SJMP      ??zclSampleLight_event_loop_10
//  434   }
//  435 
//  436   if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
??zclSampleLight_event_loop_9:
        MOV       A,R2
        ANL       A,#0x20
        JZ        ??zclSampleLight_event_loop_11
//  437   {
//  438     return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
        MOV       A,R2
        XRL       A,#0x20
??zclSampleLight_event_loop_10:
        MOV       R2,A
        SJMP      ??zclSampleLight_event_loop_8
//  439   }
//  440 
//  441   // Discard unknown events
//  442   return 0;
??zclSampleLight_event_loop_11:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclSampleLight_event_loop_8:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  443 }
          CFI EndBlock cfiBlock2
//  444 
//  445 
//  446 /*********************************************************************
//  447  * @fn      zclSampleLight_HandleKeys
//  448  *
//  449  * @brief   Handles all key events for this device.
//  450  *
//  451  * @param   shift - true if in shift/alt.
//  452  * @param   keys - bit field for key events. Valid entries:
//  453  *                 HAL_KEY_SW_5
//  454  *                 HAL_KEY_SW_4
//  455  *                 HAL_KEY_SW_2
//  456  *                 HAL_KEY_SW_1
//  457  *
//  458  * @return  none
//  459  */
//  460 static void zclSampleLight_HandleKeys( byte shift, byte keys )
//  461 {
//  462   if ( keys & HAL_KEY_SW_6 )  // Switch 6
//  463   {     
//  464     HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  465     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING  );
//  466   }
//  467   if ( keys & HAL_KEY_SW_5 )  // Switch 5
//  468   {     
//  469     HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
//  470     bdb_RepChangedAttrValue(SAMPLELIGHT_ENDPOINT, ATTRID_ON_OFF, zclSampleLight_OnOff);
//  471     zclSampleLight_UpdateLedState();
//  472   }
//  473 }
//  474 
//  475 //GP_UPDATE
//  476 #if (ZG_BUILD_RTR_TYPE)
//  477 /*********************************************************************
//  478  * @fn      gp_CommissioningMode
//  479  *
//  480  * @brief   Callback that notifies the application that gp Proxy is entering 
//  481  *          into commissioning mode
//  482  *
//  483  * @param   isEntering - 
//  484  *
//  485  * @return  
//  486  */
//  487 static void gp_CommissioningMode(bool isEntering)
//  488 {
//  489   if(isEntering)
//  490   {
//  491     //Led on indicating enter commissioning mode
//  492   }
//  493   else
//  494   {
//  495     //Led off indicating enter commissioning mode
//  496   }
//  497 }
//  498 
//  499 
//  500 
//  501 //GP_UPDATE
//  502 /*********************************************************************
//  503  * @fn      gp_ChangeChannelReq
//  504  *
//  505  * @brief   Callback function to notify the application about a GP commissioning 
//  506  * request that will change the current channel for at most 
//  507  * gpBirectionalCommissioningChangeChannelTimeout ms
//  508  *
//  509  * @param   channel - Channel in which the commissioning will take place
//  510  *
//  511  * @return  TRUE to allow change channel, FALSE to do not allow
//  512  */
//  513 static uint8 gp_ChangeChannelReq(void)
//  514 {
//  515   bool allowChangeChannel = TRUE;
//  516   
//  517   //Check application state to decide if allow change channel or not
//  518   
//  519   return allowChangeChannel;
//  520 }
//  521 
//  522 #endif
//  523 
//  524 
//  525 /*********************************************************************
//  526  * @fn      zclSampleLight_ProcessCommissioningStatus
//  527  *
//  528  * @brief   Callback in which the status of the commissioning process are reported
//  529  *
//  530  * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
//  531  *
//  532  * @return  none
//  533  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  534 static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
zclSampleLight_ProcessCommissioningStatus:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zclSampleLight_ProcessCommissioningStatus
        CODE
//  535 {
        FUNCALL zclSampleLight_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessCommissioningStatus, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  536   switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,#-0x2
        JZ        ??zclSampleLight_ProcessCommissioningStatus_0
        ADD       A,#-0x3
        JZ        ??zclSampleLight_ProcessCommissioningStatus_1
        SJMP      ??zclSampleLight_ProcessCommissioningStatus_2
//  537   {
//  538     case BDB_COMMISSIONING_FORMATION:
//  539       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
??zclSampleLight_ProcessCommissioningStatus_0:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_ProcessCommissioningStatus_2
//  540       {
//  541         //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
//  542         bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x2
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
        SJMP      ??zclSampleLight_ProcessCommissioningStatus_2
//  543       }
//  544       else
//  545       {
//  546         //Want to try other channels?
//  547         //try with bdb_setChannelAttribute
//  548       }
//  549     break;
//  550     case BDB_COMMISSIONING_NWK_STEERING:
//  551       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  552       {
//  553         //YOUR JOB:
//  554         //We are on the nwk, what now?
//  555       }
//  556       else
//  557       {
//  558         //See the possible errors for nwk steering procedure
//  559         //No suitable networks found
//  560         //Want to try other channels?
//  561         //try with bdb_setChannelAttribute
//  562       }
//  563     break;
//  564     case BDB_COMMISSIONING_FINDING_BINDING:
//  565       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  566       {
//  567         //YOUR JOB:
//  568       }
//  569       else
//  570       {
//  571         //YOUR JOB:
//  572         //retry?, wait for user interaction?
//  573       }
//  574     break;
//  575     case BDB_COMMISSIONING_INITIALIZATION:
//  576       //Initialization notification can only be successful. Failure on initialization 
//  577       //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  578       
//  579       //YOUR JOB:
//  580       //We are on a network, what now?
//  581       
//  582     break;
//  583 #if ZG_BUILD_ENDDEVICE_TYPE    
//  584     case BDB_COMMISSIONING_PARENT_LOST:
//  585       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
??zclSampleLight_ProcessCommissioningStatus_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0xd
        JZ        ??zclSampleLight_ProcessCommissioningStatus_2
//  586       {
//  587         //We did recover from losing parent
//  588       }
//  589       else
//  590       {
//  591         //Parent not found, attempt to rejoin again after a fixed delay
//  592         osal_start_timerEx(zclSampleLight_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_2710
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  593       }
//  594     break;
//  595 #endif 
//  596   }
//  597 
//  598 }
??zclSampleLight_ProcessCommissioningStatus_2:
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock3
//  599 
//  600 /*********************************************************************
//  601  * @fn      zclSampleLight_BasicResetCB
//  602  *
//  603  * @brief   Callback from the ZCL General Cluster Library
//  604  *          to set all the Basic Cluster attributes to default values.
//  605  *
//  606  * @param   none
//  607  *
//  608  * @return  none
//  609  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  610 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  611 {
        FUNCALL zclSampleLight_BasicResetCB, zclSampleLight_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  612   //Reset every attribute in all supported cluster to their default value.
//  613 
//  614   zclSampleLight_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
        LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
//  615 
//  616   zclSampleLight_UpdateLedState();
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
//  617 }
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock4
//  618 
//  619 /*********************************************************************
//  620  * @fn      zclSampleLight_OnOffCB
//  621  *
//  622  * @brief   Callback from the ZCL General Cluster Library when
//  623  *          it received an On/Off Command for this application.
//  624  *
//  625  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  626  *
//  627  * @return  none
//  628  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  629 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  630 {
        FUNCALL zclSampleLight_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  631   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL     `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV       DPL,R2
        MOV       DPH,R3
//  632 
//  633   uint8 OnOff;
//  634 
//  635   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPTR,#zclSampleLight_DstAddr
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  636 
//  637 
//  638   // Turn on the light
//  639   if ( cmd == COMMAND_ON )
        MOV       A,#0x1
        XRL       A,R6
        JZ        ??zclSampleLight_OnOffCB_0
//  640   {
//  641     OnOff = LIGHT_ON;
//  642   }
//  643   // Turn off the light
//  644   else if ( cmd == COMMAND_OFF )
        MOV       A,R6
        JZ        ??zclSampleLight_OnOffCB_1
//  645   {
//  646     OnOff = LIGHT_OFF;
//  647   }
//  648   // Toggle the light
//  649   else if ( cmd == COMMAND_TOGGLE )
        MOV       A,#0x2
        XRL       A,R6
        JNZ       ??zclSampleLight_OnOffCB_2
//  650   {
//  651 #ifdef ZCL_LEVEL_CTRL
//  652     if (zclSampleLight_LevelRemainingTime > 0) 
//  653     {
//  654       if (zclSampleLight_NewLevelUp)
//  655       {
//  656         OnOff = LIGHT_OFF;
//  657       }
//  658       else
//  659       {
//  660         OnOff = LIGHT_ON;
//  661       }
//  662     }
//  663     else
//  664     {
//  665       if (zclSampleLight_OnOff == LIGHT_ON)
//  666       {
//  667         OnOff = LIGHT_OFF;
//  668       }
//  669       else
//  670       {
//  671         OnOff = LIGHT_ON;
//  672       }
//  673     }
//  674 #else
//  675     if (zclSampleLight_OnOff == LIGHT_ON)
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclSampleLight_OnOffCB_0
//  676     {
//  677       OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_1:
        MOV       R0,#0x0
        SJMP      ??zclSampleLight_OnOffCB_2
//  678     }
//  679     else
//  680     {
//  681       OnOff = LIGHT_ON;
??zclSampleLight_OnOffCB_0:
        MOV       R0,#0x1
//  682     }
//  683 #endif
//  684   }
//  685 
//  686 #ifdef ZCL_LEVEL_CTRL
//  687   zclSampleLight_LevelChangeCmd = (OnOff == LIGHT_ON ? LEVEL_CHANGED_BY_ON_CMD : LEVEL_CHANGED_BY_OFF_CMD);
//  688 
//  689   zclSampleLight_DefaultMove(OnOff);
//  690 #else
//  691   zclSampleLight_OnOff = OnOff;
??zclSampleLight_OnOffCB_2:
        MOV       A,R0
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      @DPTR,A
//  692 #endif
//  693 
//  694   zclSampleLight_UpdateLedState();
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
//  695 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock5
//  696 
//  697 #ifdef ZCL_LEVEL_CTRL
//  698 /*********************************************************************
//  699  * @fn      zclSampleLight_TimeRateHelper
//  700  *
//  701  * @brief   Calculate time based on rate, and startup level state machine
//  702  *
//  703  * @param   newLevel - new level for current level
//  704  *
//  705  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
//  706  */
//  707 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
//  708 {
//  709   uint32 diff;
//  710   uint32 newLevel32;
//  711 
//  712   // remember current and new level
//  713   zclSampleLight_NewLevel = newLevel;
//  714   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
//  715 
//  716   // calculate diff
//  717   newLevel32 = (uint32)1000 * newLevel;
//  718   if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  719   {
//  720     diff = zclSampleLight_CurrentLevel32 - newLevel32;
//  721     zclSampleLight_NewLevelUp = FALSE;  // moving down
//  722   }
//  723   else
//  724   {
//  725     diff = newLevel32 - zclSampleLight_CurrentLevel32;
//  726     zclSampleLight_NewLevelUp = TRUE;   // moving up
//  727   }
//  728 
//  729   return ( diff );
//  730 }
//  731 
//  732 /*********************************************************************
//  733  * @fn      zclSampleLight_MoveBasedOnRate
//  734  *
//  735  * @brief   Calculate time based on rate, and startup level state machine
//  736  *
//  737  * @param   newLevel - new level for current level
//  738  * @param   rate16   - fixed point rate (e.g. 16.123)
//  739  *
//  740  * @return  none
//  741  */
//  742 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
//  743 {
//  744   uint32 diff;
//  745 
//  746   // determine how much time (in 10ths of seconds) based on the difference and rate
//  747   zclSampleLight_Rate32 = rate;
//  748   diff = zclSampleLight_TimeRateHelper( newLevel );
//  749   zclSampleLight_LevelRemainingTime = diff / rate;
//  750   if ( !zclSampleLight_LevelRemainingTime )
//  751   {
//  752     zclSampleLight_LevelRemainingTime = 1;
//  753   }
//  754 
//  755   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  756 }
//  757 
//  758 /*********************************************************************
//  759  * @fn      zclSampleLight_MoveBasedOnTime
//  760  *
//  761  * @brief   Calculate rate based on time, and startup level state machine
//  762  *
//  763  * @param   newLevel  - new level for current level
//  764  * @param   time      - in 10ths of seconds
//  765  *
//  766  * @return  none
//  767  */
//  768 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
//  769 {
//  770   uint16 diff;
//  771 
//  772   // determine rate (in units) based on difference and time
//  773   diff = zclSampleLight_TimeRateHelper( newLevel );
//  774   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
//  775   zclSampleLight_Rate32 = diff / time;
//  776 
//  777   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  778 }
//  779 
//  780 /*********************************************************************
//  781  * @fn      zclSampleLight_GetTime
//  782  *
//  783  * @brief   Determine amount of time that MoveXXX will take to complete.
//  784  *
//  785  * @param   level = new level to move to
//  786  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
//  787  *
//  788  * @return  none
//  789  */
//  790 static uint16 zclSampleLight_GetTime( uint8 newLevel, uint16 time )
//  791 {
//  792   // there is a hiearchy of the amount of time to use for transistioning
//  793   // check each one in turn. If none of defaults are set, then use fastest
//  794   // time possible.
//  795   if ( time == 0xFFFF )
//  796   {
//  797     // use On or Off Transition Time if set (not 0xffff)
//  798     if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  799     {
//  800       time = zclSampleLight_LevelOffTransitionTime;
//  801     }
//  802     else
//  803     {
//  804       time = zclSampleLight_LevelOnTransitionTime;
//  805     }
//  806 
//  807     // else use OnOffTransitionTime if set (not 0xffff)
//  808     if ( time == 0xFFFF )
//  809     {
//  810       time = zclSampleLight_LevelOnOffTransitionTime;
//  811     }
//  812 
//  813     // else as fast as possible
//  814     if ( time == 0xFFFF )
//  815     {
//  816       time = 1;
//  817     }
//  818   }
//  819 
//  820   if ( time == 0 )
//  821   {
//  822     time = 1; // as fast as possible
//  823   }
//  824 
//  825   return ( time );
//  826 }
//  827 
//  828 /*********************************************************************
//  829  * @fn      zclSampleLight_DefaultMove
//  830  *
//  831  * @brief   We were turned on/off. Use default time to move to on or off.
//  832  *
//  833  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
//  834  *
//  835  * @return  none
//  836  */
//  837 static void zclSampleLight_DefaultMove( uint8 OnOff )
//  838 {
//  839   uint8  newLevel;
//  840   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
//  841   uint16 time;
//  842 
//  843   // if moving to on position, move to on level
//  844   if ( OnOff )
//  845   {
//  846     if (zclSampleLight_OnOff == LIGHT_OFF)
//  847     {
//  848       zclSampleLight_LevelCurrentLevel = ATTR_LEVEL_MIN_LEVEL;
//  849     }
//  850     
//  851     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
//  852     {
//  853       // The last Level (before going OFF) should be used)
//  854       newLevel = zclSampleLight_LevelLastLevel;
//  855     }
//  856     else
//  857     {
//  858       newLevel = zclSampleLight_LevelOnLevel;
//  859     }
//  860 
//  861     time = zclSampleLight_LevelOnTransitionTime;
//  862 
//  863   }
//  864   else
//  865   {
//  866     newLevel = ATTR_LEVEL_MIN_LEVEL;
//  867 
//  868     time = zclSampleLight_LevelOffTransitionTime;
//  869   }
//  870 
//  871   // else use OnOffTransitionTime if set (not 0xffff)
//  872   if ( time == 0xFFFF )
//  873   {
//  874     time = zclSampleLight_LevelOnOffTransitionTime;
//  875   }
//  876 
//  877   // else as fast as possible
//  878   if ( time == 0xFFFF )
//  879   {
//  880     time = 1;
//  881   }
//  882 
//  883   // calculate rate based on time (int 10ths) for full transition (1-254)
//  884   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
//  885 
//  886   // start up state machine.
//  887   zclSampleLight_WithOnOff = TRUE;
//  888   zclSampleLight_MoveBasedOnRate( newLevel, rate );
//  889 }
//  890 
//  891 /*********************************************************************
//  892  * @fn      zclSampleLight_AdjustLightLevel
//  893  *
//  894  * @brief   Called each 10th of a second while state machine running
//  895  *
//  896  * @param   none
//  897  *
//  898  * @return  none
//  899  */
//  900 static void zclSampleLight_AdjustLightLevel( void )
//  901 {
//  902   // one tick (10th of a second) less
//  903   if ( zclSampleLight_LevelRemainingTime )
//  904   {
//  905     --zclSampleLight_LevelRemainingTime;
//  906   }
//  907 
//  908   // no time left, done
//  909   if ( zclSampleLight_LevelRemainingTime == 0)
//  910   {
//  911     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
//  912   }
//  913 
//  914   // still time left, keep increment/decrementing
//  915   else
//  916   {
//  917     if ( zclSampleLight_NewLevelUp )
//  918     {
//  919       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
//  920     }
//  921     else
//  922     {
//  923       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
//  924     }
//  925     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
//  926   }
//  927 
//  928   if (( zclSampleLight_LevelChangeCmd == LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
//  929   {
//  930     zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
//  931   }
//  932 
//  933   // also affect on/off
//  934   if ( zclSampleLight_WithOnOff )
//  935   {
//  936     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
//  937     {
//  938       zclSampleLight_OnOff = LIGHT_ON;
//  939     }
//  940     else
//  941     {
//  942       if (zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_ON_CMD)
//  943       {
//  944         zclSampleLight_OnOff = LIGHT_OFF;
//  945       }
//  946       else
//  947       {
//  948         zclSampleLight_OnOff = LIGHT_ON;
//  949       }
//  950       
//  951       if (( zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
//  952       {
//  953         zclSampleLight_LevelCurrentLevel = zclSampleLight_LevelLastLevel;
//  954       }
//  955     }
//  956   }
//  957 
//  958   zclSampleLight_UpdateLedState();
//  959 
//  960   // keep ticking away
//  961   if ( zclSampleLight_LevelRemainingTime )
//  962   {
//  963     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  964   }
//  965 }
//  966 
//  967 /*********************************************************************
//  968  * @fn      zclSampleLight_LevelControlMoveToLevelCB
//  969  *
//  970  * @brief   Callback from the ZCL General Cluster Library when
//  971  *          it received a LevelControlMoveToLevel Command for this application.
//  972  *
//  973  * @param   pCmd - ZigBee command parameters
//  974  *
//  975  * @return  none
//  976  */
//  977 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
//  978 {
//  979   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
//  980 
//  981   zclSampleLight_WithOnOff = pCmd->withOnOff;
//  982   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
//  983 }
//  984 
//  985 /*********************************************************************
//  986  * @fn      zclSampleLight_LevelControlMoveCB
//  987  *
//  988  * @brief   Callback from the ZCL General Cluster Library when
//  989  *          it received a LevelControlMove Command for this application.
//  990  *
//  991  * @param   pCmd - ZigBee command parameters
//  992  *
//  993  * @return  none
//  994  */
//  995 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
//  996 {
//  997   uint8 newLevel;
//  998   uint32 rate;
//  999 
// 1000   // convert rate from units per second to units per tick (10ths of seconds)
// 1001   // and move at that right up or down
// 1002   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1003 
// 1004   if ( pCmd->moveMode == LEVEL_MOVE_UP )
// 1005   {
// 1006     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
// 1007   }
// 1008   else
// 1009   {
// 1010     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
// 1011   }
// 1012 
// 1013   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
// 1014 
// 1015   rate = (uint32)100 * pCmd->rate;
// 1016   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1017 }
// 1018 
// 1019 /*********************************************************************
// 1020  * @fn      zclSampleLight_LevelControlStepCB
// 1021  *
// 1022  * @brief   Callback from the ZCL General Cluster Library when
// 1023  *          it received an On/Off Command for this application.
// 1024  *
// 1025  * @param   pCmd - ZigBee command parameters
// 1026  *
// 1027  * @return  none
// 1028  */
// 1029 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
// 1030 {
// 1031   uint8 newLevel;
// 1032 
// 1033   // determine new level, but don't exceed boundaries
// 1034   if ( pCmd->stepMode == LEVEL_MOVE_UP )
// 1035   {
// 1036     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
// 1037     {
// 1038       newLevel = ATTR_LEVEL_MAX_LEVEL;
// 1039     }
// 1040     else
// 1041     {
// 1042       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
// 1043     }
// 1044   }
// 1045   else
// 1046   {
// 1047     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
// 1048     {
// 1049       newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1050     }
// 1051     else
// 1052     {
// 1053       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
// 1054     }
// 1055   }
// 1056   
// 1057   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
// 1058 
// 1059   // move to the new level
// 1060   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1061   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
// 1062 }
// 1063 
// 1064 /*********************************************************************
// 1065  * @fn      zclSampleLight_LevelControlStopCB
// 1066  *
// 1067  * @brief   Callback from the ZCL General Cluster Library when
// 1068  *          it received an Level Control Stop Command for this application.
// 1069  *
// 1070  * @param   pCmd - ZigBee command parameters
// 1071  *
// 1072  * @return  none
// 1073  */
// 1074 static void zclSampleLight_LevelControlStopCB( void )
// 1075 {
// 1076   // stop immediately
// 1077   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
// 1078   zclSampleLight_LevelRemainingTime = 0;
// 1079 }
// 1080 #endif
// 1081 
// 1082 /*********************************************************************
// 1083  * @fn      zclSampleApp_BatteryWarningCB
// 1084  *
// 1085  * @brief   Called to handle battery-low situation.
// 1086  *
// 1087  * @param   voltLevel - level of severity
// 1088  *
// 1089  * @return  none
// 1090  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1091 void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
zclSampleApp_BatteryWarningCB:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleApp_BatteryWarningCB
        CODE
// 1092 {
        ; Saved register size: 0
        ; Auto size: 0
// 1093   if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
// 1094   {
// 1095     // Send warning message to the gateway and blink LED
// 1096   }
// 1097   else if ( voltLevel == VOLT_LEVEL_BAD )
// 1098   {
// 1099     // Shut down the system
// 1100   }
// 1101 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock6
// 1102 
// 1103 /******************************************************************************
// 1104  *
// 1105  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1106  *
// 1107  *****************************************************************************/
// 1108 
// 1109 /*********************************************************************
// 1110  * @fn      zclSampleLight_ProcessIncomingMsg
// 1111  *
// 1112  * @brief   Process ZCL Foundation incoming message
// 1113  *
// 1114  * @param   pInMsg - pointer to the received message
// 1115  *
// 1116  * @return  none
// 1117  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1118 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
zclSampleLight_ProcessIncomingMsg:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIncomingMsg
        CODE
// 1119 {
        FUNCALL zclSampleLight_ProcessIncomingMsg, zclSampleLight_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIncomingMsg, zclSampleLight_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIncomingMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1120   switch ( pInMsg->zclHdr.commandID )
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleLight_ProcessIncomingMsg_0
        ADD       A,#-0x3
        JZ        ??zclSampleLight_ProcessIncomingMsg_1
        ADD       A,#-0x9
        JZ        ??zclSampleLight_ProcessIncomingMsg_2
        ADD       A,#-0x5
        JZ        ??zclSampleLight_ProcessIncomingMsg_3
        ADD       A,#-0x2
        JZ        ??zclSampleLight_ProcessIncomingMsg_3
        ADD       A,#-0x2
        JZ        ??zclSampleLight_ProcessIncomingMsg_4
        SJMP      ??zclSampleLight_ProcessIncomingMsg_5
// 1121   {
// 1122 #ifdef ZCL_READ
// 1123     case ZCL_CMD_READ_RSP:
// 1124       zclSampleLight_ProcessInReadRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_0:
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleLight_ProcessIncomingMsg_5
        INC       R0
        SJMP      ??CrossCallReturnLabel_0
// 1125       break;
// 1126 #endif
// 1127 #ifdef ZCL_WRITE
// 1128     case ZCL_CMD_WRITE_RSP:
// 1129       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_1:
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleLight_ProcessIncomingMsg_5
        INC       R0
        SJMP      ??CrossCallReturnLabel_1
// 1130       break;
// 1131 #endif
// 1132     case ZCL_CMD_CONFIG_REPORT:
// 1133     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1134     case ZCL_CMD_READ_REPORT_CFG:
// 1135     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1136     case ZCL_CMD_REPORT:
// 1137       //bdb_ProcessIncomingReportingMsg( pInMsg );
// 1138       break;
// 1139 
// 1140     case ZCL_CMD_DEFAULT_RSP:
// 1141       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1142       break;
// 1143 #ifdef ZCL_DISCOVER
// 1144     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1145       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_3:
        ; Setup parameters for call to function zclSampleLight_ProcessInDiscCmdsRspCmd
// 1146       break;
// 1147 
// 1148     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1149       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
        ; Setup parameters for call to function zclSampleLight_ProcessInDiscCmdsRspCmd
        LCALL     `??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`; Banked call to: zclSampleLight_ProcessInDiscCmdsRspCmd
// 1150       break;
        SJMP      ??zclSampleLight_ProcessIncomingMsg_5
// 1151 
// 1152     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1153       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_2:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JNC       ??zclSampleLight_ProcessIncomingMsg_5
        INC       R2
        SJMP      ??CrossCallReturnLabel_3
// 1154       break;
// 1155 
// 1156     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1157       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_4:
        LCALL     ?Subroutine2 & 0xFFFF
// 1158       break;
// 1159 #endif
// 1160     default:
// 1161       break;
// 1162   }
??CrossCallReturnLabel_4:
        SJMP      ??zclSampleLight_ProcessIncomingMsg_6
??zclSampleLight_ProcessIncomingMsg_7:
        INC       R2
??zclSampleLight_ProcessIncomingMsg_6:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleLight_ProcessIncomingMsg_7
// 1163 
// 1164   if ( pInMsg->attrCmd )
??zclSampleLight_ProcessIncomingMsg_5:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleLight_ProcessIncomingMsg_8
// 1165     osal_mem_free( pInMsg->attrCmd );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1166 }
??zclSampleLight_ProcessIncomingMsg_8:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOV       DPL,R0
        MOV       DPH,R1
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine4_0:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function zclSampleLight_ProcessInDiscCmdsRspCmd
          CFI Conditional ??CrossCallReturnLabel_2
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#0x0
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
// 1167 
// 1168 #ifdef ZCL_READ
// 1169 /*********************************************************************
// 1170  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1171  *
// 1172  * @brief   Process the "Profile" Read Response Command
// 1173  *
// 1174  * @param   pInMsg - incoming message to process
// 1175  *
// 1176  * @return  none
// 1177  */
// 1178 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1179 {
// 1180   zclReadRspCmd_t *readRspCmd;
// 1181   uint8 i;
// 1182 
// 1183   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1184   for (i = 0; i < readRspCmd->numAttr; i++)
// 1185   {
// 1186     // Notify the originator of the results of the original read attributes
// 1187     // attempt and, for each successfull request, the value of the requested
// 1188     // attribute
// 1189   }
// 1190 
// 1191   return ( TRUE );
// 1192 }
// 1193 #endif // ZCL_READ
// 1194 
// 1195 #ifdef ZCL_WRITE
// 1196 /*********************************************************************
// 1197  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1198  *
// 1199  * @brief   Process the "Profile" Write Response Command
// 1200  *
// 1201  * @param   pInMsg - incoming message to process
// 1202  *
// 1203  * @return  none
// 1204  */
// 1205 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1206 {
// 1207   zclWriteRspCmd_t *writeRspCmd;
// 1208   uint8 i;
// 1209 
// 1210   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1211   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1212   {
// 1213     // Notify the device of the results of the its original write attributes
// 1214     // command.
// 1215   }
// 1216 
// 1217   return ( TRUE );
// 1218 }
// 1219 #endif // ZCL_WRITE
// 1220 
// 1221 /*********************************************************************
// 1222  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1223  *
// 1224  * @brief   Process the "Profile" Default Response Command
// 1225  *
// 1226  * @param   pInMsg - incoming message to process
// 1227  *
// 1228  * @return  none
// 1229  */
// 1230 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1231 {
// 1232   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1233 
// 1234   // Device is notified of the Default Response command.
// 1235   (void)pInMsg;
// 1236 
// 1237   return ( TRUE );
// 1238 }
// 1239 
// 1240 #ifdef ZCL_DISCOVER
// 1241 /*********************************************************************
// 1242  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1243  *
// 1244  * @brief   Process the Discover Commands Response Command
// 1245  *
// 1246  * @param   pInMsg - incoming message to process
// 1247  *
// 1248  * @return  none
// 1249  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1250 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleLight_ProcessInDiscCmdsRspCmd:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function zclSampleLight_ProcessInDiscCmdsRspCmd
        CODE
// 1251 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1252   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1253   uint8 i;
// 1254 
// 1255   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        LCALL     ??Subroutine4_0 & 0xFFFF
// 1256   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
??CrossCallReturnLabel_2:
        SJMP      ??zclSampleLight_ProcessInDiscCmdsRspCmd_0
??zclSampleLight_ProcessInDiscCmdsRspCmd_1:
        INC       R2
??zclSampleLight_ProcessInDiscCmdsRspCmd_0:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleLight_ProcessInDiscCmdsRspCmd_1
// 1257   {
// 1258     // Device is notified of the result of its attribute discovery command.
// 1259   }
// 1260 
// 1261   return ( TRUE );
        MOV       R1,#0x1
          CFI EndBlock cfiBlock18
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
// 1262 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock19
// 1263 
// 1264 /*********************************************************************
// 1265  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1266  *
// 1267  * @brief   Process the "Profile" Discover Attributes Response Command
// 1268  *
// 1269  * @param   pInMsg - incoming message to process
// 1270  *
// 1271  * @return  none
// 1272  */
// 1273 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1274 {
// 1275   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1276   uint8 i;
// 1277 
// 1278   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1279   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1280   {
// 1281     // Device is notified of the result of its attribute discovery command.
// 1282   }
// 1283 
// 1284   return ( TRUE );
// 1285 }
// 1286 
// 1287 /*********************************************************************
// 1288  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1289  *
// 1290  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1291  *
// 1292  * @param   pInMsg - incoming message to process
// 1293  *
// 1294  * @return  none
// 1295  */
// 1296 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1297 {
// 1298   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1299   uint8 i;
// 1300 
// 1301   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1302   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1303   {
// 1304     // Device is notified of the result of its attribute discovery command.
// 1305   }
// 1306 
// 1307   return ( TRUE );
// 1308 }
// 1309 #endif // ZCL_DISCOVER
// 1310 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1311 void zclSampleLight_UpdateLedState(void)
zclSampleLight_UpdateLedState:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclSampleLight_UpdateLedState
        CODE
// 1312 {
        FUNCALL zclSampleLight_UpdateLedState, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_UpdateLedState, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1313   // set the LED1 based on light (on or off)
// 1314   if ( zclSampleLight_OnOff == LIGHT_ON )
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclSampleLight_UpdateLedState_0
// 1315   {
// 1316     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        SJMP      ??zclSampleLight_UpdateLedState_1
// 1317   }
// 1318   else
// 1319   {
// 1320     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
??zclSampleLight_UpdateLedState_0:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
??zclSampleLight_UpdateLedState_1:
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1321   }
// 1322 }
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock20

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for reportableChange>`:
        DATA8
        DB 44
        DB 1
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW 0H
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessCommissioningStatus::?r`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleApp_BatteryWarningCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleApp_BatteryWarningCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIncomingMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIncomingMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessInDiscCmdsRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_UpdateLedState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_UpdateLedState

        END
// 1323 
// 1324 
// 1325 
// 1326 /****************************************************************************
// 1327 ****************************************************************************/
// 1328 
// 1329 
// 
// 723 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
//  28 bytes in segment XDATA_I
//  28 bytes in segment XDATA_ID
//  38 bytes in segment XDATA_ROM_C
//  18 bytes in segment XDATA_Z
// 
//  82 bytes of CODE     memory
//  34 bytes of CONST    memory (+ 4 bytes shared)
// 723 bytes of HUGECODE memory
//  46 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
